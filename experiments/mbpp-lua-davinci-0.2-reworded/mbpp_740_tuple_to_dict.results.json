{
  "name": "mbpp_740_tuple_to_dict",
  "language": "lua",
  "prompt": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n  local new_dict = {}\n  for i = 1, #test_tup, 2 do\n    new_dict[test_tup[i]] = test_tup[i + 1]\n  end\n  return new_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n  local test_dict = {}\n  for i = 1, #test_tup, 2 do\n    test_dict[test_tup[i]] = test_tup[i + 1]\n  end\n  return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local res = {}\n    for i = 1, #test_tup, 2 do\n        res[test_tup[i]] = test_tup[i + 1]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n\tlocal test_dict = {}\n\tfor i = 1, #test_tup, 2 do\n\t\ttest_dict[test_tup[i]] = test_tup[i + 1]\n\tend\n\treturn test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local res = {}\n    for i = 1, #test_tup, 2 do\n        res[test_tup[i]] = test_tup[i+1]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n  local test_dict = {}\n  for i = 1, #test_tup, 2 do\n    test_dict[test_tup[i]] = test_tup[i + 1]\n  end\n  return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i+1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i+1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n  local dict = {}\n  for i = 1, #test_tup, 2 do\n    dict[test_tup[i]] = test_tup[i + 1]\n  end\n  return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i+1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i+1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n  local test_dict = {}\n  for i = 1, #test_tup, 2 do\n    test_dict[test_tup[i]] = test_tup[i+1]\n  end\n  return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i=1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n  local test_dict = {}\n  for i = 1, #test_tup, 2 do\n    test_dict[test_tup[i]] = test_tup[i + 1]\n  end\n  return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local result = {}\n    for i = 1, #test_tup, 2 do\n        result[test_tup[i]] = test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local result = {}\n    for i = 1, #test_tup, 2 do\n        result[test_tup[i]] = test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i+1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i+1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i+1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local res = {}\n    for i = 1, #test_tup, 2 do\n        res[test_tup[i]] = test_tup[i + 1]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n  local dict = {}\n  for i = 1, #test_tup, 2 do\n    dict[test_tup[i]] = test_tup[i + 1]\n  end\n  return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local result = {}\n    for i = 1, #test_tup, 2 do\n        result[test_tup[i]] = test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local result = {}\n    for i = 1, #test_tup, 2 do\n        result[test_tup[i]] = test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local res = {}\n    for i = 1, #test_tup, 2 do\n        res[test_tup[i]] = test_tup[i + 1]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n  local test_dict = {}\n  for i = 1, #test_tup, 2 do\n    test_dict[test_tup[i]] = test_tup[i + 1]\n  end\n  return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i+1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local res = {}\n    for i = 1, #test_tup, 2 do\n        res[test_tup[i]] = test_tup[i + 1]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i=1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local res = {}\n    for i = 1, #test_tup, 2 do\n        res[test_tup[i]] = test_tup[i+1]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local res = {}\n    for i = 1, #test_tup, 2 do\n        res[test_tup[i]] = test_tup[i + 1]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n\tlocal test_dict = {}\n\tfor i = 1, #test_tup, 2 do\n\t\ttest_dict[test_tup[i]] = test_tup[i + 1]\n\tend\n\treturn test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local res = {}\n    for i = 1, #test_tup, 2 do\n        res[test_tup[i]] = test_tup[i + 1]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n  local dict = {}\n  for i = 1, #test_tup, 2 do\n    dict[test_tup[i]] = test_tup[i + 1]\n  end\n  return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local res = {}\n    for i = 1, #test_tup, 2 do\n        res[test_tup[i]] = test_tup[i + 1]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n\tlocal test_dict = {}\n\tfor i = 1, #test_tup, 2 do\n\t\ttest_dict[test_tup[i]] = test_tup[i+1]\n\tend\n\treturn test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n\tlocal test_dict = {}\n\tfor i = 1, #test_tup, 2 do\n\t\ttest_dict[test_tup[i]] = test_tup[i+1]\n\tend\n\treturn test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local result = {}\n    for i = 1, #test_tup, 2 do\n        result[test_tup[i]] = test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n  local test_dict = {}\n  for i = 1, #test_tup, 2 do\n    test_dict[test_tup[i]] = test_tup[i+1]\n  end\n  return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i+1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n  local test_dict = {}\n  for i = 1, #test_tup, 2 do\n    test_dict[test_tup[i]] = test_tup[i + 1]\n  end\n  return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n\tlocal test_dict = {}\n\tfor i = 1, #test_tup, 2 do\n\t\ttest_dict[test_tup[i]] = test_tup[i+1]\n\tend\n\treturn test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i+1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n  local test_dict = {}\n  for i = 1, #test_tup, 2 do\n    test_dict[test_tup[i]] = test_tup[i+1]\n  end\n  return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local result = {}\n    for i = 1, #test_tup, 2 do\n        result[test_tup[i]] = test_tup[i + 1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local res = {}\n    for i = 1, #test_tup, 2 do\n        res[test_tup[i]] = test_tup[i + 1]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n  local result = {}\n  for i = 1, #test_tup, 2 do\n    result[test_tup[i]] = test_tup[i + 1]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local res = {}\n    for i = 1, #test_tup, 2 do\n        res[test_tup[i]] = test_tup[i + 1]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i+1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i+1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i+1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local res = {}\n    for i = 1, #test_tup, 2 do\n        res[test_tup[i]] = test_tup[i + 1]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i + 1]\n    end\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local res = {}\n    for i = 1, #test_tup, 2 do\n        res[test_tup[i]] = test_tup[i + 1]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n\tlocal test_dict = {}\n\tfor i = 1, #test_tup, 2 do\n\t\ttest_dict[test_tup[i]] = test_tup[i + 1]\n\tend\n\treturn test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given table to a key-value table using adjacent elements. https://www.geeksforgeeks.org/luathon-convert-table-to-adjacent-pair-table/\nlocal function tuple_to_dict(test_tup)\n    local test_dict = {}\n    for i = 1, #test_tup, 2 do\n        test_dict[test_tup[i]] = test_tup[i+1]\n    end\n    return test_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027695,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}