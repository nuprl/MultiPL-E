{
  "name": "mbpp_299_max_aggregate",
  "language": "lua",
  "prompt": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, t in ipairs(stdata) do\n\t\tlocal agg = 0\n\t\tfor _, v in ipairs(t) do\n\t\t\tagg = agg + v\n\t\tend\n\t\tif agg > max then\n\t\t\tmax = agg\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpca4d33ax.lua:7: attempt to perform arithmetic on local 'v' (a string value)\nstack traceback:\n\t/tmp/tmpca4d33ax.lua:7: in function 'candidate'\n\t/tmp/tmpca4d33ax.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcx3x8kk.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzcx3x8kk.lua:5: in function 'candidate'\n\t/tmp/tmpzcx3x8kk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n  local max = 0\n  for _, t in pairs(stdata) do\n    for _, v in pairs(t) do\n      if v > max then max = v end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppgl_na7p.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmppgl_na7p.lua:6: in function 'candidate'\n\t/tmp/tmppgl_na7p.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in ipairs(stdata) do\n        for _, v in ipairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89ut9i5f.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp89ut9i5f.lua:6: in function 'candidate'\n\t/tmp/tmp89ut9i5f.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for i, v in ipairs(stdata) do\n        local aggregate = 0\n        for j, w in ipairs(v) do\n            aggregate = aggregate + w\n        end\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzypsz5vr.lua:7: attempt to perform arithmetic on local 'w' (a string value)\nstack traceback:\n\t/tmp/tmpzypsz5vr.lua:7: in function 'candidate'\n\t/tmp/tmpzypsz5vr.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, t in ipairs(stdata) do\n        local aggregate = 0\n        for _, v in ipairs(t) do\n            aggregate = aggregate + v\n        end\n        max_aggregate = math.max(max_aggregate, aggregate)\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeub6sj2m.lua:7: attempt to perform arithmetic on local 'v' (a string value)\nstack traceback:\n\t/tmp/tmpeub6sj2m.lua:7: in function 'candidate'\n\t/tmp/tmpeub6sj2m.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, v in pairs(stdata) do\n        local aggregate = v.aggregate\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyuduux9r.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpyuduux9r.lua:6: in function 'candidate'\n\t/tmp/tmpyuduux9r.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max_aggregate = 0\n\tfor _, table in pairs(stdata) do\n\t\tlocal aggregate = 0\n\t\tfor _, value in pairs(table) do\n\t\t\taggregate = aggregate + value\n\t\tend\n\t\tif aggregate > max_aggregate then\n\t\t\tmax_aggregate = aggregate\n\t\tend\n\tend\n\treturn max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzozav04f.lua:7: attempt to perform arithmetic on local 'value' (a string value)\nstack traceback:\n\t/tmp/tmpzozav04f.lua:7: in function 'candidate'\n\t/tmp/tmpzozav04f.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, v in pairs(stdata) do\n\t\tif v.aggregate > max then\n\t\t\tmax = v.aggregate\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ivhxigq.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp0ivhxigq.lua:5: in function 'candidate'\n\t/tmp/tmp0ivhxigq.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        local agg = v.aggregate\n        if agg > max then max = agg end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9cn416co.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp9cn416co.lua:6: in function 'candidate'\n\t/tmp/tmp9cn416co.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for i,v in ipairs(stdata) do\n        local agg = aggregate(v)\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcsk8urt2.lua:5: attempt to call global 'aggregate' (a nil value)\nstack traceback:\n\t/tmp/tmpcsk8urt2.lua:5: in function 'candidate'\n\t/tmp/tmpcsk8urt2.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in pairs(stdata) do\n        for _, v in pairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgw59b5ug.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpgw59b5ug.lua:6: in function 'candidate'\n\t/tmp/tmpgw59b5ug.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in ipairs(stdata) do\n        local agg = v.aggregate\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9g1nimne.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp9g1nimne.lua:6: in function 'candidate'\n\t/tmp/tmp9g1nimne.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcx3x8kk.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzcx3x8kk.lua:5: in function 'candidate'\n\t/tmp/tmpzcx3x8kk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, table in pairs(stdata) do\n        local aggregate = table.aggregate\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4x61n3gk.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp4x61n3gk.lua:6: in function 'candidate'\n\t/tmp/tmp4x61n3gk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, v in pairs(stdata) do\n\t\tfor _, v2 in pairs(v) do\n\t\t\tif v2 > max then\n\t\t\t\tmax = v2\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiz537ygw.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpiz537ygw.lua:6: in function 'candidate'\n\t/tmp/tmpiz537ygw.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, v in ipairs(stdata) do\n        local aggregate = 0\n        for _, v2 in ipairs(v) do\n            aggregate = aggregate + v2\n        end\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnpzujdco.lua:7: attempt to perform arithmetic on local 'v2' (a string value)\nstack traceback:\n\t/tmp/tmpnpzujdco.lua:7: in function 'candidate'\n\t/tmp/tmpnpzujdco.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, v in pairs(stdata) do\n        local aggregate = v.aggregate\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyuduux9r.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpyuduux9r.lua:6: in function 'candidate'\n\t/tmp/tmpyuduux9r.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in ipairs(stdata) do\n        for _, v in ipairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89ut9i5f.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp89ut9i5f.lua:6: in function 'candidate'\n\t/tmp/tmp89ut9i5f.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, v in pairs(stdata) do\n        local aggregate = 0\n        for _, v2 in pairs(v) do\n            aggregate = aggregate + v2\n        end\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplpk3wjns.lua:7: attempt to perform arithmetic on local 'v2' (a string value)\nstack traceback:\n\t/tmp/tmplpk3wjns.lua:7: in function 'candidate'\n\t/tmp/tmplpk3wjns.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in pairs(stdata) do\n        for _, v in pairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgw59b5ug.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpgw59b5ug.lua:6: in function 'candidate'\n\t/tmp/tmpgw59b5ug.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in ipairs(stdata) do\n        local agg = aggregate(t)\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_0ijgbvb.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmp_0ijgbvb.lua:5: in local 'candidate'\n\t/tmp/tmp_0ijgbvb.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        local agg = v.aggregate\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr653w_xr.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpr653w_xr.lua:6: in local 'candidate'\n\t/tmp/tmpr653w_xr.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for i = 1, #stdata do\n        local aggregate = 0\n        for j = 1, #stdata[i] do\n            aggregate = aggregate + stdata[i][j]\n        end\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvgyh04g9.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpvgyh04g9.lua:7: in local 'candidate'\n\t/tmp/tmpvgyh04g9.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for i = 1, #stdata do\n        local t = stdata[i]\n        local agg = t.aggregate\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbzwsefiy.lua:7: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpbzwsefiy.lua:7: in local 'candidate'\n\t/tmp/tmpbzwsefiy.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for i=1,#stdata do\n        local st = stdata[i]\n        if st.aggregate > max then\n            max = st.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiu3kzp09.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpiu3kzp09.lua:6: in local 'candidate'\n\t/tmp/tmpiu3kzp09.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max_agg = 0\n\tfor _, v in pairs(stdata) do\n\t\tif v.aggregate > max_agg then\n\t\t\tmax_agg = v.aggregate\n\t\tend\n\tend\n\treturn max_agg\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpye4p3rfg.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpye4p3rfg.lua:5: in local 'candidate'\n\t/tmp/tmpye4p3rfg.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        local agg = aggregate(v)\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp47l3wc5p.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmp47l3wc5p.lua:5: in local 'candidate'\n\t/tmp/tmp47l3wc5p.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in ipairs(stdata) do\n        for _, v2 in ipairs(v) do\n            if v2 > max then\n                max = v2\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_jcr3z5w.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp_jcr3z5w.lua:6: in local 'candidate'\n\t/tmp/tmp_jcr3z5w.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for i, v in ipairs(stdata) do\n        local aggregate = 0\n        for j, w in ipairs(v) do\n            aggregate = aggregate + w\n        end\n        max_aggregate = math.max(max_aggregate, aggregate)\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ydnca4k.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmp4ydnca4k.lua:7: in local 'candidate'\n\t/tmp/tmp4ydnca4k.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n  local max = 0\n  for _, t in pairs(stdata) do\n    for _, v in pairs(t) do\n      if v > max then\n        max = v\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphuzwgon8.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmphuzwgon8.lua:6: in local 'candidate'\n\t/tmp/tmphuzwgon8.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for i, v in ipairs(stdata) do\n        local agg = aggregate(v)\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjtt4xmzd.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmpjtt4xmzd.lua:5: in local 'candidate'\n\t/tmp/tmpjtt4xmzd.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _,v in ipairs(stdata) do\n        if v.aggregate > max_aggregate then\n            max_aggregate = v.aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw1dz5f6l.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpw1dz5f6l.lua:5: in local 'candidate'\n\t/tmp/tmpw1dz5f6l.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n  local max = 0\n  for _, t in ipairs(stdata) do\n    local agg = aggregate(t)\n    if agg > max then\n      max = agg\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj2_4kzn6.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmpj2_4kzn6.lua:5: in local 'candidate'\n\t/tmp/tmpj2_4kzn6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, v in ipairs(stdata) do\n\t\tlocal agg = v.aggregate\n\t\tif agg > max then\n\t\t\tmax = agg\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp43wswuri.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp43wswuri.lua:6: in local 'candidate'\n\t/tmp/tmp43wswuri.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, v in pairs(stdata) do\n        local aggregate = 0\n        for _, vv in pairs(v) do\n            aggregate = aggregate + vv\n        end\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb4etu2fv.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpb4etu2fv.lua:7: in local 'candidate'\n\t/tmp/tmpb4etu2fv.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, t in pairs(stdata) do\n        local aggregate = 0\n        for _, v in pairs(t) do\n            aggregate = aggregate + v\n        end\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw5swpq0y.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpw5swpq0y.lua:7: in local 'candidate'\n\t/tmp/tmpw5swpq0y.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n  local max = 0\n  for _, v in ipairs(stdata) do\n    for _, v2 in ipairs(v) do\n      if v2 > max then\n        max = v2\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8aoj81zv.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp8aoj81zv.lua:6: in local 'candidate'\n\t/tmp/tmp8aoj81zv.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n  local max = 0\n  for _, t in ipairs(stdata) do\n    local agg = aggregate(t)\n    if agg > max then\n      max = agg\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj2_4kzn6.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmpj2_4kzn6.lua:5: in local 'candidate'\n\t/tmp/tmpj2_4kzn6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in ipairs(stdata) do\n        local agg = aggregate(t)\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_0ijgbvb.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmp_0ijgbvb.lua:5: in local 'candidate'\n\t/tmp/tmp_0ijgbvb.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n  local max = 0\n  for _, v in ipairs(stdata) do\n    local agg = aggregate(v)\n    if agg > max then\n      max = agg\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9io7ox5m.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmp9io7ox5m.lua:5: in local 'candidate'\n\t/tmp/tmp9io7ox5m.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for i,v in ipairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp17s4s6o4.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp17s4s6o4.lua:5: in local 'candidate'\n\t/tmp/tmp17s4s6o4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for i, v in ipairs(stdata) do\n        local agg = v.aggregate\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1csi9qwd.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp1csi9qwd.lua:6: in local 'candidate'\n\t/tmp/tmp1csi9qwd.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in pairs(stdata) do\n        for _, v in pairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgw59b5ug.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpgw59b5ug.lua:6: in function 'candidate'\n\t/tmp/tmpgw59b5ug.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, v in pairs(stdata) do\n\t\tif v.aggregate > max then\n\t\t\tmax = v.aggregate\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ivhxigq.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp0ivhxigq.lua:5: in function 'candidate'\n\t/tmp/tmp0ivhxigq.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, t in pairs(stdata) do\n        local aggregate = 0\n        for _, v in pairs(t) do\n            aggregate = aggregate + v\n        end\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw5swpq0y.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpw5swpq0y.lua:7: in local 'candidate'\n\t/tmp/tmpw5swpq0y.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcx3x8kk.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzcx3x8kk.lua:5: in function 'candidate'\n\t/tmp/tmpzcx3x8kk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        local agg = v.aggregate\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr653w_xr.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpr653w_xr.lua:6: in local 'candidate'\n\t/tmp/tmpr653w_xr.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n   local max = 0\n   for _, v in pairs(stdata) do\n      local agg = v.aggregate\n      if agg > max then max = agg end\n   end\n   return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5_7a07f9.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp5_7a07f9.lua:6: in local 'candidate'\n\t/tmp/tmp5_7a07f9.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n  local max = 0\n  for _, v in pairs(stdata) do\n    for _, vv in pairs(v) do\n      if vv > max then max = vv end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd3o70mlr.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpd3o70mlr.lua:6: in local 'candidate'\n\t/tmp/tmpd3o70mlr.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor i,v in ipairs(stdata) do\n\t\tfor j,w in ipairs(v) do\n\t\t\tif w > max then\n\t\t\t\tmax = w\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4fyi23pf.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp4fyi23pf.lua:6: in local 'candidate'\n\t/tmp/tmp4fyi23pf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        local agg = aggregate(v)\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp47l3wc5p.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmp47l3wc5p.lua:5: in local 'candidate'\n\t/tmp/tmp47l3wc5p.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max_aggregate = 0\n\tfor i,v in ipairs(stdata) do\n\t\tif v.aggregate > max_aggregate then\n\t\t\tmax_aggregate = v.aggregate\n\t\tend\n\tend\n\treturn max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ufu7f3o.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp9ufu7f3o.lua:5: in local 'candidate'\n\t/tmp/tmp9ufu7f3o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, t in pairs(stdata) do\n        for _, v in pairs(t) do\n            if v > max_aggregate then\n                max_aggregate = v\n            end\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzh7ma9fr.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpzh7ma9fr.lua:6: in local 'candidate'\n\t/tmp/tmpzh7ma9fr.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor i,v in ipairs(stdata) do\n\t\tlocal agg = v.aggregate\n\t\tif agg > max then\n\t\t\tmax = agg\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp637vd8nu.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp637vd8nu.lua:6: in local 'candidate'\n\t/tmp/tmp637vd8nu.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, v in ipairs(stdata) do\n\t\tif v.aggregate > max then\n\t\t\tmax = v.aggregate\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, t in ipairs(stdata) do\n\t\tfor _, v in ipairs(t) do\n\t\t\tif v > max then\n\t\t\t\tmax = v\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_vt9hwlt.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp_vt9hwlt.lua:6: in local 'candidate'\n\t/tmp/tmp_vt9hwlt.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max_aggregate = 0\n\tfor _, t in pairs(stdata) do\n\t\tlocal aggregate = 0\n\t\tfor _, v in pairs(t) do\n\t\t\taggregate = aggregate + v\n\t\tend\n\t\tif aggregate > max_aggregate then\n\t\t\tmax_aggregate = aggregate\n\t\tend\n\tend\n\treturn max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfnb1ao6_.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpfnb1ao6_.lua:7: in local 'candidate'\n\t/tmp/tmpfnb1ao6_.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in ipairs(stdata) do\n        local agg = v.aggregate\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9g1nimne.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp9g1nimne.lua:6: in function 'candidate'\n\t/tmp/tmp9g1nimne.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n  local max = 0\n  for i = 1, #stdata do\n    local sum = 0\n    for j = 1, #stdata[i] do\n      sum = sum + stdata[i][j]\n    end\n    if sum > max then\n      max = sum\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvp895pzd.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpvp895pzd.lua:7: in local 'candidate'\n\t/tmp/tmpvp895pzd.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, v in pairs(stdata) do\n        local aggregate = 0\n        for _, v2 in pairs(v) do\n            aggregate = aggregate + v2\n        end\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplpk3wjns.lua:7: attempt to perform arithmetic on local 'v2' (a string value)\nstack traceback:\n\t/tmp/tmplpk3wjns.lua:7: in function 'candidate'\n\t/tmp/tmplpk3wjns.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for i, v in ipairs(stdata) do\n        local agg = aggregate(v)\n        if agg > max then max = agg end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpefp7dp0e.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmpefp7dp0e.lua:5: in local 'candidate'\n\t/tmp/tmpefp7dp0e.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for i = 1, #stdata do\n        local sum = 0\n        for j = 1, #stdata[i] do\n            sum = sum + stdata[i][j]\n        end\n        if sum > max then\n            max = sum\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vd2cd4g.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmp2vd2cd4g.lua:7: in local 'candidate'\n\t/tmp/tmp2vd2cd4g.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor i, v in ipairs(stdata) do\n\t\tfor j, w in ipairs(v) do\n\t\t\tif w > max then\n\t\t\t\tmax = w\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy2if6zdu.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpy2if6zdu.lua:6: in local 'candidate'\n\t/tmp/tmpy2if6zdu.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor i, v in ipairs(stdata) do\n\t\tlocal agg = aggregate(v)\n\t\tif agg > max then\n\t\t\tmax = agg\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkse9vcw5.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmpkse9vcw5.lua:5: in local 'candidate'\n\t/tmp/tmpkse9vcw5.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for i,v in ipairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp17s4s6o4.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp17s4s6o4.lua:5: in local 'candidate'\n\t/tmp/tmp17s4s6o4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, t in pairs(stdata) do\n        local aggregate = 0\n        for _, v in pairs(t) do\n            aggregate = aggregate + v\n        end\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw5swpq0y.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpw5swpq0y.lua:7: in local 'candidate'\n\t/tmp/tmpw5swpq0y.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in ipairs(stdata) do\n        for _, v in ipairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89ut9i5f.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp89ut9i5f.lua:6: in function 'candidate'\n\t/tmp/tmp89ut9i5f.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        local agg = 0\n        for _, vv in pairs(v) do\n            agg = agg + vv\n        end\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpup7sfqwh.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpup7sfqwh.lua:7: in local 'candidate'\n\t/tmp/tmpup7sfqwh.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, v in ipairs(stdata) do\n\t\tif v.aggregate > max then\n\t\t\tmax = v.aggregate\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, v in pairs(stdata) do\n        local aggregate = 0\n        for _, v2 in pairs(v) do\n            aggregate = aggregate + v2\n        end\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplpk3wjns.lua:7: attempt to perform arithmetic on local 'v2' (a string value)\nstack traceback:\n\t/tmp/tmplpk3wjns.lua:7: in function 'candidate'\n\t/tmp/tmplpk3wjns.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n  local max = 0\n  for _, t in ipairs(stdata) do\n    for _, v in ipairs(t) do\n      if v > max then max = v end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvgn7io_j.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpvgn7io_j.lua:6: in local 'candidate'\n\t/tmp/tmpvgn7io_j.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, t in ipairs(stdata) do\n\t\tfor _, v in ipairs(t) do\n\t\t\tif v > max then\n\t\t\t\tmax = v\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_vt9hwlt.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp_vt9hwlt.lua:6: in local 'candidate'\n\t/tmp/tmp_vt9hwlt.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        for _, v2 in pairs(v) do\n            if v2 > max then\n                max = v2\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1za2j6cx.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp1za2j6cx.lua:6: in local 'candidate'\n\t/tmp/tmp1za2j6cx.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for i, v in ipairs(stdata) do\n        for j, w in ipairs(v) do\n            if w > max then\n                max = w\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplxidi6b6.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmplxidi6b6.lua:6: in local 'candidate'\n\t/tmp/tmplxidi6b6.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in ipairs(stdata) do\n        local agg = aggregate(v)\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdtsfflyj.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmpdtsfflyj.lua:5: in local 'candidate'\n\t/tmp/tmpdtsfflyj.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for i = 1, #stdata do\n        for j = 1, #stdata[i] do\n            if stdata[i][j] > max then\n                max = stdata[i][j]\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpljww_i4h.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpljww_i4h.lua:6: in local 'candidate'\n\t/tmp/tmpljww_i4h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        local agg = v.aggregate\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr653w_xr.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpr653w_xr.lua:6: in local 'candidate'\n\t/tmp/tmpr653w_xr.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in ipairs(stdata) do\n        for _, v in ipairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89ut9i5f.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp89ut9i5f.lua:6: in function 'candidate'\n\t/tmp/tmp89ut9i5f.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        local agg = v.aggregate\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr653w_xr.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpr653w_xr.lua:6: in local 'candidate'\n\t/tmp/tmpr653w_xr.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in ipairs(stdata) do\n        for _, v in ipairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89ut9i5f.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp89ut9i5f.lua:6: in function 'candidate'\n\t/tmp/tmp89ut9i5f.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, v in pairs(stdata) do\n\t\tlocal agg = v.aggregate\n\t\tif agg > max then\n\t\t\tmax = agg\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp221sxt27.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp221sxt27.lua:6: in local 'candidate'\n\t/tmp/tmp221sxt27.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in ipairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5pjoaiof.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp5pjoaiof.lua:5: in local 'candidate'\n\t/tmp/tmp5pjoaiof.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, v in pairs(stdata) do\n\t\tlocal t = v.aggregate\n\t\tif t > max then\n\t\t\tmax = t\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2djwn8d7.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2djwn8d7.lua:6: in local 'candidate'\n\t/tmp/tmp2djwn8d7.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in pairs(stdata) do\n        for _, v in pairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgw59b5ug.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpgw59b5ug.lua:6: in function 'candidate'\n\t/tmp/tmpgw59b5ug.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in pairs(stdata) do\n        for _, v in pairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgw59b5ug.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpgw59b5ug.lua:6: in function 'candidate'\n\t/tmp/tmpgw59b5ug.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcx3x8kk.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzcx3x8kk.lua:5: in function 'candidate'\n\t/tmp/tmpzcx3x8kk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, v in ipairs(stdata) do\n        local aggregate = 0\n        for _, v2 in ipairs(v) do\n            aggregate = aggregate + v2\n        end\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnpzujdco.lua:7: attempt to perform arithmetic on local 'v2' (a string value)\nstack traceback:\n\t/tmp/tmpnpzujdco.lua:7: in function 'candidate'\n\t/tmp/tmpnpzujdco.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for i,v in ipairs(stdata) do\n        for j,w in ipairs(v) do\n            if w > max_aggregate then\n                max_aggregate = w\n            end\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3dy9nron.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp3dy9nron.lua:6: in local 'candidate'\n\t/tmp/tmp3dy9nron.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n  local max = 0\n  for _, t in ipairs(stdata) do\n    for _, v in ipairs(t) do\n      if v > max then\n        max = v\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptzvnkc27.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmptzvnkc27.lua:6: in local 'candidate'\n\t/tmp/tmptzvnkc27.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n  local max = 0\n  for _, t in pairs(stdata) do\n    for _, v in pairs(t) do\n      max = math.max(max, v)\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with string\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in pairs(stdata) do\n        for _, v in pairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgw59b5ug.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpgw59b5ug.lua:6: in function 'candidate'\n\t/tmp/tmpgw59b5ug.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in ipairs(stdata) do\n        for _, v in ipairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89ut9i5f.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp89ut9i5f.lua:6: in function 'candidate'\n\t/tmp/tmp89ut9i5f.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _,v in pairs(stdata) do\n\t\tlocal agg = v.aggregate\n\t\tif agg > max then\n\t\t\tmax = agg\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6uxd3cxv.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp6uxd3cxv.lua:6: in local 'candidate'\n\t/tmp/tmp6uxd3cxv.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in ipairs(stdata) do\n        for _, v in ipairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89ut9i5f.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp89ut9i5f.lua:6: in function 'candidate'\n\t/tmp/tmp89ut9i5f.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcx3x8kk.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzcx3x8kk.lua:5: in function 'candidate'\n\t/tmp/tmpzcx3x8kk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcx3x8kk.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzcx3x8kk.lua:5: in function 'candidate'\n\t/tmp/tmpzcx3x8kk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor i,v in ipairs(stdata) do\n\t\tif v.aggregate > max then\n\t\t\tmax = v.aggregate\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv7wquaq4.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpv7wquaq4.lua:5: in local 'candidate'\n\t/tmp/tmpv7wquaq4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in ipairs(stdata) do\n        for _, v in ipairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89ut9i5f.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp89ut9i5f.lua:6: in function 'candidate'\n\t/tmp/tmp89ut9i5f.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max_aggregate = 0\n\tfor _, data in ipairs(stdata) do\n\t\tlocal aggregate = 0\n\t\tfor _, value in ipairs(data) do\n\t\t\taggregate = aggregate + value\n\t\tend\n\t\tif aggregate > max_aggregate then\n\t\t\tmax_aggregate = aggregate\n\t\tend\n\tend\n\treturn max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf757q05x.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpf757q05x.lua:7: in local 'candidate'\n\t/tmp/tmpf757q05x.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcx3x8kk.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzcx3x8kk.lua:5: in function 'candidate'\n\t/tmp/tmpzcx3x8kk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcx3x8kk.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzcx3x8kk.lua:5: in function 'candidate'\n\t/tmp/tmpzcx3x8kk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in ipairs(stdata) do\n        for _, v in ipairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89ut9i5f.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp89ut9i5f.lua:6: in function 'candidate'\n\t/tmp/tmp89ut9i5f.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, t in pairs(stdata) do\n        local aggregate = 0\n        for _, v in pairs(t) do\n            aggregate = aggregate + v\n        end\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw5swpq0y.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpw5swpq0y.lua:7: in local 'candidate'\n\t/tmp/tmpw5swpq0y.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in ipairs(stdata) do\n        for _, v in ipairs(t) do\n            max = math.max(max, v)\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with string\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, v in pairs(stdata) do\n        if v.aggregate > max_aggregate then\n            max_aggregate = v.aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbkd1wwbg.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpbkd1wwbg.lua:5: in local 'candidate'\n\t/tmp/tmpbkd1wwbg.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, t in ipairs(stdata) do\n\t\tlocal agg = aggregate(t)\n\t\tif agg > max then\n\t\t\tmax = agg\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu5wx74xt.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmpu5wx74xt.lua:5: in local 'candidate'\n\t/tmp/tmpu5wx74xt.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, v in ipairs(stdata) do\n\t\tif v.aggregate > max then\n\t\t\tmax = v.aggregate\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n  local max = 0\n  for _, t in ipairs(stdata) do\n    for _, v in pairs(t) do\n      if v > max then\n        max = v\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp006x5kdm.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp006x5kdm.lua:6: in local 'candidate'\n\t/tmp/tmp006x5kdm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, t in pairs(stdata) do\n        local agg = 0\n        for _, v in pairs(t) do\n            agg = agg + v\n        end\n        if agg > max_aggregate then\n            max_aggregate = agg\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphp6g6b89.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmphp6g6b89.lua:7: in local 'candidate'\n\t/tmp/tmphp6g6b89.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor i,v in ipairs(stdata) do\n\t\tif v.aggregate > max then\n\t\t\tmax = v.aggregate\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv7wquaq4.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpv7wquaq4.lua:5: in local 'candidate'\n\t/tmp/tmpv7wquaq4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        for _, v2 in pairs(v) do\n            if v2 > max then\n                max = v2\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1za2j6cx.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp1za2j6cx.lua:6: in local 'candidate'\n\t/tmp/tmp1za2j6cx.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for i = 1, #stdata do\n        local sum = 0\n        for j = 1, #stdata[i] do\n            sum = sum + stdata[i][j]\n        end\n        if sum > max then\n            max = sum\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2vd2cd4g.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmp2vd2cd4g.lua:7: in local 'candidate'\n\t/tmp/tmp2vd2cd4g.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor i, v in ipairs(stdata) do\n\t\tif v.aggregate > max then\n\t\t\tmax = v.aggregate\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkskq6ww7.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpkskq6ww7.lua:5: in local 'candidate'\n\t/tmp/tmpkskq6ww7.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in pairs(stdata) do\n        for _, v in pairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgw59b5ug.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpgw59b5ug.lua:6: in function 'candidate'\n\t/tmp/tmpgw59b5ug.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, v in pairs(stdata) do\n        local aggregate = 0\n        for _, v in pairs(v) do\n            aggregate = aggregate + v\n        end\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_8fwwwkj.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmp_8fwwwkj.lua:7: in local 'candidate'\n\t/tmp/tmp_8fwwwkj.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max_aggregate = 0\n\tfor i, v in ipairs(stdata) do\n\t\tfor j, w in ipairs(v) do\n\t\t\tif w > max_aggregate then\n\t\t\t\tmax_aggregate = w\n\t\t\tend\n\t\tend\n\tend\n\treturn max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_cmz4e5i.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp_cmz4e5i.lua:6: in local 'candidate'\n\t/tmp/tmp_cmz4e5i.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcx3x8kk.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzcx3x8kk.lua:5: in function 'candidate'\n\t/tmp/tmpzcx3x8kk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n   local max_aggregate = 0\n   for _, t in ipairs(stdata) do\n      local aggregate = 0\n      for _, v in ipairs(t) do\n\t aggregate = aggregate + v\n      end\n      if aggregate > max_aggregate then\n\t max_aggregate = aggregate\n      end\n   end\n   return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvpvosxef.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpvpvosxef.lua:7: in local 'candidate'\n\t/tmp/tmpvpvosxef.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in pairs(stdata) do\n        for _, v in pairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgw59b5ug.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpgw59b5ug.lua:6: in function 'candidate'\n\t/tmp/tmpgw59b5ug.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in pairs(stdata) do\n        for _, v in pairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgw59b5ug.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpgw59b5ug.lua:6: in function 'candidate'\n\t/tmp/tmpgw59b5ug.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for i, v in ipairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph62fvx5f.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmph62fvx5f.lua:5: in local 'candidate'\n\t/tmp/tmph62fvx5f.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        local agg = v.aggregate\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr653w_xr.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpr653w_xr.lua:6: in local 'candidate'\n\t/tmp/tmpr653w_xr.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcx3x8kk.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzcx3x8kk.lua:5: in function 'candidate'\n\t/tmp/tmpzcx3x8kk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, v in pairs(stdata) do\n        local aggregate = 0\n        for _, v2 in pairs(v) do\n            aggregate = aggregate + v2\n        end\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplpk3wjns.lua:7: attempt to perform arithmetic on local 'v2' (a string value)\nstack traceback:\n\t/tmp/tmplpk3wjns.lua:7: in function 'candidate'\n\t/tmp/tmplpk3wjns.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in pairs(stdata) do\n        for _, v in pairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgw59b5ug.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpgw59b5ug.lua:6: in function 'candidate'\n\t/tmp/tmpgw59b5ug.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n   local max = 0\n   for _, t in ipairs(stdata) do\n      for _, v in ipairs(t) do\n\t if v > max then max = v end\n      end\n   end\n   return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppximq7xz.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmppximq7xz.lua:6: in local 'candidate'\n\t/tmp/tmppximq7xz.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, t in ipairs(stdata) do\n\t\tlocal sum = 0\n\t\tfor _, v in ipairs(t) do\n\t\t\tsum = sum + v\n\t\tend\n\t\tif sum > max then\n\t\t\tmax = sum\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmauatvp8.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpmauatvp8.lua:7: in local 'candidate'\n\t/tmp/tmpmauatvp8.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n  local max = 0\n  for _, t in ipairs(stdata) do\n    for _, v in ipairs(t) do\n      if v > max then max = v end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvgn7io_j.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpvgn7io_j.lua:6: in local 'candidate'\n\t/tmp/tmpvgn7io_j.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in ipairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5pjoaiof.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp5pjoaiof.lua:5: in local 'candidate'\n\t/tmp/tmp5pjoaiof.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in pairs(stdata) do\n        local agg = aggregate(t)\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpovqpxmuq.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmpovqpxmuq.lua:5: in local 'candidate'\n\t/tmp/tmpovqpxmuq.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n   local max = 0\n   for _, t in ipairs(stdata) do\n      for _, v in ipairs(t) do\n\t if v > max then max = v end\n      end\n   end\n   return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppximq7xz.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmppximq7xz.lua:6: in local 'candidate'\n\t/tmp/tmppximq7xz.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, data in pairs(stdata) do\n        local aggregate = 0\n        for _, value in pairs(data) do\n            aggregate = aggregate + value\n        end\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoghpvg8s.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpoghpvg8s.lua:7: in local 'candidate'\n\t/tmp/tmpoghpvg8s.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcx3x8kk.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzcx3x8kk.lua:5: in function 'candidate'\n\t/tmp/tmpzcx3x8kk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in ipairs(stdata) do\n        for _, v in ipairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89ut9i5f.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp89ut9i5f.lua:6: in function 'candidate'\n\t/tmp/tmp89ut9i5f.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _,v in pairs(stdata) do\n\t\tfor _,v2 in pairs(v) do\n\t\t\tif v2 > max then\n\t\t\t\tmax = v2\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwn2oygc9.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpwn2oygc9.lua:6: in local 'candidate'\n\t/tmp/tmpwn2oygc9.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, data in pairs(stdata) do\n        local aggregate = 0\n        for _, value in pairs(data) do\n            aggregate = aggregate + value\n        end\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoghpvg8s.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpoghpvg8s.lua:7: in local 'candidate'\n\t/tmp/tmpoghpvg8s.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for i,v in ipairs(stdata) do\n        for j,w in ipairs(v) do\n            if w > max then\n                max = w\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1fc6fmva.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp1fc6fmva.lua:6: in local 'candidate'\n\t/tmp/tmp1fc6fmva.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor i, v in ipairs(stdata) do\n\t\tlocal sum = 0\n\t\tfor j, w in ipairs(v) do\n\t\t\tsum = sum + w\n\t\tend\n\t\tif sum > max then\n\t\t\tmax = sum\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpir36_kze.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpir36_kze.lua:7: in local 'candidate'\n\t/tmp/tmpir36_kze.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in ipairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5pjoaiof.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp5pjoaiof.lua:5: in local 'candidate'\n\t/tmp/tmp5pjoaiof.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max_aggregate = 0\n\tfor i = 1, #stdata do\n\t\tlocal aggregate = 0\n\t\tfor j = 1, #stdata[i] do\n\t\t\taggregate = aggregate + stdata[i][j]\n\t\tend\n\t\tif aggregate > max_aggregate then\n\t\t\tmax_aggregate = aggregate\n\t\tend\n\tend\n\treturn max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdmetq5es.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpdmetq5es.lua:7: in local 'candidate'\n\t/tmp/tmpdmetq5es.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for i, v in ipairs(stdata) do\n        local agg = 0\n        for j, w in ipairs(v) do\n            agg = agg + w\n        end\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4mm5caik.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmp4mm5caik.lua:7: in local 'candidate'\n\t/tmp/tmp4mm5caik.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in ipairs(stdata) do\n        local agg = v.aggregate\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9g1nimne.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp9g1nimne.lua:6: in function 'candidate'\n\t/tmp/tmp9g1nimne.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for i, v in ipairs(stdata) do\n        if v[1] > max then\n            max = v[1]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsfwi3j3v.lua:5: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpsfwi3j3v.lua:5: in local 'candidate'\n\t/tmp/tmpsfwi3j3v.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n  local max = 0\n  for _, t in pairs(stdata) do\n    local agg = aggregate(t)\n    if agg > max then\n      max = agg\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpchnkqllr.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmpchnkqllr.lua:5: in local 'candidate'\n\t/tmp/tmpchnkqllr.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in ipairs(stdata) do\n        for _, v in ipairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89ut9i5f.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp89ut9i5f.lua:6: in function 'candidate'\n\t/tmp/tmp89ut9i5f.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, v in pairs(stdata) do\n\t\tlocal agg = aggregate(v)\n\t\tif agg > max then\n\t\t\tmax = agg\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiwn80r5l.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmpiwn80r5l.lua:5: in local 'candidate'\n\t/tmp/tmpiwn80r5l.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, v in pairs(stdata) do\n        for _, v2 in pairs(v) do\n            if v2 > max_aggregate then\n                max_aggregate = v2\n            end\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm67q9txi.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpm67q9txi.lua:6: in local 'candidate'\n\t/tmp/tmpm67q9txi.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, v in ipairs(stdata) do\n        local aggregate = 0\n        for _, v2 in ipairs(v) do\n            aggregate = aggregate + v2\n        end\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnpzujdco.lua:7: attempt to perform arithmetic on local 'v2' (a string value)\nstack traceback:\n\t/tmp/tmpnpzujdco.lua:7: in function 'candidate'\n\t/tmp/tmpnpzujdco.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in ipairs(stdata) do\n        for _, v in ipairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89ut9i5f.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp89ut9i5f.lua:6: in function 'candidate'\n\t/tmp/tmp89ut9i5f.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, t in ipairs(stdata) do\n\t\tlocal agg = aggregate(t)\n\t\tif agg > max then max = agg end\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj9d97f97.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmpj9d97f97.lua:5: in local 'candidate'\n\t/tmp/tmpj9d97f97.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcx3x8kk.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzcx3x8kk.lua:5: in function 'candidate'\n\t/tmp/tmpzcx3x8kk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor i = 1, #stdata do\n\t\tlocal t = stdata[i]\n\t\tlocal sum = 0\n\t\tfor j = 1, #t do\n\t\t\tsum = sum + t[j]\n\t\tend\n\t\tif sum > max then\n\t\t\tmax = sum\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4290t_gw.lua:8: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmp4290t_gw.lua:8: in local 'candidate'\n\t/tmp/tmp4290t_gw.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in ipairs(stdata) do\n        for _, v in ipairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89ut9i5f.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp89ut9i5f.lua:6: in function 'candidate'\n\t/tmp/tmp89ut9i5f.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, data in pairs(stdata) do\n        local aggregate = 0\n        for _, v in pairs(data) do\n            aggregate = aggregate + v\n        end\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq31aaqpe.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpq31aaqpe.lua:7: in local 'candidate'\n\t/tmp/tmpq31aaqpe.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in pairs(stdata) do\n        for _, v in pairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgw59b5ug.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpgw59b5ug.lua:6: in function 'candidate'\n\t/tmp/tmpgw59b5ug.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for i, v in ipairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph62fvx5f.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmph62fvx5f.lua:5: in local 'candidate'\n\t/tmp/tmph62fvx5f.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for i, v in ipairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph62fvx5f.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmph62fvx5f.lua:5: in local 'candidate'\n\t/tmp/tmph62fvx5f.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcx3x8kk.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzcx3x8kk.lua:5: in function 'candidate'\n\t/tmp/tmpzcx3x8kk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n  local max = 0\n  for _, v in ipairs(stdata) do\n    local agg = v.aggregate\n    if agg > max then\n      max = agg\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpesxe41wg.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpesxe41wg.lua:6: in local 'candidate'\n\t/tmp/tmpesxe41wg.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, t in ipairs(stdata) do\n\t\tfor _, v in ipairs(t) do\n\t\t\tif v > max then\n\t\t\t\tmax = v\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_vt9hwlt.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp_vt9hwlt.lua:6: in local 'candidate'\n\t/tmp/tmp_vt9hwlt.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in pairs(stdata) do\n        for _, v in pairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgw59b5ug.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpgw59b5ug.lua:6: in function 'candidate'\n\t/tmp/tmpgw59b5ug.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, t in ipairs(stdata) do\n        local aggregate = 0\n        for _, v in ipairs(t) do\n            aggregate = aggregate + v\n        end\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzwqkvwpp.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpzwqkvwpp.lua:7: in local 'candidate'\n\t/tmp/tmpzwqkvwpp.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, v in pairs(stdata) do\n\t\tif v.aggregate > max then\n\t\t\tmax = v.aggregate\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ivhxigq.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp0ivhxigq.lua:5: in function 'candidate'\n\t/tmp/tmp0ivhxigq.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max_aggregate = 0\n\tfor i,v in ipairs(stdata) do\n\t\tif v.aggregate > max_aggregate then\n\t\t\tmax_aggregate = v.aggregate\n\t\tend\n\tend\n\treturn max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ufu7f3o.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp9ufu7f3o.lua:5: in local 'candidate'\n\t/tmp/tmp9ufu7f3o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, data in pairs(stdata) do\n        for _, val in pairs(data) do\n            if val > max then\n                max = val\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx2goa1po.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpx2goa1po.lua:6: in local 'candidate'\n\t/tmp/tmpx2goa1po.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, t in pairs(stdata) do\n        local aggregate = 0\n        for _, v in pairs(t) do\n            aggregate = aggregate + v\n        end\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw5swpq0y.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpw5swpq0y.lua:7: in local 'candidate'\n\t/tmp/tmpw5swpq0y.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor i,v in ipairs(stdata) do\n\t\tfor j,w in ipairs(v) do\n\t\t\tif w > max then\n\t\t\t\tmax = w\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4fyi23pf.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp4fyi23pf.lua:6: in local 'candidate'\n\t/tmp/tmp4fyi23pf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, t in ipairs(stdata) do\n\t\tlocal agg = aggregate(t)\n\t\tif agg > max then\n\t\t\tmax = agg\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu5wx74xt.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmpu5wx74xt.lua:5: in local 'candidate'\n\t/tmp/tmpu5wx74xt.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, v in pairs(stdata) do\n\t\tif v.aggregate > max then\n\t\t\tmax = v.aggregate\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ivhxigq.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp0ivhxigq.lua:5: in function 'candidate'\n\t/tmp/tmp0ivhxigq.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in ipairs(stdata) do\n        local sum = 0\n        for _, v in ipairs(t) do\n            sum = sum + v\n        end\n        if sum > max then\n            max = sum\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmper212tho.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmper212tho.lua:7: in local 'candidate'\n\t/tmp/tmper212tho.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        local agg = aggregate(v)\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp47l3wc5p.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmp47l3wc5p.lua:5: in local 'candidate'\n\t/tmp/tmp47l3wc5p.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in pairs(stdata) do\n        for _, v in pairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgw59b5ug.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpgw59b5ug.lua:6: in function 'candidate'\n\t/tmp/tmpgw59b5ug.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n   local max_aggregate = 0\n   for i,v in ipairs(stdata) do\n      local aggregate = 0\n      for j,k in ipairs(v) do\n\t aggregate = aggregate + k\n      end\n      if aggregate > max_aggregate then\n\t max_aggregate = aggregate\n      end\n   end\n   return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo69qii4v.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpo69qii4v.lua:7: in local 'candidate'\n\t/tmp/tmpo69qii4v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcx3x8kk.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzcx3x8kk.lua:5: in function 'candidate'\n\t/tmp/tmpzcx3x8kk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in ipairs(stdata) do\n        for _, v in ipairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89ut9i5f.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp89ut9i5f.lua:6: in function 'candidate'\n\t/tmp/tmp89ut9i5f.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in ipairs(stdata) do\n        max = math.max(max, v.aggregate)\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n   local max = 0\n   for _, v in pairs(stdata) do\n      if v.aggregate > max then\n         max = v.aggregate\n      end\n   end\n   return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8c_29kod.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp8c_29kod.lua:5: in local 'candidate'\n\t/tmp/tmp8c_29kod.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for i,v in ipairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp17s4s6o4.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp17s4s6o4.lua:5: in local 'candidate'\n\t/tmp/tmp17s4s6o4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor i, v in ipairs(stdata) do\n\t\tlocal agg = aggregate(v)\n\t\tif agg > max then\n\t\t\tmax = agg\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkse9vcw5.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmpkse9vcw5.lua:5: in local 'candidate'\n\t/tmp/tmpkse9vcw5.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, v in pairs(stdata) do\n\t\tif v.aggregate > max then\n\t\t\tmax = v.aggregate\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ivhxigq.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp0ivhxigq.lua:5: in function 'candidate'\n\t/tmp/tmp0ivhxigq.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in ipairs(stdata) do\n        local agg = aggregate(t)\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_0ijgbvb.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmp_0ijgbvb.lua:5: in local 'candidate'\n\t/tmp/tmp_0ijgbvb.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, t in ipairs(stdata) do\n\t\tlocal agg = 0\n\t\tfor _, v in ipairs(t) do\n\t\t\tagg = agg + v\n\t\tend\n\t\tif agg > max then\n\t\t\tmax = agg\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpca4d33ax.lua:7: attempt to perform arithmetic on local 'v' (a string value)\nstack traceback:\n\t/tmp/tmpca4d33ax.lua:7: in function 'candidate'\n\t/tmp/tmpca4d33ax.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in ipairs(stdata) do\n        local agg = aggregate(t)\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_0ijgbvb.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmp_0ijgbvb.lua:5: in local 'candidate'\n\t/tmp/tmp_0ijgbvb.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n  local max = 0\n  for _, data in ipairs(stdata) do\n    local val = data.aggregate\n    if val > max then\n      max = val\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpngx_8nzz.lua:6: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpngx_8nzz.lua:6: in local 'candidate'\n\t/tmp/tmpngx_8nzz.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        for _, v2 in pairs(v) do\n            if v2 > max then\n                max = v2\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1za2j6cx.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp1za2j6cx.lua:6: in local 'candidate'\n\t/tmp/tmp1za2j6cx.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n  local max = 0\n  for _, t in ipairs(stdata) do\n    local agg = aggregate(t)\n    if agg > max then\n      max = agg\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj2_4kzn6.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmpj2_4kzn6.lua:5: in local 'candidate'\n\t/tmp/tmpj2_4kzn6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n  local max = 0\n  for _, v in pairs(stdata) do\n    max = math.max(max, v.aggregate)\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n  local max = 0\n  for _, v in ipairs(stdata) do\n    if v.aggregate > max then\n      max = v.aggregate\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkjie62fu.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpkjie62fu.lua:5: in local 'candidate'\n\t/tmp/tmpkjie62fu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, v in ipairs(stdata) do\n\t\tlocal agg = aggregate(v)\n\t\tif agg > max then\n\t\t\tmax = agg\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz09_nuc_.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmpz09_nuc_.lua:5: in local 'candidate'\n\t/tmp/tmpz09_nuc_.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n  local max = 0\n  for _, data in pairs(stdata) do\n    for _, v in pairs(data) do\n      if v > max then\n        max = v\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxzjze8__.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpxzjze8__.lua:6: in local 'candidate'\n\t/tmp/tmpxzjze8__.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in ipairs(stdata) do\n        local agg = aggregate(t)\n        if agg > max then\n            max = agg\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_0ijgbvb.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmp_0ijgbvb.lua:5: in local 'candidate'\n\t/tmp/tmp_0ijgbvb.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _,t in ipairs(stdata) do\n\t\tlocal agg = aggregate(t)\n\t\tif agg > max then\n\t\t\tmax = agg\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprqaqs0tk.lua:5: attempt to call a nil value (global 'aggregate')\nstack traceback:\n\t/tmp/tmprqaqs0tk.lua:5: in local 'candidate'\n\t/tmp/tmprqaqs0tk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n  local max = 0\n  for _, t in pairs(stdata) do\n    for _, v in pairs(t) do\n      if v > max then\n        max = v\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123534,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphuzwgon8.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmphuzwgon8.lua:6: in local 'candidate'\n\t/tmp/tmphuzwgon8.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max = 0\n\tfor _, v in pairs(stdata) do\n\t\tfor _, v2 in pairs(v) do\n\t\t\tif v2 > max then\n\t\t\t\tmax = v2\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiz537ygw.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpiz537ygw.lua:6: in function 'candidate'\n\t/tmp/tmpiz537ygw.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcx3x8kk.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzcx3x8kk.lua:5: in function 'candidate'\n\t/tmp/tmpzcx3x8kk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n\tlocal max_aggregate = 0\n\tfor i, v in ipairs(stdata) do\n\t\tlocal aggregate = 0\n\t\tfor j, w in ipairs(v) do\n\t\t\taggregate = aggregate + w\n\t\tend\n\t\tif aggregate > max_aggregate then\n\t\t\tmax_aggregate = aggregate\n\t\tend\n\tend\n\treturn max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqn7b7g5m.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpqn7b7g5m.lua:7: in local 'candidate'\n\t/tmp/tmpqn7b7g5m.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, v in pairs(stdata) do\n        if v.aggregate > max then\n            max = v.aggregate\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcx3x8kk.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzcx3x8kk.lua:5: in function 'candidate'\n\t/tmp/tmpzcx3x8kk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max = 0\n    for _, t in pairs(stdata) do\n        for _, v in pairs(t) do\n            if v > max then\n                max = v\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027760,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgw59b5ug.lua:6: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpgw59b5ug.lua:6: in function 'candidate'\n\t/tmp/tmpgw59b5ug.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n    local max_aggregate = 0\n    for _, t in ipairs(stdata) do\n        local aggregate = 0\n        for _, v in ipairs(t) do\n            aggregate = aggregate + v\n        end\n        if aggregate > max_aggregate then\n            max_aggregate = aggregate\n        end\n    end\n    return max_aggregate\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123535,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzwqkvwpp.lua:7: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpzwqkvwpp.lua:7: in local 'candidate'\n\t/tmp/tmpzwqkvwpp.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}