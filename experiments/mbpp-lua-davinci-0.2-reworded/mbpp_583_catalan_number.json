{
  "name": "mbpp_583_catalan_number",
  "language": "lua",
  "prompt": "-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local catalan = {}\n  catalan[0] = 1\n  catalan[1] = 1\n  for i = 2, num do\n    catalan[i] = 0\n    for j = 0, i - 1 do\n      catalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n    end\n  end\n  return catalan[num]\nend",
    "    local function factorial(n)\n        if n == 0 then\n            return 1\n        else\n            return n * factorial(n - 1)\n        end\n    end",
    "  if num == 0 then\n    return 1\n  end\n  local sum = 0\n  for i = 0, num - 1 do\n    sum = sum + catalan_number(i) * catalan_number(num - i - 1)\n  end\n  return sum\nend",
    "    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end",
    "\tlocal catalan = {}\n\tcatalan[0] = 1\n\tcatalan[1] = 1\n\tfor i = 2, num do\n\t\tcatalan[i] = 0\n\t\tfor j = 0, i - 1 do\n\t\t\tcatalan[i] = catalan[i] + catalan[j] * catalan[i - j - 1]\n\t\tend\n\tend\n\treturn catalan[num]\nend",
    "    local catalan = {1, 1}\n    for i = 3, num do\n        catalan[i] = 0\n        for j = 1, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j]\n        end\n    end\n    return catalan[num]\nend",
    "    local function factorial(n)\n        if n == 0 then return 1 end\n        return n * factorial(n - 1)\n    end\n    return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend",
    "  if num == 0 then\n    return 1\n  end\n  local sum = 0\n  for i = 0, num - 1 do\n    sum = sum + catalan_number(i) * catalan_number(num - i - 1)\n  end\n  return sum\nend",
    "  local function factorial(n)\n    if n == 0 then\n      return 1\n    else\n      return n * factorial(n - 1)\n    end\n  end",
    "  local function factorial(num)\n    if num == 0 then\n      return 1\n    else\n      return num * factorial(num - 1)\n    end\n  end",
    "    local function factorial(num)\n        if num == 0 then\n            return 1\n        else\n            return num * factorial(num - 1)\n        end\n    end\n    return factorial(2 * num) / (factorial(num + 1) * factorial(num))\nend",
    "    if num == 0 then\n        return 1\n    end\n    local sum = 0\n    for i = 0, num-1 do\n        sum = sum + catalan_number(i) * catalan_number(num-i-1)\n    end\n    return sum\nend",
    "  if num == 0 then return 1 end\n  local sum = 0\n  for i = 0, num - 1 do\n    sum = sum + catalan_number(i) * catalan_number(num - i - 1)\n  end\n  return sum\nend",
    "    local catalan = {1, 1}\n    for i = 3, num do\n        catalan[i] = 0\n        for j = 1, i - 1 do\n            catalan[i] = catalan[i] + catalan[j] * catalan[i - j]\n        end\n    end\n    return catalan[num]\nend",
    "  local function factorial(num)\n    local result = 1\n    for i = 1, num do\n      result = result * i\n    end\n    return result\n  end",
    "  local function factorial(n)\n    if n == 0 then\n      return 1\n    else\n      return n * factorial(n - 1)\n    end\n  end",
    "    local function catalan(n)\n        if n == 0 then return 1 end\n        local res = 0\n        for i = 1, n do\n            res = res + catalan(i-1) * catalan(n-i)\n        end\n        return res\n    end\n    return catalan(num)\nend",
    "    local result = 1\n    for i = 1, num do\n        result = result * (num + i) / i\n    end\n    return result / (num + 1)\nend",
    "    local function factorial(n)\n        if n == 0 then\n            return 1\n        else\n            return n * factorial(n - 1)\n        end\n    end",
    "    if num == 0 then\n        return 1\n    end"
  ]
}