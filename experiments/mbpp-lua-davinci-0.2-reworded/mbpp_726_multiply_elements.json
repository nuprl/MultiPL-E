{
  "name": "mbpp_726_multiply_elements",
  "language": "lua",
  "prompt": "-- Write a function that takes as input a table of numbers (t_1,...,t_{N+1}) and returns a table of length N where the i-th element of the table is equal to t_i * t_{i+1}.\nlocal function multiply_elements(test_tup)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_726_multiply_elements.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply_elements\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {5, 35, 56, 80})\n    lu.assertEquals(candidate({2, 4, 5, 6, 7}), {8, 20, 30, 42})\n    lu.assertEquals(candidate({12, 13, 14, 9, 15}), {156, 182, 126, 135})\n    lu.assertEquals(candidate({12}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local result_tup = {}\n    for i = 1, #test_tup - 1 do\n        result_tup[i] = test_tup[i] * test_tup[i + 1]\n    end\n    return result_tup\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] * test_tup[i + 1]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] * test_tup[i + 1]\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #test_tup - 1 do\n    result[i] = test_tup[i] * test_tup[i + 1]\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] * test_tup[i+1]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] * test_tup[i+1]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] * test_tup[i + 1]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] * test_tup[i + 1]\n    end\n    return result\nend",
    "    local tup = {}\n    for i = 1, #test_tup - 1 do\n        tup[i] = test_tup[i] * test_tup[i+1]\n    end\n    return tup\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] * test_tup[i + 1]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] * test_tup[i + 1]\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #test_tup - 1 do\n    result[i] = test_tup[i] * test_tup[i + 1]\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] * test_tup[i + 1]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] * test_tup[i + 1]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] * test_tup[i + 1]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] * test_tup[i + 1]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] * test_tup[i + 1]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] * test_tup[i + 1]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] * test_tup[i + 1]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] * test_tup[i + 1]\n    end\n    return result\nend"
  ]
}