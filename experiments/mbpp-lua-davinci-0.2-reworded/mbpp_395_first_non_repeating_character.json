{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "lua",
  "prompt": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local chars = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if chars[char] then\n            chars[char] = chars[char] + 1\n        else\n            chars[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if chars[char] == 1 then\n            return char\n        end\n    end\nend",
    "  local char_count = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] then\n      char_count[char] = char_count[char] + 1\n    else\n      char_count[char] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        count[str1:sub(i,i)] = (count[str1:sub(i,i)] or 0) + 1\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i,i)] == 1 then\n            return str1:sub(i,i)\n        end\n    end\n    return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend",
    "    local chars = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if not chars[c] then\n            chars[c] = 1\n        else\n            chars[c] = chars[c] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if chars[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "  local char_count = {}\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if char_count[c] == nil then\n      char_count[c] = 1\n    else\n      char_count[c] = char_count[c] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if char_count[c] == 1 then\n      return c\n    end\n  end\n  return nil\nend",
    "    local count = {}\n    for i = 1, #str1 do\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend",
    "  local char_count = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i,i)\n    if char_count[char] then\n      char_count[char] = char_count[char] + 1\n    else\n      char_count[char] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i,i)\n    if char_count[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend",
    "    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\nend",
    "    local str2 = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if not str2[c] then\n            str2[c] = 1\n        else\n            str2[c] = str2[c] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if str2[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend",
    "    local chars = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if chars[c] then\n            chars[c] = chars[c] + 1\n        else\n            chars[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if chars[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend",
    "  local char_count = {}\n  local index = {}\n  local i = 1\n  for c in str1:gmatch\".\" do\n    if char_count[c] == nil then\n      char_count[c] = 1\n      index[c] = i\n    else\n      char_count[c] = char_count[c] + 1\n    end\n    i = i + 1\n  end\n  local min_index = math.huge\n  local result\n  for c, count in pairs(char_count) do\n    if count == 1 and index[c] < min_index then\n      min_index = index[c]\n      result = c\n    end\n  end\n  return result\nend",
    "    local chars = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if not chars[c] then\n            chars[c] = {count = 1, index = i}\n        else\n            chars[c].count = chars[c].count + 1\n        end\n    end\n    local result = nil\n    for k, v in pairs(chars) do\n        if v.count == 1 and (not result or v.index < result.index) then\n            result = v\n        end\n    end\n    return result and str1:sub(result.index, result.index) or nil\nend",
    "    local chars = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if not chars[c] then\n            chars[c] = 1\n        else\n            chars[c] = chars[c] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if chars[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend"
  ]
}