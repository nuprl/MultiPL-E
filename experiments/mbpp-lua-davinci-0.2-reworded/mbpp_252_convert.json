{
  "name": "mbpp_252_convert",
  "language": "lua",
  "prompt": "-- Write a luathon function to convert complex numbers to polar coordinates.\nlocal function convert(numbers)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert\n    lu.assertEquals(candidate(1), {1.0, 0.0})\n    lu.assertEquals(candidate(4), {4.0, 0.0})\n    lu.assertEquals(candidate(5), {5.0, 0.0})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local result = {}\n    for i, v in ipairs(numbers) do\n        local r = math.sqrt(v.real * v.real + v.imag * v.imag)\n        local theta = math.atan2(v.imag, v.real)\n        result[i] = { r = r, theta = theta }\n    end\n    return result\nend",
    "  local polar = {}\n  for i, number in ipairs(numbers) do\n    local a, b = number.real, number.imag\n    polar[i] = {\n      r = math.sqrt(a * a + b * b),\n      theta = math.atan2(b, a)\n    }\n  end\n  return polar\nend",
    "    local polar = {}\n    for i, v in ipairs(numbers) do\n        local r = math.sqrt(v.r * v.r + v.i * v.i)\n        local theta = math.atan2(v.i, v.r)\n        polar[i] = {r = r, theta = theta}\n    end\n    return polar\nend",
    "    local result = {}\n    for _, number in ipairs(numbers) do\n        local r = math.sqrt(number.r^2 + number.i^2)\n        local theta = math.atan2(number.i, number.r)\n        table.insert(result, {r = r, theta = theta})\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(numbers) do\n        local r = math.sqrt(v.r * v.r + v.i * v.i)\n        local theta = math.atan2(v.i, v.r)\n        result[i] = {r = r, theta = theta}\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(numbers) do\n        local r = math.sqrt(v.real * v.real + v.imag * v.imag)\n        local theta = math.atan2(v.imag, v.real)\n        result[i] = {r = r, theta = theta}\n    end\n    return result\nend",
    "    local polar = {}\n    for i, v in ipairs(numbers) do\n        local r = math.sqrt(v.real^2 + v.imag^2)\n        local theta = math.atan2(v.imag, v.real)\n        table.insert(polar, {r = r, theta = theta})\n    end\n    return polar\nend",
    "  local result = {}\n  for i, number in ipairs(numbers) do\n    local r = math.sqrt(number.re * number.re + number.im * number.im)\n    local theta = math.atan2(number.im, number.re)\n    result[i] = { r = r, theta = theta }\n  end\n  return result\nend",
    "  local polar = {}\n  for i, v in ipairs(numbers) do\n    local r = math.sqrt(v.real^2 + v.imag^2)\n    local theta = math.atan2(v.imag, v.real)\n    polar[i] = {r = r, theta = theta}\n  end\n  return polar\nend",
    "    local polar = {}\n    for i, number in ipairs(numbers) do\n        local r = math.sqrt(number.r * number.r + number.i * number.i)\n        local theta = math.atan2(number.i, number.r)\n        table.insert(polar, { r = r, theta = theta })\n    end\n    return polar\nend",
    "  local polar = {}\n  for i, number in ipairs(numbers) do\n    local r = math.sqrt(number.r^2 + number.i^2)\n    local theta = math.atan2(number.i, number.r)\n    polar[i] = { r = r, theta = theta }\n  end\n  return polar\nend",
    "    local polar = {}\n    for i, v in ipairs(numbers) do\n        local r = math.sqrt(v.real^2 + v.imag^2)\n        local theta = math.atan2(v.imag, v.real)\n        polar[i] = {r = r, theta = theta}\n    end\n    return polar\nend",
    "  local polar = {}\n  for i,v in ipairs(numbers) do\n    local r = math.sqrt(v.r*v.r + v.i*v.i)\n    local theta = math.atan2(v.i, v.r)\n    polar[i] = {r=r, theta=theta}\n  end\n  return polar\nend",
    "  local result = {}\n  for i, v in ipairs(numbers) do\n    local r = math.sqrt(v.real^2 + v.imag^2)\n    local theta = math.atan2(v.imag, v.real)\n    result[i] = {r = r, theta = theta}\n  end\n  return result\nend",
    "    local result = {}\n    for _, number in ipairs(numbers) do\n        local r = math.sqrt(number.r^2 + number.i^2)\n        local theta = math.atan2(number.i, number.r)\n        table.insert(result, {r = r, theta = theta})\n    end\n    return result\nend",
    "  local result = {}\n  for i, v in ipairs(numbers) do\n    local r = math.sqrt(v.r * v.r + v.i * v.i)\n    local theta = math.atan(v.i / v.r)\n    result[i] = { r = r, theta = theta }\n  end\n  return result\nend",
    "  local polar = {}\n  for i, number in ipairs(numbers) do\n    local r, theta = math.sqrt(number.real^2 + number.imag^2), math.atan2(number.imag, number.real)\n    polar[i] = { r = r, theta = theta }\n  end\n  return polar\nend",
    "    local polar = {}\n    for i, v in ipairs(numbers) do\n        local r = math.sqrt(v.real^2 + v.imag^2)\n        local theta = math.atan2(v.imag, v.real)\n        table.insert(polar, {r = r, theta = theta})\n    end\n    return polar\nend",
    "  local polar = {}\n  for i, v in ipairs(numbers) do\n    local r = math.sqrt(v.real^2 + v.imag^2)\n    local theta = math.atan2(v.imag, v.real)\n    polar[i] = {r = r, theta = theta}\n  end\n  return polar\nend",
    "    local polar = {}\n    for i, v in ipairs(numbers) do\n        local r = math.sqrt(v.real^2 + v.imag^2)\n        local theta = math.atan2(v.imag, v.real)\n        table.insert(polar, {r = r, theta = theta})\n    end\n    return polar\nend"
  ]
}