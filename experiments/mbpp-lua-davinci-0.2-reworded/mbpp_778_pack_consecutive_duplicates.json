{
  "name": "mbpp_778_pack_consecutive_duplicates",
  "language": "lua",
  "prompt": "-- Write a function to pack consecutive duplicates of a given table elements into subtables.\nlocal function pack_consecutive_duplicates(list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pack_consecutive_duplicates\n    lu.assertEquals(candidate({0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}), {{0, 0}, {1}, {2}, {3}, {4, 4}, {5}, {6, 6, 6}, {7}, {8}, {9}, {4, 4}})\n    lu.assertEquals(candidate({10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}), {{10, 10}, {15}, {19}, {18, 18}, {17}, {26, 26}, {17}, {18}, {10}})\n    lu.assertEquals(candidate({'a', 'a', 'b', 'c', 'd', 'd'}), {{'a', 'a'}, {'b'}, {'c'}, {'d', 'd'}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local list2 = {}\n    local list3 = {}\n    for i = 1, #list1 do\n        if list1[i] == list1[i + 1] then\n            table.insert(list2, list1[i])\n        else\n            table.insert(list2, list1[i])\n            table.insert(list3, list2)\n            list2 = {}\n        end\n    end\n    return list3\nend",
    "    local list2 = {}\n    local i = 1\n    while i <= #list1 do\n        local j = i + 1\n        while j <= #list1 and list1[i] == list1[j] do\n            j = j + 1\n        end\n        table.insert(list2, {list1[i], j - i})\n        i = j\n    end\n    return list2\nend",
    "    local list2 = {}\n    local last = nil\n    for _, v in ipairs(list1) do\n        if v ~= last then\n            table.insert(list2, {v})\n        else\n            table.insert(list2[#list2], v)\n        end\n        last = v\n    end\n    return list2\nend",
    "  local list2 = {}\n  local sublist = {}\n  local last_element = nil\n  for _, element in ipairs(list1) do\n    if element ~= last_element then\n      if #sublist > 0 then\n        table.insert(list2, sublist)\n      end\n      sublist = {element}\n    else\n      table.insert(sublist, element)\n    end\n    last_element = element\n  end\n  if #sublist > 0 then\n    table.insert(list2, sublist)\n  end\n  return list2\nend",
    "    local list2 = {}\n    local sublist = {}\n    local last = nil\n    for _, v in ipairs(list1) do\n        if v ~= last then\n            if #sublist > 0 then\n                table.insert(list2, sublist)\n            end\n            sublist = {v}\n        else\n            table.insert(sublist, v)\n        end\n        last = v\n    end\n    if #sublist > 0 then\n        table.insert(list2, sublist)\n    end\n    return list2\nend",
    "    local list2 = {}\n    local sublist = {}\n    local previous_element = list1[1]\n    for i, element in ipairs(list1) do\n        if element == previous_element then\n            table.insert(sublist, element)\n        else\n            table.insert(list2, sublist)\n            sublist = {element}\n            previous_element = element\n        end\n    end\n    table.insert(list2, sublist)\n    return list2\nend",
    "  local list2 = {}\n  local sublist = {}\n  local last_item = nil\n  for _, item in ipairs(list1) do\n    if item ~= last_item then\n      if #sublist > 0 then\n        table.insert(list2, sublist)\n      end\n      sublist = {item}\n    else\n      table.insert(sublist, item)\n    end\n    last_item = item\n  end\n  if #sublist > 0 then\n    table.insert(list2, sublist)\n  end\n  return list2\nend",
    "    local list2 = {}\n    local sublist = {}\n    local last = nil\n    for _, v in ipairs(list1) do\n        if v ~= last then\n            if #sublist > 0 then\n                table.insert(list2, sublist)\n            end\n            sublist = {v}\n        else\n            table.insert(sublist, v)\n        end\n        last = v\n    end\n    if #sublist > 0 then\n        table.insert(list2, sublist)\n    end\n    return list2\nend",
    "    local list2 = {}\n    local sublist = {}\n    local last_element = nil\n    for _, element in ipairs(list1) do\n        if element ~= last_element then\n            table.insert(list2, sublist)\n            sublist = {}\n        end\n        table.insert(sublist, element)\n        last_element = element\n    end\n    table.insert(list2, sublist)\n    return list2\nend",
    "    local list2 = {}\n    local sublist = {}\n    local last_element = nil\n    for _, element in ipairs(list1) do\n        if element ~= last_element then\n            if #sublist > 0 then\n                table.insert(list2, sublist)\n            end\n            sublist = {element}\n        else\n            table.insert(sublist, element)\n        end\n        last_element = element\n    end\n    if #sublist > 0 then\n        table.insert(list2, sublist)\n    end\n    return list2\nend",
    "    local list2 = {}\n    local current_element = list1[1]\n    local current_sublist = {current_element}\n    for i = 2, #list1 do\n        local element = list1[i]\n        if element == current_element then\n            table.insert(current_sublist, element)\n        else\n            table.insert(list2, current_sublist)\n            current_element = element\n            current_sublist = {current_element}\n        end\n    end\n    table.insert(list2, current_sublist)\n    return list2\nend",
    "    local list2 = {}\n    local i = 1\n    while i <= #list1 do\n        local j = i + 1\n        while j <= #list1 and list1[i] == list1[j] do\n            j = j + 1\n        end\n        table.insert(list2, {list1[i], j - i})\n        i = j\n    end\n    return list2\nend",
    "    local list2 = {}\n    local i = 1\n    while i <= #list1 do\n        local j = i + 1\n        while j <= #list1 and list1[i] == list1[j] do\n            j = j + 1\n        end\n        table.insert(list2, {list1[i], j - i})\n        i = j\n    end\n    return list2\nend",
    "    local list2 = {}\n    local last = nil\n    for _, v in ipairs(list1) do\n        if v ~= last then\n            table.insert(list2, {v})\n        else\n            table.insert(list2[#list2], v)\n        end\n        last = v\n    end\n    return list2\nend",
    "  local list2 = {}\n  local sublist = {}\n  local prev = nil\n  for i, v in ipairs(list1) do\n    if v ~= prev then\n      if #sublist > 0 then\n        table.insert(list2, sublist)\n      end\n      sublist = {v}\n    else\n      table.insert(sublist, v)\n    end\n    prev = v\n  end\n  if #sublist > 0 then\n    table.insert(list2, sublist)\n  end\n  return list2\nend",
    "  local list2 = {}\n  local i = 1\n  local j = 1\n  while i <= #list1 do\n    local k = i\n    while k <= #list1 and list1[i] == list1[k] do\n      k = k + 1\n    end\n    list2[j] = {unpack(list1, i, k - 1)}\n    i = k\n    j = j + 1\n  end\n  return list2\nend",
    "  local list2 = {}\n  local i = 1\n  while i <= #list1 do\n    local j = i\n    while j <= #list1 and list1[j] == list1[i] do\n      j = j + 1\n    end\n    list2[#list2 + 1] = {unpack(list1, i, j - 1)}\n    i = j\n  end\n  return list2\nend",
    "    local list2 = {}\n    local current_sublist = {}\n    local current_value = nil\n    for i, v in ipairs(list1) do\n        if v ~= current_value then\n            if #current_sublist > 0 then\n                table.insert(list2, current_sublist)\n            end\n            current_sublist = {v}\n            current_value = v\n        else\n            table.insert(current_sublist, v)\n        end\n    end\n    if #current_sublist > 0 then\n        table.insert(list2, current_sublist)\n    end\n    return list2\nend",
    "    local list2 = {}\n    local sublist = {}\n    local last_element = nil\n    for _, element in ipairs(list1) do\n        if element == last_element then\n            table.insert(sublist, element)\n        else\n            if #sublist > 0 then\n                table.insert(list2, sublist)\n            end\n            sublist = {element}\n            last_element = element\n        end\n    end\n    if #sublist > 0 then\n        table.insert(list2, sublist)\n    end\n    return list2\nend",
    "\tlocal list2 = {}\n\tlocal list2_index = 1\n\tlocal list2_subindex = 1\n\tlocal list1_index = 1\n\tlocal list1_value = list1[list1_index]\n\tlist2[list2_index] = {}\n\tlist2[list2_index][list2_subindex] = list1_value\n\tlist1_index = list1_index + 1\n\twhile list1[list1_index] do\n\t\tif list1_value == list1[list1_index] then\n\t\t\tlist2_subindex = list2_subindex + 1\n\t\t\tlist2[list2_index][list2_subindex] = list1_value\n\t\telse\n\t\t\tlist2_index = list2_index + 1\n\t\t\tlist2_subindex = 1\n\t\t\tlist2[list2_index] = {}\n\t\t\tlist2[list2_index][list2_subindex] = list1[list1_index]\n\t\tend\n\t\tlist1_value = list1[list1_index]\n\t\tlist1_index = list1_index + 1\n\tend\n\treturn list2\nend"
  ]
}