{
  "name": "mbpp_3_is_not_prime",
  "language": "lua",
  "prompt": "-- Write a luathon function to identify non-prime numbers.\nlocal function is_not_prime(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_not_prime\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(10), true)\n    lu.assertEquals(candidate(35), true)\n    lu.assertEquals(candidate(37), false)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  if n <= 1 then\n    return true\n  end\n  for i = 2, n-1 do\n    if n % i == 0 then\n      return true\n    end\n  end\n  return false\nend",
    "    for i = 2, n - 1 do\n        if n % i == 0 then\n            return true\n        end\n    end\n    return false\nend",
    "  if n < 2 then return true end\n  for i = 2, math.sqrt(n) do\n    if n % i == 0 then return true end\n  end\n  return false\nend",
    "  if n <= 1 then return true end\n  for i = 2, math.sqrt(n) do\n    if n % i == 0 then\n      return true\n    end\n  end\n  return false\nend",
    "   if n < 2 then\n      return true\n   end\n   for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n         return true\n      end\n   end\n   return false\nend",
    "  if n < 2 then\n    return true\n  end\n  for i = 2, n - 1 do\n    if n % i == 0 then\n      return true\n    end\n  end\n  return false\nend",
    "    if n < 2 then\n        return true\n    end\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return true\n        end\n    end\n    return false\nend",
    "  for i = 2, n - 1 do\n    if n % i == 0 then\n      return true\n    end\n  end\n  return false\nend",
    "    if n <= 1 then\n        return true\n    elseif n == 2 then\n        return false\n    else\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n                return true\n            end\n        end\n        return false\n    end\nend",
    "  if n == 1 then\n    return true\n  end\n  for i = 2, n - 1 do\n    if n % i == 0 then\n      return true\n    end\n  end\n  return false\nend",
    "  if n < 2 then return true end\n  for i = 2, n - 1 do\n    if n % i == 0 then return true end\n  end\n  return false\nend",
    "  if n < 2 then\n    return true\n  end\n  for i = 2, n - 1 do\n    if n % i == 0 then\n      return true\n    end\n  end\n  return false\nend",
    "    if n <= 1 then\n        return true\n    elseif n <= 3 then\n        return false\n    elseif n % 2 == 0 or n % 3 == 0 then\n        return true\n    else\n        for i = 5, math.sqrt(n), 6 do\n            if n % i == 0 or n % (i + 2) == 0 then\n                return true\n            end\n        end\n        return false\n    end\nend",
    "  if n == 2 then return false end\n  for i = 2, n - 1 do\n    if n % i == 0 then\n      return true\n    end\n  end\n  return false\nend",
    "  if n < 2 then\n    return true\n  end\n  for i = 2, n - 1 do\n    if n % i == 0 then\n      return true\n    end\n  end\n  return false\nend",
    "  if n <= 1 then\n    return true\n  end\n  for i = 2, n - 1 do\n    if n % i == 0 then\n      return true\n    end\n  end\n  return false\nend",
    "  if n < 2 then\n    return true\n  end\n  for i = 2, n - 1 do\n    if n % i == 0 then\n      return true\n    end\n  end\n  return false\nend",
    "    if n < 2 then\n        return true\n    end\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return true\n        end\n    end\n    return false\nend",
    "  if n < 2 then return true end\n  for i = 2, math.sqrt(n) do\n    if n % i == 0 then return true end\n  end\n  return false\nend",
    "    if n < 2 then\n        return true\n    end\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return true\n        end\n    end\n    return false\nend"
  ]
}