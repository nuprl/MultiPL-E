{
  "name": "mbpp_237_check_occurences",
  "language": "lua",
  "prompt": "-- Write a function that takes in a table of tables and returns a table mapping each unique table to the number of times it occurs in the table.\nlocal function check_occurences(test_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_occurences\n    lu.assertEquals(candidate({{3, 1}, {1, 3}, {2, 5}, {5, 2}, {6, 3}}), {[{1, 3}] = 2, [{2, 5}] = 2, [{3, 6}] = 1})\n    lu.assertEquals(candidate({{4, 2}, {2, 4}, {3, 6}, {6, 3}, {7, 4}}), {[{2, 4}] = 2, [{3, 6}] = 2, [{4, 7}] = 1})\n    lu.assertEquals(candidate({{13, 2}, {11, 23}, {12, 25}, {25, 12}, {16, 23}}), {[{2, 13}] = 1, [{11, 23}] = 1, [{12, 25}] = 2, [{16, 23}] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for i, v in ipairs(test_list) do\n        local key = table.concat(v, \"\")\n        occurences[key] = (occurences[key] or 0) + 1\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if occurences[v] then\n      occurences[v] = occurences[v] + 1\n    else\n      occurences[v] = 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        local key = table.concat(v, \"\")\n        occurences[key] = (occurences[key] or 0) + 1\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for i,v in ipairs(test_list) do\n        local key = table.concat(v, \"\")\n        if occurences[key] == nil then\n            occurences[key] = 1\n        else\n            occurences[key] = occurences[key] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local test_string = table_to_string(test)\n        if occurences[test_string] == nil then\n            occurences[test_string] = 0\n        end\n        occurences[test_string] = occurences[test_string] + 1\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if occurences[v] then\n      occurences[v] = occurences[v] + 1\n    else\n      occurences[v] = 1\n    end\n  end\n  return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if not occurences[v] then\n      occurences[v] = 1\n    else\n      occurences[v] = occurences[v] + 1\n    end\n  end\n  return occurences\nend",
    "  local occurences = {}\n  for _, test in ipairs(test_list) do\n    local test_str = table.concat(test, \"\")\n    if occurences[test_str] == nil then\n      occurences[test_str] = 1\n    else\n      occurences[test_str] = occurences[test_str] + 1\n    end\n  end\n  return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if occurences[v] then\n      occurences[v] = occurences[v] + 1\n    else\n      occurences[v] = 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        if occurences[test] then\n            occurences[test] = occurences[test] + 1\n        else\n            occurences[test] = 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if occurences[v] == nil then\n      occurences[v] = 1\n    else\n      occurences[v] = occurences[v] + 1\n    end\n  end\n  return occurences\nend",
    "  local occurences = {}\n  for i = 1, #test_list do\n    local test_table = test_list[i]\n    local test_table_string = table_to_string(test_table)\n    if occurences[test_table_string] then\n      occurences[test_table_string] = occurences[test_table_string] + 1\n    else\n      occurences[test_table_string] = 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, v in pairs(test_list) do\n        if occurences[v] then\n            occurences[v] = occurences[v] + 1\n        else\n            occurences[v] = 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local key = table.concat(test, \"\")\n        occurences[key] = (occurences[key] or 0) + 1\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        if not occurences[test] then\n            occurences[test] = 1\n        else\n            occurences[test] = occurences[test] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in pairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, test in ipairs(test_list) do\n    if occurences[test] == nil then\n      occurences[test] = 1\n    else\n      occurences[test] = occurences[test] + 1\n    end\n  end\n  return occurences\nend",
    "    local result = {}\n    for _, v in ipairs(test_list) do\n        if result[v] == nil then\n            result[v] = 1\n        else\n            result[v] = result[v] + 1\n        end\n    end\n    return result\nend",
    "  local occurences = {}\n  for _, tbl in ipairs(test_list) do\n    local key = table.concat(tbl, \",\")\n    occurences[key] = (occurences[key] or 0) + 1\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "    local result = {}\n    for _, v in ipairs(test_list) do\n        if result[v] then\n            result[v] = result[v] + 1\n        else\n            result[v] = 1\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for _, v in ipairs(test_list) do\n    if result[v] then\n      result[v] = result[v] + 1\n    else\n      result[v] = 1\n    end\n  end\n  return result\nend",
    "    local occurences = {}\n    for i, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, test in ipairs(test_list) do\n    local key = table_to_string(test)\n    occurences[key] = (occurences[key] or 0) + 1\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        local key = table.concat(v, \"\")\n        occurences[key] = (occurences[key] or 0) + 1\n    end\n    return occurences\nend",
    "\tlocal occurences = {}\n\tfor _, v in ipairs(test_list) do\n\t\tlocal key = table.concat(v, \"\")\n\t\tif occurences[key] then\n\t\t\toccurences[key] = occurences[key] + 1\n\t\telse\n\t\t\toccurences[key] = 1\n\t\tend\n\tend\n\treturn occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        local key = table_to_string(v)\n        if occurences[key] == nil then\n            occurences[key] = 1\n        else\n            occurences[key] = occurences[key] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for i, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "  local counts = {}\n  for _, v in ipairs(test_list) do\n    if counts[v] then\n      counts[v] = counts[v] + 1\n    else\n      counts[v] = 1\n    end\n  end\n  return counts\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if occurences[v] then\n      occurences[v] = occurences[v] + 1\n    else\n      occurences[v] = 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, v in pairs(test_list) do\n        if occurences[v] then\n            occurences[v] = occurences[v] + 1\n        else\n            occurences[v] = 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] then\n            occurences[v] = occurences[v] + 1\n        else\n            occurences[v] = 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, table in ipairs(test_list) do\n        if occurences[table] then\n            occurences[table] = occurences[table] + 1\n        else\n            occurences[table] = 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        if occurences[test] then\n            occurences[test] = occurences[test] + 1\n        else\n            occurences[test] = 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if occurences[v] == nil then\n      occurences[v] = 1\n    else\n      occurences[v] = occurences[v] + 1\n    end\n  end\n  return occurences\nend",
    "    local result = {}\n    for _, v in ipairs(test_list) do\n        if result[v] then\n            result[v] = result[v] + 1\n        else\n            result[v] = 1\n        end\n    end\n    return result\nend",
    "    local occurrences = {}\n    for _, table in ipairs(test_list) do\n        local table_string = table_to_string(table)\n        if occurrences[table_string] then\n            occurrences[table_string] = occurrences[table_string] + 1\n        else\n            occurrences[table_string] = 1\n        end\n    end\n    return occurrences\nend",
    "  local counts = {}\n  for _, v in ipairs(test_list) do\n    if counts[v] == nil then\n      counts[v] = 1\n    else\n      counts[v] = counts[v] + 1\n    end\n  end\n  return counts\nend",
    "  local result = {}\n  for _, v in pairs(test_list) do\n    if result[v] then\n      result[v] = result[v] + 1\n    else\n      result[v] = 1\n    end\n  end\n  return result\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, t in ipairs(test_list) do\n        local key = table.concat(t, \",\")\n        occurences[key] = (occurences[key] or 0) + 1\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if occurences[v] then\n      occurences[v] = occurences[v] + 1\n    else\n      occurences[v] = 1\n    end\n  end\n  return occurences\nend",
    "  local occurences = {}\n  for _, test in ipairs(test_list) do\n    if occurences[test] == nil then\n      occurences[test] = 1\n    else\n      occurences[test] = occurences[test] + 1\n    end\n  end\n  return occurences\nend",
    "  local occurences = {}\n  for _, test in ipairs(test_list) do\n    local test_string = table_to_string(test)\n    if occurences[test_string] == nil then\n      occurences[test_string] = 1\n    else\n      occurences[test_string] = occurences[test_string] + 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        if not occurences[test] then\n            occurences[test] = 1\n        else\n            occurences[test] = occurences[test] + 1\n        end\n    end\n    return occurences\nend",
    "\tlocal occurences = {}\n\tfor _, test in ipairs(test_list) do\n\t\tlocal test_str = table_to_string(test)\n\t\tif occurences[test_str] then\n\t\t\toccurences[test_str] = occurences[test_str] + 1\n\t\telse\n\t\t\toccurences[test_str] = 1\n\t\tend\n\tend\n\treturn occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local test_str = table_to_string(test)\n        if occurences[test_str] == nil then\n            occurences[test_str] = 1\n        else\n            occurences[test_str] = occurences[test_str] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local key = table.concat(test, \"\")\n        occurences[key] = (occurences[key] or 0) + 1\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] then\n            occurences[v] = occurences[v] + 1\n        else\n            occurences[v] = 1\n        end\n    end\n    return occurences\nend",
    "    local counts = {}\n    for _, v in ipairs(test_list) do\n        if counts[v] == nil then\n            counts[v] = 1\n        else\n            counts[v] = counts[v] + 1\n        end\n    end\n    return counts\nend",
    "    local result = {}\n    for _, v in ipairs(test_list) do\n        if result[v] == nil then\n            result[v] = 1\n        else\n            result[v] = result[v] + 1\n        end\n    end\n    return result\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] then\n            occurences[v] = occurences[v] + 1\n        else\n            occurences[v] = 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] then\n            occurences[v] = occurences[v] + 1\n        else\n            occurences[v] = 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local key = table.concat(test, \",\")\n        occurences[key] = (occurences[key] or 0) + 1\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        local key = table.concat(v, \"\")\n        if occurences[key] then\n            occurences[key] = occurences[key] + 1\n        else\n            occurences[key] = 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, test in ipairs(test_list) do\n    local test_string = table.concat(test, \"\")\n    if occurences[test_string] == nil then\n      occurences[test_string] = 1\n    else\n      occurences[test_string] = occurences[test_string] + 1\n    end\n  end\n  return occurences\nend",
    "  local occurences = {}\n  for i, v in ipairs(test_list) do\n    local key = table.concat(v, \"\")\n    if occurences[key] == nil then\n      occurences[key] = 1\n    else\n      occurences[key] = occurences[key] + 1\n    end\n  end\n  return occurences\nend",
    "  local occurences = {}\n  for _, t in ipairs(test_list) do\n    local key = table_to_string(t)\n    if occurences[key] == nil then\n      occurences[key] = 1\n    else\n      occurences[key] = occurences[key] + 1\n    end\n  end\n  return occurences\nend",
    "  local occurences = {}\n  for i = 1, #test_list do\n    local test = test_list[i]\n    local found = false\n    for j = 1, #occurences do\n      if occurences[j][1] == test then\n        occurences[j][2] = occurences[j][2] + 1\n        found = true\n        break\n      end\n    end\n    if not found then\n      occurences[#occurences + 1] = {test, 1}\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local test_string = table.concat(test, \"\")\n        if occurences[test_string] then\n            occurences[test_string] = occurences[test_string] + 1\n        else\n            occurences[test_string] = 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local key = table.concat(test, \",\")\n        occurences[key] = (occurences[key] or 0) + 1\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for i, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local test_str = table_to_string(test)\n        if occurences[test_str] then\n            occurences[test_str] = occurences[test_str] + 1\n        else\n            occurences[test_str] = 1\n        end\n    end\n    return occurences\nend",
    "    local counts = {}\n    for _, t in ipairs(test_list) do\n        local key = table.concat(t, \",\")\n        if counts[key] then\n            counts[key] = counts[key] + 1\n        else\n            counts[key] = 1\n        end\n    end\n    return counts\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "    local result = {}\n    for _, v in ipairs(test_list) do\n        if result[v] == nil then\n            result[v] = 1\n        else\n            result[v] = result[v] + 1\n        end\n    end\n    return result\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    local key = table.concat(v, \",\")\n    occurences[key] = (occurences[key] or 0) + 1\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local test_string = table.concat(test, \"\")\n        if occurences[test_string] then\n            occurences[test_string] = occurences[test_string] + 1\n        else\n            occurences[test_string] = 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] then\n            occurences[v] = occurences[v] + 1\n        else\n            occurences[v] = 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        if occurences[test] == nil then\n            occurences[test] = 1\n        else\n            occurences[test] = occurences[test] + 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, test in ipairs(test_list) do\n    local key = table.concat(test, \"\")\n    occurences[key] = (occurences[key] or 0) + 1\n  end\n  return occurences\nend",
    "  local counts = {}\n  for _, v in ipairs(test_list) do\n    if counts[v] then\n      counts[v] = counts[v] + 1\n    else\n      counts[v] = 1\n    end\n  end\n  return counts\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        if not occurences[test] then\n            occurences[test] = 1\n        else\n            occurences[test] = occurences[test] + 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if occurences[v] == nil then\n      occurences[v] = 1\n    else\n      occurences[v] = occurences[v] + 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for i = 1, #test_list do\n        local test_table = test_list[i]\n        local test_table_string = table_to_string(test_table)\n        if occurences[test_table_string] == nil then\n            occurences[test_table_string] = 1\n        else\n            occurences[test_table_string] = occurences[test_table_string] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if occurences[test] == nil then\n            occurences[test] = 1\n        else\n            occurences[test] = occurences[test] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    local key = table.concat(v, \",\")\n    occurences[key] = (occurences[key] or 0) + 1\n  end\n  return occurences\nend",
    "  local occurences = {}\n  for _,v in pairs(test_list) do\n    if occurences[v] then\n      occurences[v] = occurences[v] + 1\n    else\n      occurences[v] = 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        local key = table.concat(v, \"\")\n        occurences[key] = (occurences[key] or 0) + 1\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, item in ipairs(test_list) do\n    if occurences[item] == nil then\n      occurences[item] = 1\n    else\n      occurences[item] = occurences[item] + 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] then\n            occurences[v] = occurences[v] + 1\n        else\n            occurences[v] = 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, t in ipairs(test_list) do\n        local key = table.concat(t, \"\")\n        occurences[key] = (occurences[key] or 0) + 1\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, test_table in ipairs(test_list) do\n        local key = table.concat(test_table, \",\")\n        if occurences[key] == nil then\n            occurences[key] = 1\n        else\n            occurences[key] = occurences[key] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local key = table.concat(test, \"\")\n        occurences[key] = (occurences[key] or 0) + 1\n    end\n    return occurences\nend",
    "\tlocal occurences = {}\n\tfor _, v in ipairs(test_list) do\n\t\tif occurences[v] then\n\t\t\toccurences[v] = occurences[v] + 1\n\t\telse\n\t\t\toccurences[v] = 1\n\t\tend\n\tend\n\treturn occurences\nend",
    "\tlocal occurences = {}\n\tfor _, v in ipairs(test_list) do\n\t\tif occurences[v] then\n\t\t\toccurences[v] = occurences[v] + 1\n\t\telse\n\t\t\toccurences[v] = 1\n\t\tend\n\tend\n\treturn occurences\nend",
    "  local occurences = {}\n  for _, test in ipairs(test_list) do\n    local test_str = table.concat(test)\n    occurences[test_str] = (occurences[test_str] or 0) + 1\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        if occurences[test] then\n            occurences[test] = occurences[test] + 1\n        else\n            occurences[test] = 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, test in ipairs(test_list) do\n    local test_string = table.concat(test, \"\")\n    occurences[test_string] = (occurences[test_string] or 0) + 1\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        local key = table.concat(v, \"\")\n        occurences[key] = (occurences[key] or 0) + 1\n    end\n    return occurences\nend",
    "  local counts = {}\n  for _, t in ipairs(test_list) do\n    local key = table.concat(t, \",\")\n    counts[key] = (counts[key] or 0) + 1\n  end\n  return counts\nend",
    "    local occurences = {}\n    for i,v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for i, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local key = table.concat(test, \",\")\n        if occurences[key] == nil then\n            occurences[key] = 1\n        else\n            occurences[key] = occurences[key] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for i,v in ipairs(test_list) do\n        if occurences[v] then\n            occurences[v] = occurences[v] + 1\n        else\n            occurences[v] = 1\n        end\n    end\n    return occurences\nend",
    "    local result = {}\n    for _, v in ipairs(test_list) do\n        if result[v] == nil then\n            result[v] = 1\n        else\n            result[v] = result[v] + 1\n        end\n    end\n    return result\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "\tlocal occurences = {}\n\tfor _, v in ipairs(test_list) do\n\t\tif occurences[v] then\n\t\t\toccurences[v] = occurences[v] + 1\n\t\telse\n\t\t\toccurences[v] = 1\n\t\tend\n\tend\n\treturn occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] then\n            occurences[v] = occurences[v] + 1\n        else\n            occurences[v] = 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for i = 1, #test_list do\n        local current_table = test_list[i]\n        local current_table_string = table_to_string(current_table)\n        if occurences[current_table_string] == nil then\n            occurences[current_table_string] = 1\n        else\n            occurences[current_table_string] = occurences[current_table_string] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if not occurences[v] then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if occurences[v] == nil then\n      occurences[v] = 1\n    else\n      occurences[v] = occurences[v] + 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    local key = table.concat(v, \",\")\n    if occurences[key] then\n      occurences[key] = occurences[key] + 1\n    else\n      occurences[key] = 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for i = 1, #test_list do\n        local test_table = test_list[i]\n        local test_table_string = table_to_string(test_table)\n        if occurences[test_table_string] == nil then\n            occurences[test_table_string] = 1\n        else\n            occurences[test_table_string] = occurences[test_table_string] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if not occurences[v] then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] then\n            occurences[v] = occurences[v] + 1\n        else\n            occurences[v] = 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, test in ipairs(test_list) do\n    local test_string = table_to_string(test)\n    if occurences[test_string] == nil then\n      occurences[test_string] = 1\n    else\n      occurences[test_string] = occurences[test_string] + 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, t in ipairs(test_list) do\n        if occurences[t] then\n            occurences[t] = occurences[t] + 1\n        else\n            occurences[t] = 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _,v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if occurences[v] == nil then\n      occurences[v] = 1\n    else\n      occurences[v] = occurences[v] + 1\n    end\n  end\n  return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if not occurences[v] then\n      occurences[v] = 1\n    else\n      occurences[v] = occurences[v] + 1\n    end\n  end\n  return occurences\nend",
    "  local occurences = {}\n  for _, test in ipairs(test_list) do\n    local key = table.concat(test, \",\")\n    if occurences[key] then\n      occurences[key] = occurences[key] + 1\n    else\n      occurences[key] = 1\n    end\n  end\n  return occurences\nend",
    "  local occurences = {}\n  for i,v in ipairs(test_list) do\n    if occurences[v] == nil then\n      occurences[v] = 1\n    else\n      occurences[v] = occurences[v] + 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if not occurences[v] then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, table in ipairs(test_list) do\n        local key = table_to_string(table)\n        if occurences[key] then\n            occurences[key] = occurences[key] + 1\n        else\n            occurences[key] = 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for i,v in ipairs(test_list) do\n    if occurences[v] == nil then\n      occurences[v] = 1\n    else\n      occurences[v] = occurences[v] + 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, test in ipairs(test_list) do\n    local key = table.concat(test, \"\")\n    if occurences[key] then\n      occurences[key] = occurences[key] + 1\n    else\n      occurences[key] = 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local test_key = table_to_string(test)\n        if occurences[test_key] then\n            occurences[test_key] = occurences[test_key] + 1\n        else\n            occurences[test_key] = 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local test_string = table.concat(test, \"\")\n        if occurences[test_string] then\n            occurences[test_string] = occurences[test_string] + 1\n        else\n            occurences[test_string] = 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        local key = table.concat(v, \",\")\n        occurences[key] = (occurences[key] or 0) + 1\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for i = 1, #test_list do\n        local current_table = test_list[i]\n        local current_table_string = table_to_string(current_table)\n        if occurences[current_table_string] == nil then\n            occurences[current_table_string] = 1\n        else\n            occurences[current_table_string] = occurences[current_table_string] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in pairs(test_list) do\n        local key = table.concat(v, \"\")\n        if occurences[key] then\n            occurences[key] = occurences[key] + 1\n        else\n            occurences[key] = 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for i,v in ipairs(test_list) do\n    if occurences[v] == nil then\n      occurences[v] = 1\n    else\n      occurences[v] = occurences[v] + 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _,v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local test_key = table.concat(test, \",\")\n        occurences[test_key] = (occurences[test_key] or 0) + 1\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if occurences[v] == nil then\n      occurences[v] = 1\n    else\n      occurences[v] = occurences[v] + 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, tbl in ipairs(test_list) do\n        if occurences[tbl] == nil then\n            occurences[tbl] = 1\n        else\n            occurences[tbl] = occurences[tbl] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] then\n            occurences[v] = occurences[v] + 1\n        else\n            occurences[v] = 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, test in ipairs(test_list) do\n    local key = table.concat(test, \",\")\n    occurences[key] = (occurences[key] or 0) + 1\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, t in ipairs(test_list) do\n        local key = table.concat(t, \"\")\n        occurences[key] = (occurences[key] or 0) + 1\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local test_string = table_to_string(test)\n        if occurences[test_string] then\n            occurences[test_string] = occurences[test_string] + 1\n        else\n            occurences[test_string] = 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, test in ipairs(test_list) do\n    local test_str = table_to_string(test)\n    occurences[test_str] = (occurences[test_str] or 0) + 1\n  end\n  return occurences\nend",
    "    local result = {}\n    for _, v in ipairs(test_list) do\n        if result[v] == nil then\n            result[v] = 1\n        else\n            result[v] = result[v] + 1\n        end\n    end\n    return result\nend",
    "    local occurences = {}\n    for i = 1, #test_list do\n        local test_table = test_list[i]\n        if not occurences[test_table] then\n            occurences[test_table] = 1\n        else\n            occurences[test_table] = occurences[test_table] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if not occurences[test] then\n            occurences[test] = 1\n        else\n            occurences[test] = occurences[test] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local test_str = table_to_string(test)\n        if occurences[test_str] then\n            occurences[test_str] = occurences[test_str] + 1\n        else\n            occurences[test_str] = 1\n        end\n    end\n    return occurences\nend",
    "    local counts = {}\n    for _, v in ipairs(test_list) do\n        local key = table.concat(v, \",\")\n        counts[key] = (counts[key] or 0) + 1\n    end\n    return counts\nend",
    "  local occurences = {}\n  for _, v in pairs(test_list) do\n    local key = table.concat(v, \"\")\n    if occurences[key] then\n      occurences[key] = occurences[key] + 1\n    else\n      occurences[key] = 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] then\n            occurences[v] = occurences[v] + 1\n        else\n            occurences[v] = 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if occurences[v] then\n      occurences[v] = occurences[v] + 1\n    else\n      occurences[v] = 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        local key = table.concat(v, \"\")\n        if occurences[key] == nil then\n            occurences[key] = 1\n        else\n            occurences[key] = occurences[key] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local key = table.concat(test, \",\")\n        occurences[key] = (occurences[key] or 0) + 1\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, test in ipairs(test_list) do\n    local key = table.concat(test, \",\")\n    occurences[key] = (occurences[key] or 0) + 1\n  end\n  return occurences\nend",
    "\tlocal occurences = {}\n\tfor i,v in ipairs(test_list) do\n\t\tif occurences[v] == nil then\n\t\t\toccurences[v] = 1\n\t\telse\n\t\t\toccurences[v] = occurences[v] + 1\n\t\tend\n\tend\n\treturn occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        local found = false\n        for _, v2 in ipairs(occurences) do\n            if v == v2[1] then\n                v2[2] = v2[2] + 1\n                found = true\n                break\n            end\n        end\n        if not found then\n            table.insert(occurences, {v, 1})\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, item in ipairs(test_list) do\n    if occurences[item] == nil then\n      occurences[item] = 1\n    else\n      occurences[item] = occurences[item] + 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for i = 1, #test_list do\n        local test = test_list[i]\n        local count = occurences[test] or 0\n        occurences[test] = count + 1\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        local key = tostring(v)\n        if occurences[key] == nil then\n            occurences[key] = 1\n        else\n            occurences[key] = occurences[key] + 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if occurences[v] == nil then\n      occurences[v] = 1\n    else\n      occurences[v] = occurences[v] + 1\n    end\n  end\n  return occurences\nend",
    "  local occurences = {}\n  for _, t in ipairs(test_list) do\n    local key = table_to_string(t)\n    if occurences[key] then\n      occurences[key] = occurences[key] + 1\n    else\n      occurences[key] = 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for i = 1, #test_list do\n        local table = test_list[i]\n        local table_string = table_to_string(table)\n        if occurences[table_string] == nil then\n            occurences[table_string] = 1\n        else\n            occurences[table_string] = occurences[table_string] + 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if occurences[v] == nil then\n      occurences[v] = 1\n    else\n      occurences[v] = occurences[v] + 1\n    end\n  end\n  return occurences\nend",
    "  local result = {}\n  for _,v in ipairs(test_list) do\n    if result[v] == nil then\n      result[v] = 1\n    else\n      result[v] = result[v] + 1\n    end\n  end\n  return result\nend",
    "    local occurences = {}\n    for i, v in ipairs(test_list) do\n        if occurences[v] then\n            occurences[v] = occurences[v] + 1\n        else\n            occurences[v] = 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] then\n            occurences[v] = occurences[v] + 1\n        else\n            occurences[v] = 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for i, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, test in ipairs(test_list) do\n    local key = table.concat(test, \",\")\n    occurences[key] = (occurences[key] or 0) + 1\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local test_str = table_to_string(test)\n        occurences[test_str] = (occurences[test_str] or 0) + 1\n    end\n    return occurences\nend",
    "\tlocal occurences = {}\n\tfor _, v in ipairs(test_list) do\n\t\tlocal key = table.concat(v, \",\")\n\t\toccurences[key] = (occurences[key] or 0) + 1\n\tend\n\treturn occurences\nend",
    "    local occurences = {}\n    for _, t in ipairs(test_list) do\n        local key = table.concat(t, \",\")\n        occurences[key] = (occurences[key] or 0) + 1\n    end\n    return occurences\nend",
    "    local counts = {}\n    for _, v in ipairs(test_list) do\n        if counts[v] == nil then\n            counts[v] = 1\n        else\n            counts[v] = counts[v] + 1\n        end\n    end\n    return counts\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if not occurences[v] then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "    local counts = {}\n    for _, v in ipairs(test_list) do\n        if counts[v] then\n            counts[v] = counts[v] + 1\n        else\n            counts[v] = 1\n        end\n    end\n    return counts\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if not occurences[v] then\n      occurences[v] = 1\n    else\n      occurences[v] = occurences[v] + 1\n    end\n  end\n  return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if occurences[v] == nil then\n      occurences[v] = 1\n    else\n      occurences[v] = occurences[v] + 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for i,v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] then\n            occurences[v] = occurences[v] + 1\n        else\n            occurences[v] = 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        local key = table.concat(v, \",\")\n        if occurences[key] == nil then\n            occurences[key] = 1\n        else\n            occurences[key] = occurences[key] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] then\n            occurences[v] = occurences[v] + 1\n        else\n            occurences[v] = 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    local key = table.concat(v, \"\")\n    occurences[key] = (occurences[key] or 0) + 1\n  end\n  return occurences\nend",
    "\tlocal occurences = {}\n\tfor _, v in ipairs(test_list) do\n\t\tif occurences[v] == nil then\n\t\t\toccurences[v] = 1\n\t\telse\n\t\t\toccurences[v] = occurences[v] + 1\n\t\tend\n\tend\n\treturn occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if occurences[v] == nil then\n      occurences[v] = 1\n    else\n      occurences[v] = occurences[v] + 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local key = table_to_string(test)\n        if occurences[key] == nil then\n            occurences[key] = 1\n        else\n            occurences[key] = occurences[key] + 1\n        end\n    end\n    return occurences\nend",
    "    local counts = {}\n    for _, t in ipairs(test_list) do\n        local key = table.concat(t, \",\")\n        counts[key] = (counts[key] or 0) + 1\n    end\n    return counts\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if not occurences[v] then\n      occurences[v] = 1\n    else\n      occurences[v] = occurences[v] + 1\n    end\n  end\n  return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if occurences[v] == nil then\n      occurences[v] = 1\n    else\n      occurences[v] = occurences[v] + 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local key = table_to_string(test)\n        occurences[key] = (occurences[key] or 0) + 1\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, test in ipairs(test_list) do\n    local key = table.concat(test, \",\")\n    occurences[key] = (occurences[key] or 0) + 1\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        local key = table.concat(v, \",\")\n        occurences[key] = (occurences[key] or 0) + 1\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local test_str = table_to_string(test)\n        if occurences[test_str] then\n            occurences[test_str] = occurences[test_str] + 1\n        else\n            occurences[test_str] = 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, test in ipairs(test_list) do\n    local key = table.concat(test, ',')\n    occurences[key] = (occurences[key] or 0) + 1\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] then\n            occurences[v] = occurences[v] + 1\n        else\n            occurences[v] = 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in pairs(test_list) do\n        if occurences[v] then\n            occurences[v] = occurences[v] + 1\n        else\n            occurences[v] = 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    local key = table.concat(v, \"\")\n    if occurences[key] == nil then\n      occurences[key] = 1\n    else\n      occurences[key] = occurences[key] + 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend"
  ]
}