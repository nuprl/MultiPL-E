{
  "name": "mbpp_237_check_occurences",
  "language": "lua",
  "prompt": "-- Write a function that takes in a table of tables and returns a table mapping each unique table to the number of times it occurs in the table.\nlocal function check_occurences(test_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_occurences\n    lu.assertEquals(candidate({{3, 1}, {1, 3}, {2, 5}, {5, 2}, {6, 3}}), {[{1, 3}] = 2, [{2, 5}] = 2, [{3, 6}] = 1})\n    lu.assertEquals(candidate({{4, 2}, {2, 4}, {3, 6}, {6, 3}, {7, 4}}), {[{2, 4}] = 2, [{3, 6}] = 2, [{4, 7}] = 1})\n    lu.assertEquals(candidate({{13, 2}, {11, 23}, {12, 25}, {25, 12}, {16, 23}}), {[{2, 13}] = 1, [{11, 23}] = 1, [{12, 25}] = 2, [{16, 23}] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for i, v in ipairs(test_list) do\n        local key = table.concat(v, \"\")\n        occurences[key] = (occurences[key] or 0) + 1\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if occurences[v] then\n      occurences[v] = occurences[v] + 1\n    else\n      occurences[v] = 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        local key = table.concat(v, \"\")\n        occurences[key] = (occurences[key] or 0) + 1\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for i,v in ipairs(test_list) do\n        local key = table.concat(v, \"\")\n        if occurences[key] == nil then\n            occurences[key] = 1\n        else\n            occurences[key] = occurences[key] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local test_string = table_to_string(test)\n        if occurences[test_string] == nil then\n            occurences[test_string] = 0\n        end\n        occurences[test_string] = occurences[test_string] + 1\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if occurences[v] then\n      occurences[v] = occurences[v] + 1\n    else\n      occurences[v] = 1\n    end\n  end\n  return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if not occurences[v] then\n      occurences[v] = 1\n    else\n      occurences[v] = occurences[v] + 1\n    end\n  end\n  return occurences\nend",
    "  local occurences = {}\n  for _, test in ipairs(test_list) do\n    local test_str = table.concat(test, \"\")\n    if occurences[test_str] == nil then\n      occurences[test_str] = 1\n    else\n      occurences[test_str] = occurences[test_str] + 1\n    end\n  end\n  return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if occurences[v] then\n      occurences[v] = occurences[v] + 1\n    else\n      occurences[v] = 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        if occurences[test] then\n            occurences[test] = occurences[test] + 1\n        else\n            occurences[test] = 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, v in ipairs(test_list) do\n    if occurences[v] == nil then\n      occurences[v] = 1\n    else\n      occurences[v] = occurences[v] + 1\n    end\n  end\n  return occurences\nend",
    "  local occurences = {}\n  for i = 1, #test_list do\n    local test_table = test_list[i]\n    local test_table_string = table_to_string(test_table)\n    if occurences[test_table_string] then\n      occurences[test_table_string] = occurences[test_table_string] + 1\n    else\n      occurences[test_table_string] = 1\n    end\n  end\n  return occurences\nend",
    "    local occurences = {}\n    for _, v in pairs(test_list) do\n        if occurences[v] then\n            occurences[v] = occurences[v] + 1\n        else\n            occurences[v] = 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in ipairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        local key = table.concat(test, \"\")\n        occurences[key] = (occurences[key] or 0) + 1\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, test in ipairs(test_list) do\n        if not occurences[test] then\n            occurences[test] = 1\n        else\n            occurences[test] = occurences[test] + 1\n        end\n    end\n    return occurences\nend",
    "    local occurences = {}\n    for _, v in pairs(test_list) do\n        if occurences[v] == nil then\n            occurences[v] = 1\n        else\n            occurences[v] = occurences[v] + 1\n        end\n    end\n    return occurences\nend",
    "  local occurences = {}\n  for _, test in ipairs(test_list) do\n    if occurences[test] == nil then\n      occurences[test] = 1\n    else\n      occurences[test] = occurences[test] + 1\n    end\n  end\n  return occurences\nend",
    "    local result = {}\n    for _, v in ipairs(test_list) do\n        if result[v] == nil then\n            result[v] = 1\n        else\n            result[v] = result[v] + 1\n        end\n    end\n    return result\nend"
  ]
}