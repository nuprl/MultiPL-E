{
  "name": "mbpp_130_max_occurrences",
  "language": "lua",
  "prompt": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local max_num, max_count = nil, 0\n  for _, num in ipairs(nums) do\n    local count = 0\n    for _, num2 in ipairs(nums) do\n      if num == num2 then\n        count = count + 1\n      end\n    end\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend",
    "    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend",
    "  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend",
    "    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend",
    "  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend",
    "    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end",
    "  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_occurrence = nil, 0\n  for num, occurrence in pairs(occurrences) do\n    if occurrence > max_occurrence then\n      max_num, max_occurrence = num, occurrence\n    end\n  end\n  return max_num, max_occurrence\nend",
    "  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end",
    "  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end",
    "  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend",
    "  local counts = {}\n  local max_count = 0\n  local max_item = nil\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n    if counts[num] > max_count then\n      max_count = counts[num]\n      max_item = num\n    end\n  end\n  return max_item, max_count\nend",
    "  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(occurrences) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num\nend",
    "    local occurrences = {}\n    for _, num in ipairs(nums) do\n        occurrences[num] = (occurrences[num] or 0) + 1\n    end\n    local max_num, max_occurrence = nil, 0\n    for num, occurrence in pairs(occurrences) do\n        if occurrence > max_occurrence then\n            max_num, max_occurrence = num, occurrence\n        end\n    end\n    return max_num, max_occurrence\nend",
    "    local max = 0\n    local max_num = nil\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n        if counts[num] > max then\n            max = counts[num]\n            max_num = num\n        end\n    end\n    return max_num, max\nend",
    "  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend",
    "  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend",
    "  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end",
    "    local max = 0\n    local max_num = nil\n    for _, num in ipairs(nums) do\n        if nums[num] > max then\n            max = nums[num]\n            max_num = num\n        end\n    end\n    return max_num\nend",
    "    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend",
    "  local count = {}\n  for _, num in ipairs(nums) do\n    count[num] = (count[num] or 0) + 1\n  end\n  local max = 0\n  local max_num = nil\n  for num, num_count in pairs(count) do\n    if num_count > max then\n      max = num_count\n      max_num = num\n    end\n  end\n  return max_num\nend"
  ]
}