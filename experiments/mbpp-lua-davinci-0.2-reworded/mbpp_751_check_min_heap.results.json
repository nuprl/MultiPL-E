{
  "name": "mbpp_751_check_min_heap",
  "language": "lua",
  "prompt": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2 * i <= n and arr[i] > arr[2 * i] then\n      return false\n    end\n    if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tfor i = 1, #arr do\n\t\tlocal left = 2*i\n\t\tlocal right = 2*i + 1\n\t\tif left <= #arr and arr[i] > arr[left] then\n\t\t\treturn false\n\t\tend\n\t\tif right <= #arr and arr[i] > arr[right] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  for i = 1, #arr do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= #arr and arr[left] < arr[i] then\n      return false\n    end\n    if right <= #arr and arr[right] < arr[i] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if arr[i] > arr[2 * i] or arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvaqv42u.lua:5: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbvaqv42u.lua:5: in function 'candidate'\n\t/tmp/tmpbvaqv42u.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tfor i = 1, #arr do\n\t\tif arr[i] > arr[i * 2] or arr[i] > arr[i * 2 + 1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp16ax8cdg.lua:4: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp16ax8cdg.lua:4: in function 'candidate'\n\t/tmp/tmp16ax8cdg.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2 * i <= n and arr[i] > arr[2 * i] then\n      return false\n    end\n    if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tfor i = 1, #arr do\n\t\tif arr[i] > arr[i*2] or arr[i] > arr[i*2+1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaobujthq.lua:4: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpaobujthq.lua:4: in function 'candidate'\n\t/tmp/tmpaobujthq.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2*i <= n and arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i+1 <= n and arr[i] > arr[2*i+1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    for i = 1, #arr do\n        if arr[i] > arr[i//2] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0m9h8dng.lua:4: unexpected symbol near '/'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i + 1 <= n and arr[i] > arr[2*i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppi6x1916.lua:5: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmppi6x1916.lua:5: in function 'candidate'\n\t/tmp/tmppi6x1916.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj95t4d6_.lua:5: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpj95t4d6_.lua:5: in function 'candidate'\n\t/tmp/tmpj95t4d6_.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tfor i = 1, #arr do\n\t\tlocal left = 2 * i\n\t\tlocal right = 2 * i + 1\n\t\tif left <= #arr and arr[i] > arr[left] then\n\t\t\treturn false\n\t\tend\n\t\tif right <= #arr and arr[i] > arr[right] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local len = #arr\n    for i = 1, len do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= len and arr[i] > arr[left] then\n            return false\n        end\n        if right <= len and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2*i <= n and arr[i] > arr[2*i] then\n      return false\n    end\n    if 2*i+1 <= n and arr[i] > arr[2*i+1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tlocal n = #arr\n\tfor i = 1, n do\n\t\tif 2 * i <= n and arr[i] > arr[2 * i] then\n\t\t\treturn false\n\t\tend\n\t\tif 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    for i = 1, #arr do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= #arr and arr[i] > arr[left] then\n            return false\n        end\n        if right <= #arr and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2 * i <= n and arr[i] > arr[2 * i] then\n      return false\n    end\n    if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2*i <= n and arr[i] > arr[2*i] then\n      return false\n    end\n    if 2*i + 1 <= n and arr[i] > arr[2*i + 1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tlocal n = #arr\n\tfor i = 1, n do\n\t\tlocal left = 2*i\n\t\tlocal right = 2*i + 1\n\t\tif left <= n and arr[i] > arr[left] then\n\t\t\treturn false\n\t\tend\n\t\tif right <= n and arr[i] > arr[right] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if (2*i <= n and arr[i] > arr[2*i]) or (2*i+1 <= n and arr[i] > arr[2*i+1]) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2*i <= n and arr[i] > arr[2*i] then\n      return false\n    end\n    if 2*i+1 <= n and arr[i] > arr[2*i+1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tfor i = 1, #arr do\n\t\tlocal left = 2 * i\n\t\tlocal right = 2 * i + 1\n\t\tif left <= #arr and arr[i] > arr[left] then\n\t\t\treturn false\n\t\tend\n\t\tif right <= #arr and arr[i] > arr[right] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i=1,n do\n        if 2*i <= n and arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i+1 <= n and arr[i] > arr[2*i+1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2 * i <= n and arr[i] > arr[2 * i] then\n      return false\n    end\n    if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= n and arr[i] > arr[left] then\n            return false\n        end\n        if right <= n and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    for i = 1, #arr do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= #arr and arr[i] > arr[left] then\n            return false\n        end\n        if right <= #arr and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    for i = 1, #arr do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= #arr and arr[i] > arr[left] then\n            return false\n        end\n        if right <= #arr and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= n and arr[i] > arr[left] then\n            return false\n        end\n        if right <= n and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i=1,n do\n    if 2*i <= n and arr[i] > arr[2*i] then\n      return false\n    end\n    if 2*i+1 <= n and arr[i] > arr[2*i+1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2*i <= n and arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i+1 <= n and arr[i] > arr[2*i+1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tfor i = 1, #arr do\n\t\tif arr[i] > arr[2*i] or arr[i] > arr[2*i+1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9fk6pfd8.lua:4: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp9fk6pfd8.lua:4: in local 'candidate'\n\t/tmp/tmp9fk6pfd8.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= n and arr[i] > arr[left] then\n            return false\n        end\n        if right <= n and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  for i = 1, #arr do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= #arr and arr[i] > arr[left] then\n      return false\n    end\n    if right <= #arr and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if arr[i] < arr[i // 2] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ykno18z.lua:5: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp1ykno18z.lua:5: in local 'candidate'\n\t/tmp/tmp1ykno18z.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2 * i <= n and arr[i] > arr[2 * i] then\n      return false\n    end\n    if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2*i <= n and arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i + 1 <= n and arr[i] > arr[2*i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= n and arr[i] > arr[left] then\n            return false\n        end\n        if right <= n and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2*i <= n and arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i+1 <= n and arr[i] > arr[2*i+1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    for i = 1, #arr do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= #arr and arr[i] > arr[left] then\n            return false\n        end\n        if right <= #arr and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= n and arr[i] > arr[left] then\n            return false\n        end\n        if right <= n and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local len = #arr\n  for i = 1, len do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= len and arr[i] > arr[left] then\n      return false\n    end\n    if right <= len and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2*i <= n and arr[i] > arr[2*i] then\n      return false\n    end\n    if 2*i+1 <= n and arr[i] > arr[2*i+1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2 * i <= n and arr[i] > arr[2 * i] then\n      return false\n    end\n    if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    for i = 1, #arr do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= #arr and arr[i] > arr[left] then\n            return false\n        end\n        if right <= #arr and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= n and arr[i] > arr[left] then\n            return false\n        end\n        if right <= n and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2 * i <= n and arr[i] > arr[2 * i] then\n      return false\n    end\n    if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local function is_leaf(i)\n        return i > math.floor(#arr / 2)\n    end\n    local function left(i)\n        return 2 * i\n    end\n    local function right(i)\n        return 2 * i + 1\n    end\n    local function parent(i)\n        return math.floor(i / 2)\n    end\n    for i = 1, #arr do\n        if not is_leaf(i) then\n            if arr[i] > arr[left(i)] or arr[i] > arr[right(i)] then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptkbhfl19.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmptkbhfl19.lua:17: in local 'candidate'\n\t/tmp/tmptkbhfl19.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= n and arr[i] > arr[left] then\n            return false\n        end\n        if right <= n and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2*i <= n and arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i+1 <= n and arr[i] > arr[2*i+1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i + 1 <= n and arr[i] > arr[2*i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppi6x1916.lua:5: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmppi6x1916.lua:5: in function 'candidate'\n\t/tmp/tmppi6x1916.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= n and arr[i] > arr[left] then\n            return false\n        end\n        if right <= n and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local len = #arr\n    for i = 1, len do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= len and arr[i] > arr[left] then\n            return false\n        end\n        if right <= len and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2*i\n    local right = 2*i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2*i <= n and arr[i] > arr[2*i] then\n      return false\n    end\n    if 2*i+1 <= n and arr[i] > arr[2*i+1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tfor i = 1, #arr do\n\t\tlocal left = 2 * i\n\t\tlocal right = 2 * i + 1\n\t\tif left <= #arr and arr[i] > arr[left] then\n\t\t\treturn false\n\t\tend\n\t\tif right <= #arr and arr[i] > arr[right] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  for i = 1, #arr do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= #arr and arr[i] > arr[left] then\n      return false\n    end\n    if right <= #arr and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj95t4d6_.lua:5: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpj95t4d6_.lua:5: in function 'candidate'\n\t/tmp/tmpj95t4d6_.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    for i = 1, #arr do\n        if arr[i] > arr[i * 2] or arr[i] > arr[i * 2 + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmvcqm13s.lua:4: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpmvcqm13s.lua:4: in local 'candidate'\n\t/tmp/tmpmvcqm13s.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i=1,n do\n        if 2*i <= n and arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i+1 <= n and arr[i] > arr[2*i+1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2 * i <= n and arr[i] > arr[2 * i] then\n      return false\n    end\n    if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2 * i <= n and arr[i] > arr[2 * i] then\n      return false\n    end\n    if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2*i <= n and arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i+1 <= n and arr[i] > arr[2*i+1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local len = #arr\n  for i = 1, len do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= len and arr[i] > arr[left] then\n      return false\n    end\n    if right <= len and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        local left = 2*i\n        local right = 2*i + 1\n        if left <= n and arr[i] > arr[left] then\n            return false\n        end\n        if right <= n and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tlocal n = #arr\n\tfor i = 1, n do\n\t\tif arr[i] > arr[2 * i] or arr[i] > arr[2 * i + 1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi1nf24hs.lua:5: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpi1nf24hs.lua:5: in local 'candidate'\n\t/tmp/tmpi1nf24hs.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2 * i <= n and arr[i] > arr[2 * i] then\n      return false\n    end\n    if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2*i <= n and arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i + 1 <= n and arr[i] > arr[2*i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    for i = 1, #arr do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= #arr and arr[i] > arr[left] then\n            return false\n        end\n        if right <= #arr and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2*i <= n and arr[i] > arr[2*i] then\n      return false\n    end\n    if 2*i + 1 <= n and arr[i] > arr[2*i + 1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i + 1 <= n and arr[i] > arr[2*i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppi6x1916.lua:5: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmppi6x1916.lua:5: in function 'candidate'\n\t/tmp/tmppi6x1916.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  for i = 1, #arr do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= #arr and arr[i] > arr[left] then\n      return false\n    end\n    if right <= #arr and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2*i <= n and arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i + 1 <= n and arr[i] > arr[2*i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tlocal function check_min_heap_util(arr, i, n)\n\t\tlocal left = 2*i\n\t\tlocal right = 2*i + 1\n\t\tif left <= n and arr[left] < arr[i] then\n\t\t\treturn false\n\t\tend\n\t\tif right <= n and arr[right] < arr[i] then\n\t\t\treturn false\n\t\tend\n\t\treturn check_min_heap_util(arr, left, n) and check_min_heap_util(arr, right, n)\n\tend\n\treturn check_min_heap_util(arr, 1, #arr)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx26d0fxp.lua:6: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpx26d0fxp.lua:6: in upvalue 'check_min_heap_util'\n\t/tmp/tmpx26d0fxp.lua:12: in upvalue 'check_min_heap_util'\n\t/tmp/tmpx26d0fxp.lua:12: in upvalue 'check_min_heap_util'\n\t/tmp/tmpx26d0fxp.lua:12: in upvalue 'check_min_heap_util'\n\t/tmp/tmpx26d0fxp.lua:12: in upvalue 'check_min_heap_util'\n\t/tmp/tmpx26d0fxp.lua:12: in upvalue 'check_min_heap_util'\n\t/tmp/tmpx26d0fxp.lua:12: in upvalue 'check_min_heap_util'\n\t/tmp/tmpx26d0fxp.lua:12: in upvalue 'check_min_heap_util'\n\t/tmp/tmpx26d0fxp.lua:12: in upvalue 'check_min_heap_util'\n\t...\t(skipping 52 levels)\n\t/tmp/tmpx26d0fxp.lua:12: in function </tmp/tmpx26d0fxp.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpx26d0fxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2*i <= n and arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i + 1 <= n and arr[i] > arr[2*i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= n and arr[i] > arr[left] then\n            return false\n        end\n        if right <= n and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    for i = 1, #arr do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= #arr and arr[i] > arr[left] then\n            return false\n        end\n        if right <= #arr and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    for i = 1, #arr do\n        if arr[i] > arr[i * 2] or arr[i] > arr[i * 2 + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmvcqm13s.lua:4: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpmvcqm13s.lua:4: in local 'candidate'\n\t/tmp/tmpmvcqm13s.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tfor i = 1, #arr do\n\t\tif arr[i] > arr[i*2] or arr[i] > arr[i*2+1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaobujthq.lua:4: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpaobujthq.lua:4: in function 'candidate'\n\t/tmp/tmpaobujthq.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tfor i = 1, #arr do\n\t\tlocal left = 2 * i\n\t\tlocal right = 2 * i + 1\n\t\tif left <= #arr and arr[i] > arr[left] then\n\t\t\treturn false\n\t\tend\n\t\tif right <= #arr and arr[i] > arr[right] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tlocal n = #arr\n\tfor i=1,n do\n\t\tif 2*i <= n and arr[i] > arr[2*i] then\n\t\t\treturn false\n\t\tend\n\t\tif 2*i+1 <= n and arr[i] > arr[2*i+1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= n and arr[i] > arr[left] then\n            return false\n        end\n        if right <= n and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2*i <= n and arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i+1 <= n and arr[i] > arr[2*i+1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= n and arr[i] > arr[left] then\n            return false\n        end\n        if right <= n and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2*i <= n and arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i+1 <= n and arr[i] > arr[2*i+1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tlocal len = #arr\n\tfor i = 1, len do\n\t\tlocal left = 2 * i\n\t\tlocal right = 2 * i + 1\n\t\tif left <= len and arr[i] > arr[left] then\n\t\t\treturn false\n\t\tend\n\t\tif right <= len and arr[i] > arr[right] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    for i = 1, #arr do\n        if arr[i] > arr[i*2] or arr[i] > arr[i*2+1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj3dpy7pc.lua:4: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpj3dpy7pc.lua:4: in local 'candidate'\n\t/tmp/tmpj3dpy7pc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > arr[2*i] or arr[i] > arr[2*i + 1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpisibftlr.lua:5: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpisibftlr.lua:5: in local 'candidate'\n\t/tmp/tmpisibftlr.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local len = #arr\n  for i = 1, len do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= len and arr[i] > arr[left] then\n      return false\n    end\n    if right <= len and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2 * i <= n and arr[i] > arr[2 * i] then\n      return false\n    end\n    if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2*i <= n and arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i + 1 <= n and arr[i] > arr[2*i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  for i = 1, #arr do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= #arr and arr[i] > arr[left] then\n      return false\n    end\n    if right <= #arr and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i=1,n do\n    local left = 2*i\n    local right = 2*i+1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > arr[2 * i] then\n      return false\n    end\n    if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyqsusv3s.lua:5: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpyqsusv3s.lua:5: in local 'candidate'\n\t/tmp/tmpyqsusv3s.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2*i <= n and arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i+1 <= n and arr[i] > arr[2*i+1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local len = #arr\n    for i = 1, len do\n        if arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= len and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpavsr_nzz.lua:5: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpavsr_nzz.lua:5: in local 'candidate'\n\t/tmp/tmpavsr_nzz.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local len = #arr\n  for i = 1, len do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= len and arr[i] > arr[left] then\n      return false\n    end\n    if right <= len and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= n and arr[i] > arr[left] then\n            return false\n        end\n        if right <= n and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  for i = 1, #arr do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= #arr and arr[i] > arr[left] then\n      return false\n    end\n    if right <= #arr and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= n and arr[i] > arr[left] then\n            return false\n        end\n        if right <= n and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tlocal n = #arr\n\tfor i = 1, n do\n\t\tif 2*i <= n and arr[i] > arr[2*i] then\n\t\t\treturn false\n\t\tend\n\t\tif 2*i + 1 <= n and arr[i] > arr[2*i + 1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tlocal n = #arr\n\tfor i = 1, n do\n\t\tlocal left = 2 * i\n\t\tlocal right = 2 * i + 1\n\t\tif left <= n and arr[i] > arr[left] then\n\t\t\treturn false\n\t\tend\n\t\tif right <= n and arr[i] > arr[right] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2 * i <= n and arr[i] > arr[2 * i] then\n      return false\n    end\n    if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2*i <= n and arr[i] > arr[2*i] then\n      return false\n    end\n    if 2*i+1 <= n and arr[i] > arr[2*i+1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2*i <= n and arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i + 1 <= n and arr[i] > arr[2*i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2*i <= n and arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i + 1 <= n and arr[i] > arr[2*i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  for i = 1, #arr do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= #arr and arr[i] > arr[left] then\n      return false\n    end\n    if right <= #arr and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[left] < arr[i] then\n      return false\n    end\n    if right <= n and arr[right] < arr[i] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2*i <= n and arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i + 1 <= n and arr[i] > arr[2*i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= n and arr[i] > arr[left] then\n            return false\n        end\n        if right <= n and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= n and arr[i] > arr[left] then\n            return false\n        end\n        if right <= n and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    for i = 1, #arr do\n        if arr[i] > arr[i * 2] or arr[i] > arr[i * 2 + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmvcqm13s.lua:4: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpmvcqm13s.lua:4: in local 'candidate'\n\t/tmp/tmpmvcqm13s.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2 * i <= n and arr[i] > arr[2 * i] then\n      return false\n    end\n    if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > arr[2 * i] then\n      return false\n    end\n    if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyqsusv3s.lua:5: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpyqsusv3s.lua:5: in local 'candidate'\n\t/tmp/tmpyqsusv3s.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= n and arr[i] > arr[left] then\n            return false\n        end\n        if right <= n and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2*i <= n and arr[i] > arr[2*i] then\n      return false\n    end\n    if 2*i+1 <= n and arr[i] > arr[2*i+1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2*i <= n and arr[i] > arr[2*i] then return false end\n    if 2*i+1 <= n and arr[i] > arr[2*i+1] then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= n and arr[i] > arr[left] then\n            return false\n        end\n        if right <= n and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tfor i = 1, #arr do\n\t\tif arr[i] > arr[i*2] or arr[i] > arr[i*2 + 1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxto93vc_.lua:4: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpxto93vc_.lua:4: in local 'candidate'\n\t/tmp/tmpxto93vc_.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tlocal n = #arr\n\tfor i = 1, n do\n\t\tif 2*i <= n and arr[i] > arr[2*i] then\n\t\t\treturn false\n\t\tend\n\t\tif 2*i+1 <= n and arr[i] > arr[2*i+1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tlocal n = #arr\n\tfor i = 1, n do\n\t\tif 2 * i <= n and arr[i] > arr[2 * i] then\n\t\t\treturn false\n\t\tend\n\t\tif 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tlocal n = #arr\n\tfor i=1,n do\n\t\tif 2*i <= n and arr[i] > arr[2*i] then\n\t\t\treturn false\n\t\tend\n\t\tif 2*i+1 <= n and arr[i] > arr[2*i+1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= n and arr[i] > arr[left] then\n            return false\n        end\n        if right <= n and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i=1,n do\n    local l = 2*i\n    local r = 2*i + 1\n    if l <= n and arr[i] > arr[l] then\n      return false\n    end\n    if r <= n and arr[i] > arr[r] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2 * i <= n and arr[i] > arr[2 * i] then\n      return false\n    end\n    if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  for i = 1, #arr do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= #arr and arr[i] > arr[left] then\n      return false\n    end\n    if right <= #arr and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    for i = 1, #arr do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= #arr and arr[i] > arr[left] then\n            return false\n        end\n        if right <= #arr and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local len = #arr\n    for i = 1, len do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= len and arr[i] > arr[left] then\n            return false\n        end\n        if right <= len and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tfor i = 1, #arr do\n\t\tif arr[i] > arr[i * 2] or arr[i] > arr[i * 2 + 1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp16ax8cdg.lua:4: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp16ax8cdg.lua:4: in function 'candidate'\n\t/tmp/tmp16ax8cdg.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tfor i = 1, #arr do\n\t\tif arr[i] > arr[i * 2] or arr[i] > arr[i * 2 + 1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp16ax8cdg.lua:4: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp16ax8cdg.lua:4: in function 'candidate'\n\t/tmp/tmp16ax8cdg.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tfor i = 1, #arr do\n\t\tif arr[i] > arr[i*2] or arr[i] > arr[i*2+1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaobujthq.lua:4: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpaobujthq.lua:4: in function 'candidate'\n\t/tmp/tmpaobujthq.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    if 2*i <= n and arr[i] > arr[2*i] then\n      return false\n    end\n    if 2*i+1 <= n and arr[i] > arr[2*i+1] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if arr[i] > arr[2 * i] or arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvaqv42u.lua:5: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbvaqv42u.lua:5: in function 'candidate'\n\t/tmp/tmpbvaqv42u.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n\tfor i = 1, #arr do\n\t\tlocal left = 2 * i\n\t\tlocal right = 2 * i + 1\n\t\tif left <= #arr and arr[i] > arr[left] then\n\t\t\treturn false\n\t\tend\n\t\tif right <= #arr and arr[i] > arr[right] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        local left = 2 * i\n        local right = 2 * i + 1\n        if left <= n and arr[i] > arr[left] then\n            return false\n        end\n        if right <= n and arr[i] > arr[right] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local function is_leaf(i)\n    return i > #arr/2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "lua: /tmp/tmp14dn3f71.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    for i = 1, #arr do\n        if arr[i] > arr[2 * i] or arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpksm4n503.lua:4: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpksm4n503.lua:4: in local 'candidate'\n\t/tmp/tmpksm4n503.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    for i = 1, #arr do\n        if arr[i] > arr[i*2] or arr[i] > arr[i*2+1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj3dpy7pc.lua:4: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpj3dpy7pc.lua:4: in local 'candidate'\n\t/tmp/tmpj3dpy7pc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2*i <= n and arr[i] > arr[2*i] then\n            return false\n        end\n        if 2*i + 1 <= n and arr[i] > arr[2*i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    for i = 1, #arr do\n        if arr[i] > arr[i * 2] or arr[i] > arr[i * 2 + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122398,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmvcqm13s.lua:4: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpmvcqm13s.lua:4: in local 'candidate'\n\t/tmp/tmpmvcqm13s.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n  local n = #arr\n  for i = 1, n do\n    local left = 2 * i\n    local right = 2 * i + 1\n    if left <= n and arr[i] > arr[left] then\n      return false\n    end\n    if right <= n and arr[i] > arr[right] then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given table represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-table-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n    local n = #arr\n    for i = 1, n do\n        if 2 * i <= n and arr[i] > arr[2 * i] then\n            return false\n        end\n        if 2 * i + 1 <= n and arr[i] > arr[2 * i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}