{
  "name": "mbpp_627_find_First_Missing",
  "language": "lua",
  "prompt": "-- Write a luathon function to find the smallest missing number from a sorted table of natural numbers.\nlocal function find_First_Missing(array)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_First_Missing\n    lu.assertEquals(candidate({0, 1, 2, 3}), 4)\n    lu.assertEquals(candidate({0, 1, 2, 6, 9}), 3)\n    lu.assertEquals(candidate({2, 3, 5, 8, 9}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local i = 1\n  while array[i] do\n    if array[i] ~= i then\n      return i\n    end\n    i = i + 1\n  end\n  return i\nend",
    "    local i = 1\n    while i <= #array do\n        if array[i] ~= i then\n            return i\n        end\n        i = i + 1\n    end\n    return #array + 1\nend",
    "  local i = 1\n  while array[i] do\n    if array[i] ~= i then\n      return i\n    end\n    i = i + 1\n  end\n  return i\nend",
    "  local i = 1\n  while array[i] do\n    if array[i] ~= i then\n      return i\n    end\n    i = i + 1\n  end\n  return i\nend",
    "    local i = 1\n    while i <= #array do\n        if array[i] ~= i then\n            return i\n        end\n        i = i + 1\n    end\n    return #array + 1\nend",
    "  local i = 1\n  while array[i] do\n    if array[i] ~= i then\n      return i\n    end\n    i = i + 1\n  end\n  return i\nend",
    "    local min = array[1]\n    local max = array[#array]\n    local missing = {}\n    for i = min, max do\n        if not table.contains(array, i) then\n            table.insert(missing, i)\n        end\n    end\n    return missing[1]\nend",
    "  local i = 1\n  while i <= #array do\n    if array[i] ~= i then\n      return i\n    end\n    i = i + 1\n  end\n  return i\nend",
    "\tlocal i = 1\n\twhile i <= #array do\n\t\tif array[i] ~= i then\n\t\t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn i\nend",
    "  local min = array[1]\n  local max = array[#array]\n  local i = min\n  while i <= max do\n    if array[i] ~= i then\n      return i\n    end\n    i = i + 1\n  end\n  return max + 1\nend",
    "\tlocal i = 1\n\twhile i <= #array do\n\t\tif array[i] ~= i then\n\t\t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn #array + 1\nend",
    "\tlocal i = 1\n\twhile i <= #array do\n\t\tif array[i] ~= i then\n\t\t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn #array + 1\nend",
    "\tlocal i = 1\n\twhile i <= #array do\n\t\tif array[i] ~= i then\n\t\t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn #array + 1\nend",
    "  local i = 1\n  while array[i] do\n    if array[i] ~= i then\n      return i\n    end\n    i = i + 1\n  end\n  return i\nend",
    "  local i = 1\n  while array[i] == i do\n    i = i + 1\n  end\n  return i\nend",
    "\tlocal i = 1\n\twhile i <= #array do\n\t\tif array[i] ~= i then\n\t\t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn #array + 1\nend",
    "  local i = 1\n  while array[i] do\n    if array[i] ~= i then\n      return i\n    end\n    i = i + 1\n  end\n  return i\nend",
    "    local i = 1\n    while array[i] do\n        if array[i] ~= i then\n            return i\n        end\n        i = i + 1\n    end\n    return i\nend",
    "\tlocal i = 1\n\twhile i <= #array do\n\t\tif array[i] ~= i then\n\t\t\treturn i\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn #array + 1\nend",
    "  local i = 1\n  while i <= #array do\n    if array[i] ~= i then\n      return i\n    end\n    i = i + 1\n  end\n  return #array + 1\nend"
  ]
}