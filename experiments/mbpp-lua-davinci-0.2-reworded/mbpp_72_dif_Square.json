{
  "name": "mbpp_72_dif_Square",
  "language": "lua",
  "prompt": "-- Write a luathon function to check whether the given number can be represented as the difference of two squares or not.\nlocal function dif_Square(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dif_Square\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(15), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal sqrt_n = math.sqrt(n)\n\tif sqrt_n == math.floor(sqrt_n) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tlocal floor = math.floor(sqrt)\n\tif sqrt == floor then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sq = sqrt(n)\n\tlocal fl = floor(sq)\n\tif sq == fl then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tif sqrt == math.floor(sqrt) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tif sqrt_n == math.floor(sqrt_n) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sq = sqrt(n)\n\tlocal fl = floor(sq)\n\tif sq == fl then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    local sqrt = math.sqrt\n    local floor = math.floor\n    local function is_Square(n)\n        local s = sqrt(n)\n        return s == floor(s)\n    end\n    return is_Square(n/4)\nend",
    "\tlocal i = 1\n\twhile i <= n do\n\t\tif i*i > n then\n\t\t\treturn false\n\t\telseif i*i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sqrt_n = sqrt(n)\n\tlocal sqrt_n_floor = floor(sqrt_n)\n\tif sqrt_n == sqrt_n_floor then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal x = floor(sqrt(n))\n\tif x*x == n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_n = math.floor(sqrt_n)\n\tif sqrt_n == floor_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_sqrt_n = math.floor(sqrt_n)\n\tif sqrt_n == floor_sqrt_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal i = 1\n\twhile i <= n do\n\t\tif i*i > n then\n\t\t\treturn false\n\t\telseif i*i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\nend",
    "\tlocal x = math.sqrt(n)\n\tif x == math.floor(x) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_n = math.floor(sqrt_n)\n\tif sqrt_n == floor_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal i = 1\n\twhile i < n do\n\t\tif i * i > n then\n\t\t\treturn false\n\t\telseif i * i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tlocal a = math.sqrt(n)\n\tif a == math.floor(a) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sq = sqrt(n)\n\tlocal fl = floor(sq)\n\tif sq == fl then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal function is_Square(n)\n\t\tlocal s = sqrt(n)\n\t\treturn s == floor(s)\n\tend\n\treturn is_Square(n/4)\nend",
    "\tlocal x = math.sqrt(n)\n\tif x == math.floor(x) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tif n < 0 then\n\t\tn = -n\n\tend\n\tlocal i = 1\n\twhile i*i < n do\n\t\ti = i + 1\n\tend\n\tif i*i == n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal i = 1\n\twhile i <= n do\n\t\tif i*i > n then\n\t\t\treturn false\n\t\telseif i*i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tif sqrt_n == math.floor(sqrt_n) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal i = 1\n\twhile i <= n do\n\t\tlocal j = 1\n\t\twhile j <= n do\n\t\t\tif i*i - j*j == n then\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sq = sqrt(n)\n\tif floor(sq) == sq then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal s = math.sqrt(n)\n\tif s == math.floor(s) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sq = sqrt(n)\n\tlocal f = floor(sq)\n\tif sq == f then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    local sqrt = math.sqrt\n    local floor = math.floor\n    local sqrt_n = sqrt(n)\n    local floor_sqrt_n = floor(sqrt_n)\n    return floor_sqrt_n * floor_sqrt_n == n\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_sqrt_n = math.floor(sqrt_n)\n\tif floor_sqrt_n == sqrt_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal i = 1\n\twhile i <= n do\n\t\tlocal j = 1\n\t\twhile j <= n do\n\t\t\tif i*i - j*j == n then\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_n = math.floor(sqrt_n)\n\tif sqrt_n == floor_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal function is_Square(n)\n\t\tlocal s = sqrt(n)\n\t\treturn s == floor(s)\n\tend\n\treturn is_Square(n/4)\nend",
    "  local x = math.sqrt(n)\n  if x == math.floor(x) then\n    return true\n  else\n    return false\n  end\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sq = sqrt(n)\n\tlocal fl = floor(sq)\n\tif sq == fl then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal i = 1\n\tlocal j = n\n\twhile i < j do\n\t\tif i*i - j*j == n then\n\t\t\treturn true\n\t\telseif i*i - j*j < n then\n\t\t\ti = i + 1\n\t\telse\n\t\t\tj = j - 1\n\t\tend\n\tend\n\treturn false\nend",
    "    local sqrt = math.sqrt\n    local floor = math.floor\n    local x = floor(sqrt(n))\n    if x*x == n then\n        return true\n    else\n        return false\n    end\nend",
    "\tlocal i = 1\n\twhile i < n do\n\t\tif i*i > n then\n\t\t\treturn false\n\t\telseif i*i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sq = sqrt(n)\n\tif floor(sq) == sq then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal i = 1\n\twhile i < n do\n\t\tif i*i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "    local sqrt_n = math.sqrt(n)\n    local floor_sqrt_n = math.floor(sqrt_n)\n    if sqrt_n == floor_sqrt_n then\n        return true\n    else\n        return false\n    end\nend",
    "    local i = 1\n    while i <= n do\n        if i * i == n then\n            return true\n        end\n        i = i + 1\n    end\n    return false\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sq = sqrt(n)\n\tlocal fl = floor(sq)\n\tif sq == fl then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal m = math.sqrt(n)\n\tif m == math.floor(m) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_n = math.floor(sqrt_n)\n\tif (sqrt_n - floor_n) == 0 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    local i = 1\n    while i < n do\n        if i * i > n then\n            return false\n        elseif i * i == n then\n            return true\n        end\n        i = i + 1\n    end\n    return false\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal function is_Square(n)\n\t\tlocal s = sqrt(n)\n\t\treturn s == floor(s)\n\tend\n\treturn is_Square(n/4)\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tif sqrt == math.floor(sqrt) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    local sqrt_n = math.sqrt(n)\n    local flr_sqrt_n = math.floor(sqrt_n)\n    if sqrt_n == flr_sqrt_n then\n        return true\n    else\n        return false\n    end\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_sqrt_n = math.floor(sqrt_n)\n\tif sqrt_n == floor_sqrt_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tif n < 0 then\n\t\treturn false\n\tend\n\tlocal sqrt = math.sqrt(n)\n\treturn sqrt == math.floor(sqrt)\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal function is_Square(n)\n\t\treturn sqrt(n) % 1 == 0\n\tend\n\treturn is_Square(n + 1) or is_Square(n - 1)\nend",
    "\tlocal i = 1\n\twhile i <= n do\n\t\tif i*i > n then\n\t\t\treturn false\n\t\telseif i*i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\nend",
    "\tlocal m = math.sqrt(n)\n\tlocal m1 = math.floor(m)\n\tif m1 == m then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "  local i = 1\n  while i <= n do\n    if i * i == n then\n      return true\n    end\n    i = i + 1\n  end\n  return false\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tif sqrt == math.floor(sqrt) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_n = math.floor(sqrt_n)\n\tif (sqrt_n - floor_n) == 0 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_sqrt_n = math.floor(sqrt_n)\n\tif sqrt_n == floor_sqrt_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_sqrt_n = math.floor(sqrt_n)\n\tif sqrt_n == floor_sqrt_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal x = sqrt(n)\n\tlocal y = floor(x)\n\tif x == y then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal i = 1\n\twhile i <= sqrt(n) do\n\t\tif floor(sqrt(n - i*i)) == sqrt(n - i*i) then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tlocal i = 1\n\twhile i < n do\n\t\tif i*i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sq = sqrt(n)\n\tif floor(sq) == sq then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sq = sqrt(n)\n\tlocal fl = floor(sq)\n\tif sq == fl then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    local sqrt = math.sqrt(n)\n    return sqrt == math.floor(sqrt)\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sqrt_n = sqrt(n)\n\tlocal floor_sqrt_n = floor(sqrt_n)\n\tif sqrt_n == floor_sqrt_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tif sqrt_n == math.floor(sqrt_n) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal m = math.sqrt(n)\n\tif m == math.floor(m) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    local x = math.sqrt(n)\n    if x == math.floor(x) then\n        return true\n    else\n        return false\n    end\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tif sqrt == math.floor(sqrt) then\n\t\treturn true\n\tend\n\treturn false\nend",
    "    local sqrt = math.sqrt(n)\n    local floor = math.floor(sqrt)\n    return sqrt == floor\nend",
    "\tlocal i = 1\n\tlocal j = n\n\twhile i < j do\n\t\tif i*i - j*j == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn false\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sqrt_n = sqrt(n)\n\tlocal floor_n = floor(sqrt_n)\n\tif sqrt_n == floor_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal i = 1\n\twhile i <= n do\n\t\tlocal j = 1\n\t\twhile j <= n do\n\t\t\tif i*i - j*j == n then\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tlocal i = 1\n\twhile i < n do\n\t\tif i*i > n then\n\t\t\treturn false\n\t\telseif i*i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tif sqrt == math.floor(sqrt) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tlocal floor = math.floor(sqrt)\n\tif sqrt == floor then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tif sqrt_n == math.floor(sqrt_n) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_n = math.floor(sqrt_n)\n\tif sqrt_n == floor_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tlocal floor = math.floor(sqrt)\n\treturn sqrt == floor\nend",
    "\tlocal i = 1\n\twhile i <= n do\n\t\tif i*i > n then\n\t\t\treturn false\n\t\telseif i*i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal function is_Square(n)\n\t\treturn floor(sqrt(n))^2 == n\n\tend\n\treturn is_Square(n/4)\nend",
    "    local sqrt = math.sqrt(n)\n    local floor = math.floor(sqrt)\n    return sqrt == floor\nend",
    "\tlocal x = math.sqrt(n/2)\n\tlocal y = math.sqrt(n/2)\n\tif x == math.floor(x) and y == math.floor(y) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal function isSquare(n)\n\t\tlocal s = sqrt(n)\n\t\treturn s == floor(s)\n\tend\n\treturn isSquare(n/4)\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_sqrt_n = math.floor(sqrt_n)\n\tif sqrt_n == floor_sqrt_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tif sqrt == math.floor(sqrt) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_sqrt_n = math.floor(sqrt_n)\n\tif sqrt_n == floor_sqrt_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tlocal floor = math.floor(sqrt)\n\tif sqrt == floor then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_sqrt_n = math.floor(sqrt_n)\n\tif sqrt_n == floor_sqrt_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal i = 1\n\tlocal j = 1\n\twhile i <= n do\n\t\tj = 1\n\t\twhile j <= n do\n\t\t\tif i*i - j*j == n then\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tlocal x = math.sqrt(n)\n\tif x == math.floor(x) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal x = math.sqrt(n)\n\tif x == math.floor(x) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    local sqrt = math.sqrt\n    local floor = math.floor\n    local sqrt_n = sqrt(n)\n    local floor_sqrt_n = floor(sqrt_n)\n    if floor_sqrt_n == sqrt_n then\n        return true\n    else\n        return false\n    end\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_n = math.floor(sqrt_n)\n\tif sqrt_n == floor_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tif sqrt == math.floor(sqrt) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal i = 1\n\tlocal j = n\n\twhile i < j do\n\t\tif i * i == n + j * j or i * i == n - j * j then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn false\nend",
    "\tlocal i = 1\n\twhile i < n do\n\t\tif i*i > n then\n\t\t\treturn false\n\t\telseif i*i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tlocal i = 1\n\twhile i < n do\n\t\tlocal j = 1\n\t\twhile j < n do\n\t\t\tif i*i - j*j == n then\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tlocal i = 1\n\twhile i <= n do\n\t\tif i * i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tlocal i = 1\n\twhile i < n do\n\t\tif i*i > n then\n\t\t\treturn false\n\t\telseif i*i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal function is_Square(n)\n\t\tlocal s = sqrt(n)\n\t\treturn floor(s) == s\n\tend\n\tfor i = 1, n do\n\t\tif is_Square(i) and is_Square(n + i) then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sqrt_n = sqrt(n)\n\tlocal floor_sqrt_n = floor(sqrt_n)\n\tif floor_sqrt_n == sqrt_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    local sqrt_n = math.sqrt(n)\n    local floor_n = math.floor(sqrt_n)\n    if sqrt_n == floor_n then\n        return true\n    else\n        return false\n    end\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tif sqrt == math.floor(sqrt) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal function is_Square(n)\n\t\tlocal sq = sqrt(n)\n\t\treturn sq == floor(sq)\n\tend\n\treturn is_Square(n/4)\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tif sqrt_n == math.floor(sqrt_n) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nprint(dif_Square(25))",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_sqrt_n = math.floor(sqrt_n)\n\tif sqrt_n == floor_sqrt_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal num = math.sqrt(n)\n\tif num == math.floor(num) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tif sqrt_n == math.floor(sqrt_n) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sqrt_n = sqrt(n)\n\tlocal floor_sqrt_n = floor(sqrt_n)\n\tif floor_sqrt_n == sqrt_n then\n\t\treturn true\n\tend\n\treturn false\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sq = sqrt(n)\n\tlocal fl = floor(sq)\n\tif sq == fl then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal function is_Square(n)\n\t\tlocal s = sqrt(n)\n\t\treturn floor(s) == s\n\tend\n\tlocal function is_Even(n)\n\t\treturn n % 2 == 0\n\tend\n\tlocal function is_Odd(n)\n\t\treturn n % 2 == 1\n\tend\n\tif is_Odd(n) then\n\t\treturn false\n\telseif is_Even(n) then\n\t\tlocal s = sqrt(n/2)\n\t\treturn is_Square(s)\n\tend\nend",
    "    local sqrt = math.sqrt(n)\n    if math.floor(sqrt) == sqrt then\n        return true\n    else\n        return false\n    end\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal function is_Square(x)\n\t\tlocal s = sqrt(x)\n\t\treturn s*s == x\n\tend\n\tlocal function is_Sum_Square(x)\n\t\tfor i = 0, floor(sqrt(x)) do\n\t\t\tif is_Square(x - i*i) then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend\n\treturn is_Sum_Square(n)\nend",
    "    for i = 1, n do\n        for j = 1, n do\n            if i*i - j*j == n then\n                return true\n            end\n        end\n    end\n    return false\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal function is_Square(n)\n\t\treturn floor(sqrt(n))^2 == n\n\tend\n\tif n < 0 then\n\t\treturn false\n\telseif n == 0 then\n\t\treturn true\n\telse\n\t\tlocal sqrt_n = sqrt(n)\n\t\tlocal floor_sqrt_n = floor(sqrt_n)\n\t\treturn is_Square(n - floor_sqrt_n^2)\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal x = sqrt(n)\n\tif floor(x) == x then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal function is_Square(n)\n\t\tlocal s = sqrt(n)\n\t\treturn floor(s) == s\n\tend\n\tlocal function is_Sum_of_Squares(n)\n\t\tfor i = 1, n do\n\t\t\tif is_Square(i) and is_Square(n - i) then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend\n\treturn is_Sum_of_Squares(n)\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tif sqrt_n == math.floor(sqrt_n) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_sqrt_n = math.floor(sqrt_n)\n\tif sqrt_n == floor_sqrt_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    local sqrt = math.sqrt(n)\n    local floor = math.floor(sqrt)\n    return sqrt == floor\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal function is_Square(n)\n\t\tlocal s = sqrt(n)\n\t\treturn s == floor(s)\n\tend\n\treturn is_Square(n/2)\nend",
    "    local m = math.sqrt(n)\n    if m == math.floor(m) then\n        return true\n    else\n        return false\n    end\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sq = sqrt(n)\n\tlocal fl = floor(sq)\n\tif sq == fl then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal x = sqrt(n)\n\tif floor(x) == x then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_n = math.floor(sqrt_n)\n\tif floor_n == sqrt_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal i = 1\n\tlocal j = n\n\twhile i < j do\n\t\tlocal sum = i * i + j * j\n\t\tif sum == n then\n\t\t\treturn true\n\t\telseif sum < n then\n\t\t\ti = i + 1\n\t\telse\n\t\t\tj = j - 1\n\t\tend\n\tend\n\treturn false\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal function is_Square(n)\n\t\treturn floor(sqrt(n))^2 == n\n\tend\n\treturn is_Square(n/4)\nend",
    "\tlocal i = 1\n\twhile i <= n do\n\t\tif i*i > n then\n\t\t\treturn false\n\t\telseif i*i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\nend",
    "    local sqrt = math.sqrt\n    local floor = math.floor\n    local function is_Square(n)\n        return floor(sqrt(n))^2 == n\n    end\n    return is_Square(n/4)\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tlocal floor = math.floor(sqrt)\n\tif sqrt == floor then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt(n)\n\treturn sqrt == math.floor(sqrt)\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tlocal floor = math.floor(sqrt)\n\tif sqrt == floor then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_n = math.floor(sqrt_n)\n\tif sqrt_n == floor_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_n = math.floor(sqrt_n)\n\tif floor_n * floor_n == n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tif sqrt == math.floor(sqrt) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal i = 1\n\twhile i <= n do\n\t\tlocal j = 1\n\t\twhile j <= n do\n\t\t\tif i * i - j * j == n then\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal x = floor(sqrt(n))\n\tlocal y = floor(sqrt(n - x*x))\n\tif x*x + y*y == n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_n = math.floor(sqrt_n)\n\tif sqrt_n == floor_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_sqrt_n = math.floor(sqrt_n)\n\tif sqrt_n == floor_sqrt_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    local x = math.sqrt(n)\n    if x == math.floor(x) then\n        return true\n    else\n        return false\n    end\nend",
    "\tlocal sqrt = math.sqrt(n)\n\treturn sqrt == math.floor(sqrt)\nend",
    "\tlocal i = 1\n\twhile i < n do\n\t\tif i*i > n then\n\t\t\treturn false\n\t\telseif i*i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tif sqrt == math.floor(sqrt) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal i = 1\n\twhile i < n do\n\t\tif i*i > n then\n\t\t\treturn false\n\t\telseif i*i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tif sqrt_n == math.floor(sqrt_n) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tlocal floor = math.floor(sqrt)\n\tif sqrt == floor then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tlocal floor = math.floor(sqrt)\n\tif sqrt == floor then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    local sqrt = math.sqrt\n    local floor = math.floor\n    local i = 1\n    while i <= sqrt(n) do\n        if floor(sqrt(n - i * i)) == sqrt(n - i * i) then\n            return true\n        end\n        i = i + 1\n    end\n    return false\nend",
    "\tlocal sq = math.sqrt(n)\n\tif sq == math.floor(sq) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal m = math.sqrt(n)\n\tif m == math.floor(m) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tif sqrt == math.floor(sqrt) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "  local sqrt = math.sqrt\n  local floor = math.floor\n  local ceil = math.ceil\n  local sqrt_n = sqrt(n)\n  local floor_sqrt_n = floor(sqrt_n)\n  local ceil_sqrt_n = ceil(sqrt_n)\n  if floor_sqrt_n == ceil_sqrt_n then\n    return true\n  else\n    return false\n  end\nend",
    "  local sqrt = math.sqrt\n  local floor = math.floor\n  local function is_Square(n)\n    return floor(sqrt(n))^2 == n\n  end\n  return is_Square(n/4)\nend",
    "\tlocal i = 1\n\twhile i <= n do\n\t\tif i*i > n then\n\t\t\treturn false\n\t\telseif i*i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sq = sqrt(n)\n\tif floor(sq) == sq then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_sqrt_n = math.floor(sqrt_n)\n\tif sqrt_n == floor_sqrt_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal i = 1\n\twhile i < n do\n\t\tif i * i > n then\n\t\t\treturn false\n\t\telseif i * i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sq = sqrt(n)\n\tlocal fl = floor(sq)\n\tif sq == fl then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    local sqrt = math.sqrt\n    local floor = math.floor\n    local sq = sqrt(n)\n    local fl = floor(sq)\n    if sq == fl then\n        return true\n    else\n        return false\n    end\nend",
    "\tlocal m = math.sqrt(n)\n\tif m == math.floor(m) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sq = sqrt(n)\n\tlocal fl = floor(sq)\n\tif sq == fl then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal m = math.sqrt(n)\n\tlocal m = math.floor(m)\n\tif m*m == n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal i = 1\n\tlocal j = n\n\twhile i <= j do\n\t\tlocal sum = i*i + j*j\n\t\tif sum == n then\n\t\t\treturn true\n\t\telseif sum < n then\n\t\t\ti = i + 1\n\t\telse\n\t\t\tj = j - 1\n\t\tend\n\tend\n\treturn false\nend",
    "\tlocal i = 1\n\twhile i <= n do\n\t\tif i*i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal i = 1\n\tlocal j = 1\n\twhile i <= n do\n\t\tj = 1\n\t\twhile j <= n do\n\t\t\tif i * i - j * j == n then\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tfor i=1,n do\n\t\tfor j=1,n do\n\t\t\tif i*i - j*j == n then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tif sqrt_n == math.floor(sqrt_n) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal i = 1\n\tlocal j = 1\n\twhile i < n do\n\t\tj = 1\n\t\twhile j < n do\n\t\t\tif i*i - j*j == n then\n\t\t\t\treturn true\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_n = math.floor(sqrt_n)\n\tif sqrt_n == floor_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal i = 1\n\twhile i <= n do\n\t\tif i*i > n then\n\t\t\treturn false\n\t\telseif i*i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal diff = sqrt(n) - floor(sqrt(n))\n\tif diff == 0 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sqrt_n = sqrt(n)\n\tlocal floor_sqrt_n = floor(sqrt_n)\n\tif floor_sqrt_n == sqrt_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tlocal floor = math.floor(sqrt)\n\tif floor == sqrt then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    local sqrt = math.sqrt(n)\n    local floor = math.floor(sqrt)\n    if sqrt == floor then\n        return true\n    else\n        return false\n    end\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tif math.floor(sqrt) == sqrt then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tlocal floor = math.floor(sqrt)\n\tif sqrt == floor then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal function is_Square(n)\n\t\tlocal s = sqrt(n)\n\t\treturn s == floor(s)\n\tend\n\treturn is_Square(n/4)\nend",
    "\tlocal sqrt = math.sqrt(n)\n\tif sqrt == math.floor(sqrt) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sq = sqrt(n)\n\tlocal fl = floor(sq)\n\tif sq == fl then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal m = math.sqrt(n)\n\tif m == math.floor(m) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal i = 1\n\twhile i < n do\n\t\tif i*i > n then\n\t\t\treturn false\n\t\telseif i*i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sq = sqrt(n)\n\tlocal fl = floor(sq)\n\tif sq == fl then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_n = math.floor(sqrt_n)\n\tif floor_n == sqrt_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal i = 1\n\twhile i < n do\n\t\tif i * i > n then\n\t\t\treturn false\n\t\telseif i * i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sqrt_n = sqrt(n)\n\tlocal floor_sqrt_n = floor(sqrt_n)\n\tif floor_sqrt_n == sqrt_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_sqrt_n = math.floor(sqrt_n)\n\tif sqrt_n == floor_sqrt_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tif n < 0 then\n\t\tn = -n\n\tend\n\tlocal i = 1\n\twhile i * i < n do\n\t\ti = i + 1\n\tend\n\tif i * i == n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tif sqrt_n == math.floor(sqrt_n) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal function is_Square(n)\n\t\tlocal s = sqrt(n)\n\t\treturn s == floor(s)\n\tend\n\treturn is_Square(n/4)\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_n = math.floor(sqrt_n)\n\tif (sqrt_n - floor_n) == 0 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal n = math.abs(n)\n\tlocal sqrt = math.sqrt(n)\n\tlocal floor = math.floor(sqrt)\n\tif sqrt == floor then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sq = sqrt(n)\n\tlocal fl = floor(sq)\n\tif sq == fl then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal sq = sqrt(n)\n\tif floor(sq) == sq then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal i = 1\n\twhile i <= n do\n\t\tif i * i == n then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn false\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_sqrt_n = math.floor(sqrt_n)\n\tif sqrt_n == floor_sqrt_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    local x = math.sqrt(n)\n    if math.floor(x) == x then\n        return true\n    else\n        return false\n    end\nend",
    "\tlocal sqrt = math.sqrt\n\tlocal floor = math.floor\n\tlocal function is_Square(n)\n\t\tlocal s = sqrt(n)\n\t\treturn s == floor(s)\n\tend\n\treturn is_Square(n/4)\nend",
    "\tlocal sqrt_n = math.sqrt(n)\n\tlocal floor_n = math.floor(sqrt_n)\n\tif floor_n == sqrt_n then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend"
  ]
}