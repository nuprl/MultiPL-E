{
  "name": "mbpp_249_intersection_array",
  "language": "lua",
  "prompt": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for i2, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend",
    "    local intersection = {}\n    for _, num in ipairs(array_nums1) do\n        if table.contains(array_nums2, num) then\n            table.insert(intersection, num)\n        end\n    end\n    return intersection\nend",
    "    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend",
    "    local intersection = {}\n    for i, num1 in ipairs(array_nums1) do\n        for j, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(intersection, num1)\n            end\n        end\n    end\n    return intersection\nend",
    "    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, k in ipairs(array_nums2) do\n            if v == k then\n                table.insert(result, v)\n                break\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, k in ipairs(array_nums2) do\n            if v == k then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend",
    "    local array_nums = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(array_nums, v)\n                break\n            end\n        end\n    end\n    return array_nums\nend",
    "    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n            end\n        end\n    end\n    return result\nend",
    "    local array_nums = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(array_nums, v)\n            end\n        end\n    end\n    return array_nums\nend",
    "    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend",
    "    local intersection = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(intersection, num1)\n                break\n            end\n        end\n    end\n    return intersection\nend",
    "    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend",
    "    local array_result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(array_result, num1)\n                break\n            end\n        end\n    end\n    return array_result\nend",
    "    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, num in ipairs(array_nums1) do\n        if table.indexof(array_nums2, num) then\n            table.insert(result, num)\n        end\n    end\n    return result\nend"
  ]
}