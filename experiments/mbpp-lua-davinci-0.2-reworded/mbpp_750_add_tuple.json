{
  "name": "mbpp_750_add_tuple",
  "language": "lua",
  "prompt": "-- Write a function to add the given table to the given table.\nlocal function add_tuple(test_list, test_tup)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_tuple\n    lu.assertEquals(candidate({5, 6, 7}, {9, 10}), {5, 6, 7, 9, 10})\n    lu.assertEquals(candidate({6, 7, 8}, {10, 11}), {6, 7, 8, 10, 11})\n    lu.assertEquals(candidate({7, 8, 9}, {11, 12}), {7, 8, 9, 11, 12})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\ttest_list[#test_list + 1] = test_tup\nend",
    "  local tup_list = test_list[test_tup[1]]\n  if tup_list == nil then\n    tup_list = {}\n    test_list[test_tup[1]] = tup_list\n  end\n  tup_list[#tup_list + 1] = test_tup\nend",
    "    table.insert(test_list, test_tup)\nend",
    "    local test_list_len = #test_list\n    for i = 1, test_list_len do\n        if test_list[i][1] == test_tup[1] then\n            return\n        end\n    end\n    test_list[test_list_len + 1] = test_tup\nend",
    "  table.insert(test_list, test_tup)\nend",
    "    table.insert(test_list, test_tup)\nend",
    "  table.insert(test_list, test_tup)\nend",
    "    table.insert(test_list, test_tup)\nend",
    "  table.insert(test_list, test_tup)\nend",
    "    test_list[#test_list + 1] = test_tup\nend",
    "  table.insert(test_list, test_tup)\nend",
    "    table.insert(test_list, test_tup)\nend",
    "    local test_name = test_tup[1]\n    local test_func = test_tup[2]\n    local test_desc = test_tup[3]\n    local test_tup = {test_name, test_func, test_desc}\n    table.insert(test_list, test_tup)\nend",
    "    table.insert(test_list, test_tup)\nend",
    "    local tup_list = test_list[test_tup[1]]\n    if tup_list == nil then\n        tup_list = {}\n        test_list[test_tup[1]] = tup_list\n    end\n    tup_list[#tup_list + 1] = test_tup\nend",
    "  local test_list_len = #test_list\n  for i = 1, test_list_len do\n    if test_list[i][1] == test_tup[1] then\n      return\n    end\n  end\n  test_list[test_list_len + 1] = test_tup\nend",
    "  local test_tup_len = #test_tup\n  for i = 1, #test_list do\n    local test_list_tup = test_list[i]\n    local test_list_tup_len = #test_list_tup\n    if test_tup_len == test_list_tup_len then\n      local is_same = true\n      for j = 1, test_tup_len do\n        if test_tup[j] ~= test_list_tup[j] then\n          is_same = false\n          break\n        end\n      end\n      if is_same then\n        return\n      end\n    end\n  end\n  table.insert(test_list, test_tup)\nend",
    "  table.insert(test_list, test_tup)\nend",
    "    test_list[#test_list + 1] = test_tup\nend",
    "    test_list[#test_list + 1] = test_tup\nend"
  ]
}