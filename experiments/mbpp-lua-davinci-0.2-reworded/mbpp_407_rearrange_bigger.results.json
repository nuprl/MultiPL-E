{
  "name": "mbpp_407_rearrange_bigger",
  "language": "lua",
  "prompt": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  while n > 0 do\n    table.insert(digits, 1, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hb20xln.lua:38: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp2hb20xln.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for digit in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(digit))\n  end\n  local i = #digits\n  while i > 1 and digits[i-1] >= digits[i] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  return table.concat(digits)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk8v65f9n.lua:31: expected: 21, actual: \"21\"\nstack traceback:\n\t/tmp/tmpk8v65f9n.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = {}\n  for i = 1, #digits do\n    result[i] = tostring(digits[i])\n  end\n  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwf_ykq4j.lua:4: attempt to get length of local 'n' (a number value)\nstack traceback:\n\t/tmp/tmpwf_ykq4j.lua:4: in function 'candidate'\n\t/tmp/tmpwf_ykq4j.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  for i = #digits - 1, 1, -1 do\n    if digits[i] > digits[i + 1] then\n      local j = i + 1\n      while j <= #digits and digits[j] < digits[i] do\n        j = j + 1\n      end\n      digits[i], digits[j - 1] = digits[j - 1], digits[i]\n      table.sort(digits, i + 1, #digits)\n      local result = 0\n      for _, d in ipairs(digits) do\n        result = result * 10 + d\n      end\n      return result\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphd64h08s.lua:15: bad argument #2 to 'sort' (function expected, got number)\nstack traceback:\n\t/tmp/tmphd64h08s.lua:15: in function 'candidate'\n\t/tmp/tmphd64h08s.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] <= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp65loe43h.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp65loe43h.lua:17: in function 'candidate'\n\t/tmp/tmp65loe43h.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for d in tostring(n):gmatch('%d') do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits\n    while i > 1 and digits[i] <= digits[i-1] do\n        i = i - 1\n    end\n    if i == 1 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i-1] do\n        j = j - 1\n    end\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    local k = #digits\n    while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027789,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i <= 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  return tonumber(table.concat(digits))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72f8dbk3.lua:32: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp72f8dbk3.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    for i = #digits - 1, 1, -1 do\n        if digits[i] > digits[i + 1] then\n            local min = digits[i + 1]\n            local min_idx = i + 1\n            for j = i + 1, #digits do\n                if digits[j] < min and digits[j] > digits[i] then\n                    min = digits[j]\n                    min_idx = j\n                end\n            end\n            digits[i], digits[min_idx] = digits[min_idx], digits[i]\n            table.sort(digits, i + 1, #digits)\n            local result = 0\n            for j = 1, #digits do\n                result = result * 10 + digits[j]\n            end\n            return result\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph3shlu_z.lua:19: bad argument #2 to 'sort' (function expected, got number)\nstack traceback:\n\t/tmp/tmph3shlu_z.lua:19: in function 'candidate'\n\t/tmp/tmph3shlu_z.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  table.sort(digits)\n  local result = 0\n  for i = #digits, 1, -1 do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscsg5grt.lua:20: expected: false, actual: 10\nstack traceback:\n\t/tmp/tmpscsg5grt.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i - 1] >= digits[i] do\n    i = i - 1\n  end\n  if i <= 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = \"\"\n  for i = 1, #digits do\n    result = result .. tostring(digits[i])\n  end\n  return tonumber(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf2iekkxm.lua:4: attempt to get length of local 'n' (a number value)\nstack traceback:\n\t/tmp/tmpf2iekkxm.lua:4: in function 'candidate'\n\t/tmp/tmpf2iekkxm.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i,i))\n  end\n  for i = #digits - 1, 1, -1 do\n    if digits[i] < digits[i + 1] then\n      local min = i + 1\n      for j = i + 1, #digits do\n        if digits[j] < digits[min] and digits[j] > digits[i] then\n          min = j\n        end\n      end\n      digits[i], digits[min] = digits[min], digits[i]\n      table.sort(digits, i + 1, #digits)\n      local result = \"\"\n      for _, v in ipairs(digits) do\n        result = result .. tostring(v)\n      end\n      return tonumber(result)\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptlfdiz1z.lua:4: attempt to get length of local 'n' (a number value)\nstack traceback:\n\t/tmp/tmptlfdiz1z.lua:4: in function 'candidate'\n\t/tmp/tmptlfdiz1z.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    for i = #digits - 1, 1, -1 do\n        if digits[i] > digits[i + 1] then\n            local j = i + 1\n            while j < #digits and digits[j] > digits[i] do\n                j = j + 1\n            end\n            digits[i], digits[j - 1] = digits[j - 1], digits[i]\n            local k = i + 1\n            local l = #digits\n            while k < l do\n                digits[k], digits[l] = digits[l], digits[k]\n                k = k + 1\n                l = l - 1\n            end\n            local result = 0\n            for _, d in ipairs(digits) do\n                result = result * 10 + d\n            end\n            return result\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpabeo0uqx.lua:36: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmpabeo0uqx.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, digit in ipairs(digits) do\n    result = result * 10 + digit\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_krn7oyw.lua:37: expected: 21, actual: -1\nstack traceback:\n\t/tmp/tmp_krn7oyw.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[i] >= digits[j] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1jvnmrm.lua:37: expected: 21, actual: nil\nstack traceback:\n\t/tmp/tmpj1jvnmrm.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  return table.concat(digits)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeqbmiif4.lua:4: attempt to get length of local 'n' (a number value)\nstack traceback:\n\t/tmp/tmpeqbmiif4.lua:4: in function 'candidate'\n\t/tmp/tmpeqbmiif4.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    table.sort(digits)\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfbmbvb1a.lua:19: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmpfbmbvb1a.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  return table.concat(digits)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp745epkwj.lua:31: expected: 21, actual: \"21\"\nstack traceback:\n\t/tmp/tmp745epkwj.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for i = 1, #n do\n        digits[i] = tonumber(n:sub(i, i))\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "",
      "stderr": "lua: /tmp/tmpw_oki9s4.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for digit in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(digit))\n    end\n    local i = #digits\n    while i > 1 and digits[i - 1] >= digits[i] do\n        i = i - 1\n    end\n    if i <= 1 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i - 1] do\n        j = j - 1\n    end\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    j = #digits\n    while i < j do\n        digits[i], digits[j] = digits[j], digits[i]\n        i = i + 1\n        j = j - 1\n    end\n    local result = 0\n    for _, digit in ipairs(digits) do\n        result = result * 10 + digit\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6dq2h0va.lua:36: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp6dq2h0va.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n\tlocal digits = {}\n\tfor d in tostring(n):gmatch(\"%d\") do\n\t\ttable.insert(digits, tonumber(d))\n\tend\n\tlocal i = #digits\n\twhile i > 1 and digits[i] <= digits[i-1] do\n\t\ti = i - 1\n\tend\n\tif i == 1 then\n\t\treturn nil\n\tend\n\tlocal j = #digits\n\twhile digits[j] <= digits[i-1] do\n\t\tj = j - 1\n\tend\n\tdigits[i-1], digits[j] = digits[j], digits[i-1]\n\tlocal k = #digits\n\twhile i < k do\n\t\tdigits[i], digits[k] = digits[k], digits[i]\n\t\ti = i + 1\n\t\tk = k - 1\n\tend\n\tlocal result = 0\n\tfor _, d in ipairs(digits) do\n\t\tresult = result * 10 + d\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfe2pcd57.lua:36: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpfe2pcd57.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(d))\n  end\n  table.sort(digits)\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywkg1c0o.lua:18: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmpywkg1c0o.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, d)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  return tonumber(table.concat(digits))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fyv3tm1.lua:33: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp_fyv3tm1.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  while n > 0 do\n    digits[#digits + 1] = n % 10\n    n = math.floor(n / 10)\n  end\n  for i = #digits - 1, 1, -1 do\n    if digits[i] < digits[i + 1] then\n      local j = #digits\n      while digits[j] <= digits[i] do\n        j = j - 1\n      end\n      digits[i], digits[j] = digits[j], digits[i]\n      local k = i + 1\n      local l = #digits\n      while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n      end\n      local result = 0\n      for i = 1, #digits do\n        result = result * 10 + digits[i]\n      end\n      return result\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptssqsgsm.lua:35: expected: 21, actual: nil\nstack traceback:\n\t/tmp/tmptssqsgsm.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0srhnjki.lua:37: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp0srhnjki.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, d)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  return tonumber(table.concat(digits))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2kvnpm4e.lua:31: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmp2kvnpm4e.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i+1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3q0g3op8.lua:37: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp3q0g3op8.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "lua: /tmp/tmpma1_79vo.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n\tlocal digits = {}\n\tfor i = 1, #n do\n\t\tdigits[i] = tonumber(n:sub(i, i))\n\tend\n\tlocal i = #digits - 1\n\twhile i > 0 and digits[i] >= digits[i + 1] do\n\t\ti = i - 1\n\tend\n\tif i == 0 then\n\t\treturn nil\n\tend\n\tlocal j = #digits\n\twhile digits[j] <= digits[i] do\n\t\tj = j - 1\n\tend\n\tdigits[i], digits[j] = digits[j], digits[i]\n\tlocal k = i + 1\n\tlocal l = #digits\n\twhile k < l do\n\t\tdigits[k], digits[l] = digits[l], digits[k]\n\t\tk = k + 1\n\t\tl = l - 1\n\tend\n\treturn table.concat(digits)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp94j5tpkl.lua:4: attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmp94j5tpkl.lua:4: in local 'candidate'\n\t/tmp/tmp94j5tpkl.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local i = 1\n  while n > 0 do\n    digits[i] = n % 10\n    n = math.floor(n / 10)\n    i = i + 1\n  end\n  local j = #digits\n  while j > 1 and digits[j - 1] >= digits[j] do\n    j = j - 1\n  end\n  if j > 1 then\n    local k = #digits\n    while digits[j - 1] >= digits[k] do\n      k = k - 1\n    end\n    digits[j - 1], digits[k] = digits[k], digits[j - 1]\n    local l = #digits\n    while j < l do\n      digits[j], digits[l] = digits[l], digits[j]\n      j = j + 1\n      l = l - 1\n    end\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3_ntapp.lua:38: expected: false, actual: 10\nstack traceback:\n\t/tmp/tmps3_ntapp.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i+1] do\n        i = i - 1\n    end\n    if i > 0 then\n        local j = #digits\n        while digits[j] <= digits[i] do\n            j = j - 1\n        end\n        digits[i], digits[j] = digits[j], digits[i]\n        local k = i + 1\n        local l = #digits\n        while k < l do\n            digits[k], digits[l] = digits[l], digits[k]\n            k = k + 1\n            l = l - 1\n        end\n    end\n    local result = 0\n    for i, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpxq0ytw.lua:36: expected: false, actual: 10\nstack traceback:\n\t/tmp/tmpvpxq0ytw.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] <= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return -1\n    end\n    local j = i + 1\n    while j < #digits and digits[j] > digits[i] do\n        j = j + 1\n    end\n    j = j - 1\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p59u_ba.lua:40: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp9p59u_ba.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local i = 1\n  while n > 0 do\n    digits[i] = n % 10\n    n = math.floor(n / 10)\n    i = i + 1\n  end\n  local j = i - 1\n  while j > 1 and digits[j] <= digits[j - 1] do\n    j = j - 1\n  end\n  if j > 1 then\n    local k = i - 1\n    while digits[k] <= digits[j - 1] do\n      k = k - 1\n    end\n    digits[j - 1], digits[k] = digits[k], digits[j - 1]\n    local l = j\n    local r = i - 1\n    while l < r do\n      digits[l], digits[r] = digits[r], digits[l]\n      l = l + 1\n      r = r - 1\n    end\n  end\n  local result = 0\n  for k = 1, i - 1 do\n    result = result * 10 + digits[k]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphq_t7rqt.lua:39: expected: false, actual: 10\nstack traceback:\n\t/tmp/tmphq_t7rqt.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for i = 1, #tostring(n) do\n        digits[i] = tonumber(tostring(n):sub(i, i))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0c__rhg.lua:37: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmpy0c__rhg.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i > 0 then\n    local j = #digits\n    while digits[j] <= digits[i] do\n      j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n      digits[k], digits[l] = digits[l], digits[k]\n      k = k + 1\n      l = l - 1\n    end\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_45gmu9d.lua:36: expected: false, actual: 10\nstack traceback:\n\t/tmp/tmp_45gmu9d.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #tostring(n) do\n    digits[i] = tonumber(tostring(n):sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5iod1he5.lua:36: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp5iod1he5.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #tostring(n) do\n    table.insert(digits, tonumber(string.sub(tostring(n), i, i)))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i <= 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeemzew12.lua:36: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmpeemzew12.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  return table.concat(digits)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt9ipdygt.lua:4: attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmpt9ipdygt.lua:4: in local 'candidate'\n\t/tmp/tmpt9ipdygt.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for digit in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(digit))\n  end\n  local i = #digits\n  while i > 1 and digits[i-1] >= digits[i] do\n    i = i - 1\n  end\n  if i <= 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  return tonumber(table.concat(digits))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0de1_6a.lua:32: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmph0de1_6a.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i <= 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkrfhy3qk.lua:36: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmpkrfhy3qk.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = \"\"\n  for i = 1, #digits do\n    result = result .. tostring(digits[i])\n  end\n  return tonumber(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppavf8r31.lua:4: attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmppavf8r31.lua:4: in local 'candidate'\n\t/tmp/tmppavf8r31.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i - 1] >= digits[i] do\n    i = i - 1\n  end\n  if i > 1 then\n    local j = #digits\n    while digits[j] <= digits[i - 1] do\n      j = j - 1\n    end\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    local k = #digits\n    while i < k do\n      digits[i], digits[k] = digits[k], digits[i]\n      i = i + 1\n      k = k - 1\n    end\n  end\n  local result = \"\"\n  for _, d in ipairs(digits) do\n    result = result .. tostring(d)\n  end\n  return tonumber(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmvozr0yt.lua:35: expected: false, actual: 10\nstack traceback:\n\t/tmp/tmpmvozr0yt.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for digit in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(digit))\n  end\n  table.sort(digits)\n  local result = 0\n  for i, digit in ipairs(digits) do\n    result = result + digit * 10 ^ (i - 1)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpea8oirhm.lua:19: expected: false, actual: 10.0\nstack traceback:\n\t/tmp/tmpea8oirhm.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0foa63hm.lua:37: expected: 21, actual: nil\nstack traceback:\n\t/tmp/tmp0foa63hm.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_h67itfg.lua:37: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp_h67itfg.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local s = tostring(n)\n  local i = #s - 1\n  while i > 0 and s:sub(i, i) >= s:sub(i + 1, i + 1) do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #s\n  while s:sub(j, j) <= s:sub(i, i) do\n    j = j - 1\n  end\n  local t = s:sub(1, i - 1) .. s:sub(j, j)\n  local k = i + 1\n  while k <= j - 1 do\n    t = t .. s:sub(k, k)\n    k = k + 1\n  end\n  t = t .. s:sub(i, i)\n  k = j + 1\n  while k <= #s do\n    t = t .. s:sub(k, k)\n    k = k + 1\n  end\n  return tonumber(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ii0am3g.lua:34: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp4ii0am3g.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6qh6i3zx.lua:37: expected: 21, actual: -1\nstack traceback:\n\t/tmp/tmp6qh6i3zx.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mievhr1.lua:36: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp8mievhr1.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  table.sort(digits)\n  local bigger = 0\n  for i = #digits, 1, -1 do\n    bigger = bigger * 10 + digits[i]\n  end\n  return bigger\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp35rkr0d7.lua:21: expected: false, actual: 10\nstack traceback:\n\t/tmp/tmp35rkr0d7.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for digit in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(digit))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, digit in ipairs(digits) do\n    result = result * 10 + digit\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rfyhsjc.lua:37: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp5rfyhsjc.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for i = 1, #n do\n        digits[i] = tonumber(n:sub(i, i))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = \"\"\n    for _, v in ipairs(digits) do\n        result = result .. tostring(v)\n    end\n    return tonumber(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpug089xv6.lua:4: attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmpug089xv6.lua:4: in local 'candidate'\n\t/tmp/tmpug089xv6.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n\tlocal digits = {}\n\tfor i = 1, #n do\n\t\tdigits[i] = tonumber(n:sub(i, i))\n\tend\n\tlocal i = #digits - 1\n\twhile i > 0 and digits[i] >= digits[i + 1] do\n\t\ti = i - 1\n\tend\n\tif i == 0 then\n\t\treturn nil\n\tend\n\tlocal j = #digits\n\twhile digits[j] <= digits[i] do\n\t\tj = j - 1\n\tend\n\tdigits[i], digits[j] = digits[j], digits[i]\n\tlocal k = #digits\n\twhile i < k do\n\t\tdigits[i], digits[k] = digits[k], digits[i]\n\t\ti = i + 1\n\t\tk = k - 1\n\tend\n\treturn table.concat(digits)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpac4gkh5_.lua:4: attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmpac4gkh5_.lua:4: in local 'candidate'\n\t/tmp/tmpac4gkh5_.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n\tlocal digits = {}\n\tfor i = 1, #n do\n\t\tdigits[i] = tonumber(n:sub(i, i))\n\tend\n\tlocal i = #digits\n\twhile i > 1 and digits[i - 1] >= digits[i] do\n\t\ti = i - 1\n\tend\n\tif i <= 1 then\n\t\treturn nil\n\tend\n\tlocal j = #digits\n\twhile digits[j] <= digits[i - 1] do\n\t\tj = j - 1\n\tend\n\tdigits[i - 1], digits[j] = digits[j], digits[i - 1]\n\tj = #digits\n\twhile i < j do\n\t\tdigits[i], digits[j] = digits[j], digits[i]\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn table.concat(digits)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb_suikih.lua:4: attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmpb_suikih.lua:4: in local 'candidate'\n\t/tmp/tmpb_suikih.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local n_ = n\n  while n_ > 0 do\n    digits[#digits+1] = n_ % 10\n    n_ = math.floor(n_ / 10)\n  end\n  local i = #digits\n  while i > 1 and digits[i-1] >= digits[i] do\n    i = i - 1\n  end\n  if i > 1 then\n    local j = #digits\n    while digits[j] <= digits[i-1] do\n      j = j - 1\n    end\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    local k = #digits\n    while i < k do\n      digits[i], digits[k] = digits[k], digits[i]\n      i = i + 1\n      k = k - 1\n    end\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwplmpbz.lua:37: expected: false, actual: 10\nstack traceback:\n\t/tmp/tmpdwplmpbz.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  table.sort(digits)\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i == 1 then return nil end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpurfjdqgf.lua:35: expected: false, actual: 10\nstack traceback:\n\t/tmp/tmpurfjdqgf.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(d))\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "lua: /tmp/tmpj4t04p2y.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  for i = #digits - 1, 1, -1 do\n    if digits[i] > digits[i + 1] then\n      local j = i + 1\n      while j < #digits and digits[j] < digits[i] do\n        j = j + 1\n      end\n      digits[i], digits[j] = digits[j], digits[i]\n      local k = i + 1\n      local l = #digits\n      while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n      end\n      break\n    end\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgi12moe4.lua:35: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmpgi12moe4.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for i = 1, #n do\n        digits[i] = tonumber(n:sub(i, i))\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "",
      "stderr": "lua: /tmp/tmpw_oki9s4.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  for i = #digits, 1, -1 do\n    if digits[i] > digits[i - 1] then\n      local tmp = digits[i]\n      digits[i] = digits[i - 1]\n      digits[i - 1] = tmp\n      break\n    end\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp493o0ge5.lua:9: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp493o0ge5.lua:9: in local 'candidate'\n\t/tmp/tmp493o0ge5.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  while n > 0 do\n    local digit = n % 10\n    n = (n - digit) / 10\n    table.insert(digits, digit)\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i > 1 then\n    local j = #digits\n    while j > i and digits[j] <= digits[i-1] do\n      j = j - 1\n    end\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    local k = i\n    j = #digits\n    while k < j do\n      digits[k], digits[j] = digits[j], digits[k]\n      k = k + 1\n      j = j - 1\n    end\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53hubdwp.lua:38: expected: false, actual: 10.0\nstack traceback:\n\t/tmp/tmp53hubdwp.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnpt1jpkx.lua:36: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmpnpt1jpkx.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "lua: /tmp/tmpttogmlfi.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] <= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, v in ipairs(digits) do\n        result = result * 10 + v\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp419dj0m5.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp419dj0m5.lua:17: in local 'candidate'\n\t/tmp/tmp419dj0m5.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end\n    for i = #digits - 1, 1, -1 do\n        if digits[i] > digits[i + 1] then\n            local j = i + 1\n            while j <= #digits and digits[i] > digits[j] do\n                j = j + 1\n            end\n            digits[i], digits[j - 1] = digits[j - 1], digits[i]\n            local left = i + 1\n            local right = #digits\n            while left < right do\n                digits[left], digits[right] = digits[right], digits[left]\n                left = left + 1\n                right = right - 1\n            end\n            break\n        end\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlpgzqzt.lua:36: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmpqlpgzqzt.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = i\n  while j < #digits and digits[j + 1] > digits[i - 1] do\n    j = j + 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = i\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = \"\"\n  for _, digit in ipairs(digits) do\n    result = result .. digit\n  end\n  return tonumber(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsngfuw1y.lua:4: attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmpsngfuw1y.lua:4: in local 'candidate'\n\t/tmp/tmpsngfuw1y.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    for i = #digits - 1, 1, -1 do\n        if digits[i] > digits[i + 1] then\n            local j = i + 1\n            while j < #digits and digits[j] < digits[i] do\n                j = j + 1\n            end\n            digits[i], digits[j] = digits[j], digits[i]\n            local k = i + 1\n            local l = #digits\n            while k < l do\n                digits[k], digits[l] = digits[l], digits[k]\n                k = k + 1\n                l = l - 1\n            end\n            break\n        end\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmd5mem1.lua:35: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmpdmd5mem1.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    while n > 0 do\n        digits[#digits + 1] = n % 10\n        n = math.floor(n / 10)\n    end\n    for i = #digits - 1, 1, -1 do\n        if digits[i] > digits[i + 1] then\n            local j = i + 1\n            while j < #digits and digits[j] > digits[i] do\n                j = j + 1\n            end\n            digits[i], digits[j - 1] = digits[j - 1], digits[i]\n            for k = 1, math.floor((#digits - i) / 2) do\n                digits[i + k], digits[#digits - k + 1] = digits[#digits - k + 1], digits[i + k]\n            end\n            break\n        end\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz250paye.lua:32: expected: false, actual: 1\nstack traceback:\n\t/tmp/tmpz250paye.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n\tlocal digits = {}\n\tfor i = 1, #tostring(n) do\n\t\tdigits[i] = tonumber(tostring(n):sub(i, i))\n\tend\n\tlocal i = #digits\n\twhile i > 1 and digits[i - 1] >= digits[i] do\n\t\ti = i - 1\n\tend\n\tif i <= 1 then\n\t\treturn -1\n\tend\n\tlocal j = #digits\n\twhile digits[j] <= digits[i - 1] do\n\t\tj = j - 1\n\tend\n\tdigits[i - 1], digits[j] = digits[j], digits[i - 1]\n\tj = #digits\n\twhile i < j do\n\t\tdigits[i], digits[j] = digits[j], digits[i]\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\tlocal result = 0\n\tfor i = 1, #digits do\n\t\tresult = result * 10 + digits[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5yma1bgu.lua:36: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp5yma1bgu.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  return table.concat(digits)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeqbmiif4.lua:4: attempt to get length of local 'n' (a number value)\nstack traceback:\n\t/tmp/tmpeqbmiif4.lua:4: in function 'candidate'\n\t/tmp/tmpeqbmiif4.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n\tlocal digits = {}\n\tlocal n_copy = n\n\twhile n_copy > 0 do\n\t\tdigits[#digits+1] = n_copy % 10\n\t\tn_copy = math.floor(n_copy / 10)\n\tend\n\tfor i = #digits-1, 1, -1 do\n\t\tif digits[i] > digits[i+1] then\n\t\t\tlocal j = i+1\n\t\t\twhile j <= #digits and digits[j] < digits[i] do\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\t\tj = j - 1\n\t\t\tdigits[i], digits[j] = digits[j], digits[i]\n\t\t\tfor k = i+1, math.floor((#digits+i)/2) do\n\t\t\t\tdigits[k], digits[#digits+i-k+1] = digits[#digits+i-k+1], digits[k]\n\t\t\tend\n\t\t\tlocal result = 0\n\t\t\tfor k = 1, #digits do\n\t\t\t\tresult = result * 10 + digits[k]\n\t\t\tend\n\t\t\treturn result\n\t\tend\n\tend\n\treturn -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolevpxvw.lua:33: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmpolevpxvw.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    local n = n\n    while n > 0 do\n        local digit = n % 10\n        table.insert(digits, digit)\n        n = (n - digit) / 10\n    end\n    table.sort(digits)\n    local result = 0\n    for i, v in ipairs(digits) do\n        result = result + v * 10 ^ (i - 1)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9g6jyu94.lua:22: expected: false, actual: 10.0\nstack traceback:\n\t/tmp/tmp9g6jyu94.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local i = 1\n  while n > 0 do\n    digits[i] = n % 10\n    n = math.floor(n / 10)\n    i = i + 1\n  end\n  local j = i - 1\n  while j > 1 and digits[j] <= digits[j - 1] do\n    j = j - 1\n  end\n  if j > 1 then\n    local k = i - 1\n    while digits[k] <= digits[j - 1] do\n      k = k - 1\n    end\n    digits[j - 1], digits[k] = digits[k], digits[j - 1]\n    local l = j\n    local r = i - 1\n    while l < r do\n      digits[l], digits[r] = digits[r], digits[l]\n      l = l + 1\n      r = r - 1\n    end\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpismclpt4.lua:39: expected: false, actual: 10\nstack traceback:\n\t/tmp/tmpismclpt4.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1x9u3zlb.lua:37: expected: 21, actual: nil\nstack traceback:\n\t/tmp/tmp1x9u3zlb.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  for i = #digits - 1, 1, -1 do\n    if digits[i] > digits[i + 1] then\n      local min = math.huge\n      local min_idx = 0\n      for j = i + 1, #digits do\n        if digits[j] < min and digits[j] > digits[i] then\n          min = digits[j]\n          min_idx = j\n        end\n      end\n      digits[i], digits[min_idx] = digits[min_idx], digits[i]\n      local tail = {}\n      for j = i + 1, #digits do\n        table.insert(tail, digits[j])\n      end\n      table.sort(tail)\n      for j = i + 1, #digits do\n        digits[j] = tail[j - i]\n      end\n      break\n    end\n  end\n  local res = 0\n  for i = #digits, 1, -1 do\n    res = res * 10 + digits[i]\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa076pt0l.lua:32: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpa076pt0l.lua:32: in local 'candidate'\n\t/tmp/tmpa076pt0l.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0foa63hm.lua:37: expected: 21, actual: nil\nstack traceback:\n\t/tmp/tmp0foa63hm.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] <= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz07rejmo.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpz07rejmo.lua:17: in local 'candidate'\n\t/tmp/tmpz07rejmo.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  while n > 0 do\n    digits[#digits + 1] = n % 10\n    n = math.floor(n / 10)\n  end\n  for i = #digits - 1, 1, -1 do\n    if digits[i] < digits[i + 1] then\n      local j = i + 1\n      while j <= #digits and digits[j] > digits[i] do\n        j = j + 1\n      end\n      digits[i], digits[j - 1] = digits[j - 1], digits[i]\n      local k = i + 1\n      local l = #digits\n      while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n      end\n      local result = 0\n      for _, digit in ipairs(digits) do\n        result = result * 10 + digit\n      end\n      return result\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7el5gr7.lua:35: expected: 21, actual: nil\nstack traceback:\n\t/tmp/tmpf7el5gr7.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_h67itfg.lua:37: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp_h67itfg.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    table.sort(digits)\n    local result = 0\n    for i = #digits, 1, -1 do\n        result = result * 10 + digits[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6kymh6t_.lua:20: expected: false, actual: 10\nstack traceback:\n\t/tmp/tmp6kymh6t_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = \"\"\n  for _, v in ipairs(digits) do\n    result = result .. tostring(v)\n  end\n  return tonumber(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_dv0qkix.lua:4: attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmp_dv0qkix.lua:4: in local 'candidate'\n\t/tmp/tmp_dv0qkix.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n\tlocal digits = {}\n\tlocal n_copy = n\n\twhile n_copy > 0 do\n\t\ttable.insert(digits, n_copy % 10)\n\t\tn_copy = math.floor(n_copy / 10)\n\tend\n\ttable.sort(digits)\n\tlocal result = 0\n\tfor i = 1, #digits do\n\t\tresult = result * 10 + digits[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp04hlp0x_.lua:20: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmp04hlp0x_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] >= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf64mnibs.lua:36: expected: 21, actual: nil\nstack traceback:\n\t/tmp/tmpf64mnibs.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  return tonumber(table.concat(digits))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrh7wea9.lua:31: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmpbrh7wea9.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] <= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyov0vow2.lua:16: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpyov0vow2.lua:16: in local 'candidate'\n\t/tmp/tmpyov0vow2.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    digits[#digits + 1] = tonumber(d)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpavdr9g0l.lua:37: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpavdr9g0l.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  return tonumber(table.concat(digits))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqerzjhk.lua:32: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmphqerzjhk.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporp7thup.lua:37: expected: 21, actual: -1\nstack traceback:\n\t/tmp/tmporp7thup.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] <= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while j > i and digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayuuw_g4.lua:39: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmpayuuw_g4.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for digit in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(digit))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, digit in ipairs(digits) do\n    result = result * 10 + digit\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rfyhsjc.lua:37: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp5rfyhsjc.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  table.sort(digits)\n  local n = 0\n  for i, d in ipairs(digits) do\n    n = n + d * 10^(#digits - i)\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9wrnve_.lua:18: expected: 21, actual: 12.0\nstack traceback:\n\t/tmp/tmpf9wrnve_.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6dk9_z0.lua:37: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpr6dk9_z0.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  table.sort(digits)\n  local bigger = 0\n  for i = 1, #digits do\n    bigger = bigger * 10 + digits[i]\n  end\n  return bigger\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bm9r5vz.lua:20: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmp_bm9r5vz.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    local n = n\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] <= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, v in ipairs(digits) do\n        result = result * 10 + v\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpek9eaz0n.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpek9eaz0n.lua:17: in local 'candidate'\n\t/tmp/tmpek9eaz0n.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #tostring(n) do\n    digits[i] = tonumber(tostring(n):sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5iod1he5.lua:36: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp5iod1he5.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch('.') do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl06pzgxh.lua:37: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpl06pzgxh.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local n = n\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] <= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz02mp3wo.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpz02mp3wo.lua:17: in local 'candidate'\n\t/tmp/tmpz02mp3wo.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n\tlocal digits = {}\n\tfor d in tostring(n):gmatch(\"%d\") do\n\t\ttable.insert(digits, tonumber(d))\n\tend\n\tlocal i = #digits - 1\n\twhile i > 0 and digits[i] >= digits[i + 1] do\n\t\ti = i - 1\n\tend\n\tif i == 0 then\n\t\treturn nil\n\tend\n\tlocal j = #digits\n\twhile digits[j] <= digits[i] do\n\t\tj = j - 1\n\tend\n\tdigits[i], digits[j] = digits[j], digits[i]\n\tlocal k = i + 1\n\tlocal l = #digits\n\twhile k < l do\n\t\tdigits[k], digits[l] = digits[l], digits[k]\n\t\tk = k + 1\n\t\tl = l - 1\n\tend\n\tlocal result = 0\n\tfor _, d in ipairs(digits) do\n\t\tresult = result * 10 + d\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdnv9hv8_.lua:37: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpdnv9hv8_.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for digit in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(digit))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, digit in ipairs(digits) do\n        result = result * 10 + digit\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgrgwht1w.lua:37: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmpgrgwht1w.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  return table.concat(digits, \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4feyewfk.lua:31: expected: 21, actual: \"21\"\nstack traceback:\n\t/tmp/tmp4feyewfk.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for i = 1, #tostring(n) do\n        digits[i] = tonumber(tostring(n):sub(i, i))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0c__rhg.lua:37: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmpy0c__rhg.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  table.sort(digits)\n  local i = #digits\n  while i > 0 and digits[i] == 9 do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local d = digits[i]\n  digits[i] = nil\n  table.insert(digits, 1, d)\n  return table.concat(digits)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9tu1zv36.lua:24: expected: 21, actual: \"21\"\nstack traceback:\n\t/tmp/tmp9tu1zv36.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #tostring(n) do\n    digits[i] = tonumber(tostring(n):sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then return -1 end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3ligkjh.lua:34: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmpm3ligkjh.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits\n    while i > 1 and digits[i] <= digits[i-1] do\n        i = i - 1\n    end\n    if i > 1 then\n        local j = i\n        while j < #digits and digits[j] > digits[i-1] do\n            j = j + 1\n        end\n        digits[i-1], digits[j-1] = digits[j-1], digits[i-1]\n        local k = i\n        local l = #digits\n        while k < l do\n            digits[k], digits[l] = digits[l], digits[k]\n            k = k + 1\n            l = l - 1\n        end\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7b83aiq.lua:35: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmpl7b83aiq.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits\n    while i > 1 and digits[i - 1] >= digits[i] do\n        i = i - 1\n    end\n    if i == 1 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i - 1] do\n        j = j - 1\n    end\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    local k = #digits\n    while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwlkty2_q.lua:36: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpwlkty2_q.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end\n    local i = #digits\n    while i > 1 do\n        if digits[i] > digits[i - 1] then\n            break\n        end\n        i = i - 1\n    end\n    if i == 1 then\n        return -1\n    end\n    local j = i\n    while j < #digits do\n        if digits[j] < digits[i - 1] then\n            break\n        end\n        j = j + 1\n    end\n    digits[i - 1], digits[j - 1] = digits[j - 1], digits[i - 1]\n    local k = i\n    while k < #digits do\n        digits[k], digits[#digits] = digits[#digits], digits[k]\n        k = k + 1\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11awcxce.lua:42: expected: 21, actual: -1\nstack traceback:\n\t/tmp/tmp11awcxce.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for digit in tostring(n):gmatch(\"%d\") do\n        digits[#digits + 1] = tonumber(digit)\n    end\n    for i = #digits - 1, 1, -1 do\n        if digits[i] < digits[i + 1] then\n            local j = i + 1\n            while j <= #digits and digits[j] > digits[i] do\n                j = j + 1\n            end\n            j = j - 1\n            digits[i], digits[j] = digits[j], digits[i]\n            local left = i + 1\n            local right = #digits\n            while left < right do\n                digits[left], digits[right] = digits[right], digits[left]\n                left = left + 1\n                right = right - 1\n            end\n            return tonumber(table.concat(digits))\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_lb8uf50.lua:32: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp_lb8uf50.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95cwu6z8.lua:36: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp95cwu6z8.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = #digits\n    i = i + 1\n    while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2axys4zr.lua:37: expected: 21, actual: nil\nstack traceback:\n\t/tmp/tmp2axys4zr.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = \"\"\n  for i = 1, #digits do\n    result = result .. tostring(digits[i])\n  end\n  return tonumber(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppavf8r31.lua:4: attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmppavf8r31.lua:4: in local 'candidate'\n\t/tmp/tmppavf8r31.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    return tonumber(table.concat(digits))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwezukoue.lua:33: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpwezukoue.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i,i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i+1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = \"\"\n  for i = 1, #digits do\n    result = result .. tostring(digits[i])\n  end\n  return tonumber(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe4h9kzni.lua:4: attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmpe4h9kzni.lua:4: in local 'candidate'\n\t/tmp/tmpe4h9kzni.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for d in tostring(n):gmatch('%d') do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3tdp3d5h.lua:37: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp3tdp3d5h.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzycs1qw.lua:36: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpnzycs1qw.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i+1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3q0g3op8.lua:37: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp3q0g3op8.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnw6_wb5t.lua:36: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpnw6_wb5t.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = i\n  while j < #digits and digits[j+1] > digits[i-1] do\n    j = j + 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = i\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkg31i5pl.lua:37: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpkg31i5pl.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    table.sort(digits)\n    local result = 0\n    for i, v in ipairs(digits) do\n        result = result * 10 + v\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpss03sr5v.lua:19: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmpss03sr5v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  while n > 0 do\n    table.insert(digits, 1, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe2_v_ge0.lua:38: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpe2_v_ge0.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = {}\n  for i = 1, #digits do\n    result[i] = tostring(digits[i])\n  end\n  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwf_ykq4j.lua:4: attempt to get length of local 'n' (a number value)\nstack traceback:\n\t/tmp/tmpwf_ykq4j.lua:4: in function 'candidate'\n\t/tmp/tmpwf_ykq4j.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #tostring(n) do\n    digits[i] = tonumber(tostring(n):sub(i, i))\n  end\n  local i = #digits\n  while i > 1 do\n    if digits[i] > digits[i - 1] then\n      local j = #digits\n      while digits[j] < digits[i - 1] do\n        j = j - 1\n      end\n      digits[i - 1], digits[j] = digits[j], digits[i - 1]\n      local k = #digits\n      while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n      end\n      break\n    end\n    i = i - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0k3hntx.lua:36: expected: false, actual: 10\nstack traceback:\n\t/tmp/tmpn0k3hntx.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    local i = 0\n    while n > 0 do\n        i = i + 1\n        digits[i] = n % 10\n        n = math.floor(n / 10)\n    end\n    for i = #digits - 1, 1, -1 do\n        if digits[i] > digits[i + 1] then\n            local j = i + 1\n            while j <= #digits and digits[j] < digits[i] do\n                j = j + 1\n            end\n            digits[i], digits[j - 1] = digits[j - 1], digits[i]\n            for k = i + 1, #digits do\n                for l = k + 1, #digits do\n                    if digits[k] > digits[l] then\n                        digits[k], digits[l] = digits[l], digits[k]\n                    end\n                end\n            end\n            break\n        end\n    end\n    local result = 0\n    for i = #digits, 1, -1 do\n        result = result * 10 + digits[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgi5v92yo.lua:38: expected: false, actual: 10\nstack traceback:\n\t/tmp/tmpgi5v92yo.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local s = tostring(n)\n  local len = #s\n  local i = len\n  while i > 1 and s:sub(i, i) <= s:sub(i - 1, i - 1) do\n    i = i - 1\n  end\n  if i == 1 then\n    return -1\n  end\n  local j = len\n  while s:sub(j, j) >= s:sub(i - 1, i - 1) do\n    j = j - 1\n  end\n  local t = s:sub(1, i - 2) .. s:sub(j, j)\n  local k = i\n  while k <= j do\n    t = t .. s:sub(k, k)\n    k = k + 1\n  end\n  k = i - 1\n  while k > 1 do\n    t = t .. s:sub(k, k)\n    k = k - 1\n  end\n  return tonumber(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaeg89ph0.lua:33: expected: 21, actual: nil\nstack traceback:\n\t/tmp/tmpaeg89ph0.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end\n    local i = #digits\n    while i > 1 and digits[i] <= digits[i - 1] do\n        i = i - 1\n    end\n    if i == 1 then\n        return -1\n    end\n    local j = i\n    while j < #digits and digits[j] > digits[i - 1] do\n        j = j + 1\n    end\n    digits[i - 1], digits[j - 1] = digits[j - 1], digits[i - 1]\n    local k = i\n    j = #digits\n    while k < j do\n        digits[k], digits[j] = digits[j], digits[k]\n        k = k + 1\n        j = j - 1\n    end\n    local result = 0\n    for _, v in ipairs(digits) do\n        result = result * 10 + v\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1j95awnn.lua:38: expected: 21, actual: -1\nstack traceback:\n\t/tmp/tmp1j95awnn.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n\tlocal s = tostring(n)\n\tlocal t = {}\n\tfor i = 1, #s do\n\t\tt[i] = tonumber(s:sub(i, i))\n\tend\n\tlocal i = #t\n\twhile i > 1 and t[i - 1] >= t[i] do\n\t\ti = i - 1\n\tend\n\tif i <= 1 then\n\t\treturn -1\n\tend\n\tlocal j = #t\n\twhile t[j] <= t[i - 1] do\n\t\tj = j - 1\n\tend\n\tt[i - 1], t[j] = t[j], t[i - 1]\n\tlocal k = #t\n\twhile i < k do\n\t\tt[i], t[k] = t[k], t[i]\n\t\ti = i + 1\n\t\tk = k - 1\n\tend\n\tlocal r = 0\n\tfor i = 1, #t do\n\t\tr = r * 10 + t[i]\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp866vxtd_.lua:37: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp866vxtd_.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(d))\n    end\n    table.sort(digits)\n    local i = #digits\n    while i > 1 and digits[i] <= digits[i - 1] do\n        i = i - 1\n    end\n    if i == 1 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i - 1] do\n        j = j - 1\n    end\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    local head = table.remove(digits, 1, i - 1)\n    table.sort(digits)\n    return table.concat(head, \"\") .. table.concat(digits, \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9rxt6el.lua:22: bad argument #1 to 'concat' (table expected, got number)\nstack traceback:\n\t/tmp/tmpw9rxt6el.lua:22: in local 'candidate'\n\t/tmp/tmpw9rxt6el.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = \"\"\n  for i = 1, #digits do\n    result = result .. tostring(digits[i])\n  end\n  return tonumber(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppavf8r31.lua:4: attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmppavf8r31.lua:4: in local 'candidate'\n\t/tmp/tmppavf8r31.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    local digit = n_copy % 10\n    table.insert(digits, digit)\n    n_copy = math.floor(n_copy / 10)\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "lua: /tmp/tmpg65aszw7.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    for i = #digits - 1, 1, -1 do\n        if digits[i] > digits[i + 1] then\n            local j = i + 1\n            while j < #digits and digits[j] < digits[i] do\n                j = j + 1\n            end\n            digits[i], digits[j] = digits[j], digits[i]\n            table.sort(digits, i + 1, #digits)\n            local result = 0\n            for j = 1, #digits do\n                result = result * 10 + digits[j]\n            end\n            return result\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9t9gli2y.lua:15: bad argument #2 to 'sort' (function expected, got number)\nstack traceback:\n\t/tmp/tmp9t9gli2y.lua:15: in local 'candidate'\n\t/tmp/tmp9t9gli2y.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i <= 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmta8gflz.lua:36: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmpmta8gflz.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i+1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3q0g3op8.lua:37: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp3q0g3op8.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return -1\n    end\n    local j = #digits\n    while digits[i] >= digits[j] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm83w2o1u.lua:37: expected: 21, actual: -1\nstack traceback:\n\t/tmp/tmpm83w2o1u.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for digit in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(digit))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, digit in ipairs(digits) do\n    result = result * 10 + digit\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rfyhsjc.lua:37: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp5rfyhsjc.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  while n > 0 do\n    digits[#digits+1] = n % 10\n    n = math.floor(n / 10)\n  end\n  for i = #digits-1, 1, -1 do\n    if digits[i] < digits[i+1] then\n      local j = i+1\n      while j <= #digits and digits[j] > digits[i] do\n        j = j + 1\n      end\n      j = j - 1\n      digits[i], digits[j] = digits[j], digits[i]\n      for k = i+1, math.floor((#digits+i)/2) do\n        digits[k], digits[#digits+i-k+1] = digits[#digits+i-k+1], digits[k]\n      end\n      local result = 0\n      for k = 1, #digits do\n        result = result * 10 + digits[k]\n      end\n      return result\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrpdefrf.lua:32: expected: 21, actual: nil\nstack traceback:\n\t/tmp/tmpjrpdefrf.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i+1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpt3hgjq.lua:37: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpmpt3hgjq.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #tostring(n) do\n    table.insert(digits, tonumber(tostring(n):sub(i, i)))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i > 1 then\n    local j = #digits\n    while digits[j] <= digits[i - 1] do\n      j = j - 1\n    end\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    local k = #digits\n    while i < k do\n      digits[i], digits[k] = digits[k], digits[i]\n      i = i + 1\n      k = k - 1\n    end\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpht5pnoww.lua:35: expected: false, actual: 10\nstack traceback:\n\t/tmp/tmpht5pnoww.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnraj3eud.lua:37: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpnraj3eud.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  table.sort(digits)\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsjwtjyk8.lua:20: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmpsjwtjyk8.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local n_str = tostring(n)\n    local n_len = #n_str\n    local n_arr = {}\n    for i = 1, n_len do\n        n_arr[i] = tonumber(n_str:sub(i, i))\n    end\n    local i = n_len - 1\n    while i > 0 and n_arr[i] >= n_arr[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return -1\n    end\n    local j = n_len\n    while n_arr[j] <= n_arr[i] do\n        j = j - 1\n    end\n    n_arr[i], n_arr[j] = n_arr[j], n_arr[i]\n    local k = i + 1\n    local l = n_len\n    while k < l do\n        n_arr[k], n_arr[l] = n_arr[l], n_arr[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for i = 1, n_len do\n        result = result * 10 + n_arr[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwoglr6l.lua:39: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmpxwoglr6l.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits - 1\n  while i >= 1 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i < 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppx_kzce7.lua:37: expected: 21, actual: nil\nstack traceback:\n\t/tmp/tmppx_kzce7.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  while n > 0 do\n    digits[#digits+1] = n % 10\n    n = math.floor(n / 10)\n  end\n  for i = #digits-1, 1, -1 do\n    if digits[i] < digits[i+1] then\n      local j = i + 1\n      while j < #digits and digits[j] > digits[i] do\n        j = j + 1\n      end\n      digits[i], digits[j-1] = digits[j-1], digits[i]\n      local k = i + 1\n      local l = #digits\n      while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n      end\n      local result = 0\n      for i = 1, #digits do\n        result = result * 10 + digits[i]\n      end\n      return result\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy65hmlju.lua:35: expected: 21, actual: nil\nstack traceback:\n\t/tmp/tmpy65hmlju.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n\tlocal digits = {}\n\twhile n > 0 do\n\t\ttable.insert(digits, n % 10)\n\t\tn = math.floor(n / 10)\n\tend\n\tlocal i = #digits - 1\n\twhile i > 0 and digits[i] <= digits[i+1] do\n\t\ti = i - 1\n\tend\n\tif i > 0 then\n\t\tlocal j = #digits\n\t\twhile digits[j] <= digits[i] do\n\t\t\tj = j - 1\n\t\tend\n\t\tdigits[i], digits[j] = digits[j], digits[i]\n\t\ti = i + 1\n\t\tj = #digits\n\t\twhile i < j do\n\t\t\tdigits[i], digits[j] = digits[j], digits[i]\n\t\t\ti = i + 1\n\t\t\tj = j - 1\n\t\tend\n\tend\n\tlocal result = 0\n\tfor i = 1, #digits do\n\t\tresult = result * 10 + digits[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpklfz1862.lua:14: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpklfz1862.lua:14: in local 'candidate'\n\t/tmp/tmpklfz1862.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  while n > 0 do\n    table.insert(digits, 1, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph05_ji82.lua:36: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmph05_ji82.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    table.sort(digits)\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3h3d1u5c.lua:19: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmp3h3d1u5c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  table.sort(digits, function(a, b) return a > b end)\n  local result = 0\n  for i, d in ipairs(digits) do\n    result = result + d * 10 ^ (i - 1)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbq2hux84.lua:18: expected: 21, actual: 12.0\nstack traceback:\n\t/tmp/tmpbq2hux84.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    digits[#digits + 1] = n_copy % 10\n    n_copy = math.floor(n_copy / 10)\n  end\n  for i = #digits - 1, 1, -1 do\n    if digits[i] > digits[i + 1] then\n      local j = i + 1\n      while j <= #digits and digits[j] < digits[i] do\n        j = j + 1\n      end\n      digits[i], digits[j - 1] = digits[j - 1], digits[i]\n      for k = 1, math.floor((#digits - i) / 2) do\n        digits[i + k], digits[#digits - k + 1] = digits[#digits - k + 1], digits[i + k]\n      end\n      break\n    end\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9jp89erp.lua:32: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmp9jp89erp.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local s = tostring(n)\n    local i = #s\n    while i > 1 and s:sub(i, i) <= s:sub(i - 1, i - 1) do\n        i = i - 1\n    end\n    if i == 1 then\n        return -1\n    end\n    local j = #s\n    while s:sub(j, j) <= s:sub(i - 1, i - 1) do\n        j = j - 1\n    end\n    s = s:sub(1, i - 1) .. s:sub(j, j) .. s:sub(i, j - 1) .. s:sub(i - 1, i - 1) .. s:sub(j + 1, #s)\n    return tonumber(s)\nend\nassert(rearrange_bigger(2017) == 2071)\nassert(rearrange_bigger(414) == 441)\nassert(rearrange_bigger(144) == 414)\nassert(rearrange_bigger(123456789) == 123456798)\nassert(rearrange_bigger(123456798) == -1)\nassert(rearrange_bigger(1234567908) == 1234568907)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "lua: /tmp/tmpiww2_c1n.lua:18: assertion failed!\nstack traceback:\n\t[C]: in function 'assert'\n\t/tmp/tmpiww2_c1n.lua:18: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n\tlocal digits = {}\n\tlocal n_copy = n\n\twhile n_copy > 0 do\n\t\ttable.insert(digits, n_copy % 10)\n\t\tn_copy = math.floor(n_copy / 10)\n\tend\n\tlocal i = #digits - 1\n\twhile i > 0 and digits[i] <= digits[i + 1] do\n\t\ti = i - 1\n\tend\n\tif i == 0 then\n\t\treturn -1\n\tend\n\tlocal j = #digits\n\twhile digits[j] <= digits[i] do\n\t\tj = j - 1\n\tend\n\tdigits[i], digits[j] = digits[j], digits[i]\n\tlocal k = i + 1\n\tlocal l = #digits\n\twhile k < l do\n\t\tdigits[k], digits[l] = digits[l], digits[k]\n\t\tk = k + 1\n\t\tl = l - 1\n\tend\n\tlocal result = 0\n\tfor _, d in ipairs(digits) do\n\t\tresult = result * 10 + d\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc61j0ot9.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpc61j0ot9.lua:17: in local 'candidate'\n\t/tmp/tmpc61j0ot9.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    local digit = n_copy % 10\n    table.insert(digits, digit)\n    n_copy = math.floor(n_copy / 10)\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "lua: /tmp/tmpg65aszw7.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n\tlocal digits = {}\n\tlocal n_copy = n\n\twhile n_copy > 0 do\n\t\ttable.insert(digits, n_copy % 10)\n\t\tn_copy = math.floor(n_copy / 10)\n\tend\n\tlocal i = #digits - 1\n\twhile i > 0 and digits[i] <= digits[i + 1] do\n\t\ti = i - 1\n\tend\n\tif i == 0 then\n\t\treturn nil\n\tend\n\tlocal j = #digits\n\twhile digits[j] <= digits[i] do\n\t\tj = j - 1\n\tend\n\tlocal tmp = digits[i]\n\tdigits[i] = digits[j]\n\tdigits[j] = tmp\n\tlocal left = i + 1\n\tlocal right = #digits\n\twhile left < right do\n\t\ttmp = digits[left]\n\t\tdigits[left] = digits[right]\n\t\tdigits[right] = tmp\n\t\tleft = left + 1\n\t\tright = right - 1\n\tend\n\tlocal result = 0\n\tfor i = 1, #digits do\n\t\tresult = result * 10 + digits[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzfbjfbng.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpzfbjfbng.lua:17: in local 'candidate'\n\t/tmp/tmpzfbjfbng.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local n = n\n  while n > 0 do\n    table.insert(digits, n % 10)\n    n = math.floor(n / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] <= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgpeohtka.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpgpeohtka.lua:17: in local 'candidate'\n\t/tmp/tmpgpeohtka.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    local digit = n_copy % 10\n    table.insert(digits, digit)\n    n_copy = math.floor(n_copy / 10)\n  end\n  local digits_len = #digits\n  local i = digits_len - 1\n  while i > 0 and digits[i] <= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = digits_len\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = digits_len\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for i = 1, digits_len do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpphw_9yrf.lua:19: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpphw_9yrf.lua:19: in local 'candidate'\n\t/tmp/tmpphw_9yrf.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local nn = n\n  while nn > 0 do\n    table.insert(digits, nn % 10)\n    nn = math.floor(nn / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] <= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsdv2h_hk.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpsdv2h_hk.lua:17: in local 'candidate'\n\t/tmp/tmpsdv2h_hk.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb451z8r7.lua:4: attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmpb451z8r7.lua:4: in local 'candidate'\n\t/tmp/tmpb451z8r7.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  table.sort(digits)\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i == 1 then return nil end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpurfjdqgf.lua:35: expected: false, actual: 10\nstack traceback:\n\t/tmp/tmpurfjdqgf.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77f98b6g.lua:36: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp77f98b6g.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  local i = #digits - 1\n  while i > 0 do\n    if digits[i] > digits[i + 1] then\n      break\n    end\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while j > i do\n    if digits[j] > digits[i] then\n      break\n    end\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxqxb_ezc.lua:45: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmpxqxb_ezc.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(d))\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "lua: /tmp/tmpj4t04p2y.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #tostring(n) do\n    digits[i] = tonumber(tostring(n):sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5iod1he5.lua:36: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp5iod1he5.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  local i = #digits\n  while i > 1 do\n    if digits[i] > digits[i - 1] then\n      local j = #digits\n      while digits[j] < digits[i - 1] do\n        j = j - 1\n      end\n      digits[i - 1], digits[j] = digits[j], digits[i - 1]\n      table.sort(digits, i, #digits)\n      local result = 0\n      for k = 1, #digits do\n        result = result * 10 + digits[k]\n      end\n      return result\n    end\n    i = i - 1\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1kjlsjtq.lua:32: expected: 21, actual: -1\nstack traceback:\n\t/tmp/tmp1kjlsjtq.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(d))\n  end\n  table.sort(digits)\n  local result = 0\n  for i, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoww70uoc.lua:18: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmpoww70uoc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for d in tostring(n):gmatch(\".\") do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1n1xp8bs.lua:37: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp1n1xp8bs.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  table.sort(digits)\n  local result = 0\n  for i, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpit46d31e.lua:18: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmpit46d31e.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = {}\n  for i = 1, #digits do\n    result[i] = tostring(digits[i])\n  end\n  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwf_ykq4j.lua:4: attempt to get length of local 'n' (a number value)\nstack traceback:\n\t/tmp/tmpwf_ykq4j.lua:4: in function 'candidate'\n\t/tmp/tmpwf_ykq4j.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\".\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i > 1 then\n    local j = #digits\n    while digits[j] <= digits[i-1] do\n      j = j - 1\n    end\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    local k = #digits\n    while i < k do\n      digits[i], digits[k] = digits[k], digits[i]\n      i = i + 1\n      k = k - 1\n    end\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniqyv1au.lua:35: expected: false, actual: 10\nstack traceback:\n\t/tmp/tmpniqyv1au.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local n = n\n  while n > 0 do\n    local digit = n % 10\n    table.insert(digits, digit)\n    n = math.floor(n / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiip1_xr2.lua:39: expected: 21, actual: -1\nstack traceback:\n\t/tmp/tmpiip1_xr2.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  table.sort(digits)\n  local bigger = 0\n  for i = 1, #digits do\n    bigger = bigger + digits[i] * 10 ^ (i - 1)\n  end\n  return bigger\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp429et_p_.lua:21: expected: false, actual: 10.0\nstack traceback:\n\t/tmp/tmp429et_p_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    while n > 0 do\n        table.insert(digits, n % 10)\n        n = math.floor(n / 10)\n    end\n    table.sort(digits)\n    local result = 0\n    for i, v in ipairs(digits) do\n        result = result * 10 + v\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpss03sr5v.lua:19: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmpss03sr5v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpygpijoku.lua:36: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmpygpijoku.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i - 1] >= digits[i] do\n    i = i - 1\n  end\n  if i <= 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  return tonumber(table.concat(digits))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71ufa1ir.lua:32: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp71ufa1ir.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i <= 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    return table.concat(digits)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8facq59.lua:32: expected: 21, actual: \"21\"\nstack traceback:\n\t/tmp/tmph8facq59.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for i = 1, #n do\n        digits[i] = tonumber(n:sub(i, i))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = \"\"\n    for i = 1, #digits do\n        result = result .. tostring(digits[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphe1t27us.lua:4: attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmphe1t27us.lua:4: in local 'candidate'\n\t/tmp/tmphe1t27us.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, tonumber(d))\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for _, d in ipairs(digits) do\n        result = result * 10 + d\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6dk9_z0.lua:37: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpr6dk9_z0.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local res = 0\n  for _, d in ipairs(digits) do\n    res = res * 10 + d\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwpi4qeop.lua:37: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmpwpi4qeop.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n\tlocal digits = {}\n\tfor d in tostring(n):gmatch(\".\") do\n\t\ttable.insert(digits, tonumber(d))\n\tend\n\tlocal i = #digits - 1\n\twhile i > 0 and digits[i] >= digits[i + 1] do\n\t\ti = i - 1\n\tend\n\tif i == 0 then\n\t\treturn -1\n\tend\n\tlocal j = #digits\n\twhile digits[j] <= digits[i] do\n\t\tj = j - 1\n\tend\n\tdigits[i], digits[j] = digits[j], digits[i]\n\tlocal k = i + 1\n\tlocal l = #digits\n\twhile k < l do\n\t\tdigits[k], digits[l] = digits[l], digits[k]\n\t\tk = k + 1\n\t\tl = l - 1\n\tend\n\tlocal result = 0\n\tfor _, d in ipairs(digits) do\n\t\tresult = result * 10 + d\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb7uxvl15.lua:37: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmpb7uxvl15.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local i = 1\n  while n > 0 do\n    digits[i] = n % 10\n    n = math.floor(n / 10)\n    i = i + 1\n  end\n  local j = #digits - 1\n  while j > 0 and digits[j] >= digits[j + 1] do\n    j = j - 1\n  end\n  if j == 0 then\n    return nil\n  end\n  local k = #digits\n  while digits[k] <= digits[j] do\n    k = k - 1\n  end\n  digits[j], digits[k] = digits[k], digits[j]\n  local l = j + 1\n  local r = #digits\n  while l < r do\n    digits[l], digits[r] = digits[r], digits[l]\n    l = l + 1\n    r = r - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gxqs5sg.lua:39: expected: 21, actual: nil\nstack traceback:\n\t/tmp/tmp2gxqs5sg.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i-1] do\n    j = j - 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77f98b6g.lua:36: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp77f98b6g.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        local digit = n_copy % 10\n        table.insert(digits, digit)\n        n_copy = math.floor(n_copy / 10)\n    end\n    table.sort(digits)\n    local bigger = 0\n    for i = 1, #digits do\n        bigger = bigger * 10 + digits[i]\n    end\n    return bigger\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8xum21b.lua:21: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmpc8xum21b.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then return nil end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk709w1e4.lua:33: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmpk709w1e4.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i+1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpt3hgjq.lua:37: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpmpt3hgjq.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local i = 1\n  while n > 0 do\n    digits[i] = n % 10\n    n = math.floor(n / 10)\n    i = i + 1\n  end\n  for i = #digits, 2, -1 do\n    if digits[i] > digits[i - 1] then\n      local tmp = digits[i]\n      digits[i] = digits[i - 1]\n      digits[i - 1] = tmp\n      break\n    end\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ehetaw9.lua:29: expected: false, actual: 10\nstack traceback:\n\t/tmp/tmp4ehetaw9.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    local nn = n\n    while nn > 0 do\n        digits[#digits + 1] = nn % 10\n        nn = math.floor(nn / 10)\n    end\n    local i = #digits - 1\n    while i > 0 and digits[i] >= digits[i + 1] do\n        i = i - 1\n    end\n    if i == 0 then\n        return nil\n    end\n    local j = #digits\n    while digits[j] <= digits[i] do\n        j = j - 1\n    end\n    digits[i], digits[j] = digits[j], digits[i]\n    local k = i + 1\n    local l = #digits\n    while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr0x_roi3.lua:38: expected: 21, actual: nil\nstack traceback:\n\t/tmp/tmpr0x_roi3.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for i = 1, #tostring(n) do\n        digits[i] = tonumber(tostring(n):sub(i, i))\n    end\n    local i = #digits\n    while i > 1 and digits[i] <= digits[i - 1] do\n        i = i - 1\n    end\n    if i == 1 then\n        return -1\n    end\n    local j = #digits\n    while digits[j] <= digits[i - 1] do\n        j = j - 1\n    end\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    local k = #digits\n    while i < k do\n        digits[i], digits[k] = digits[k], digits[i]\n        i = i + 1\n        k = k - 1\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ojqnadp.lua:36: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp1ojqnadp.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = \"\"\n  for i = 1, #digits do\n    result = result .. tostring(digits[i])\n  end\n  return tonumber(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpssou5o5q.lua:4: attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmpssou5o5q.lua:4: in local 'candidate'\n\t/tmp/tmpssou5o5q.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzycs1qw.lua:36: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpnzycs1qw.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1h_zzp56.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  for i = #digits - 1, 1, -1 do\n    if digits[i] < digits[i + 1] then\n      local j = i + 1\n      while digits[j] > digits[i] do\n        j = j + 1\n      end\n      digits[i], digits[j - 1] = digits[j - 1], digits[i]\n      local left = i + 1\n      local right = #digits\n      while left < right do\n        digits[left], digits[right] = digits[right], digits[left]\n        left = left + 1\n        right = right - 1\n      end\n      return table.concat(digits)\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp55rhtlqd.lua:4: attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmp55rhtlqd.lua:4: in local 'candidate'\n\t/tmp/tmp55rhtlqd.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = {}\n  for i = 1, #digits do\n    result[i] = tostring(digits[i])\n  end\n  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027790,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwf_ykq4j.lua:4: attempt to get length of local 'n' (a number value)\nstack traceback:\n\t/tmp/tmpwf_ykq4j.lua:4: in function 'candidate'\n\t/tmp/tmpwf_ykq4j.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    for d in tostring(n):gmatch(\"%d\") do\n        table.insert(digits, d)\n    end\n    for i = #digits - 1, 1, -1 do\n        if digits[i] < digits[i + 1] then\n            local j = i + 1\n            while j <= #digits and digits[i] < digits[j] do\n                j = j + 1\n            end\n            digits[i], digits[j - 1] = digits[j - 1], digits[i]\n            table.sort(digits, i + 1, #digits)\n            return tonumber(table.concat(digits))\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp88fmw9tf.lua:14: bad argument #2 to 'sort' (function expected, got number)\nstack traceback:\n\t/tmp/tmp88fmw9tf.lua:14: in local 'candidate'\n\t/tmp/tmp88fmw9tf.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #tostring(n) do\n    digits[i] = tonumber(tostring(n):sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i - 1] >= digits[i] do\n    i = i - 1\n  end\n  if i <= 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  j = #digits\n  while i < j do\n    digits[i], digits[j] = digits[j], digits[i]\n    i = i + 1\n    j = j - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp303k92wi.lua:36: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp303k92wi.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = \"\"\n  for i = 1, #digits do\n    result = result .. tostring(digits[i])\n  end\n  return tonumber(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpssou5o5q.lua:4: attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmpssou5o5q.lua:4: in local 'candidate'\n\t/tmp/tmpssou5o5q.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    local n_copy = n\n    while n_copy > 0 do\n        table.insert(digits, n_copy % 10)\n        n_copy = math.floor(n_copy / 10)\n    end\n    table.sort(digits)\n    local result = 0\n    for i = #digits, 1, -1 do\n        result = result * 10 + digits[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg21g0ogu.lua:21: expected: false, actual: 10\nstack traceback:\n\t/tmp/tmpg21g0ogu.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #tostring(n) do\n    digits[i] = tonumber(tostring(n):sub(i, i))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5iod1he5.lua:36: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmp5iod1he5.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for digit in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(digit))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  local result = 0\n  for _, digit in ipairs(digits) do\n    result = result * 10 + digit\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rrg035e.lua:35: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmp4rrg035e.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i > 1 then\n    local j = #digits\n    while digits[j] <= digits[i - 1] do\n      j = j - 1\n    end\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    local k = #digits\n    while i < k do\n      digits[i], digits[k] = digits[k], digits[i]\n      i = i + 1\n      k = k - 1\n    end\n  end\n  local result = 0\n  for i = 1, #digits do\n    result = result * 10 + digits[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp23rpq1zq.lua:35: expected: false, actual: 10\nstack traceback:\n\t/tmp/tmp23rpq1zq.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  while n > 0 do\n    digits[#digits + 1] = n % 10\n    n = math.floor(n / 10)\n  end\n  for i = #digits - 1, 1, -1 do\n    if digits[i] > digits[i + 1] then\n      local j = i + 1\n      while j < #digits and digits[j] > digits[i] do\n        j = j + 1\n      end\n      digits[i], digits[j - 1] = digits[j - 1], digits[i]\n      local k = i + 1\n      local l = #digits\n      while k < l do\n        digits[k], digits[l] = digits[l], digits[k]\n        k = k + 1\n        l = l - 1\n      end\n      local result = 0\n      for i = 1, #digits do\n        result = result * 10 + digits[i]\n      end\n      return result\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms2bk0sv.lua:36: expected: false, actual: -1\nstack traceback:\n\t/tmp/tmpms2bk0sv.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    local n = n\n    while n > 0 do\n        digits[#digits+1] = n % 10\n        n = math.floor(n / 10)\n    end\n    for i = #digits-1, 1, -1 do\n        if digits[i] < digits[i+1] then\n            local j = i + 1\n            while j < #digits and digits[j] > digits[i] do\n                j = j + 1\n            end\n            j = j - 1\n            digits[i], digits[j] = digits[j], digits[i]\n            for k = 1, math.floor((#digits-i)/2) do\n                digits[i+k], digits[#digits-k+1] = digits[#digits-k+1], digits[i+k]\n            end\n            break\n        end\n    end\n    local result = 0\n    for i = 1, #digits do\n        result = result * 10 + digits[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1qd7ub1.lua:34: expected: false, actual: 1\nstack traceback:\n\t/tmp/tmph1qd7ub1.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i-1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return nil\n  end\n  local j = i\n  while j < #digits and digits[j+1] > digits[i-1] do\n    j = j + 1\n  end\n  digits[i-1], digits[j] = digits[j], digits[i-1]\n  local k = i\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkg31i5pl.lua:37: expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpkg31i5pl.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for d in tostring(n):gmatch('%d') do\n    table.insert(digits, tonumber(d))\n  end\n  table.sort(digits)\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i > 1 then\n    local j = #digits\n    while digits[j] <= digits[i - 1] do\n      j = j - 1\n    end\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    local k = #digits\n    while i < k do\n      digits[i], digits[k] = digits[k], digits[i]\n      i = i + 1\n      k = k - 1\n    end\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr24jbjzx.lua:36: expected: false, actual: 10\nstack traceback:\n\t/tmp/tmpr24jbjzx.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  local n_copy = n\n  while n_copy > 0 do\n    table.insert(digits, n_copy % 10)\n    n_copy = math.floor(n_copy / 10)\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] <= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = 0\n  for _, d in ipairs(digits) do\n    result = result * 10 + d\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuk9l0xjz.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpuk9l0xjz.lua:17: in local 'candidate'\n\t/tmp/tmpuk9l0xjz.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for i = 1, #n do\n    digits[i] = tonumber(n:sub(i, i))\n  end\n  local i = #digits - 1\n  while i > 0 and digits[i] >= digits[i + 1] do\n    i = i - 1\n  end\n  if i == 0 then\n    return nil\n  end\n  local j = #digits\n  while digits[j] <= digits[i] do\n    j = j - 1\n  end\n  digits[i], digits[j] = digits[j], digits[i]\n  local k = i + 1\n  local l = #digits\n  while k < l do\n    digits[k], digits[l] = digits[l], digits[k]\n    k = k + 1\n    l = l - 1\n  end\n  local result = \"\"\n  for _, d in ipairs(digits) do\n    result = result .. d\n  end\n  return tonumber(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbfktdjug.lua:4: attempt to get length of a number value (local 'n')\nstack traceback:\n\t/tmp/tmpbfktdjug.lua:4: in local 'candidate'\n\t/tmp/tmpbfktdjug.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n  local digits = {}\n  for digit in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(digit))\n  end\n  local i = #digits\n  while i > 1 and digits[i] <= digits[i - 1] do\n    i = i - 1\n  end\n  if i == 1 then\n    return -1\n  end\n  local j = #digits\n  while digits[j] <= digits[i - 1] do\n    j = j - 1\n  end\n  digits[i - 1], digits[j] = digits[j], digits[i - 1]\n  local k = #digits\n  while i < k do\n    digits[i], digits[k] = digits[k], digits[i]\n    i = i + 1\n    k = k - 1\n  end\n  return table.concat(digits)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu36kti88.lua:31: expected: 21, actual: \"21\"\nstack traceback:\n\t/tmp/tmpu36kti88.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}