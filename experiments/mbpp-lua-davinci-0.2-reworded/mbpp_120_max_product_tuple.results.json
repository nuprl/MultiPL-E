{
  "name": "mbpp_120_max_product_tuple",
  "language": "lua",
  "prompt": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = math.abs(list1[i][j] * list1[i][k])\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= j and j ~= k and i ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5pv3jra3.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmp5pv3jra3.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = math.abs(list1[i] * list1[j])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwv8yu0kp.lua:6: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpwv8yu0kp.lua:6: in function 'candidate'\n\t/tmp/tmpwv8yu0kp.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = -math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9njlrn76.lua:6: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmp9njlrn76.lua:6: in function 'candidate'\n\t/tmp/tmp9njlrn76.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local product = math.abs(list1[i][j] * list1[i][k])\n        if product > max_product then\n          max_product = product\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbq35wr9l.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpbq35wr9l.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = list1[i][j] * list1[i][k]\n                    if product > max then\n                        max = product\n                    end\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = math.abs(list1[i][j] * list1[i][k])\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = math.abs(list1[i][j] * list1[i][k])\n                    if product > max then\n                        max = product\n                    end\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = math.abs(list1[i][j] * list1[i][k])\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local product = list1[i][j] * list1[i][k]\n        if product > max_product then\n          max_product = product\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptz_z0c_w.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmptz_z0c_w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      local product = list1[i][j] * list1[i][j+1]\n      if product > max then\n        max = product\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyvyotscq.lua:6: attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpyvyotscq.lua:6: in function 'candidate'\n\t/tmp/tmpyvyotscq.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k then\n                    local product = list1[i][j] * list1[k][j]\n                    if math.abs(product) > max then\n                        max = math.abs(product)\n                    end\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgaz4n6y.lua:22: expected: 36, actual: 63\nstack traceback:\n\t/tmp/tmpkgaz4n6y.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local product = math.abs(list1[i][j] * list1[i][k])\n        if product > max_product then\n          max_product = product\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbq35wr9l.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpbq35wr9l.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local prod = list1[i][j] * list1[i][k]\n          if prod > max then\n            max = prod\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= j and j ~= k and k ~= i then\n                    local product = list1[i][j] * list1[i][k]\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjuot45ql.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmpjuot45ql.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = list1[i][j] * list1[i][k]\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = list1[i][j] * list1[i][k]\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = math.abs(list1[i][j] * list1[i][k])\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = list1[i][j] * list1[i][k]\n                    if product > max then\n                        max = product\n                    end\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i, v in ipairs(list1) do\n        for j, w in ipairs(list1) do\n            local product = math.abs(v[1] * w[1])\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndibid0d.lua:18: expected: 36, actual: 16\nstack traceback:\n\t/tmp/tmpndibid0d.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i = 1, #list1 do\n\t\tlocal list2 = list1[i]\n\t\tfor j = 1, #list2 do\n\t\t\tlocal product = math.abs(list2[j])\n\t\t\tif product > max_product then\n\t\t\t\tmax_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2i49hvt3.lua:19: expected: 36, actual: 9\nstack traceback:\n\t/tmp/tmp2i49hvt3.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = i, #list1 do\n        for l = 1, #list1[k] do\n          local product = list1[i][j] * list1[k][l]\n          if math.abs(product) > math.abs(max_product) then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzvdw5g2b.lua:22: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpzvdw5g2b.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local product = list1[i][j] * list1[i][k]\n        if product > max_product then\n          max_product = product\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptz_z0c_w.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmptz_z0c_w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i, v1 in ipairs(list1) do\n    for j, v2 in ipairs(list1) do\n      if i ~= j then\n        local product = math.abs(v1[1] * v2[1])\n        if product > max_product then\n          max_product = product\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7r3b0nkl.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmp7r3b0nkl.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k then\n          local product = math.abs(list1[i][j] * list1[k][j])\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi82v_tm3.lua:22: expected: 36, actual: 63\nstack traceback:\n\t/tmp/tmpi82v_tm3.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and list1[i][j] * list1[k][j] > max then\n                    max = list1[i][j] * list1[k][j]\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2xc6l6p.lua:19: expected: 36, actual: 63\nstack traceback:\n\t/tmp/tmpb2xc6l6p.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = math.abs(list1[i][j] * list1[i][k])\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                local product = list1[i][j] * list1[i][k]\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpelaef25z.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpelaef25z.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = list1[1] * list1[2]\n    for i = 1, #list1 - 1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk5xi0sgp.lua:3: attempt to perform arithmetic on a table value (field 'integer index')\nstack traceback:\n\t/tmp/tmpk5xi0sgp.lua:3: in local 'candidate'\n\t/tmp/tmpk5xi0sgp.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = math.abs(list1[i][j] * list1[i][k])\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= j and j ~= k and i ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5pv3jra3.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmp5pv3jra3.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      local product = math.abs(list1[i][j][1] * list1[i][j][2])\n      if product > max then\n        max = product\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvsnkc4vu.lua:6: attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpvsnkc4vu.lua:6: in local 'candidate'\n\t/tmp/tmpvsnkc4vu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = math.abs(list1[i][j] * list1[i][k])\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local product = math.abs(list1[i][j] * list1[i][k])\n        if product > max then\n          max = product\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmsjrwe1q.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpmsjrwe1q.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                local product = list1[i][j] * list1[i][k]\n                if product > max then\n                    max = product\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40sm8l6y.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmp40sm8l6y.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= j and j ~= k and k ~= i then\n                    local product = list1[i][j] * list1[i][k]\n                    if product > max then\n                        max = product\n                    end\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4spgx6e0.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmp4spgx6e0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = math.abs(list1[i][j] * list1[i][k])\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1[i] do\n\t\t\tfor k = 1, #list1[i] do\n\t\t\t\tif i ~= k and j ~= k then\n\t\t\t\t\tlocal product = list1[i][j] * list1[i][k]\n\t\t\t\t\tif product > max then\n\t\t\t\t\t\tmax = product\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= j and j ~= k and k ~= i then\n          local product = list1[i][j] * list1[i][k]\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9i7gz8bl.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmp9i7gz8bl.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local prod = math.abs(list1[i][j] * list1[i][k])\n          if prod > max then\n            max = prod\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local product = list1[i][j] * list1[i][k]\n        if product > max_product then\n          max_product = product\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptz_z0c_w.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmptz_z0c_w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local product = list1[i][j] * list1[i][k]\n        if product > max_product then\n          max_product = product\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptz_z0c_w.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmptz_z0c_w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = -math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9njlrn76.lua:6: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmp9njlrn76.lua:6: in function 'candidate'\n\t/tmp/tmp9njlrn76.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= j and i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdl7mtv1v.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmpdl7mtv1v.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      local product = list1[i][j] * list1[i][j + 1]\n      if product > max then\n        max = product\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_sbmx582.lua:6: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmp_sbmx582.lua:6: in local 'candidate'\n\t/tmp/tmp_sbmx582.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                local product = math.abs(list1[i][j] * list1[i][k])\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgglx36yl.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpgglx36yl.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = list1[i] * list1[j]\n      if math.abs(product) > math.abs(max_product) then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ebajy_j.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmp6ebajy_j.lua:6: in local 'candidate'\n\t/tmp/tmp6ebajy_j.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_prod = 0\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local prod = list1[i] * list1[j]\n            if prod > max_prod then\n                max_prod = prod\n            end\n        end\n    end\n    return max_prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn2vo8nti.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpn2vo8nti.lua:6: in local 'candidate'\n\t/tmp/tmpn2vo8nti.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                local product = math.abs(list1[i][j] * list1[i][k])\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgglx36yl.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpgglx36yl.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      local product = list1[i][j] * list1[i][j + 1]\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwuybep5g.lua:6: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpwuybep5g.lua:6: in local 'candidate'\n\t/tmp/tmpwuybep5g.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if math.abs(product) > max then\n            max = math.abs(product)\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= j and j ~= k and k ~= i then\n                    local product = list1[i][j] * list1[i][k]\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjuot45ql.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmpjuot45ql.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = i, #list1 do\n        for l = 1, #list1[k] do\n          local product = math.abs(list1[i][j] * list1[k][l])\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4s13e8l4.lua:22: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmp4s13e8l4.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = math.abs(list1[i][j] * list1[i][k])\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local prod = math.abs(list1[i][j] * list1[i][k])\n          if prod > max then\n            max = prod\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= j and j ~= k and k ~= i then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3dsru7e5.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmp3dsru7e5.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = list1[i][j] * list1[i][k]\n                    if product > max then\n                        max = product\n                    end\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = math.abs(list1[i][j] * list1[i][k])\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    local list2 = list1[i]\n    for j = 1, #list2 do\n      local product = math.abs(list2[j][1] * list2[j][2])\n      if product > max then\n        max = product\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0e362yz7.lua:7: attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp0e362yz7.lua:7: in local 'candidate'\n\t/tmp/tmp0e362yz7.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                local product = math.abs(list1[i][j] * list1[i][k])\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgglx36yl.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpgglx36yl.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = math.abs(list1[i][j] * list1[i][k])\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = -math.huge\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local product = list1[i][j] * list1[i][k]\n        if product > max then\n          max = product\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ysms3cp.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmp_ysms3cp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1[i] do\n\t\t\tfor k = 1, #list1[i] do\n\t\t\t\tlocal product = list1[i][j] * list1[i][k]\n\t\t\t\tif product > max then\n\t\t\t\t\tmax = product\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9d6j4z3.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmp_9d6j4z3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = math.abs(list1[i][j] * list1[i][k])\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i = 1, #list1 do\n\t\tlocal list2 = list1[i]\n\t\tfor j = 1, #list2 do\n\t\t\tlocal product = math.abs(list2[j][1] * list2[j][2])\n\t\t\tif product > max_product then\n\t\t\t\tmax_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkkz2li3d.lua:7: attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpkkz2li3d.lua:7: in local 'candidate'\n\t/tmp/tmpkkz2li3d.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                local prod = list1[i][j] * list1[i][k]\n                if prod > max then\n                    max = prod\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0008rvs.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpw0008rvs.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i, v in ipairs(list1) do\n\t\tfor j, w in ipairs(list1) do\n\t\t\tif i ~= j then\n\t\t\t\tlocal prod = math.abs(v[1] * w[1])\n\t\t\t\tif prod > max then\n\t\t\t\t\tmax = prod\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg4lv1sq7.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpg4lv1sq7.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                local product = math.abs(list1[i][j] * list1[i][k])\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgglx36yl.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpgglx36yl.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = math.abs(list1[i][j] * list1[i][k])\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = -math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9njlrn76.lua:6: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmp9njlrn76.lua:6: in function 'candidate'\n\t/tmp/tmp9njlrn76.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1[i] do\n\t\t\tfor k = 1, #list1[i] do\n\t\t\t\tif i ~= j and j ~= k and k ~= i then\n\t\t\t\t\tlocal product = list1[i][j] * list1[i][k]\n\t\t\t\t\tif product > max then\n\t\t\t\t\t\tmax = product\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmr_glu1x.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmpmr_glu1x.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local product = math.abs(list1[i][j] * list1[i][k])\n        if product > max_product then\n          max_product = product\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbq35wr9l.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpbq35wr9l.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = i + 1, #list1 do\n\t\t\tlocal prod = list1[i] * list1[j]\n\t\t\tif math.abs(prod) > math.abs(max) then\n\t\t\t\tmax = prod\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxz98h4r4.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpxz98h4r4.lua:6: in local 'candidate'\n\t/tmp/tmpxz98h4r4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= j and j ~= k and k ~= i then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3dsru7e5.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmp3dsru7e5.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i, v1 in ipairs(list1) do\n        for j, v2 in ipairs(list1) do\n            if i ~= j then\n                local product = math.abs(v1[1] * v2[1])\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgq8x70sb.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgq8x70sb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = list1[i][j] * list1[i][k]\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = -math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9njlrn76.lua:6: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmp9njlrn76.lua:6: in function 'candidate'\n\t/tmp/tmp9njlrn76.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local product = math.abs(list1[i][j] * list1[i][k])\n        if product > max then\n          max = product\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmsjrwe1q.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpmsjrwe1q.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = -math.huge\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            if i ~= j then\n                local product = list1[i] * list1[j]\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8duqbehv.lua:7: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmp8duqbehv.lua:7: in local 'candidate'\n\t/tmp/tmp8duqbehv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = math.abs(list1[i][j] * list1[i][k])\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = list1[i][j] * list1[i][k]\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local prod = math.abs(list1[i][j] * list1[i][k])\n        if prod > max then\n          max = prod\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprr81r19w.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmprr81r19w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n\tlocal max_product = list1[1]*list1[2]\n\tfor i = 1, #list1 do\n\t\tfor j = i+1, #list1 do\n\t\t\tlocal product = list1[i]*list1[j]\n\t\t\tif product > max_product then\n\t\t\t\tmax_product = product\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl9bjjav6.lua:3: attempt to perform arithmetic on a table value (field 'integer index')\nstack traceback:\n\t/tmp/tmpl9bjjav6.lua:3: in local 'candidate'\n\t/tmp/tmpl9bjjav6.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i, v1 in ipairs(list1) do\n        for j, v2 in ipairs(list1) do\n            if i ~= j then\n                local product = math.abs(v1[1] * v2[1])\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgq8x70sb.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmpgq8x70sb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1[i] do\n\t\t\tfor k = 1, #list1[i] do\n\t\t\t\tif i ~= k and j ~= k then\n\t\t\t\t\tlocal product = math.abs(list1[i][j] * list1[i][k])\n\t\t\t\t\tif product > max_product then\n\t\t\t\t\t\tmax_product = product\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local product = list1[i][j] * list1[i][k]\n        if product > max_product then\n          max_product = product\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptz_z0c_w.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmptz_z0c_w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      local product = list1[i] * list1[j]\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp97xq1_2p.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmp97xq1_2p.lua:6: in local 'candidate'\n\t/tmp/tmp97xq1_2p.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = math.abs(list1[i][j] * list1[i][k])\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = -math.huge\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                local product = list1[i][j] * list1[i][k]\n                if product > max then\n                    max = product\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjhb5hxfh.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpjhb5hxfh.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= j and j ~= k and i ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5pv3jra3.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmp5pv3jra3.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      local product = list1[i][j][1] * list1[i][j][2]\n      if product > max then\n        max = product\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3v64q0b3.lua:6: attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp3v64q0b3.lua:6: in local 'candidate'\n\t/tmp/tmp3v64q0b3.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                local product = math.abs(list1[i][j] * list1[i][k])\n                if product > max then\n                    max = product\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoexgr582.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpoexgr582.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      local product = math.abs(list1[i][j][1] * list1[i][j][2])\n      if product > max then\n        max = product\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvsnkc4vu.lua:6: attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpvsnkc4vu.lua:6: in local 'candidate'\n\t/tmp/tmpvsnkc4vu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= j and j ~= k and k ~= i then\n          local product = math.abs(list1[i][j] * list1[i][k])\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb95mkzsf.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmpb95mkzsf.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i][j] do\n                for l = 1, #list1[i][j][k] do\n                    local product = list1[i][j][k][l] * list1[i][j][k][l + 1]\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_akhoz31.lua:6: attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmp_akhoz31.lua:6: in local 'candidate'\n\t/tmp/tmp_akhoz31.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local product = list1[i][j] * list1[i][k]\n        if product > max_product then\n          max_product = product\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptz_z0c_w.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmptz_z0c_w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k then\n                    local product = math.abs(list1[i][j] * list1[k][j])\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjizjhnwo.lua:22: expected: 36, actual: 63\nstack traceback:\n\t/tmp/tmpjizjhnwo.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= j and j ~= k and k ~= i then\n          local product = list1[i][j] * list1[i][k]\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9i7gz8bl.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmp9i7gz8bl.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = -math.huge\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            local prod = list1[i] * list1[j]\n            if prod > max then\n                max = prod\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdviyoiu7.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpdviyoiu7.lua:6: in local 'candidate'\n\t/tmp/tmpdviyoiu7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = list1[1] * list1[2]\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = list1[i] * list1[j]\n      if product > max then\n        max = product\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaeuzayhm.lua:3: attempt to perform arithmetic on a table value (field 'integer index')\nstack traceback:\n\t/tmp/tmpaeuzayhm.lua:3: in local 'candidate'\n\t/tmp/tmpaeuzayhm.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= j and j ~= k and k ~= i then\n                    local product = list1[i][j] * list1[i][k]\n                    if product > max then\n                        max = product\n                    end\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4spgx6e0.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmp4spgx6e0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= j and list1[i][j] * list1[i][k] > max then\n          max = list1[i][j] * list1[i][k]\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjbaef9w.lua:19: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpgjbaef9w.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local product = list1[i][j] * list1[i][k]\n        if product > max_product then\n          max_product = product\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptz_z0c_w.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmptz_z0c_w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= j and j ~= k and i ~= k then\n          local product = math.abs(list1[i][j] * list1[i][k])\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvoyhhl9e.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmpvoyhhl9e.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= j then\n                    local product = math.abs(list1[i][j] * list1[i][k])\n                    if product > max then\n                        max = product\n                    end\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsib7bzop.lua:22: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpsib7bzop.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local product = list1[i][j] * list1[i][k]\n        if product > max then\n          max = product\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08j2n96o.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmp08j2n96o.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = math.abs(list1[i][j] * list1[i][k])\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k then\n          local product = math.abs(list1[i][j] * list1[k][j])\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi82v_tm3.lua:22: expected: 36, actual: 63\nstack traceback:\n\t/tmp/tmpi82v_tm3.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local prod = math.abs(list1[i][j] * list1[i][k])\n        if prod > max then\n          max = prod\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprr81r19w.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmprr81r19w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1[i] do\n\t\t\tfor k = 1, #list1[i] do\n\t\t\t\tif list1[i][j] * list1[i][k] > max then\n\t\t\t\t\tmax = list1[i][j] * list1[i][k]\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfj9w07fn.lua:19: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpfj9w07fn.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = math.abs(list1[i][j] * list1[i][k])\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1[i] do\n\t\t\tfor k = 1, #list1[i] do\n\t\t\t\tif i ~= k and j ~= k then\n\t\t\t\t\tlocal product = math.abs(list1[i][j] * list1[i][k])\n\t\t\t\t\tif product > max_product then\n\t\t\t\t\t\tmax_product = product\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = math.abs(list1[i][j] * list1[i][k])\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = math.abs(list1[i][j] * list1[i][k])\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= j and j ~= k and k ~= i then\n                    local product = list1[i][j] * list1[i][k]\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjuot45ql.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmpjuot45ql.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= j and j ~= k and i ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvw49700e.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmpvw49700e.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and list1[i][j] * list1[k][j] > max then\n                    max = list1[i][j] * list1[k][j]\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2xc6l6p.lua:19: expected: 36, actual: 63\nstack traceback:\n\t/tmp/tmpb2xc6l6p.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = math.abs(list1[i][j] * list1[i][k])\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= j and j ~= k and i ~= k then\n          local product = math.abs(list1[i][j] * list1[i][k])\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppk3azvrm.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmppk3azvrm.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = list1[i] * list1[j]\n      if math.abs(product) > math.abs(max_product) then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ebajy_j.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmp6ebajy_j.lua:6: in local 'candidate'\n\t/tmp/tmp6ebajy_j.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    local list2 = list1[i]\n    for j = 1, #list2 do\n      local product = math.abs(list2[j][1] * list2[j][2])\n      if product > max then\n        max = product\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0e362yz7.lua:7: attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp0e362yz7.lua:7: in local 'candidate'\n\t/tmp/tmp0e362yz7.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1[i] do\n\t\t\tfor k = 1, #list1[i] do\n\t\t\t\tlocal product = math.abs(list1[i][j] * list1[i][k])\n\t\t\t\tif product > max then\n\t\t\t\t\tmax = product\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxxx2kb_6.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpxxx2kb_6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1[i] do\n\t\t\tfor k = 1, #list1[i] do\n\t\t\t\tif i ~= k and j ~= k then\n\t\t\t\t\tlocal product = math.abs(list1[i][j] * list1[i][k])\n\t\t\t\t\tif product > max_product then\n\t\t\t\t\t\tmax_product = product\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = -math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9njlrn76.lua:6: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmp9njlrn76.lua:6: in function 'candidate'\n\t/tmp/tmp9njlrn76.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1[i] do\n\t\t\tfor k = 1, #list1[i] do\n\t\t\t\tif i ~= k and j ~= k then\n\t\t\t\t\tlocal product = math.abs(list1[i][j] * list1[i][k])\n\t\t\t\t\tif product > max_product then\n\t\t\t\t\t\tmax_product = product\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = -math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9njlrn76.lua:6: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmp9njlrn76.lua:6: in function 'candidate'\n\t/tmp/tmp9njlrn76.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = math.abs(list1[i][j] * list1[i][k])\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= j and j ~= k and k ~= i then\n          local product = list1[i][j] * list1[i][k]\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9i7gz8bl.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmp9i7gz8bl.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = math.abs(list1[i][j] * list1[i][k])\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    local list2 = list1[i]\n    for j = 1, #list2 do\n      local product = math.abs(list2[j][1] * list2[j][2])\n      if product > max then\n        max = product\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0e362yz7.lua:7: attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp0e362yz7.lua:7: in local 'candidate'\n\t/tmp/tmp0e362yz7.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = math.abs(list1[i][j] * list1[i][k])\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= j and j ~= k and i ~= k then\n          local prod = list1[i][j] * list1[i][k]\n          if prod > max then\n            max = prod\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmi8m3_jm.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmpmi8m3_jm.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local product = list1[i][j] * list1[i][k]\n        if product > max_product then\n          max_product = product\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptz_z0c_w.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmptz_z0c_w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = list1[i][j] * list1[i][k]\n                    if product > max then\n                        max = product\n                    end\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = -math.huge\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = list1[i] * list1[j]\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuvoolay9.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpuvoolay9.lua:6: in local 'candidate'\n\t/tmp/tmpuvoolay9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = math.abs(list1[i][j] * list1[i][k])\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local product = math.abs(list1[i][j] * list1[i][k])\n        if product > max then\n          max = product\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmsjrwe1q.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpmsjrwe1q.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = -math.huge\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      if i ~= j then\n        local product = list1[i][1] * list1[j][1]\n        if product > max_product then\n          max_product = product\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp046ulvab.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmp046ulvab.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local prod = list1[i][j] * list1[i][k]\n                    if prod > max then\n                        max = prod\n                    end\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local product = list1[i][j] * list1[i][k]\n        if product > max then\n          max = product\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08j2n96o.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmp08j2n96o.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local product = list1[i][j] * list1[i][k]\n        if product > max then\n          max = product\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08j2n96o.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmp08j2n96o.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = -math.huge\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = list1[i] * list1[j]\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuvoolay9.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpuvoolay9.lua:6: in local 'candidate'\n\t/tmp/tmpuvoolay9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1[i] do\n\t\t\tfor k = 1, #list1[i] do\n\t\t\t\tif (list1[i][j] * list1[i][k]) > max then\n\t\t\t\t\tmax = list1[i][j] * list1[i][k]\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl4vcx9i4.lua:19: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpl4vcx9i4.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and list1[i][j] * list1[k][j] > max then\n          max = list1[i][j] * list1[k][j]\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpooyv1hfg.lua:19: expected: 36, actual: 63\nstack traceback:\n\t/tmp/tmpooyv1hfg.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k then\n          local product = math.abs(list1[i][j] * list1[k][j])\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi82v_tm3.lua:22: expected: 36, actual: 63\nstack traceback:\n\t/tmp/tmpi82v_tm3.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local prod = math.abs(list1[i][j] * list1[i][k])\n        if prod > max then\n          max = prod\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprr81r19w.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmprr81r19w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= j and j ~= k and k ~= i then\n          local product = list1[i][j] * list1[i][k]\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9i7gz8bl.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmp9i7gz8bl.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= j and j ~= k and k ~= i then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3dsru7e5.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmp3dsru7e5.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = math.abs(list1[i][j] * list1[i][k])\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = math.abs(list1[i][j] * list1[i][k])\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                local product = list1[i][j] * list1[i][k]\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpelaef25z.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpelaef25z.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local product = list1[i][j] * list1[i][k]\n        if product > max then\n          max = product\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08j2n96o.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmp08j2n96o.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= j and j ~= k and k ~= i then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3dsru7e5.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmp3dsru7e5.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = math.abs(list1[i][j] * list1[i][k])\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n\tlocal max_product = 0\n\tfor i, v in ipairs(list1) do\n\t\tfor j, w in ipairs(list1) do\n\t\t\tif i ~= j then\n\t\t\t\tlocal product = v[1] * w[1]\n\t\t\t\tif product > max_product then\n\t\t\t\t\tmax_product = product\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp30j8v3ww.lua:20: expected: 36, actual: 8\nstack traceback:\n\t/tmp/tmp30j8v3ww.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = -math.huge\n    for i = 1, #list1 do\n        for j = 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8c_a31vu.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmp8c_a31vu.lua:6: in local 'candidate'\n\t/tmp/tmp8c_a31vu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1 do\n      local product = math.abs(list1[i][1] * list1[j][2])\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpruc5vb0q.lua:19: expected: 200, actual: 300\nstack traceback:\n\t/tmp/tmpruc5vb0q.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                local product = list1[i][j] * list1[i][k]\n                if product > max then\n                    max = product\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40sm8l6y.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmp40sm8l6y.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = list1[i][j] * list1[i][k]\n                    if product > max then\n                        max = product\n                    end\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = list1[i][j] * list1[i][k]\n                    if product > max_product then\n                        max_product = product\n                    end\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        local product = math.abs(list1[i][j] * list1[i][k])\n        if product > max then\n          max = product\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmsjrwe1q.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpmsjrwe1q.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = -math.huge\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            local product = list1[i] * list1[j]\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9njlrn76.lua:6: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmp9njlrn76.lua:6: in function 'candidate'\n\t/tmp/tmp9njlrn76.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1[i] do\n\t\t\tfor k = 1, #list1[i] do\n\t\t\t\tif i ~= j and j ~= k and i ~= k then\n\t\t\t\t\tlocal product = list1[i][j] * list1[i][k]\n\t\t\t\t\tif product > max then\n\t\t\t\t\t\tmax = product\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpph3nk5hc.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmpph3nk5hc.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                local product = list1[i][j] * list1[i][k]\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpelaef25z.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpelaef25z.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = -math.huge\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= j and j ~= k and i ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7qx9yhg.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmpa7qx9yhg.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = -math.huge\n  for i = 1, #list1 do\n    for j = i + 1, #list1 do\n      local product = list1[i] * list1[j]\n      if product > max_product then\n        max_product = product\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuvoolay9.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpuvoolay9.lua:6: in local 'candidate'\n\t/tmp/tmpuvoolay9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      local product = math.abs(list1[i][j][1] * list1[i][j][2])\n      if product > max then\n        max = product\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvsnkc4vu.lua:6: attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpvsnkc4vu.lua:6: in local 'candidate'\n\t/tmp/tmpvsnkc4vu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= j and j ~= k and k ~= i then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3dsru7e5.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmp3dsru7e5.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k then\n          local product = math.abs(list1[i][j] * list1[k][j])\n          if product > max_product then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwt9wypw.lua:22: expected: 36, actual: 63\nstack traceback:\n\t/tmp/tmpzwt9wypw.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n\tlocal max = 0\n\tfor i = 1, #list1 do\n\t\tfor j = 1, #list1[i] do\n\t\t\tfor k = 1, #list1[i] do\n\t\t\t\tif i ~= j and list1[i][j] * list1[i][k] > max then\n\t\t\t\t\tmax = list1[i][j] * list1[i][k]\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124156,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgq3xk172.lua:19: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpgq3xk172.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max_product = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                local product = list1[i][j] * list1[i][k]\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n    return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpelaef25z.lua:20: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpelaef25z.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n    local max = 0\n    for i = 1, #list1 do\n        for j = 1, #list1[i] do\n            for k = 1, #list1[i] do\n                if i ~= k and j ~= k then\n                    local product = list1[i][j] * list1[i][k]\n                    if product > max then\n                        max = product\n                    end\n                end\n            end\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= j and j ~= k and i ~= k then\n          local product = list1[i][j] * list1[i][k]\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027690,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5pv3jra3.lua:23: expected: 200, actual: 50\nstack traceback:\n\t/tmp/tmp5pv3jra3.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max_product = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = i, #list1 do\n        for l = 1, #list1[k] do\n          local product = list1[i][j] * list1[k][l]\n          if math.abs(product) > math.abs(max_product) then\n            max_product = product\n          end\n        end\n      end\n    end\n  end\n  return max_product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzvdw5g2b.lua:22: expected: 36, actual: 81\nstack traceback:\n\t/tmp/tmpzvdw5g2b.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n  local max = 0\n  for i = 1, #list1 do\n    for j = 1, #list1[i] do\n      for k = 1, #list1[i] do\n        if i ~= k and j ~= k then\n          local product = math.abs(list1[i][j] * list1[i][k])\n          if product > max then\n            max = product\n          end\n        end\n      end\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124155,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}