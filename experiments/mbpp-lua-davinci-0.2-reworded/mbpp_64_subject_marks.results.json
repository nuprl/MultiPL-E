{
  "name": "mbpp_64_subject_marks",
  "language": "lua",
  "prompt": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\ttable.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv16v2qph.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpv16v2qph.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks,sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks,sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp84l4mg5.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpp84l4mg5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function compare(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks,compare)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjg3jzh0n.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpjg3jzh0n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a, b)\n    return a[2] > b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1j411ghc.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp1j411ghc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  local function compare(a, b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, compare)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\ttable.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypf4dttx.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpypf4dttx.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpls9exceb.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpls9exceb.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5dv4pa2r.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp5dv4pa2r.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks,sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp84l4mg5.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpp84l4mg5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhk8zqnn.lua:12: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: nil\nstack traceback:\n\t/tmp/tmpbhk8zqnn.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7yc_az.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp_a7yc_az.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks,sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp84l4mg5.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpp84l4mg5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a, b)\n    return a[2] > b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1j411ghc.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp1j411ghc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5dv4pa2r.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp5dv4pa2r.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  table.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0k7eb63.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpj0k7eb63.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function compare(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, compare)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjg3jzh0n.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpjg3jzh0n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function compare(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks,compare)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\ttable.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypf4dttx.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpypf4dttx.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7yc_az.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp_a7yc_az.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_subjects(a,b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_subjects)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzx3hr7zu.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpzx3hr7zu.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7yc_az.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp_a7yc_az.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_subject(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_subject)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjavu7loc.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpjavu7loc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf29l9wld.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpf29l9wld.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] < b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function compare(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, compare)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a, b)\n    return a[2] > b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1j411ghc.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp1j411ghc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks,sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp84l4mg5.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpp84l4mg5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7yc_az.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp_a7yc_az.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_subjectmarks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_subjectmarks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpna4eolld.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpna4eolld.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks,sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp84l4mg5.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpp84l4mg5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_subjectmarks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_subjectmarks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpna4eolld.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpna4eolld.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a, b)\n    return a[2] > b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1j411ghc.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp1j411ghc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks,sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp84l4mg5.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpp84l4mg5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7yc_az.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp_a7yc_az.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks,sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp84l4mg5.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpp84l4mg5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  local function sort_marks(a, b)\n    return a[2] > b[2]\n  end\n  table.sort(subjectmarks, sort_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb6gbikxc.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpb6gbikxc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7yc_az.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp_a7yc_az.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\ttable.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypf4dttx.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpypf4dttx.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  local function compare(a, b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, compare)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7yc_az.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp_a7yc_az.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a,b)\n    return a[2] > b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0q6cwkg.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpg0q6cwkg.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  local function compare(a, b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, compare)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_marks(a,b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvbewej2.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpwvbewej2.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  local function sort_subject_marks(a, b)\n    return a[2] > b[2]\n  end\n  table.sort(subjectmarks, sort_subject_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf4aj754z.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpf4aj754z.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7yc_az.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp_a7yc_az.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks,sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp84l4mg5.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpp84l4mg5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a, b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a, b)\n    return a[2] > b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1j411ghc.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp1j411ghc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\ttable.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv16v2qph.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpv16v2qph.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7yc_az.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp_a7yc_az.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a, b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_subjectmarks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_subjectmarks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7dent2am.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp7dent2am.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks,sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a, b)\n    return a[2] > b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1j411ghc.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp1j411ghc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74akjmoh.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp74akjmoh.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7yc_az.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp_a7yc_az.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7yc_az.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp_a7yc_az.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function compare(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks,compare)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7yc_az.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp_a7yc_az.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  local function compare(a, b)\n    return a[2] > b[2]\n  end\n  table.sort(subjectmarks, compare)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvs8cqc3i.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpvs8cqc3i.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7yc_az.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp_a7yc_az.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function compare(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, compare)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\ttable.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypf4dttx.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpypf4dttx.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function compare(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks,compare)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks,sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a, b)\n    return a[2] < b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5dv4pa2r.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp5dv4pa2r.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjg3jzh0n.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpjg3jzh0n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function compare(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, compare)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7rquzmf.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpr7rquzmf.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfypudrq.lua:12: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: nil\nstack traceback:\n\t/tmp/tmpwfypudrq.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_func(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_func)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6p8wll9.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpn6p8wll9.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks,sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_subject_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_subject_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntnga4fx.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpntnga4fx.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a,b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74akjmoh.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp74akjmoh.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\ttable.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv16v2qph.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpv16v2qph.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7yc_az.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp_a7yc_az.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_subjectmarks(a,b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_subjectmarks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5uu3sek.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpe5uu3sek.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpls9exceb.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpls9exceb.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks,sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function compare(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, compare)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\ttable.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv16v2qph.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpv16v2qph.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function compare(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks,compare)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7yc_az.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp_a7yc_az.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a,b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks,sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function compare(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, compare)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a, b)\n    return a[2] > b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1j411ghc.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp1j411ghc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7yc_az.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp_a7yc_az.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpls9exceb.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpls9exceb.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7yc_az.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp_a7yc_az.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7yc_az.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp_a7yc_az.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function compare(a, b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, compare)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\ttable.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv16v2qph.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpv16v2qph.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7yc_az.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp_a7yc_az.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function compare(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, compare)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  local function sort_by_marks(a, b)\n    return a[2] > b[2]\n  end\n  table.sort(subjectmarks, sort_by_marks)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1j411ghc.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp1j411ghc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] < b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztg0er8q.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpztg0er8q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7yc_az.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp_a7yc_az.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n  table.sort(subjectmarks, function(a, b) return a[2] > b[2] end)\n  return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5dv4pa2r.lua:10: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmp5dv4pa2r.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function comp(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, comp)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123809,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    local function sort_by_marks(a, b)\n        return a[2] > b[2]\n    end\n    table.sort(subjectmarks, sort_by_marks)\n    return subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbx0uu84.lua:13: expected: {{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}\nactual: {{\"Maths\", 97}, {\"Science\", 90}, {\"English\", 88}, {\"Social sciences\", 82}}\nstack traceback:\n\t/tmp/tmpsbx0uu84.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n\tlocal function sort_by_marks(a,b)\n\t\treturn a[2] < b[2]\n\tend\n\ttable.sort(subjectmarks, sort_by_marks)\n\treturn subjectmarks\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}