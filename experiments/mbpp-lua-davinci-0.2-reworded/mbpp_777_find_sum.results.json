{
  "name": "mbpp_777_find_sum",
  "language": "lua",
  "prompt": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i, v in ipairs(arr) do\n    local found = false\n    for j, w in ipairs(arr) do\n      if i ~= j and v == w then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1pon3xfs.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmp1pon3xfs.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i,v in ipairs(arr) do\n        if arr[v] == nil then\n            sum = sum + v\n        end\n        arr[v] = true\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66qtz0kw.lua:16: expected: 21, actual: 0\nstack traceback:\n\t/tmp/tmp66qtz0kw.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local found = false\n    for j = 1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagwlnbi_.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpagwlnbi_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local found = false\n        for j = 1, #arr do\n            if i ~= j and arr[i] == arr[j] then\n                found = true\n                break\n            end\n        end\n        if not found then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywmp8vaz.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpywmp8vaz.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local is_repeated = false\n    for j = 1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        is_repeated = true\n        break\n      end\n    end\n    if not is_repeated then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd36vug3x.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpd36vug3x.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local repeated = false\n    for j = 1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        repeated = true\n        break\n      end\n    end\n    if not repeated then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpre4218km.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpre4218km.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local found = false\n    for j = 1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagwlnbi_.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpagwlnbi_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local found = false\n        for j = 1, #arr do\n            if i ~= j and arr[i] == arr[j] then\n                found = true\n                break\n            end\n        end\n        if not found then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywmp8vaz.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpywmp8vaz.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local found = false\n    for j = 1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagwlnbi_.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpagwlnbi_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i, v in ipairs(arr) do\n        if arr[v] == nil then\n            sum = sum + v\n        end\n        arr[v] = true\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvawzld6a.lua:16: expected: 21, actual: 0\nstack traceback:\n\t/tmp/tmpvawzld6a.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local hash = {}\n  for _, v in ipairs(arr) do\n    if not hash[v] then\n      hash[v] = true\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n\tlocal sum = 0\n\tfor i, v in ipairs(arr) do\n\t\tlocal found = false\n\t\tfor j, w in ipairs(arr) do\n\t\t\tif i ~= j and v == w then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\tsum = sum + v\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0ufos1h.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpw0ufos1h.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local found = false\n    for j = 1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagwlnbi_.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpagwlnbi_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local found = false\n        for j = i + 1, #arr do\n            if arr[i] == arr[j] then\n                found = true\n                break\n            end\n        end\n        if not found then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local found = false\n        for j = 1, #arr do\n            if i ~= j and arr[i] == arr[j] then\n                found = true\n                break\n            end\n        end\n        if not found then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywmp8vaz.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpywmp8vaz.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local found = false\n        for j = 1, #arr do\n            if i ~= j and arr[i] == arr[j] then\n                found = true\n                break\n            end\n        end\n        if not found then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywmp8vaz.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpywmp8vaz.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n\tlocal sum = 0\n\tfor i = 1, #arr do\n\t\tif arr[i] ~= arr[i - 1] then\n\t\t\tsum = sum + arr[i]\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphln1c4hk.lua:15: expected: 21, actual: 22\nstack traceback:\n\t/tmp/tmphln1c4hk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local num = arr[i]\n    local found = false\n    for j = 1, #arr do\n      if i ~= j and num == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + num\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthouwnl4.lua:23: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpthouwnl4.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n\tlocal sum = 0\n\tfor i = 1, #arr do\n\t\tlocal found = false\n\t\tfor j = 1, #arr do\n\t\t\tif i ~= j and arr[i] == arr[j] then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\tsum = sum + arr[i]\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqhy95jk_.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpqhy95jk_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local visited = {}\n  for i, v in ipairs(arr) do\n    if not visited[v] then\n      sum = sum + v\n      visited[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local found = false\n    for j = 1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagwlnbi_.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpagwlnbi_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for i, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123853,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local found = false\n        for j = 1, #arr do\n            if i ~= j and arr[i] == arr[j] then\n                found = true\n                break\n            end\n        end\n        if not found then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywmp8vaz.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpywmp8vaz.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n\tlocal sum = 0\n\tfor i = 1, #arr do\n\t\tlocal found = false\n\t\tfor j = 1, #arr do\n\t\t\tif i ~= j and arr[i] == arr[j] then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\tsum = sum + arr[i]\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqhy95jk_.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpqhy95jk_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local found = false\n        for j = 1, #arr do\n            if i ~= j and arr[i] == arr[j] then\n                found = true\n                break\n            end\n        end\n        if not found then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywmp8vaz.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpywmp8vaz.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local t = {}\n  for i, v in ipairs(arr) do\n    if not t[v] then\n      sum = sum + v\n      t[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i, v in ipairs(arr) do\n        if arr[v] == nil then\n            sum = sum + v\n        end\n        arr[v] = true\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvawzld6a.lua:16: expected: 21, actual: 0\nstack traceback:\n\t/tmp/tmpvawzld6a.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local found = false\n    for j = 1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagwlnbi_.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpagwlnbi_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local element = arr[i]\n    local count = 0\n    for j = 1, #arr do\n      if element == arr[j] then\n        count = count + 1\n      end\n    end\n    if count == 1 then\n      sum = sum + element\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7aqiewj1.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmp7aqiewj1.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local found = false\n        for j = 1, #arr do\n            if i ~= j and arr[i] == arr[j] then\n                found = true\n                break\n            end\n        end\n        if not found then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywmp8vaz.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpywmp8vaz.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local hash = {}\n    for i, v in ipairs(arr) do\n        if not hash[v] then\n            hash[v] = true\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n\tlocal sum = 0\n\tlocal count = 0\n\tfor i = 1, #arr do\n\t\tcount = 0\n\t\tfor j = 1, #arr do\n\t\t\tif arr[i] == arr[j] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\tif count == 1 then\n\t\t\tsum = sum + arr[i]\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_5gtk5li.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmp_5gtk5li.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local count = 0\n    for i = 1, #arr do\n        if arr[i] == arr[i + 1] then\n            count = count + 1\n        else\n            if count == 0 then\n                sum = sum + arr[i]\n            end\n            count = 0\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33i6rncd.lua:22: expected: 71, actual: 75\nstack traceback:\n\t/tmp/tmp33i6rncd.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local hash = {}\n  for i = 1, #arr do\n    if not hash[arr[i]] then\n      hash[arr[i]] = true\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local found = false\n    for j = 1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagwlnbi_.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpagwlnbi_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local found = false\n        for j = 1, #arr do\n            if i ~= j and arr[i] == arr[j] then\n                found = true\n                break\n            end\n        end\n        if not found then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywmp8vaz.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpywmp8vaz.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for i,v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local hash = {}\n  for _, v in ipairs(arr) do\n    if not hash[v] then\n      sum = sum + v\n      hash[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local len = #arr\n  for i = 1, len do\n    local val = arr[i]\n    local found = false\n    for j = 1, len do\n      if i ~= j and val == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + val\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7eqxvvfp.lua:24: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmp7eqxvvfp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local hash = {}\n  for i, v in ipairs(arr) do\n    if not hash[v] then\n      sum = sum + v\n      hash[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local num = arr[i]\n        local count = 0\n        for j = 1, #arr do\n            if num == arr[j] then\n                count = count + 1\n            end\n        end\n        if count == 1 then\n            sum = sum + num\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp571y9ykt.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmp571y9ykt.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local found = false\n    for j = 1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagwlnbi_.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpagwlnbi_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local hash = {}\n  for i = 1, #arr do\n    if not hash[arr[i]] then\n      hash[arr[i]] = true\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local count = {}\n    for i = 1, #arr do\n        if count[arr[i]] == nil then\n            sum = sum + arr[i]\n            count[arr[i]] = 1\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n   local sum = 0\n   for i = 1, #arr do\n      local found = false\n      for j = 1, #arr do\n         if i ~= j and arr[i] == arr[j] then\n            found = true\n            break\n         end\n      end\n      if not found then\n         sum = sum + arr[i]\n      end\n   end\n   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfb_ls21d.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpfb_ls21d.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local found = false\n    for j = 1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagwlnbi_.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpagwlnbi_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local found = false\n    for j = 1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagwlnbi_.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpagwlnbi_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local hash = {}\n  for i = 1, #arr do\n    if not hash[arr[i]] then\n      hash[arr[i]] = 1\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local num = arr[i]\n        local found = false\n        for j = 1, #arr do\n            if i ~= j and num == arr[j] then\n                found = true\n                break\n            end\n        end\n        if not found then\n            sum = sum + num\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijn7er9u.lua:23: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpijn7er9u.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for i, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local temp = {}\n  for i = 1, #arr do\n    if not temp[arr[i]] then\n      sum = sum + arr[i]\n      temp[arr[i]] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local found = false\n    for j = 1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagwlnbi_.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpagwlnbi_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local found = {}\n  for i = 1, #arr do\n    if not found[arr[i]] then\n      sum = sum + arr[i]\n      found[arr[i]] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local found = false\n    for j = 1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagwlnbi_.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpagwlnbi_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v % 2 == 0 then\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpboxlr7tl.lua:15: expected: 21, actual: 12\nstack traceback:\n\t/tmp/tmpboxlr7tl.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local hash = {}\n  for i = 1, #arr do\n    if not hash[arr[i]] then\n      hash[arr[i]] = true\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n\tlocal sum = 0\n\tlocal seen = {}\n\tfor _, v in ipairs(arr) do\n\t\tif not seen[v] then\n\t\t\tsum = sum + v\n\t\t\tseen[v] = true\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local count = {}\n    for _, v in ipairs(arr) do\n        if count[v] == nil then\n            count[v] = 1\n            sum = sum + v\n        else\n            count[v] = count[v] + 1\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local is_repeated = false\n    for j = 1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        is_repeated = true\n        break\n      end\n    end\n    if not is_repeated then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd36vug3x.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpd36vug3x.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local is_repeated = false\n    for j = 1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        is_repeated = true\n        break\n      end\n    end\n    if not is_repeated then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd36vug3x.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpd36vug3x.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local hash = {}\n    for i = 1, #arr do\n        if not hash[arr[i]] then\n            hash[arr[i]] = true\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    if arr[i] ~= arr[i + 1] then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzskhh533.lua:15: expected: 21, actual: 22\nstack traceback:\n\t/tmp/tmpzskhh533.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local found = false\n    for j = 1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagwlnbi_.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpagwlnbi_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local found = false\n        for j = 1, #arr do\n            if i ~= j and arr[i] == arr[j] then\n                found = true\n                break\n            end\n        end\n        if not found then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywmp8vaz.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpywmp8vaz.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for i,v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for i = 1, #arr do\n    if not seen[arr[i]] then\n      sum = sum + arr[i]\n      seen[arr[i]] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local found = false\n    for j = 1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagwlnbi_.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpagwlnbi_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local hash = {}\n  for _, v in ipairs(arr) do\n    if not hash[v] then\n      hash[v] = true\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local count = {}\n    for i = 1, #arr do\n        if count[arr[i]] == nil then\n            count[arr[i]] = 1\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n\tlocal sum = 0\n\tfor i = 1, #arr do\n\t\tif arr[i] ~= arr[i + 1] then\n\t\t\tsum = sum + arr[i]\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfbtjtq2j.lua:15: expected: 21, actual: 22\nstack traceback:\n\t/tmp/tmpfbtjtq2j.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local count = 0\n  for i = 1, #arr do\n    local found = false\n    for j = 1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + arr[i]\n      count = count + 1\n    end\n  end\n  return sum, count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbsxwggg1.lua:24: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpbsxwggg1.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local hash = {}\n    for i = 1, #arr do\n        if hash[arr[i]] == nil then\n            hash[arr[i]] = 1\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local found = false\n        for j = 1, #arr do\n            if i ~= j and arr[i] == arr[j] then\n                found = true\n                break\n            end\n        end\n        if not found then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywmp8vaz.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpywmp8vaz.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local num = arr[i]\n        local count = 0\n        for j = 1, #arr do\n            if arr[j] == num then\n                count = count + 1\n            end\n        end\n        if count == 1 then\n            sum = sum + num\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5znvyh_c.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmp5znvyh_c.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local found = false\n        for j = 1, #arr do\n            if i ~= j and arr[i] == arr[j] then\n                found = true\n                break\n            end\n        end\n        if not found then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywmp8vaz.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpywmp8vaz.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _,v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local t = {}\n  for i = 1, #arr do\n    if not t[arr[i]] then\n      t[arr[i]] = true\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for i = 1, #arr do\n    if not seen[arr[i]] then\n      sum = sum + arr[i]\n      seen[arr[i]] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local hash = {}\n  for _, v in ipairs(arr) do\n    if not hash[v] then\n      sum = sum + v\n      hash[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n\tlocal sum = 0\n\tlocal i = 1\n\twhile i <= #arr do\n\t\tlocal j = i + 1\n\t\twhile j <= #arr do\n\t\t\tif arr[i] == arr[j] then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\tif j > #arr then\n\t\t\tsum = sum + arr[i]\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i=1, #arr do\n    local is_repeated = false\n    for j=1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        is_repeated = true\n        break\n      end\n    end\n    if not is_repeated then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1wetewq5.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmp1wetewq5.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        if arr[i] ~= arr[i + 1] then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoopwcxf7.lua:15: expected: 21, actual: 22\nstack traceback:\n\t/tmp/tmpoopwcxf7.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local found = false\n        for j = 1, #arr do\n            if i ~= j and arr[i] == arr[j] then\n                found = true\n                break\n            end\n        end\n        if not found then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywmp8vaz.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpywmp8vaz.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local hash = {}\n  for i, v in ipairs(arr) do\n    if not hash[v] then\n      hash[v] = true\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local is_repeated = false\n        for j = i + 1, #arr do\n            if arr[i] == arr[j] then\n                is_repeated = true\n                break\n            end\n        end\n        if not is_repeated then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local table = {}\n    for i = 1, #arr do\n        if not table[arr[i]] then\n            sum = sum + arr[i]\n            table[arr[i]] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local hash = {}\n    for _, v in ipairs(arr) do\n        if not hash[v] then\n            sum = sum + v\n            hash[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i,v in ipairs(arr) do\n        if arr[v] == nil then\n            sum = sum + v\n        end\n        arr[v] = true\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66qtz0kw.lua:16: expected: 21, actual: 0\nstack traceback:\n\t/tmp/tmp66qtz0kw.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if not arr[v] then\n      sum = sum + v\n    end\n    arr[v] = true\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8p0zil9j.lua:16: expected: 21, actual: 0\nstack traceback:\n\t/tmp/tmp8p0zil9j.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i=1, #arr do\n    local found = false\n    for j=1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwf1vive.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpzwf1vive.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n\tlocal sum = 0\n\tfor i = 1, #arr do\n\t\tlocal found = false\n\t\tfor j = 1, #arr do\n\t\t\tif i ~= j and arr[i] == arr[j] then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\tsum = sum + arr[i]\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqhy95jk_.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpqhy95jk_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local hash = {}\n    for i = 1, #arr do\n        if not hash[arr[i]] then\n            hash[arr[i]] = true\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local count = {}\n    for i, v in ipairs(arr) do\n        if not count[v] then\n            count[v] = true\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _,v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local found = false\n    for j = 1, #arr do\n      if i ~= j and arr[i] == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagwlnbi_.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpagwlnbi_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local is_repeated = false\n        for j = 1, #arr do\n            if i ~= j and arr[i] == arr[j] then\n                is_repeated = true\n                break\n            end\n        end\n        if not is_repeated then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmr9fn72i.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpmr9fn72i.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local is_repeated = false\n        for j = 1, #arr do\n            if i ~= j and arr[i] == arr[j] then\n                is_repeated = true\n                break\n            end\n        end\n        if not is_repeated then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmr9fn72i.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpmr9fn72i.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n\tlocal sum = 0\n\tlocal seen = {}\n\tfor _, v in ipairs(arr) do\n\t\tif not seen[v] then\n\t\t\tsum = sum + v\n\t\t\tseen[v] = true\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local hash = {}\n  for i = 1, #arr do\n    if not hash[arr[i]] then\n      hash[arr[i]] = true\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local hash = {}\n  for i = 1, #arr do\n    if not hash[arr[i]] then\n      hash[arr[i]] = true\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local found = false\n        for j = 1, #arr do\n            if i ~= j and arr[i] == arr[j] then\n                found = true\n                break\n            end\n        end\n        if not found then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywmp8vaz.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpywmp8vaz.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for i = 1, #arr do\n        if not seen[arr[i]] then\n            sum = sum + arr[i]\n            seen[arr[i]] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local hash = {}\n    for _, v in ipairs(arr) do\n        if not hash[v] then\n            hash[v] = true\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local i = 1\n    while arr[i] do\n        local j = 1\n        local repeated = false\n        while arr[j] do\n            if i ~= j and arr[i] == arr[j] then\n                repeated = true\n                break\n            end\n            j = j + 1\n        end\n        if not repeated then\n            sum = sum + arr[i]\n        end\n        i = i + 1\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1sm24jc7.lua:26: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmp1sm24jc7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i, v in ipairs(arr) do\n    local is_repeated = false\n    for j, w in ipairs(arr) do\n      if i ~= j and v == w then\n        is_repeated = true\n        break\n      end\n    end\n    if not is_repeated then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfel56qhj.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpfel56qhj.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local found = false\n        for j = 1, #arr do\n            if i ~= j and arr[i] == arr[j] then\n                found = true\n                break\n            end\n        end\n        if not found then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywmp8vaz.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpywmp8vaz.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local found = false\n    for j = i + 1, #arr do\n      if arr[i] == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for i = 1, #arr do\n        if not seen[arr[i]] then\n            sum = sum + arr[i]\n            seen[arr[i]] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in pairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local hash = {}\n  for _, v in ipairs(arr) do\n    if not hash[v] then\n      sum = sum + v\n      hash[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        if arr[i] ~= arr[i + 1] then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoopwcxf7.lua:15: expected: 21, actual: 22\nstack traceback:\n\t/tmp/tmpoopwcxf7.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local t = {}\n    for i, v in ipairs(arr) do\n        if not t[v] then\n            sum = sum + v\n            t[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local hash = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "",
      "stderr": "lua: /tmp/tmpo_vx3xzu.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for i = 1, #arr do\n    if not seen[arr[i]] then\n      sum = sum + arr[i]\n      seen[arr[i]] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _,v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local found = false\n        for j = 1, #arr do\n            if i ~= j and arr[i] == arr[j] then\n                found = true\n                break\n            end\n        end\n        if not found then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpywmp8vaz.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpywmp8vaz.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local hash = {}\n  for _, v in ipairs(arr) do\n    if not hash[v] then\n      hash[v] = true\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i, v in ipairs(arr) do\n        if not arr[v] then\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26s4ahda.lua:15: expected: 21, actual: 0\nstack traceback:\n\t/tmp/tmp26s4ahda.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for i, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123853,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local hash = {}\n  for _, v in ipairs(arr) do\n    if not hash[v] then\n      hash[v] = true\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local flag = true\n        for j = 1, #arr do\n            if i ~= j and arr[i] == arr[j] then\n                flag = false\n                break\n            end\n        end\n        if flag then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpylo1j79t.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpylo1j79t.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local hash = {}\n  for i, v in ipairs(arr) do\n    if not hash[v] then\n      sum = sum + v\n      hash[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local num = arr[i]\n    local found = false\n    for j = 1, #arr do\n      if i ~= j and num == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + num\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthouwnl4.lua:23: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpthouwnl4.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            seen[v] = true\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for _, v in ipairs(arr) do\n        if not seen[v] then\n            sum = sum + v\n            seen[v] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  for i = 1, #arr do\n    local found = false\n    for j = i + 1, #arr do\n      if arr[i] == arr[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local seen = {}\n    for i = 1, #arr do\n        if not seen[arr[i]] then\n            sum = sum + arr[i]\n            seen[arr[i]] = true\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n  local sum = 0\n  local seen = {}\n  for _, v in ipairs(arr) do\n    if not seen[v] then\n      sum = sum + v\n      seen[v] = true\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    local i = 1\n    while i <= #arr do\n        local j = i + 1\n        local found = false\n        while j <= #arr do\n            if arr[i] == arr[j] then\n                found = true\n                break\n            end\n            j = j + 1\n        end\n        if not found then\n            sum = sum + arr[i]\n        end\n        i = i + 1\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local sum = 0\n    for i = 1, #arr do\n        local is_repeated = false\n        for j = 1, #arr do\n            if i ~= j and arr[i] == arr[j] then\n                is_repeated = true\n                break\n            end\n        end\n        if not is_repeated then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123854,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmr9fn72i.lua:22: expected: 21, actual: 20\nstack traceback:\n\t/tmp/tmpmr9fn72i.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}