{
  "name": "mbpp_576_is_Sub_Array",
  "language": "lua",
  "prompt": "-- Write a luathon function to check whether a table is subtable of another or not.\nlocal function is_Sub_Array(A, B)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Sub_Array\n    lu.assertEquals(candidate({1, 4, 3, 5}, {1, 2}), false)\n    lu.assertEquals(candidate({1, 2, 1}, {1, 2, 1}), true)\n    lu.assertEquals(candidate({1, 0, 2, 2}, {2, 2, 0}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    if #A > #B then\n        return false\n    end\n    for i = 1, #A do\n        if A[i] ~= B[i] then\n            return false\n        end\n    end\n    return true\nend",
    "    for i = 1, #B do\n        if A[i] ~= B[i] then\n            return false\n        end\n    end\n    return true\nend",
    "    if #A > #B then\n        return false\n    end\n    for i = 1, #A do\n        if A[i] ~= B[i] then\n            return false\n        end\n    end\n    return true\nend",
    "    for i = 1, #A do\n        if A[i] ~= B[i] then\n            return false\n        end\n    end\n    return true\nend",
    "    if #A > #B then\n        return false\n    end\n    for i = 1, #A do\n        if A[i] ~= B[i] then\n            return false\n        end\n    end\n    return true\nend",
    "    if #A > #B then\n        return false\n    end\n    for i = 1, #A do\n        if A[i] ~= B[i] then\n            return false\n        end\n    end\n    return true\nend",
    "    if #A > #B then\n        return false\n    end\n    for i = 1, #A do\n        if A[i] ~= B[i] then\n            return false\n        end\n    end\n    return true\nend",
    "    for i = 1, #A do\n        if A[i] ~= B[i] then\n            return false\n        end\n    end\n    return true\nend",
    "  if #A > #B then return false end\n  for i = 1, #A do\n    if A[i] ~= B[i] then return false end\n  end\n  return true\nend",
    "\tfor i = 1, #A do\n\t\tif A[i] ~= B[i] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "\tfor i = 1, #A do\n\t\tif A[i] ~= B[i] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    for i = 1, #A do\n        if A[i] ~= B[i] then\n            return false\n        end\n    end\n    return true\nend",
    "  for i = 1, #B do\n    if A[i] ~= B[i] then\n      return false\n    end\n  end\n  return true\nend",
    "    for _, v in pairs(A) do\n        if not is_in_array(B, v) then\n            return false\n        end\n    end\n    return true\nend",
    "    for i = 1, #A do\n        if A[i] ~= B[i] then\n            return false\n        end\n    end\n    return true\nend",
    "    for i = 1, #A do\n        if A[i] ~= B[i] then\n            return false\n        end\n    end\n    return true\nend",
    "    local flag = true\n    for i = 1, #A do\n        if A[i] ~= B[i] then\n            flag = false\n            break\n        end\n    end\n    return flag\nend",
    "\tlocal is_sub = true\n\tfor i, v in ipairs(A) do\n\t\tif not is_in_array(B, v) then\n\t\t\tis_sub = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn is_sub\nend",
    "    for i = 1, #A do\n        if A[i] ~= B[i] then\n            return false\n        end\n    end\n    return true\nend",
    "    if not is_Array(A) or not is_Array(B) then\n        return false\n    end\n    for _, v in ipairs(B) do\n        if not is_In_Array(A, v) then\n            return false\n        end\n    end\n    return true\nend"
  ]
}