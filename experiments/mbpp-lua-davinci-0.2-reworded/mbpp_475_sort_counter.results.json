{
  "name": "mbpp_475_sort_counter",
  "language": "lua",
  "prompt": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, _ in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys, function(a, b) return a > b end)\n    local dict3 = {}\n    for _, k in ipairs(keys) do\n        dict3[dict2[k]] = k\n    end\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7vba2h7g.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmp7vba2h7g.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2+1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, _ in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local result = {}\n    for _, k in ipairs(keys) do\n        table.insert(result, {dict2[k], k})\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4uvgse2e.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}}\nstack traceback:\n\t/tmp/tmp4uvgse2e.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    dict2[v] = k\n  end\n  local keys = {}\n  for k, _ in pairs(dict2) do\n    table.insert(keys, k)\n  end\n  table.sort(keys)\n  local dict3 = {}\n  for _, k in ipairs(keys) do\n    dict3[dict2[k]] = k\n  end\n  return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyiw3rnip.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmpyiw3rnip.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n\tlocal dict2 = {}\n\tfor k, v in pairs(dict1) do\n\t\tdict2[v] = k\n\tend\n\tlocal sorted = {}\n\tfor k, v in pairs(dict2) do\n\t\ttable.insert(sorted, {k, v})\n\tend\n\ttable.sort(sorted, function(a, b) return a[1] > b[1] end)\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifrceg3y.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpifrceg3y.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, v in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys, function(a, b) return a > b end)\n    return dict2, keys\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcurwuc_0.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpcurwuc_0.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, v in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local new_dict = {}\n    for i, k in ipairs(keys) do\n        new_dict[dict2[k]] = k\n    end\n    return new_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoch6dz6_.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmpoch6dz6_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {v, k})\n    end\n    table.sort(sorted, function(a, b) return a[2] > b[2] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local list = {}\n    for k, v in pairs(dict2) do\n        table.insert(list, {k, v})\n    end\n    table.sort(list, function(a, b) return a[1] > b[1] end)\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pwqi38l.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmp9pwqi38l.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {v, k})\n    end\n    table.sort(dict3, function(a, b) return a[2] > b[2] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted_keys = {}\n    for k in pairs(dict2) do\n        table.insert(sorted_keys, k)\n    end\n    table.sort(sorted_keys)\n    return dict2, sorted_keys\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpra4i0d3r.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpra4i0d3r.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairsByKeys(dict2) do\n        table.insert(sorted, {v, k})\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp36rxszu7.lua:8: attempt to call a nil value (global 'pairsByKeys')\nstack traceback:\n\t/tmp/tmp36rxszu7.lua:8: in local 'candidate'\n\t/tmp/tmp36rxszu7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b) return a[1] > b[1] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3z8oy75.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpb3z8oy75.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairsByKeys(dict2) do\n        table.insert(sorted, {v, k})\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp36rxszu7.lua:8: attempt to call a nil value (global 'pairsByKeys')\nstack traceback:\n\t/tmp/tmp36rxszu7.lua:8: in local 'candidate'\n\t/tmp/tmp36rxszu7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local sorted = {}\n    for k, v in pairs(dict1) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b) return a[2] > b[2] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local sorted_dict = {}\n    for k, v in pairs(dict1) do\n        table.insert(sorted_dict, {k, v})\n    end\n    table.sort(sorted_dict, function(a, b) return a[2] > b[2] end)\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, _ in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local sorted = {}\n    for _, k in ipairs(keys) do\n        table.insert(sorted, {dict2[k], k})\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnetvy9l.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}}\nstack traceback:\n\t/tmp/tmpgnetvy9l.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b) return a[1] > b[1] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3z8oy75.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpb3z8oy75.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, _ in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys, function(a, b) return a > b end)\n    return dict2, keys\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbm63n3sv.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpbm63n3sv.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted_keys = {}\n    for k in pairs(dict2) do\n        table.insert(sorted_keys, k)\n    end\n    table.sort(sorted_keys)\n    local sorted_dict = {}\n    for i, k in ipairs(sorted_keys) do\n        sorted_dict[dict2[k]] = k\n    end\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1hhzx6vt.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmp1hhzx6vt.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n\tlocal dict2 = {}\n\tfor k,v in pairs(dict1) do\n\t\tdict2[v] = k\n\tend\n\treturn dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkq0i3snm.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpkq0i3snm.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        table.insert(dict2, {k, v})\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k,v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k,v in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local dict3 = {}\n    for i,v in ipairs(keys) do\n        dict3[dict2[v]] = v\n    end\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5qu4nfo3.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmp5qu4nfo3.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local sorted_dict = {}\n    for key, value in pairs(dict1) do\n        table.insert(sorted_dict, {key, value})\n    end\n    table.sort(sorted_dict, function(a, b) return a[2] > b[2] end)\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted_keys = {}\n    for k in pairs(dict2) do\n        table.insert(sorted_keys, k)\n    end\n    table.sort(sorted_keys, function(a, b) return a > b end)\n    local sorted_dict = {}\n    for _, k in ipairs(sorted_keys) do\n        table.insert(sorted_dict, {dict2[k], k})\n    end\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    dict2[v] = k\n  end\n  local dict3 = {}\n  for k, v in pairs(dict2) do\n    table.insert(dict3, {k, v})\n  end\n  table.sort(dict3, function(a, b) return a[1] > b[1] end)\n  return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprdzja5bz.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmprdzja5bz.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairsByKeys(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpllhcodmc.lua:8: attempt to call a nil value (global 'pairsByKeys')\nstack traceback:\n\t/tmp/tmpllhcodmc.lua:8: in local 'candidate'\n\t/tmp/tmpllhcodmc.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, _ in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local dict3 = {}\n    for _, k in ipairs(keys) do\n        dict3[dict2[k]] = k\n    end\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp291uuju0.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmp291uuju0.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    dict2[v] = k\n  end\n  local sorted = {}\n  for k, v in pairs(dict2) do\n    table.insert(sorted, {k, v})\n  end\n  table.sort(sorted, function(a, b) return a[1] > b[1] end)\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpvw4n_1.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmphpvw4n_1.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted_keys = {}\n    for k, _ in pairs(dict2) do\n        table.insert(sorted_keys, k)\n    end\n    table.sort(sorted_keys, function(a, b) return a > b end)\n    local sorted_dict = {}\n    for _, k in ipairs(sorted_keys) do\n        table.insert(sorted_dict, {dict2[k], k})\n    end\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2+1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted_keys = {}\n    for k in pairs(dict2) do\n        table.insert(sorted_keys, k)\n    end\n    table.sort(sorted_keys, function(a, b) return a > b end)\n    local sorted_dict = {}\n    for _, k in ipairs(sorted_keys) do\n        table.insert(sorted_dict, {dict2[k], k})\n    end\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local sorted_dict = {}\n    for key, value in pairs(dict1) do\n        table.insert(sorted_dict, {key, value})\n    end\n    table.sort(sorted_dict, function(a, b) return a[2] > b[2] end)\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, v in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys, function(a, b) return a > b end)\n    local dict3 = {}\n    for i, v in ipairs(keys) do\n        dict3[dict2[v]] = v\n    end\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbx4wwul_.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmpbx4wwul_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b) return a[1] > b[1] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3z8oy75.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpb3z8oy75.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted_keys = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted_keys, k)\n    end\n    table.sort(sorted_keys)\n    local sorted_dict = {}\n    for i, v in ipairs(sorted_keys) do\n        sorted_dict[dict2[v]] = v\n    end\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmple_yrv6q.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmple_yrv6q.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, _ in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local dict3 = {}\n    for _, k in ipairs(keys) do\n        dict3[dict2[k]] = k\n    end\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp291uuju0.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmp291uuju0.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n\tlocal dict2 = {}\n\tfor key, value in pairs(dict1) do\n\t\tdict2[value] = key\n\tend\n\tlocal sorted = {}\n\tfor key, value in pairs(dict2) do\n\t\ttable.insert(sorted, value)\n\tend\n\ttable.sort(sorted)\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp31jdt1xt.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {\"Chemistry\", \"Math\", \"Physics\"}\nstack traceback:\n\t/tmp/tmp31jdt1xt.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local sorted_dict = {}\n    for k, v in pairs(dict1) do\n        table.insert(sorted_dict, {k, v})\n    end\n    table.sort(sorted_dict, function(a, b) return a[2] > b[2] end)\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, _ in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local dict3 = {}\n    for _, k in ipairs(keys) do\n        dict3[dict2[k]] = k\n    end\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp291uuju0.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmp291uuju0.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k,v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k,v in pairs(dict2) do\n        table.insert(dict3, {k,v})\n    end\n    table.sort(dict3, function(a,b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlfcnzj9.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpxlfcnzj9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, v)\n    end\n    table.sort(sorted)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3secwbr.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {\"Chemistry\", \"Math\", \"Physics\"}\nstack traceback:\n\t/tmp/tmpz3secwbr.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n  local dict2 = {}\n  for k,v in pairs(dict1) do\n    dict2[v] = k\n  end\n  local sorted = {}\n  for k,v in pairs(dict2) do\n    table.insert(sorted, {k,v})\n  end\n  table.sort(sorted, function(a,b) return a[1] > b[1] end)\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63by1x8d.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmp63by1x8d.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {v, k})\n    end\n    table.sort(sorted, function(a, b) return a[2] > b[2] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, _ in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys, function(a, b) return a > b end)\n    return dict2, keys\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbm63n3sv.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpbm63n3sv.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b) return a[1] > b[1] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3z8oy75.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpb3z8oy75.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n\tlocal dict2 = {}\n\tfor k, v in pairs(dict1) do\n\t\tdict2[v] = k\n\tend\n\treturn dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpmv5m_d.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpfpmv5m_d.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {v, k})\n    end\n    table.sort(sorted, function(a, b) return a[2] > b[2] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted_keys = {}\n    for k in pairs(dict2) do\n        table.insert(sorted_keys, k)\n    end\n    table.sort(sorted_keys)\n    local sorted_dict = {}\n    for _, k in ipairs(sorted_keys) do\n        table.insert(sorted_dict, {dict2[k], k})\n    end\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtpwjdx9.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}}\nstack traceback:\n\t/tmp/tmpgtpwjdx9.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {v, k})\n    end\n    table.sort(sorted, function(a, b) return a[2] > b[2] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict = {}\n    for k, v in pairs(dict1) do\n        dict[#dict + 1] = {k, v}\n    end\n    table.sort(dict, function(a, b) return a[2] > b[2] end)\n    return dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n   local dict2 = {}\n   for key, value in pairs(dict1) do\n      dict2[value] = key\n   end\n   local dict3 = {}\n   for key, value in pairs(dict2) do\n      table.insert(dict3, {key, value})\n   end\n   table.sort(dict3, function(a, b) return a[1] > b[1] end)\n   return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph7wdvtpv.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmph7wdvtpv.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for i = 1, #dict1 do\n        local max = 0\n        local max_key = nil\n        for k, v in pairs(dict2) do\n            if k > max then\n                max = k\n                max_key = v\n            end\n        end\n        dict3[i] = max_key\n        dict2[max] = nil\n    end\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqk8hsmgv.lua:26: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {}\nstack traceback:\n\t/tmp/tmpqk8hsmgv.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted_keys = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted_keys, k)\n    end\n    table.sort(sorted_keys)\n    local sorted_dict = {}\n    for _, k in ipairs(sorted_keys) do\n        table.insert(sorted_dict, {dict2[k], k})\n    end\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7bu058u.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}}\nstack traceback:\n\t/tmp/tmpc7bu058u.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, v in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local dict3 = {}\n    for i, v in ipairs(keys) do\n        dict3[dict2[v]] = v\n    end\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0uu2od95.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmp0uu2od95.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted_keys = {}\n    for k in pairs(dict2) do\n        table.insert(sorted_keys, k)\n    end\n    table.sort(sorted_keys)\n    local sorted_dict = {}\n    for _, k in ipairs(sorted_keys) do\n        table.insert(sorted_dict, {dict2[k], k})\n    end\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtpwjdx9.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}}\nstack traceback:\n\t/tmp/tmpgtpwjdx9.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, v in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local dict3 = {}\n    for i, v in ipairs(keys) do\n        dict3[dict2[v]] = v\n    end\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0uu2od95.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmp0uu2od95.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b) return a[1] > b[1] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3z8oy75.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpb3z8oy75.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for key, value in pairs(dict1) do\n        dict2[value] = key\n    end\n    local sorted = {}\n    for key, value in pairs(dict2) do\n        table.insert(sorted, {value, key})\n    end\n    table.sort(sorted, function(a, b) return a[2] > b[2] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {v, k})\n    end\n    table.sort(sorted, function(a, b) return a[2] > b[2] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, _ in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local sorted = {}\n    for _, k in ipairs(keys) do\n        table.insert(sorted, {dict2[k], k})\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnetvy9l.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}}\nstack traceback:\n\t/tmp/tmpgnetvy9l.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k,v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k,v in pairs(dict2) do\n        table.insert(dict3, {k,v})\n    end\n    table.sort(dict3, function(a,b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlfcnzj9.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpxlfcnzj9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted_keys = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted_keys, v)\n    end\n    table.sort(sorted_keys)\n    return sorted_keys\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6p_z635t.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {\"Chemistry\", \"Math\", \"Physics\"}\nstack traceback:\n\t/tmp/tmp6p_z635t.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, v in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local dict3 = {}\n    for i, v in ipairs(keys) do\n        dict3[dict2[v]] = v\n    end\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0uu2od95.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmp0uu2od95.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2+1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairsByKeys(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpllhcodmc.lua:8: attempt to call a nil value (global 'pairsByKeys')\nstack traceback:\n\t/tmp/tmpllhcodmc.lua:8: in local 'candidate'\n\t/tmp/tmpllhcodmc.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b) return a[1] > b[1] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3z8oy75.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpb3z8oy75.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k,v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k,v in pairs(dict2) do\n        table.insert(sorted, {v, k})\n    end\n    table.sort(sorted, function(a,b) return a[2] > b[2] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        table.insert(dict2, {k, v})\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    dict2[v] = k\n  end\n  local sorted = {}\n  for k, v in pairs(dict2) do\n    table.insert(sorted, {v, k})\n  end\n  table.sort(sorted, function(a, b) return a[2] > b[2] end)\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, _ in pairs(dict2) do\n        keys[#keys + 1] = k\n    end\n    table.sort(keys)\n    local dict3 = {}\n    for i = 1, #keys do\n        dict3[dict2[keys[i]]] = keys[i]\n    end\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaev5_1to.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmpaev5_1to.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, _ in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    return dict2, keys\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpljlu297w.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpljlu297w.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n\tlocal sorted_dict = {}\n\tfor k,v in pairs(dict1) do\n\t\ttable.insert(sorted_dict, {k,v})\n\tend\n\ttable.sort(sorted_dict, function(a,b) return a[2] > b[2] end)\n\treturn sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    dict2[v] = k\n  end\n  local dict3 = {}\n  for k, v in pairs(dict2) do\n    table.insert(dict3, {k, v})\n  end\n  table.sort(dict3, function(a, b) return a[1] > b[1] end)\n  return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprdzja5bz.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmprdzja5bz.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b) return a[1] > b[1] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3z8oy75.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpb3z8oy75.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for key, value in pairs(dict1) do\n        dict2[value] = key\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsnsl_2rg.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpsnsl_2rg.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b) return a[1] > b[1] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3z8oy75.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpb3z8oy75.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted_keys = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted_keys, v)\n    end\n    table.sort(sorted_keys, function(a, b) return a > b end)\n    return sorted_keys\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprjmqdzbz.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {\"Physics\", \"Math\", \"Chemistry\"}\nstack traceback:\n\t/tmp/tmprjmqdzbz.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b) return a[1] > b[1] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3z8oy75.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpb3z8oy75.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b) return a[1] > b[1] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3z8oy75.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpb3z8oy75.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, v in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local dict3 = {}\n    for i, k in ipairs(keys) do\n        dict3[dict2[k]] = k\n    end\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6_nfne8.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmpk6_nfne8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local sorted_dict = {}\n    for k, v in pairs(dict1) do\n        table.insert(sorted_dict, {k, v})\n    end\n    table.sort(sorted_dict, function(a, b) return a[2] > b[2] end)\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairsByKeys(dict2) do\n        sorted[#sorted+1] = {k, v}\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi8lthsa2.lua:8: attempt to call a nil value (global 'pairsByKeys')\nstack traceback:\n\t/tmp/tmpi8lthsa2.lua:8: in local 'candidate'\n\t/tmp/tmpi8lthsa2.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, _ in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local dict3 = {}\n    for i = 1, #keys do\n        dict3[dict2[keys[i]]] = keys[i]\n    end\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmnawrm77.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmpmnawrm77.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    dict2[v] = k\n  end\n  local sorted = {}\n  for k, v in pairs(dict2) do\n    table.insert(sorted, {v, k})\n  end\n  table.sort(sorted, function(a, b) return a[2] > b[2] end)\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, _ in pairs(dict2) do\n        keys[#keys + 1] = k\n    end\n    table.sort(keys)\n    local i = 0\n    return function()\n        i = i + 1\n        if i <= #keys then\n            return dict2[keys[i]], keys[i]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpva4od3rr.lua:24: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: function: 0x558bb7bfa720\nstack traceback:\n\t/tmp/tmpva4od3rr.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b) return a[1] > b[1] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3z8oy75.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpb3z8oy75.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, _ in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys, function(a, b) return a > b end)\n    local dict3 = {}\n    for _, v in ipairs(keys) do\n        table.insert(dict3, {dict2[v], v})\n    end\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted_keys = {}\n    for k in pairs(dict2) do\n        table.insert(sorted_keys, k)\n    end\n    table.sort(sorted_keys)\n    local sorted_dict = {}\n    for _, k in ipairs(sorted_keys) do\n        table.insert(sorted_dict, {dict2[k], k})\n    end\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtpwjdx9.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}}\nstack traceback:\n\t/tmp/tmpgtpwjdx9.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b) return a[1] > b[1] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3z8oy75.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpb3z8oy75.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairsByKeys(dict2) do\n        sorted[#sorted + 1] = {k, v}\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp044byffk.lua:8: attempt to call a nil value (global 'pairsByKeys')\nstack traceback:\n\t/tmp/tmp044byffk.lua:8: in local 'candidate'\n\t/tmp/tmp044byffk.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local sorted_dict = {}\n    for k, v in pairs(dict1) do\n        table.insert(sorted_dict, {k, v})\n    end\n    table.sort(sorted_dict, function(a, b) return a[2] > b[2] end)\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[#dict2 + 1] = {k, v}\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n\tlocal dict2 = {}\n\tfor k, v in pairs(dict1) do\n\t\tdict2[v] = k\n\tend\n\tlocal dict3 = {}\n\tfor k, v in pairs(dict2) do\n\t\ttable.insert(dict3, {k, v})\n\tend\n\ttable.sort(dict3, function(a, b) return a[1] > b[1] end)\n\treturn dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdgcgosin.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpdgcgosin.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        table.insert(dict2, {k, v})\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        table.insert(dict2, {k, v})\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, v in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local dict3 = {}\n    for i, v in ipairs(keys) do\n        dict3[dict2[v]] = v\n    end\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0uu2od95.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmp0uu2od95.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, v in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local i = 1\n    local sorted = {}\n    for _, v in ipairs(keys) do\n        sorted[i] = dict2[v]\n        i = i + 1\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu0452py1.lua:24: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {\"Math\", \"Physics\", \"Chemistry\"}\nstack traceback:\n\t/tmp/tmpu0452py1.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n\tlocal dict2 = {}\n\tfor k, v in pairs(dict1) do\n\t\tdict2[v] = k\n\tend\n\tlocal sorted = {}\n\tfor k, v in pairs(dict2) do\n\t\ttable.insert(sorted, v)\n\tend\n\ttable.sort(sorted)\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk21kfibk.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {\"Chemistry\", \"Math\", \"Physics\"}\nstack traceback:\n\t/tmp/tmpk21kfibk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, _ in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys, function(a, b) return a > b end)\n    local dict3 = {}\n    for _, k in pairs(keys) do\n        dict3[dict2[k]] = k\n    end\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95qqepc0.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmp95qqepc0.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k,v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k,v in pairs(dict2) do\n        table.insert(dict3, {k,v})\n    end\n    table.sort(dict3, function(a,b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlfcnzj9.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpxlfcnzj9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n\tlocal dict2 = {}\n\tfor k, v in pairs(dict1) do\n\t\tdict2[v] = k\n\tend\n\tlocal dict3 = {}\n\tfor k, v in pairs(dict2) do\n\t\ttable.insert(dict3, {k, v})\n\tend\n\ttable.sort(dict3, function(a, b) return a[1] > b[1] end)\n\treturn dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdgcgosin.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpdgcgosin.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, _ in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local ret = {}\n    for _, k in ipairs(keys) do\n        table.insert(ret, {dict2[k], k})\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ck6n591.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}}\nstack traceback:\n\t/tmp/tmp7ck6n591.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted_keys = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted_keys, v)\n    end\n    table.sort(sorted_keys, function(a, b) return dict1[a] > dict1[b] end)\n    return sorted_keys\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptpx808u6.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {\"Chemistry\", \"Physics\", \"Math\"}\nstack traceback:\n\t/tmp/tmptpx808u6.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted_keys = {}\n    for k, _ in pairs(dict2) do\n        table.insert(sorted_keys, k)\n    end\n    table.sort(sorted_keys)\n    local sorted_dict = {}\n    for _, k in ipairs(sorted_keys) do\n        table.insert(sorted_dict, {dict2[k], k})\n    end\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjt8e8xri.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}}\nstack traceback:\n\t/tmp/tmpjt8e8xri.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b) return a[1] > b[1] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3z8oy75.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpb3z8oy75.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted_keys = {}\n    for k in pairs(dict2) do\n        table.insert(sorted_keys, k)\n    end\n    table.sort(sorted_keys)\n    local sorted_dict = {}\n    for _, k in ipairs(sorted_keys) do\n        table.insert(sorted_dict, {dict2[k], k})\n    end\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtpwjdx9.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}}\nstack traceback:\n\t/tmp/tmpgtpwjdx9.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b) return a[1] > b[1] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3z8oy75.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpb3z8oy75.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, _ in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local dict3 = {}\n    for _, k in ipairs(keys) do\n        dict3[dict2[k]] = k\n    end\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp291uuju0.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmp291uuju0.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b) return a[1] > b[1] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3z8oy75.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpb3z8oy75.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted_dict = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted_dict, {k, v})\n    end\n    table.sort(sorted_dict, function(a, b) return a[1] > b[1] end)\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzqw105hq.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpzqw105hq.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for key, value in pairs(dict1) do\n        dict2[value] = key\n    end\n    local dict3 = {}\n    for key, value in pairs(dict2) do\n        table.insert(dict3, {key, value})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9plj0im1.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmp9plj0im1.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local sorted_keys = {}\n    for key in pairs(dict1) do\n        table.insert(sorted_keys, key)\n    end\n    table.sort(sorted_keys, function(a, b) return dict1[a] > dict1[b] end)\n    return sorted_keys\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh8yhfo_.lua:14: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {\"Chemistry\", \"Physics\", \"Math\"}\nstack traceback:\n\t/tmp/tmpyh8yhfo_.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        table.insert(dict2, {k, v})\n    end\n    table.sort(dict2, function(a, b) return a[2] > b[2] end)\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b) return a[1] > b[1] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3z8oy75.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpb3z8oy75.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b) return a[1] > b[1] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3z8oy75.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpb3z8oy75.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, _ in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys)\n    local dict3 = {}\n    for _, k in ipairs(keys) do\n        table.insert(dict3, {dict2[k], k})\n    end\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3b7oj7v.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}}\nstack traceback:\n\t/tmp/tmpb3b7oj7v.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for key, value in pairs(dict1) do\n        dict2[value] = key\n    end\n    local keys = {}\n    for key, value in pairs(dict2) do\n        table.insert(keys, key)\n    end\n    table.sort(keys)\n    local sorted = {}\n    for _, key in ipairs(keys) do\n        table.insert(sorted, {dict2[key], key})\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpur2wurs_.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}}\nstack traceback:\n\t/tmp/tmpur2wurs_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b) return a[1] > b[1] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3z8oy75.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpb3z8oy75.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted_keys = {}\n    for k, _ in pairs(dict2) do\n        table.insert(sorted_keys, k)\n    end\n    table.sort(sorted_keys)\n    local sorted_dict = {}\n    for _, k in ipairs(sorted_keys) do\n        table.insert(sorted_dict, {dict2[k], k})\n    end\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjt8e8xri.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}}\nstack traceback:\n\t/tmp/tmpjt8e8xri.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {v, k})\n    end\n    table.sort(sorted, function(a, b) return a[2] > b[2] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {v, k})\n    end\n    table.sort(sorted, function(a, b) return a[2] > b[2] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k,v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k,v in pairs(dict2) do\n        table.insert(dict3, {k,v})\n    end\n    table.sort(dict3, function(a,b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlfcnzj9.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpxlfcnzj9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b) return a[1] > b[1] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3z8oy75.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpb3z8oy75.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted_keys = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted_keys, k)\n    end\n    table.sort(sorted_keys)\n    local sorted_dict = {}\n    for i, v in ipairs(sorted_keys) do\n        sorted_dict[dict2[v]] = v\n    end\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmple_yrv6q.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmple_yrv6q.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted_keys = {}\n    for k in pairs(dict2) do\n        table.insert(sorted_keys, k)\n    end\n    table.sort(sorted_keys)\n    local sorted_dict = {}\n    for _, k in ipairs(sorted_keys) do\n        table.insert(sorted_dict, {dict2[k], k})\n    end\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtpwjdx9.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}}\nstack traceback:\n\t/tmp/tmpgtpwjdx9.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    dict2[v] = k\n  end\n  local sorted = {}\n  for k, v in pairs(dict2) do\n    table.insert(sorted, {k, v})\n  end\n  table.sort(sorted, function(a, b) return a[1] > b[1] end)\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpvw4n_1.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmphpvw4n_1.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted_keys = {}\n    for k, v in pairs(dict2) do\n        table.insert(sorted_keys, k)\n    end\n    table.sort(sorted_keys)\n    local sorted_dict = {}\n    for i, v in ipairs(sorted_keys) do\n        sorted_dict[dict2[v]] = v\n    end\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmple_yrv6q.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {Chemistry=87, Math=81, Physics=83}\nstack traceback:\n\t/tmp/tmple_yrv6q.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairsByKeys(dict2) do\n        table.insert(sorted, {k, v})\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpllhcodmc.lua:8: attempt to call a nil value (global 'pairsByKeys')\nstack traceback:\n\t/tmp/tmpllhcodmc.lua:8: in local 'candidate'\n\t/tmp/tmpllhcodmc.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict2) do\n        sorted[#sorted + 1] = {k, v}\n    end\n    table.sort(sorted, function(a, b) return a[1] > b[1] end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbd_t8tuh.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpbd_t8tuh.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local dict3 = {}\n    for k, v in pairs(dict2) do\n        table.insert(dict3, {k, v})\n    end\n    table.sort(dict3, function(a, b) return a[1] > b[1] end)\n    return dict3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6yaf25h.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmpj6yaf25h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local keys = {}\n    for k, v in pairs(dict2) do\n        table.insert(keys, k)\n    end\n    table.sort(keys, function(a, b) return a > b end)\n    return dict2, keys\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcurwuc_0.lua:18: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmpcurwuc_0.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict = {}\n    for k, v in pairs(dict1) do\n        dict[v] = k\n    end\n    local sorted = {}\n    for k, v in pairs(dict) do\n        table.insert(sorted, {k, v})\n    end\n    table.sort(sorted, function(a, b)\n        return a[1] > b[1]\n    end)\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y9x0bej.lua:20: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{87, \"Chemistry\"}, {83, \"Physics\"}, {81, \"Math\"}}\nstack traceback:\n\t/tmp/tmp2y9x0bej.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    local sorted_keys = {}\n    for k in pairs(dict2) do\n        table.insert(sorted_keys, k)\n    end\n    table.sort(sorted_keys)\n    local sorted_dict = {}\n    for _, k in ipairs(sorted_keys) do\n        table.insert(sorted_dict, {dict2[k], k})\n    end\n    return sorted_dict\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122402,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtpwjdx9.lua:22: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}}\nstack traceback:\n\t/tmp/tmpgtpwjdx9.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        dict2[v] = k\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027770,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_wavf7n.lua:13: expected: {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}}\nactual: {81=\"Math\", 83=\"Physics\", 87=\"Chemistry\"}\nstack traceback:\n\t/tmp/tmp3_wavf7n.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}