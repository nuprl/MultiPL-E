{
  "name": "mbpp_417_group_tuples",
  "language": "lua",
  "prompt": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local Output = {}\n    for i,v in ipairs(Input) do\n        local key = v[1]\n        if not Output[key] then Output[key] = {} end\n        table.insert(Output[key], v)\n    end\n    return Output\nend",
    "    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend",
    "\tlocal Result = {}\n\tfor _, Tuple in ipairs(Input) do\n\t\tlocal Key = Tuple[1]\n\t\tif not Result[Key] then\n\t\t\tResult[Key] = {}\n\t\tend\n\t\ttable.insert(Result[Key], Tuple)\n\tend\n\treturn Result\nend",
    "\tlocal Result = {}\n\tfor _, Tuple in ipairs(Input) do\n\t\tlocal Key = Tuple[1]\n\t\tif not Result[Key] then\n\t\t\tResult[Key] = {}\n\t\tend\n\t\ttable.insert(Result[Key], Tuple)\n\tend\n\treturn Result\nend",
    "    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local First = Tuple[1]\n        if not Result[First] then\n            Result[First] = {}\n        end\n        table.insert(Result[First], Tuple)\n    end\n    return Result\nend",
    "    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend",
    "    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local First = Tuple[1]\n        if not Result[First] then\n            Result[First] = {}\n        end\n        table.insert(Result[First], Tuple)\n    end\n    return Result\nend",
    "    local Output = {}\n    for _, Tuple in ipairs(Input) do\n        local Key = Tuple[1]\n        if Output[Key] == nil then\n            Output[Key] = {}\n        end\n        table.insert(Output[Key], Tuple)\n    end\n    return Output\nend",
    "    local Output = {}\n    for _, Tuple in ipairs(Input) do\n        local Key = Tuple[1]\n        local Value = Tuple[2]\n        if Output[Key] == nil then\n            Output[Key] = { Value }\n        else\n            table.insert(Output[Key], Value)\n        end\n    end\n    return Output\nend",
    "    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local Key = Tuple[1]\n        local Value = Tuple[2]\n        if Result[Key] == nil then\n            Result[Key] = {}\n        end\n        table.insert(Result[Key], Value)\n    end\n    return Result\nend",
    "    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend",
    "\tlocal Output = {}\n\tfor _,v in ipairs(Input) do\n\t\tlocal key = v[1]\n\t\tif not Output[key] then\n\t\t\tOutput[key] = {}\n\t\tend\n\t\ttable.insert(Output[key], v)\n\tend\n\treturn Output\nend",
    "  local Result = {}\n  for _, Tuple in ipairs(Input) do\n    local First = Tuple[1]\n    if not Result[First] then\n      Result[First] = {}\n    end\n    table.insert(Result[First], Tuple)\n  end\n  return Result\nend",
    "    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        local value = tuple[2]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], value)\n    end\n    return Output\nend",
    "    local Output = {}\n    for _, v in ipairs(Input) do\n        local Key = v[1]\n        if not Output[Key] then\n            Output[Key] = {}\n        end\n        table.insert(Output[Key], v)\n    end\n    return Output\nend",
    "    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local First = Tuple[1]\n        if not Result[First] then\n            Result[First] = {}\n        end\n        table.insert(Result[First], Tuple)\n    end\n    return Result\nend",
    "    local Output = {}\n    for _,tuple in ipairs(Input) do\n        local key = tuple[1]\n        local value = tuple[2]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], value)\n    end\n    return Output\nend",
    "    local Output = {}\n    for _,v in ipairs(Input) do\n        local key = v[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], v)\n    end\n    return Output\nend",
    "\tlocal Output = {}\n\tfor _,v in ipairs(Input) do\n\t\tlocal key = v[1]\n\t\tif Output[key] == nil then\n\t\t\tOutput[key] = {}\n\t\tend\n\t\ttable.insert(Output[key], v)\n\tend\n\treturn Output\nend",
    "    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend"
  ]
}