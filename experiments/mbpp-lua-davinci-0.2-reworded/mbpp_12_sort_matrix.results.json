{
  "name": "mbpp_12_sort_matrix",
  "language": "lua",
  "prompt": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = sum(M[i])\n  end\n  local function compare(i, j)\n    return sums[i] < sums[j]\n  end\n  local indices = {}\n  for i = 1, n do\n    indices[i] = i\n  end\n  table.sort(indices, compare)\n  local result = {}\n  for i = 1, n do\n    result[i] = M[indices[i]]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ekyq1x8.lua:6: attempt to call global 'sum' (a nil value)\nstack traceback:\n\t/tmp/tmp7ekyq1x8.lua:6: in function 'candidate'\n\t/tmp/tmp7ekyq1x8.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted_matrix = {}\n  for i = 1, n do\n    sorted_matrix[i] = {}\n    for j = 1, n do\n      sorted_matrix[i][j] = M[i][j]\n    end\n  end\n  for i = 1, n do\n    for j = 1, n do\n      for k = 1, n do\n        if sums[i] == sums[k] then\n          for l = 1, n do\n            sorted_matrix[i][l] = M[k][l]\n          end\n        end\n      end\n    end\n  end\n  return sorted_matrix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2w0x5oc3.lua:36: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: {{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}\nstack traceback:\n\t/tmp/tmp2w0x5oc3.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal function compare(a, b)\n\t\tlocal sum_a = 0\n\t\tlocal sum_b = 0\n\t\tfor i = 1, #a do\n\t\t\tsum_a = sum_a + a[i]\n\t\t\tsum_b = sum_b + b[i]\n\t\tend\n\t\treturn sum_a < sum_b\n\tend\n\ttable.sort(M, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpymci86ti.lua:18: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmpymci86ti.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal sums = {}\n\tfor i = 1, #M do\n\t\tsums[i] = 0\n\t\tfor j = 1, #M[i] do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, #M do\n\t\tfor j = 1, #M do\n\t\t\tif sums[i] == 0 then\n\t\t\t\tsorted[i] = M[j]\n\t\t\t\tsums[i] = -1\n\t\t\t\tbreak\n\t\t\telseif sums[i] == M[j][1] + M[j][2] + M[j][3] then\n\t\t\t\tsorted[i] = M[j]\n\t\t\t\tsums[i] = -1\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = sum(M[i])\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    local indices = {}\n    for i = 1, n do\n        indices[i] = i\n    end\n    table.sort(indices, compare)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = M[indices[i]]\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkb7pl84t.lua:6: attempt to call global 'sum' (a nil value)\nstack traceback:\n\t/tmp/tmpkb7pl84t.lua:6: in function 'candidate'\n\t/tmp/tmpkb7pl84t.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function cmp(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal order = {}\n\tfor i = 1, n do\n\t\torder[i] = i\n\tend\n\ttable.sort(order, cmp)\n\tlocal res = {}\n\tfor i = 1, n do\n\t\tres[i] = M[order[i]]\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal sums = {}\n\tfor i, row in ipairs(M) do\n\t\tsums[i] = sum(row)\n\tend\n\tlocal function cmp(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, #M do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, cmp)\n\tlocal sorted = {}\n\tfor i, j in ipairs(indices) do\n\t\tsorted[i] = M[j]\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2pph0hsl.lua:5: attempt to call global 'sum' (a nil value)\nstack traceback:\n\t/tmp/tmp2pph0hsl.lua:5: in function 'candidate'\n\t/tmp/tmp2pph0hsl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = sum(M[i])\n    end\n    local function compare(a, b)\n        return sums[a] < sums[b]\n    end\n    local indices = {}\n    for i = 1, n do\n        indices[i] = i\n    end\n    table.sort(indices, compare)\n    local result = {}\n    for i = 1, n do\n        result[i] = M[indices[i]]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqzrzvalm.lua:6: attempt to call global 'sum' (a nil value)\nstack traceback:\n\t/tmp/tmpqzrzvalm.lua:6: in function 'candidate'\n\t/tmp/tmpqzrzvalm.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, #M do\n        for j = 1, #M do\n            if sums[i] == sums[j] then\n                sorted[i] = M[j]\n            end\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxoqcqjmy.lua:25: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: {{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}\nstack traceback:\n\t/tmp/tmpxoqcqjmy.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = {}\n        for j = 1, n do\n            sorted[i][j] = M[sums[i]][j]\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm2i_kyp4.lua:16: attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpm2i_kyp4.lua:16: in function 'candidate'\n\t/tmp/tmpm2i_kyp4.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n   local n = #M\n   local sums = {}\n   for i = 1, n do\n      sums[i] = 0\n      for j = 1, n do\n         sums[i] = sums[i] + M[i][j]\n      end\n   end\n   local function compare(i, j)\n      return sums[i] < sums[j]\n   end\n   table.sort(M, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplbdoosuv.lua:12: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmplbdoosuv.lua:12: in function </tmp/tmplbdoosuv.lua:11>\n\t[C]: in function 'sort'\n\t/tmp/tmplbdoosuv.lua:14: in function 'candidate'\n\t/tmp/tmplbdoosuv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = sum(M[i])\n\tend\n\tlocal function comp(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\tlocal order = range(n)\n\ttable.sort(order, comp)\n\tlocal M2 = {}\n\tfor i = 1, n do\n\t\tM2[i] = M[order[i]]\n\tend\n\treturn M2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_k2oeh9_.lua:6: attempt to call global 'sum' (a nil value)\nstack traceback:\n\t/tmp/tmp_k2oeh9_.lua:6: in function 'candidate'\n\t/tmp/tmp_k2oeh9_.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local function compare(i, j)\n    return sums[i] < sums[j]\n  end\n  table.sort(sums, compare)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = M[sums[i]]\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxju61t7y.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpxju61t7y.lua:12: in function </tmp/tmpxju61t7y.lua:11>\n\t[C]: in function 'sort'\n\t/tmp/tmpxju61t7y.lua:14: in function 'candidate'\n\t/tmp/tmpxju61t7y.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function cmp(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\tlocal perm = {}\n\tfor i = 1, n do\n\t\tperm[i] = i\n\tend\n\ttable.sort(perm, cmp)\n\tlocal M2 = {}\n\tfor i = 1, n do\n\t\tM2[i] = {}\n\t\tfor j = 1, n do\n\t\t\tM2[i][j] = M[perm[i]][j]\n\t\tend\n\tend\n\treturn M2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local t = {}\n  for i = 1, #M do\n    t[i] = {sum = 0, row = i}\n    for j = 1, #M[i] do\n      t[i].sum = t[i].sum + M[i][j]\n    end\n  end\n  table.sort(t, function(a, b) return a.sum < b.sum end)\n  local result = {}\n  for i = 1, #t do\n    result[i] = M[t[i].row]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums, function(a, b) return a < b end)\n  local sorted_matrix = {}\n  for i = 1, n do\n    sorted_matrix[i] = {}\n    for j = 1, n do\n      sorted_matrix[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted_matrix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2q941wyn.lua:16: attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp2q941wyn.lua:16: in function 'candidate'\n\t/tmp/tmp2q941wyn.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\tif sums[i] > sums[j] then\n\t\t\t\tsums[i], sums[j] = sums[j], sums[i]\n\t\t\t\tM[i], M[j] = M[j], M[i]\n\t\t\tend\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ztctaxf.lua:24: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmp5ztctaxf.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, #M do\n        for j = 1, #M do\n            if sums[i] == 0 then\n                break\n            end\n            if sums[i] == sums[j] then\n                sorted[i] = M[j]\n                sums[j] = 0\n                break\n            end\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmpp2x_v.lua:30: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: {{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}\nstack traceback:\n\t/tmp/tmpdmpp2x_v.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal function compare(a,b)\n\t\treturn sum(a) < sum(b)\n\tend\n\ttable.sort(M,compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvd5uog4m.lua:4: attempt to call global 'sum' (a nil value)\nstack traceback:\n\t/tmp/tmpvd5uog4m.lua:4: in function </tmp/tmpvd5uog4m.lua:3>\n\t[C]: in function 'sort'\n\t/tmp/tmpvd5uog4m.lua:6: in function 'candidate'\n\t/tmp/tmpvd5uog4m.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums, function(a, b) return a < b end)\n    local sorted = {}\n    for i = 1, #M do\n        for j = 1, #M do\n            if sums[i] == M[j][1] + M[j][2] + M[j][3] then\n                table.insert(sorted, M[j])\n                break\n            end\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local result = {}\n    for i = 1, #M do\n        result[i] = {}\n        for j = 1, #M[i] do\n            result[i][j] = M[sums[i]][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph6pa7_9j.lua:15: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmph6pa7_9j.lua:15: in local 'candidate'\n\t/tmp/tmph6pa7_9j.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal perm = {}\n\tfor i = 1, n do\n\t\tperm[i] = i\n\tend\n\ttable.sort(perm, compare)\n\tlocal M_sorted = {}\n\tfor i = 1, n do\n\t\tM_sorted[i] = {}\n\t\tfor j = 1, n do\n\t\t\tM_sorted[i][j] = M[perm[i]][j]\n\t\tend\n\tend\n\treturn M_sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = sum(M[i])\n  end\n  local function compare(i, j)\n    return sums[i] < sums[j]\n  end\n  local indices = range(1, n)\n  table.sort(indices, compare)\n  local result = {}\n  for i = 1, n do\n    result[i] = M[indices[i]]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprokon_ep.lua:6: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmprokon_ep.lua:6: in local 'candidate'\n\t/tmp/tmprokon_ep.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    local indices = {}\n    for i = 1, n do\n        indices[i] = i\n    end\n    table.sort(indices, compare)\n    local result = {}\n    for i = 1, n do\n        result[i] = M[indices[i]]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local sums = {}\n  for i = 1, #M do\n    sums[i] = 0\n    for j = 1, #M[i] do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(M, function(a, b) return sums[a] < sums[b] end)\n  return M\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfmsnve3r.lua:10: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpfmsnve3r.lua:10: in function </tmp/tmpfmsnve3r.lua:10>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpfmsnve3r.lua:10: in local 'candidate'\n\t/tmp/tmpfmsnve3r.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = {}\n    for j = 1, n do\n      sorted[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkc8_ke95.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpkc8_ke95.lua:16: in local 'candidate'\n\t/tmp/tmpkc8_ke95.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = {}\n    for j = 1, n do\n      sorted[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkc8_ke95.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpkc8_ke95.lua:16: in local 'candidate'\n\t/tmp/tmpkc8_ke95.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxo2ky0_z.lua:20: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local new_M = {}\n    for i = 1, n do\n        new_M[i] = {}\n        for j = 1, n do\n            new_M[i][j] = M[i][j]\n        end\n    end\n    for i = 1, n do\n        local sum = sums[i]\n        for j = 1, n do\n            if sum == 0 then\n                break\n            end\n            for k = 1, n do\n                if sum == 0 then\n                    break\n                end\n                if new_M[j][k] ~= 0 then\n                    new_M[j][k] = 0\n                    sum = sum - 1\n                end\n            end\n        end\n    end\n    return new_M\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm7yo91f9.lua:42: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}\nstack traceback:\n\t/tmp/tmpm7yo91f9.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local N = #M\n    local sums = {}\n    for i = 1, N do\n        sums[i] = 0\n        for j = 1, N do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local sorted = {}\n    for i = 1, N do\n        local min = math.huge\n        local min_index = 0\n        for j = 1, N do\n            if sums[j] < min then\n                min = sums[j]\n                min_index = j\n            end\n        end\n        table.insert(sorted, M[min_index])\n        sums[min_index] = math.huge\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = sum(M[i])\n  end\n  local sorted = {}\n  for i = 1, n do\n    local min = math.huge\n    local min_index = 0\n    for j = 1, n do\n      if sums[j] < min then\n        min = sums[j]\n        min_index = j\n      end\n    end\n    table.insert(sorted, M[min_index])\n    sums[min_index] = math.huge\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu9tu_jds.lua:6: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpu9tu_jds.lua:6: in local 'candidate'\n\t/tmp/tmpu9tu_jds.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal m = #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, m do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local function compare(i, j)\n    return sums[i] < sums[j]\n  end\n  table.sort(sums, compare)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = M[sums[i]]\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxju61t7y.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpxju61t7y.lua:12: in function </tmp/tmpxju61t7y.lua:11>\n\t[C]: in function 'sort'\n\t/tmp/tmpxju61t7y.lua:14: in function 'candidate'\n\t/tmp/tmpxju61t7y.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\ttable.sort(M, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8uwfuefc.lua:12: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp8uwfuefc.lua:12: in function </tmp/tmp8uwfuefc.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp8uwfuefc.lua:14: in local 'candidate'\n\t/tmp/tmp8uwfuefc.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    for i = 1, n do\n        for j = i + 1, n do\n            if sums[i] > sums[j] then\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11l4e74h.lua:24: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmp11l4e74h.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = sum(M[i])\n    end\n    table.sort(sums)\n    return sums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n, m = #M, #M[1]\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, m do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = {}\n    for j = 1, m do\n      sorted[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppvbsydgw.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmppvbsydgw.lua:16: in local 'candidate'\n\t/tmp/tmppvbsydgw.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local result = {}\n    for i = 1, n do\n        result[i] = {}\n        for j = 1, n do\n            result[i][j] = M[sums[i]][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6xv_56eb.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp6xv_56eb.lua:16: in local 'candidate'\n\t/tmp/tmp6xv_56eb.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = sum(M[i])\n\tend\n\tlocal function compare(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = M[indices[i]]\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeuxnxd1f.lua:6: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpeuxnxd1f.lua:6: in local 'candidate'\n\t/tmp/tmpeuxnxd1f.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = vector.sum(M[i])\n\tend\n\tlocal function compare(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\tlocal order = table.sort_index(sums, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[order[i]]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzdrq_lo5.lua:6: attempt to index a nil value (global 'vector')\nstack traceback:\n\t/tmp/tmpzdrq_lo5.lua:6: in local 'candidate'\n\t/tmp/tmpzdrq_lo5.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local sums = {}\n    for i = 1, #M do\n        sums[i] = {}\n        sums[i][1] = sum(M[i])\n        sums[i][2] = i\n    end\n    table.sort(sums, function(a, b) return a[1] < b[1] end)\n    local sorted = {}\n    for i = 1, #M do\n        sorted[i] = M[sums[i][2]]\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadmbfrj_.lua:6: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpadmbfrj_.lua:6: in local 'candidate'\n\t/tmp/tmpadmbfrj_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    local sum = 0\n    for j = 1, n do\n      sum = sum + M[i][j]\n    end\n    sums[i] = sum\n  end\n  local sorted = {}\n  for i = 1, n do\n    local min_sum = math.huge\n    local min_index = 0\n    for j = 1, n do\n      if sums[j] < min_sum then\n        min_sum = sums[j]\n        min_index = j\n      end\n    end\n    sums[min_index] = math.huge\n    sorted[i] = M[min_index]\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(M, function(a, b) return sums[a] < sums[b] end)\n    return M\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2apzml3r.lua:10: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp2apzml3r.lua:10: in function </tmp/tmp2apzml3r.lua:10>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp2apzml3r.lua:10: in local 'candidate'\n\t/tmp/tmp2apzml3r.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(M, function(a, b) return sums[a] < sums[b] end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplrqkg53k.lua:10: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmplrqkg53k.lua:10: in function </tmp/tmplrqkg53k.lua:10>\n\t[C]: in function 'table.sort'\n\t/tmp/tmplrqkg53k.lua:10: in local 'candidate'\n\t/tmp/tmplrqkg53k.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, n do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = {}\n\t\tfor j = 1, n do\n\t\t\tsorted[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6bvhmd3d.lua:17: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp6bvhmd3d.lua:17: in local 'candidate'\n\t/tmp/tmp6bvhmd3d.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local sums = {}\n    for i, row in ipairs(M) do\n        sums[i] = sum(row)\n    end\n    table.sort(M, function(a, b) return sums[a] < sums[b] end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpts0i5wn4.lua:5: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpts0i5wn4.lua:5: in local 'candidate'\n\t/tmp/tmpts0i5wn4.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local sorted = {}\n  for i = 1, n do\n    local min = math.huge\n    local min_idx\n    for j = 1, n do\n      if sums[j] < min then\n        min = sums[j]\n        min_idx = j\n      end\n    end\n    sorted[i] = M[min_idx]\n    sums[min_idx] = math.huge\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal sums = {}\n\tfor i = 1, #M do\n\t\tsums[i] = 0\n\t\tfor j = 1, #M[i] do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, #M do\n\t\tfor j = 1, #M do\n\t\t\tif sums[i] == M[j][1] + M[j][2] + M[j][3] then\n\t\t\t\tsorted[i] = M[j]\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = {}\n\t\tfor j = 1, n do\n\t\t\tsorted[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd3xeg6ih.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpd3xeg6ih.lua:16: in local 'candidate'\n\t/tmp/tmpd3xeg6ih.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = {}\n    for j = 1, n do\n      sorted[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkc8_ke95.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpkc8_ke95.lua:16: in local 'candidate'\n\t/tmp/tmpkc8_ke95.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = {}\n    for j = 1, n do\n      sorted[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkc8_ke95.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpkc8_ke95.lua:16: in local 'candidate'\n\t/tmp/tmpkc8_ke95.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local function compare(a, b)\n        local sum_a = 0\n        for _, v in ipairs(a) do\n            sum_a = sum_a + v\n        end\n        local sum_b = 0\n        for _, v in ipairs(b) do\n            sum_b = sum_b + v\n        end\n        return sum_a < sum_b\n    end\n    table.sort(M, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnpnkf8ac.lua:20: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmpnpnkf8ac.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums, function(a, b) return a < b end)\n    local sorted = {}\n    for i = 1, #M do\n        for j = 1, #M do\n            if sums[i] == M[j][1] + M[j][2] + M[j][3] then\n                table.insert(sorted, M[j])\n                break\n            end\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local sorted = {}\n    for i = 1, n do\n        local min = math.huge\n        local min_index = 0\n        for j = 1, n do\n            if sums[j] < min then\n                min = sums[j]\n                min_index = j\n            end\n        end\n        table.insert(sorted, M[min_index])\n        sums[min_index] = math.huge\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local function compare(a, b)\n    local sum_a = 0\n    local sum_b = 0\n    for i = 1, #a do\n      sum_a = sum_a + a[i]\n      sum_b = sum_b + b[i]\n    end\n    return sum_a < sum_b\n  end\n  table.sort(M, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbax0wwz.lua:18: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmpkbax0wwz.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n, m = #M, #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, m do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = {}\n\t\tfor j = 1, m do\n\t\t\tsorted[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuzcnwg72.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpuzcnwg72.lua:16: in local 'candidate'\n\t/tmp/tmpuzcnwg72.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums, function(a, b) return a < b end)\n  local result = {}\n  for i = 1, n do\n    result[i] = {}\n    for j = 1, n do\n      result[i][j] = M[sums[i]][j]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7jihrpmm.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp7jihrpmm.lua:16: in local 'candidate'\n\t/tmp/tmp7jihrpmm.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal m = #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, m do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = {}\n\t\tfor j = 1, m do\n\t\t\tsorted[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ivvpa42.lua:18: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp5ivvpa42.lua:18: in local 'candidate'\n\t/tmp/tmp5ivvpa42.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal sums = {}\n\tfor i = 1, #M do\n\t\tsums[i] = 0\n\t\tfor j = 1, #M[i] do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, #sums do\n\t\tfor j = 1, #M do\n\t\t\tif sums[i] == 0 then\n\t\t\t\tsorted[i] = M[j]\n\t\t\t\tM[j] = nil\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tlocal sum = 0\n\t\t\tfor k = 1, #M[j] do\n\t\t\t\tsum = sum + M[j][k]\n\t\t\tend\n\t\t\tif sum == sums[i] then\n\t\t\t\tsorted[i] = M[j]\n\t\t\t\tM[j] = nil\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzr0wfy6p.lua:20: attempt to get length of a nil value (field '?')\nstack traceback:\n\t/tmp/tmpzr0wfy6p.lua:20: in local 'candidate'\n\t/tmp/tmpzr0wfy6p.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tlocal min = math.huge\n\t\tlocal min_index = 0\n\t\tfor j = 1, n do\n\t\t\tif sums[j] < min then\n\t\t\t\tmin = sums[j]\n\t\t\t\tmin_index = j\n\t\t\tend\n\t\tend\n\t\tsums[min_index] = math.huge\n\t\tsorted[i] = M[min_index]\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal sum = {}\n\tfor i = 1, #M do\n\t\tsum[i] = 0\n\t\tfor j = 1, #M[1] do\n\t\t\tsum[i] = sum[i] + M[i][j]\n\t\tend\n\tend\n\tfor i = 1, #M do\n\t\tfor j = i + 1, #M do\n\t\t\tif sum[i] > sum[j] then\n\t\t\t\tsum[i], sum[j] = sum[j], sum[i]\n\t\t\t\tM[i], M[j] = M[j], M[i]\n\t\t\tend\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkorg96e.lua:23: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmprkorg96e.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal sum = {}\n\tfor i = 1, #M do\n\t\tsum[i] = 0\n\t\tfor j = 1, #M[i] do\n\t\t\tsum[i] = sum[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sum[a] < sum[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, #M do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal M_sorted = {}\n\tfor i = 1, #M do\n\t\tM_sorted[i] = M[indices[i]]\n\tend\n\treturn M_sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n   local n = #M\n   local sums = {}\n   for i = 1, n do\n      sums[i] = 0\n      for j = 1, n do\n         sums[i] = sums[i] + M[i][j]\n      end\n   end\n   table.sort(sums)\n   local result = {}\n   for i = 1, n do\n      result[i] = {}\n      for j = 1, n do\n         result[i][j] = M[sums[i]][j]\n      end\n   end\n   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn7cb3ac7.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpn7cb3ac7.lua:16: in local 'candidate'\n\t/tmp/tmpn7cb3ac7.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  for i = 1, n do\n    for j = i + 1, n do\n      if sums[i] > sums[j] then\n        sums[i], sums[j] = sums[j], sums[i]\n        M[i], M[j] = M[j], M[i]\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkzmfk8la.lua:24: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmpkzmfk8la.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = sum(M[i])\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    local indices = {}\n    for i = 1, n do\n        indices[i] = i\n    end\n    table.sort(indices, compare)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = M[indices[i]]\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkb7pl84t.lua:6: attempt to call global 'sum' (a nil value)\nstack traceback:\n\t/tmp/tmpkb7pl84t.lua:6: in function 'candidate'\n\t/tmp/tmpkb7pl84t.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal m = #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, m do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = sum(M[i])\n    end\n    local function compare(a, b)\n        return sums[a] < sums[b]\n    end\n    local indices = range(1, n)\n    table.sort(indices, compare)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = M[indices[i]]\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph9f9pwm7.lua:6: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmph9f9pwm7.lua:6: in local 'candidate'\n\t/tmp/tmph9f9pwm7.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal sums = {}\n\tfor i = 1, #M do\n\t\tsums[i] = 0\n\t\tfor j = 1, #M[i] do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, #M do\n\t\tfor j = 1, #M do\n\t\t\tif sums[i] == M[j][1] + M[j][2] + M[j][3] then\n\t\t\t\tsorted[i] = M[j]\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted_matrix = {}\n    for i = 1, #M do\n        sorted_matrix[i] = {}\n        for j = 1, #M[i] do\n            sorted_matrix[i][j] = M[sums[i]][j]\n        end\n    end\n    return sorted_matrix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz7pajf2v.lua:15: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpz7pajf2v.lua:15: in local 'candidate'\n\t/tmp/tmpz7pajf2v.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted_matrix = {}\n  for i = 1, n do\n    sorted_matrix[i] = {}\n    for j = 1, n do\n      sorted_matrix[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted_matrix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1z5g12k0.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp1z5g12k0.lua:16: in local 'candidate'\n\t/tmp/tmp1z5g12k0.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local function sum_row(row)\n    local sum = 0\n    for _, v in ipairs(row) do\n      sum = sum + v\n    end\n    return sum\n  end\n  table.sort(M, function(a, b) return sum_row(a) < sum_row(b) end)\n  return M\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n, m = #M, #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, m do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n - 1 do\n\t\tfor j = i + 1, n do\n\t\t\tif sums[i] > sums[j] then\n\t\t\t\tsums[i], sums[j] = sums[j], sums[i]\n\t\t\t\tM[i], M[j] = M[j], M[i]\n\t\t\tend\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2d7inawn.lua:24: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmp2d7inawn.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local function compare(i, j)\n    return sums[i] < sums[j]\n  end\n  local indices = {}\n  for i = 1, n do\n    indices[i] = i\n  end\n  table.sort(indices, compare)\n  local result = {}\n  for i = 1, n do\n    result[i] = M[indices[i]]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal function cmp(a, b)\n\t\tlocal sum_a = 0\n\t\tlocal sum_b = 0\n\t\tfor i = 1, #a do\n\t\t\tsum_a = sum_a + a[i]\n\t\t\tsum_b = sum_b + b[i]\n\t\tend\n\t\treturn sum_a < sum_b\n\tend\n\ttable.sort(M, cmp)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl4f63k2o.lua:18: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmpl4f63k2o.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local sums = {}\n    for i, row in ipairs(M) do\n        sums[i] = sum(row)\n    end\n    table.sort(M, function(a, b) return sums[a] < sums[b] end)\n    return M\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1fpddqp3.lua:5: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp1fpddqp3.lua:5: in local 'candidate'\n\t/tmp/tmp1fpddqp3.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local function compare(a, b)\n        local sum_a = 0\n        local sum_b = 0\n        for i = 1, #a do\n            sum_a = sum_a + a[i]\n            sum_b = sum_b + b[i]\n        end\n        return sum_a < sum_b\n    end\n    table.sort(M, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpox3mfqx9.lua:18: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmpox3mfqx9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = {}\n\t\tfor j = 1, n do\n\t\t\tsorted[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd3xeg6ih.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpd3xeg6ih.lua:16: in local 'candidate'\n\t/tmp/tmpd3xeg6ih.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indexes = {}\n\tfor i = 1, n do\n\t\tindexes[i] = i\n\tend\n\ttable.sort(indexes, compare)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = M[indexes[i]]\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local rows = {}\n    for i = 1, #M do\n        local row = M[i]\n        local sum = 0\n        for j = 1, #row do\n            sum = sum + row[j]\n        end\n        rows[i] = {sum, row}\n    end\n    table.sort(rows, function(a, b) return a[1] < b[1] end)\n    return rows\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpat3nh5df.lua:19: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: {{3, {1, 1, 1}}, {6, {1, 2, 3}}, {11, {2, 4, 5}}}\nstack traceback:\n\t/tmp/tmpat3nh5df.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local result = {}\n    for i = 1, n do\n        result[i] = {}\n        for j = 1, n do\n            result[i][j] = M[sums[i]][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6xv_56eb.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp6xv_56eb.lua:16: in local 'candidate'\n\t/tmp/tmp6xv_56eb.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal m = #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, m do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        local sum = 0\n        for j = 1, n do\n            sum = sum + M[i][j]\n        end\n        sums[i] = sum\n    end\n    table.sort(sums)\n    local sorted_matrix = {}\n    for i = 1, n do\n        local row = {}\n        for j = 1, n do\n            row[j] = M[sums[i]][j]\n        end\n        sorted_matrix[i] = row\n    end\n    return sorted_matrix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6gqsjhj3.lua:17: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp6gqsjhj3.lua:17: in local 'candidate'\n\t/tmp/tmp6gqsjhj3.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted_matrix = {}\n  for i = 1, n do\n    sorted_matrix[i] = {}\n    for j = 1, n do\n      sorted_matrix[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted_matrix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1z5g12k0.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp1z5g12k0.lua:16: in local 'candidate'\n\t/tmp/tmp1z5g12k0.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = {}\n    for j = 1, n do\n      sorted[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkc8_ke95.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpkc8_ke95.lua:16: in local 'candidate'\n\t/tmp/tmpkc8_ke95.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = sum(M[i])\n  end\n  local function compare(i, j)\n    return sums[i] < sums[j]\n  end\n  local indices = {}\n  for i = 1, n do\n    indices[i] = i\n  end\n  table.sort(indices, compare)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = M[indices[i]]\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp2yi339i.lua:6: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpp2yi339i.lua:6: in local 'candidate'\n\t/tmp/tmpp2yi339i.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n, m = #M, #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, m do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal new_M = {}\n\tfor i = 1, n do\n\t\tnew_M[i] = {}\n\t\tfor j = 1, m do\n\t\t\tnew_M[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn new_M\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbzq3lk5x.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpbzq3lk5x.lua:16: in local 'candidate'\n\t/tmp/tmpbzq3lk5x.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal m = #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, m do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\tif sums[i] > sums[j] then\n\t\t\t\tsums[i], sums[j] = sums[j], sums[i]\n\t\t\t\tM[i], M[j] = M[j], M[i]\n\t\t\tend\n\t\tend\n\tend\n\treturn M\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = i\n\tend\n\ttable.sort(sorted, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[sorted[i]]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local sum = {}\n    for i = 1, #M do\n        sum[i] = 0\n        for j = 1, #M[i] do\n            sum[i] = sum[i] + M[i][j]\n        end\n    end\n    table.sort(M, function(a, b) return sum[a] < sum[b] end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo_2hp5q5.lua:10: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpo_2hp5q5.lua:10: in function </tmp/tmpo_2hp5q5.lua:10>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpo_2hp5q5.lua:10: in local 'candidate'\n\t/tmp/tmpo_2hp5q5.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local rows = {}\n    for i = 1, #M do\n        rows[i] = {sum = 0, row = i}\n        for j = 1, #M[i] do\n            rows[i].sum = rows[i].sum + M[i][j]\n        end\n    end\n    table.sort(rows, function(a, b) return a.sum < b.sum end)\n    local sorted = {}\n    for i = 1, #rows do\n        sorted[i] = M[rows[i].row]\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    table.sort(sums, compare)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = M[sums[i]]\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdwypk1wm.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpdwypk1wm.lua:12: in function </tmp/tmpdwypk1wm.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpdwypk1wm.lua:14: in local 'candidate'\n\t/tmp/tmpdwypk1wm.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal function cmp(a, b)\n\t\tlocal sum_a, sum_b = 0, 0\n\t\tfor i = 1, #a do\n\t\t\tsum_a = sum_a + a[i]\n\t\t\tsum_b = sum_b + b[i]\n\t\tend\n\t\treturn sum_a < sum_b\n\tend\n\ttable.sort(M, cmp)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kua3ejj.lua:17: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmp0kua3ejj.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sum = {}\n\tfor i = 1, n do\n\t\tsum[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsum[i] = sum[i] + M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\tif sum[i] > sum[j] then\n\t\t\t\tsum[i], sum[j] = sum[j], sum[i]\n\t\t\t\tM[i], M[j] = M[j], M[i]\n\t\t\tend\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqx082l_4.lua:24: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmpqx082l_4.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local perm = {}\n  for i = 1, n do\n    perm[i] = i\n  end\n  table.sort(perm, function(a, b) return sums[a] < sums[b] end)\n  local result = {}\n  for i = 1, n do\n    result[i] = M[perm[i]]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vrzv0il.lua:27: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: {{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}\nstack traceback:\n\t/tmp/tmp0vrzv0il.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local function compare(a,b)\n    return sum(a) < sum(b)\n  end\n  table.sort(M, compare)\n  return M\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpljex8_3w.lua:4: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpljex8_3w.lua:4: in function </tmp/tmpljex8_3w.lua:3>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpljex8_3w.lua:6: in local 'candidate'\n\t/tmp/tmpljex8_3w.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted_matrix = {}\n    for i = 1, n do\n        sorted_matrix[i] = {}\n        for j = 1, n do\n            sorted_matrix[i][j] = M[sums[i]][j]\n        end\n    end\n    return sorted_matrix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4hd9iyiq.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp4hd9iyiq.lua:16: in local 'candidate'\n\t/tmp/tmp4hd9iyiq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    local sum = 0\n    for j = 1, n do\n      sum = sum + M[i][j]\n    end\n    sums[i] = sum\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, n do\n    for j = 1, n do\n      if sums[i] == M[j][1] + M[j][2] + M[j][3] then\n        table.insert(sorted, M[j])\n        break\n      end\n    end\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local sums = {}\n    for i, row in ipairs(M) do\n        sums[i] = sum(row)\n    end\n    table.sort(sums)\n    local sorted_matrix = {}\n    for i, row in ipairs(M) do\n        sorted_matrix[i] = row\n    end\n    return sorted_matrix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplqpuc8hv.lua:5: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmplqpuc8hv.lua:5: in local 'candidate'\n\t/tmp/tmplqpuc8hv.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n, m = #M, #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, m do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal rows = {}\n\tfor i = 1, #M do\n\t\trows[i] = {sum = 0, row = M[i]}\n\t\tfor j = 1, #M[i] do\n\t\t\trows[i].sum = rows[i].sum + M[i][j]\n\t\tend\n\tend\n\ttable.sort(rows, function(a, b) return a.sum < b.sum end)\n\tlocal sorted_matrix = {}\n\tfor i = 1, #rows do\n\t\tsorted_matrix[i] = rows[i].row\n\tend\n\treturn sorted_matrix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    table.sort(sums, compare)\n    local result = {}\n    for i = 1, n do\n        result[i] = M[sums[i]]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4y97nvx_.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp4y97nvx_.lua:12: in function </tmp/tmp4y97nvx_.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp4y97nvx_.lua:14: in local 'candidate'\n\t/tmp/tmp4y97nvx_.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n, m = #M, #M[1]\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, m do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums, function(a, b) return a < b end)\n    local sorted = {}\n    for i = 1, n do\n        for j = 1, n do\n            if sums[i] == sums[j] then\n                table.insert(sorted, M[j])\n                break\n            end\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe4a_b22m.lua:27: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: {{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}\nstack traceback:\n\t/tmp/tmpe4a_b22m.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal function compare(a, b)\n\t\tlocal sum_a = 0\n\t\tlocal sum_b = 0\n\t\tfor i = 1, #a do\n\t\t\tsum_a = sum_a + a[i]\n\t\t\tsum_b = sum_b + b[i]\n\t\tend\n\t\treturn sum_a < sum_b\n\tend\n\ttable.sort(M, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpymci86ti.lua:18: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmpymci86ti.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal m = #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, m do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tif sums[i] == sums[j] then\n\t\t\t\tsorted[i] = M[j]\n\t\t\tend\n\t\tend\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bh2ckpc.lua:28: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: {{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}\nstack traceback:\n\t/tmp/tmp9bh2ckpc.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local rows = {}\n  for i = 1, #M do\n    rows[i] = {sum = 0, row = M[i]}\n    for j = 1, #M[i] do\n      rows[i].sum = rows[i].sum + M[i][j]\n    end\n  end\n  table.sort(rows, function(a, b) return a.sum < b.sum end)\n  for i = 1, #rows do\n    M[i] = rows[i].row\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwjm1xejf.lua:19: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmpwjm1xejf.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\tif sums[i] > sums[j] then\n\t\t\t\tM[i], M[j] = M[j], M[i]\n\t\t\t\tsums[i], sums[j] = sums[j], sums[i]\n\t\t\tend\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq1tq6dzt.lua:24: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmpq1tq6dzt.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n, m = #M, #M[1]\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, m do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local result = {}\n    for i = 1, n do\n        result[i] = {}\n        for j = 1, m do\n            result[i][j] = M[sums[i]][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp84j7l7or.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp84j7l7or.lua:16: in local 'candidate'\n\t/tmp/tmp84j7l7or.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal m = #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, m do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = i\n\tend\n\tfor i = 1, n - 1 do\n\t\tfor j = i + 1, n do\n\t\t\tif sums[sorted[i]] > sums[sorted[j]] then\n\t\t\t\tsorted[i], sorted[j] = sorted[j], sorted[i]\n\t\t\tend\n\t\tend\n\tend\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[sorted[i]]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted_M = {}\n  for i = 1, n do\n    sorted_M[i] = {}\n    for j = 1, n do\n      sorted_M[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted_M\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjn4p5njr.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpjn4p5njr.lua:16: in local 'candidate'\n\t/tmp/tmpjn4p5njr.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = {}\n        for j = 1, n do\n            sorted[i][j] = M[sums[i]][j]\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm2i_kyp4.lua:16: attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpm2i_kyp4.lua:16: in function 'candidate'\n\t/tmp/tmpm2i_kyp4.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function cmp(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal order = {}\n\tfor i = 1, n do\n\t\torder[i] = i\n\tend\n\ttable.sort(order, cmp)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[order[i]]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal N = #M\n\tlocal sums = {}\n\tfor i = 1, N do\n\t\tsums[i] = sum(M[i])\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, N do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, N do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzg080vri.lua:6: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpzg080vri.lua:6: in local 'candidate'\n\t/tmp/tmpzg080vri.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal m = #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, m do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i=1,n do\n    sums[i] = 0\n    for j=1,n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local function cmp(i,j)\n    return sums[i] < sums[j]\n  end\n  local perm = {}\n  for i=1,n do\n    perm[i] = i\n  end\n  table.sort(perm, cmp)\n  local M2 = {}\n  for i=1,n do\n    M2[i] = {}\n    for j=1,n do\n      M2[i][j] = M[perm[i]][j]\n    end\n  end\n  return M2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted_matrix = {}\n  for i = 1, n do\n    sorted_matrix[i] = {}\n    for j = 1, n do\n      sorted_matrix[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted_matrix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1z5g12k0.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp1z5g12k0.lua:16: in local 'candidate'\n\t/tmp/tmp1z5g12k0.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\tif sums[i] > sums[j] then\n\t\t\t\tsums[i], sums[j] = sums[j], sums[i]\n\t\t\t\tM[i], M[j] = M[j], M[i]\n\t\t\tend\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ztctaxf.lua:24: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmp5ztctaxf.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local function cmp(i, j)\n    return sums[i] < sums[j]\n  end\n  table.sort(sums, cmp)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = M[sums[i]]\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeja6pu94.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpeja6pu94.lua:12: in function </tmp/tmpeja6pu94.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpeja6pu94.lua:14: in local 'candidate'\n\t/tmp/tmpeja6pu94.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted_matrix = {}\n  for i = 1, n do\n    sorted_matrix[i] = {}\n    for j = 1, n do\n      sorted_matrix[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted_matrix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1z5g12k0.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp1z5g12k0.lua:16: in local 'candidate'\n\t/tmp/tmp1z5g12k0.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = sum(M[i])\n    end\n    table.sort(sums)\n    local sorted_matrix = {}\n    for i = 1, n do\n        for j = 1, n do\n            if sums[i] == sum(M[j]) then\n                sorted_matrix[i] = M[j]\n                break\n            end\n        end\n    end\n    return sorted_matrix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5gf3zhs7.lua:6: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp5gf3zhs7.lua:6: in local 'candidate'\n\t/tmp/tmp5gf3zhs7.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, #M do\n        for j = 1, #M do\n            if sums[i] == M[j][1] + M[j][2] + M[j][3] then\n                table.insert(sorted, M[j])\n                break\n            end\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\tif sums[i] > sums[j] then\n\t\t\t\tsums[i], sums[j] = sums[j], sums[i]\n\t\t\t\tM[i], M[j] = M[j], M[i]\n\t\t\tend\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ztctaxf.lua:24: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmp5ztctaxf.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local function compare(i, j)\n    return sums[i] < sums[j]\n  end\n  local indices = {}\n  for i = 1, n do\n    indices[i] = i\n  end\n  table.sort(indices, compare)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = M[indices[i]]\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = sum(M[i])\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    local indices = {}\n    for i = 1, n do\n        indices[i] = i\n    end\n    table.sort(indices, compare)\n    local result = {}\n    for i = 1, n do\n        result[i] = M[indices[i]]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_o9ta6iz.lua:6: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp_o9ta6iz.lua:6: in local 'candidate'\n\t/tmp/tmp_o9ta6iz.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local function cmp(a, b)\n    return sum(a) < sum(b)\n  end\n  table.sort(M, cmp)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprmkzaocp.lua:4: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmprmkzaocp.lua:4: in function </tmp/tmprmkzaocp.lua:3>\n\t[C]: in function 'table.sort'\n\t/tmp/tmprmkzaocp.lua:6: in local 'candidate'\n\t/tmp/tmprmkzaocp.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n, m = #M, #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, m do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = {}\n\t\tfor j = 1, m do\n\t\t\tsorted[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuzcnwg72.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpuzcnwg72.lua:16: in local 'candidate'\n\t/tmp/tmpuzcnwg72.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(M, function(a, b) return sums[a] < sums[b] end)\n    return M\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2apzml3r.lua:10: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp2apzml3r.lua:10: in function </tmp/tmp2apzml3r.lua:10>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp2apzml3r.lua:10: in local 'candidate'\n\t/tmp/tmp2apzml3r.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    table.sort(sums, compare)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = M[sums[i]]\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdwypk1wm.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpdwypk1wm.lua:12: in function </tmp/tmpdwypk1wm.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpdwypk1wm.lua:14: in local 'candidate'\n\t/tmp/tmpdwypk1wm.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local function compare_rows(a, b)\n        return sum(a) < sum(b)\n    end\n    table.sort(M, compare_rows)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpev91agjn.lua:4: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpev91agjn.lua:4: in function </tmp/tmpev91agjn.lua:3>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpev91agjn.lua:6: in local 'candidate'\n\t/tmp/tmpev91agjn.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n, m = #M, #M[1]\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, m do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = {}\n        for j = 1, m do\n            sorted[i][j] = M[sums[i]][j]\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplam4m1ka.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmplam4m1ka.lua:16: in local 'candidate'\n\t/tmp/tmplam4m1ka.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal m = #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, m do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = {}\n\t\tfor j = 1, m do\n\t\t\tsorted[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppjljzsv8.lua:17: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmppjljzsv8.lua:17: in local 'candidate'\n\t/tmp/tmppjljzsv8.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n, m = #M, #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, m do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = {}\n\t\tfor j = 1, m do\n\t\t\tsorted[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuzcnwg72.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpuzcnwg72.lua:16: in local 'candidate'\n\t/tmp/tmpuzcnwg72.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local function compare(a, b)\n    local sum_a = 0\n    local sum_b = 0\n    for i = 1, #a do\n      sum_a = sum_a + a[i]\n      sum_b = sum_b + b[i]\n    end\n    return sum_a < sum_b\n  end\n  table.sort(M, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbax0wwz.lua:18: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmpkbax0wwz.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = {}\n\t\tfor j = 1, n do\n\t\t\tresult[i][j] = M[indices[i]][j]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    table.sort(M, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz3jol_s7.lua:12: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpz3jol_s7.lua:12: in function </tmp/tmpz3jol_s7.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpz3jol_s7.lua:14: in local 'candidate'\n\t/tmp/tmpz3jol_s7.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local function compare(i, j)\n    return sums[i] < sums[j]\n  end\n  table.sort(sums, compare)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = M[sums[i]]\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxju61t7y.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpxju61t7y.lua:12: in function </tmp/tmpxju61t7y.lua:11>\n\t[C]: in function 'sort'\n\t/tmp/tmpxju61t7y.lua:14: in function 'candidate'\n\t/tmp/tmpxju61t7y.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, n do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = {}\n\t\tfor j = 1, n do\n\t\t\tsorted[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6bvhmd3d.lua:17: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp6bvhmd3d.lua:17: in local 'candidate'\n\t/tmp/tmp6bvhmd3d.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n - 1 do\n\t\tfor j = i + 1, n do\n\t\t\tif sums[i] > sums[j] then\n\t\t\t\tsums[i], sums[j] = sums[j], sums[i]\n\t\t\t\tM[i], M[j] = M[j], M[i]\n\t\t\tend\n\t\tend\n\tend\n\treturn M\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = sum(M[i])\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplil6of_e.lua:6: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmplil6of_e.lua:6: in local 'candidate'\n\t/tmp/tmplil6of_e.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = sum(M[i])\n    end\n    local sorted = {}\n    for i = 1, n do\n        local min = math.min(unpack(sums))\n        local index = find(sums, min)\n        table.insert(sorted, M[index])\n        sums[index] = math.huge\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptugdipa0.lua:6: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmptugdipa0.lua:6: in local 'candidate'\n\t/tmp/tmptugdipa0.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local function compare(a, b)\n        return sums[a] < sums[b]\n    end\n    table.sort(M, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxvdcu18w.lua:11: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpxvdcu18w.lua:11: in function </tmp/tmpxvdcu18w.lua:10>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpxvdcu18w.lua:13: in local 'candidate'\n\t/tmp/tmpxvdcu18w.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local rows = {}\n    for i = 1, #M do\n        local row = M[i]\n        local sum = 0\n        for j = 1, #row do\n            sum = sum + row[j]\n        end\n        table.insert(rows, {sum, row})\n    end\n    table.sort(rows, function(a, b) return a[1] < b[1] end)\n    for i = 1, #rows do\n        M[i] = rows[i][2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi6_wwp2p.lua:21: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmpi6_wwp2p.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    table.sort(M, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz3jol_s7.lua:12: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpz3jol_s7.lua:12: in function </tmp/tmpz3jol_s7.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpz3jol_s7.lua:14: in local 'candidate'\n\t/tmp/tmpz3jol_s7.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n, m = #M, #M[1]\n  local sums = {}\n  for i = 1, n do\n    local sum = 0\n    for j = 1, m do\n      sum = sum + M[i][j]\n    end\n    sums[i] = sum\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, n do\n    local row = {}\n    for j = 1, m do\n      row[j] = M[sums[i]][j]\n    end\n    sorted[i] = row\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpek64givw.lua:17: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpek64givw.lua:17: in local 'candidate'\n\t/tmp/tmpek64givw.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local sums = {}\n  for i = 1, #M do\n    sums[i] = 0\n    for j = 1, #M[i] do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, #sums do\n    for j = 1, #M do\n      if sums[i] == 0 then\n        for k = 1, #M[j] do\n          sums[i] = sums[i] + M[j][k]\n        end\n      end\n      if sums[i] == 0 then\n        sorted[i] = M[j]\n        break\n      end\n    end\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5xz22o8.lua:31: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: {}\nstack traceback:\n\t/tmp/tmpw5xz22o8.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local rows = {}\n    for i = 1, #M do\n        local row = M[i]\n        local sum = 0\n        for j = 1, #row do\n            sum = sum + row[j]\n        end\n        rows[i] = {sum, row}\n    end\n    table.sort(rows, function(a, b) return a[1] < b[1] end)\n    for i = 1, #rows do\n        M[i] = rows[i][2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgbdpyyk.lua:21: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmpmgbdpyyk.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal sums = {}\n\tfor i = 1, #M do\n\t\tsums[i] = 0\n\t\tfor j = 1, #M[i] do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, #M do\n\t\tfor j = 1, #M do\n\t\t\tif sums[i] == M[j][1] + M[j][2] + M[j][3] then\n\t\t\t\tsorted[i] = M[j]\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = sum(M[i])\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    local indices = {}\n    for i = 1, n do\n        indices[i] = i\n    end\n    table.sort(indices, compare)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = M[indices[i]]\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkb7pl84t.lua:6: attempt to call global 'sum' (a nil value)\nstack traceback:\n\t/tmp/tmpkb7pl84t.lua:6: in function 'candidate'\n\t/tmp/tmpkb7pl84t.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = {}\n        for j = 1, n do\n            sorted[i][j] = M[sums[i]][j]\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm2i_kyp4.lua:16: attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpm2i_kyp4.lua:16: in function 'candidate'\n\t/tmp/tmpm2i_kyp4.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n, m = #M, #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, m do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = {}\n        for j = 1, n do\n            sorted[i][j] = M[sums[i]][j]\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm2i_kyp4.lua:16: attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpm2i_kyp4.lua:16: in function 'candidate'\n\t/tmp/tmpm2i_kyp4.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local res = {}\n    for i = 1, n do\n        res[i] = {}\n        for j = 1, n do\n            res[i][j] = M[i][j]\n        end\n    end\n    for i = 1, n do\n        for j = 1, n do\n            for k = 1, n do\n                if sums[i] == res[j][k] then\n                    res[j][k] = i\n                    break\n                end\n            end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwslmzkip.lua:35: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: {{1, 2, 1}, {2, 4, 5}, {1, 1, 1}}\nstack traceback:\n\t/tmp/tmpwslmzkip.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local result = {}\n    for i = 1, n do\n        result[i] = {}\n        for j = 1, n do\n            result[i][j] = M[i][j]\n        end\n    end\n    for i = 1, n do\n        for j = 1, n do\n            result[i][j] = M[sums[i]][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzu8gw19i.lua:21: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpzu8gw19i.lua:21: in local 'candidate'\n\t/tmp/tmpzu8gw19i.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    local sum = 0\n    for j = 1, n do\n      sum = sum + M[i][j]\n    end\n    sums[i] = sum\n  end\n  local function compare(i, j)\n    return sums[i] < sums[j]\n  end\n  local indices = {}\n  for i = 1, n do\n    indices[i] = i\n  end\n  table.sort(indices, compare)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = M[indices[i]]\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    table.sort(sums, compare)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = M[sums[i]]\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdwypk1wm.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpdwypk1wm.lua:12: in function </tmp/tmpdwypk1wm.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpdwypk1wm.lua:14: in local 'candidate'\n\t/tmp/tmpdwypk1wm.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal sums = {}\n\tfor i = 1, #M do\n\t\tsums[i] = 0\n\t\tfor j = 1, #M[i] do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(M, function(a, b) return sums[a] < sums[b] end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpptr0ey_o.lua:10: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpptr0ey_o.lua:10: in function </tmp/tmpptr0ey_o.lua:10>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpptr0ey_o.lua:10: in local 'candidate'\n\t/tmp/tmpptr0ey_o.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, #M do\n        for j = 1, #M do\n            if sums[i] == sums[j] then\n                sorted[i] = M[j]\n                break\n            end\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqzintu11.lua:26: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: {{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}\nstack traceback:\n\t/tmp/tmpqzintu11.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = sum(M[i])\n    end\n    local function compare(a, b)\n        return sums[a] < sums[b]\n    end\n    local indices = {}\n    for i = 1, n do\n        indices[i] = i\n    end\n    table.sort(indices, compare)\n    local result = {}\n    for i = 1, n do\n        result[i] = M[indices[i]]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqzrzvalm.lua:6: attempt to call global 'sum' (a nil value)\nstack traceback:\n\t/tmp/tmpqzrzvalm.lua:6: in function 'candidate'\n\t/tmp/tmpqzrzvalm.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal sums = {}\n\tfor i = 1, #M do\n\t\tsums[i] = 0\n\t\tfor j = 1, #M[i] do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, #M do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, #M do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = {}\n        for j = 1, n do\n            sorted[i][j] = M[sums[i]][j]\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm2i_kyp4.lua:16: attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpm2i_kyp4.lua:16: in function 'candidate'\n\t/tmp/tmpm2i_kyp4.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = {}\n        for j = 1, n do\n            sorted[i][j] = M[sums[i]][j]\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm2i_kyp4.lua:16: attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpm2i_kyp4.lua:16: in function 'candidate'\n\t/tmp/tmpm2i_kyp4.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = {}\n        for j = 1, n do\n            sorted[i][j] = M[sums[i]][j]\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm2i_kyp4.lua:16: attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpm2i_kyp4.lua:16: in function 'candidate'\n\t/tmp/tmpm2i_kyp4.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  for i = 1, n do\n    for j = i + 1, n do\n      if sums[i] > sums[j] then\n        sums[i], sums[j] = sums[j], sums[i]\n        M[i], M[j] = M[j], M[i]\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkzmfk8la.lua:24: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmpkzmfk8la.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(M, function(a, b) return sums[a] < sums[b] end)\n    return M\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2apzml3r.lua:10: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp2apzml3r.lua:10: in function </tmp/tmp2apzml3r.lua:10>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp2apzml3r.lua:10: in local 'candidate'\n\t/tmp/tmp2apzml3r.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = {}\n        for j = 1, n do\n            sorted[i][j] = M[sums[i]][j]\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm2i_kyp4.lua:16: attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpm2i_kyp4.lua:16: in function 'candidate'\n\t/tmp/tmpm2i_kyp4.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local function compare(a, b)\n        return sums[a] < sums[b]\n    end\n    local indices = {}\n    for i = 1, n do\n        indices[i] = i\n    end\n    table.sort(indices, compare)\n    local result = {}\n    for i = 1, n do\n        result[i] = M[indices[i]]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal sums = {}\n\tfor i = 1, #M do\n\t\tsums[i] = 0\n\t\tfor j = 1, #M[i] do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, #M do\n\t\tfor j = 1, #M do\n\t\t\tif sums[i] == M[j][1] + M[j][2] + M[j][3] then\n\t\t\t\ttable.insert(sorted, M[j])\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = sum(M[i])\n    end\n    local function cmp(a, b)\n        return sums[a] < sums[b]\n    end\n    local order = {}\n    for i = 1, n do\n        order[i] = i\n    end\n    table.sort(order, cmp)\n    local result = {}\n    for i = 1, n do\n        result[i] = M[order[i]]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr1dp96p5.lua:6: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpr1dp96p5.lua:6: in local 'candidate'\n\t/tmp/tmpr1dp96p5.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = sum(M[i])\n\tend\n\tlocal order = sort_indices(sums)\n\tlocal M_sorted = {}\n\tfor i = 1, n do\n\t\tM_sorted[i] = M[order[i]]\n\tend\n\treturn M_sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfo_otr4d.lua:6: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpfo_otr4d.lua:6: in local 'candidate'\n\t/tmp/tmpfo_otr4d.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = {}\n        for j = 1, n do\n            sorted[i][j] = M[sums[i]][j]\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm2i_kyp4.lua:16: attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpm2i_kyp4.lua:16: in function 'candidate'\n\t/tmp/tmpm2i_kyp4.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n, m = #M, #M[1]\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, m do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local function compare(i, j)\n    return sums[i] < sums[j]\n  end\n  table.sort(M, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcwue5gnu.lua:12: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpcwue5gnu.lua:12: in function </tmp/tmpcwue5gnu.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpcwue5gnu.lua:14: in local 'candidate'\n\t/tmp/tmpcwue5gnu.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(M, function(a, b) return sums[a] < sums[b] end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk2qehrti.lua:11: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpk2qehrti.lua:11: in function </tmp/tmpk2qehrti.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpk2qehrti.lua:11: in local 'candidate'\n\t/tmp/tmpk2qehrti.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n, m = #M, #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, m do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\ttable.sort(sums)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = {}\n\t\tfor j = 1, m do\n\t\t\tresult[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplc9f3203.lua:17: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmplc9f3203.lua:17: in local 'candidate'\n\t/tmp/tmplc9f3203.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted_matrix = {}\n\tfor i = 1, n do\n\t\tsorted_matrix[i] = {}\n\t\tfor j = 1, n do\n\t\t\tsorted_matrix[i][j] = M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tsorted_matrix[i][j] = M[i][j]\n\t\tend\n\tend\n\treturn sorted_matrix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9yce2g9.lua:30: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: {{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}\nstack traceback:\n\t/tmp/tmpw9yce2g9.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal sums = {}\n\tfor i = 1, #M do\n\t\tsums[i] = 0\n\t\tfor j = 1, #M[i] do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tfor i = 1, #M do\n\t\tfor j = i+1, #M do\n\t\t\tif sums[i] > sums[j] then\n\t\t\t\tM[i], M[j] = M[j], M[i]\n\t\t\t\tsums[i], sums[j] = sums[j], sums[i]\n\t\t\tend\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl9mbnvfk.lua:23: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmpl9mbnvfk.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local sums = {}\n  for i = 1, #M do\n    sums[i] = 0\n    for j = 1, #M[i] do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local function compare(a, b)\n    return sums[a] < sums[b]\n  end\n  local indices = {}\n  for i = 1, #M do\n    indices[i] = i\n  end\n  table.sort(indices, compare)\n  local sorted = {}\n  for i = 1, #M do\n    sorted[i] = M[indices[i]]\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local sum_rows = {}\n    for i = 1, #M do\n        sum_rows[i] = 0\n        for j = 1, #M[i] do\n            sum_rows[i] = sum_rows[i] + M[i][j]\n        end\n    end\n    table.sort(M, function(a, b)\n        return sum_rows[a] < sum_rows[b]\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp0wcj2jf.lua:11: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpp0wcj2jf.lua:11: in function </tmp/tmpp0wcj2jf.lua:10>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpp0wcj2jf.lua:10: in local 'candidate'\n\t/tmp/tmpp0wcj2jf.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    table.sort(M, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz3jol_s7.lua:12: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpz3jol_s7.lua:12: in function </tmp/tmpz3jol_s7.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpz3jol_s7.lua:14: in local 'candidate'\n\t/tmp/tmpz3jol_s7.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n, m = #M, #M[1]\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, m do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(M, function(a, b) return sums[a] < sums[b] end)\n    return M\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxvnjlbjv.lua:11: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpxvnjlbjv.lua:11: in function </tmp/tmpxvnjlbjv.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpxvnjlbjv.lua:11: in local 'candidate'\n\t/tmp/tmpxvnjlbjv.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = sum(M[i])\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    local indices = {}\n    for i = 1, n do\n        indices[i] = i\n    end\n    table.sort(indices, compare)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = M[indices[i]]\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027763,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkb7pl84t.lua:6: attempt to call global 'sum' (a nil value)\nstack traceback:\n\t/tmp/tmpkb7pl84t.lua:6: in function 'candidate'\n\t/tmp/tmpkb7pl84t.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local result = {}\n  for i = 1, n do\n    result[i] = {}\n    for j = 1, n do\n      result[i][j] = M[sums[i]][j]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi02eulwc.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpi02eulwc.lua:16: in local 'candidate'\n\t/tmp/tmpi02eulwc.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal order = {}\n\tfor i = 1, #M do\n\t\torder[i] = i\n\tend\n\tlocal function cmp(i, j)\n\t\tlocal sum_i = 0\n\t\tlocal sum_j = 0\n\t\tfor k = 1, #M[i] do\n\t\t\tsum_i = sum_i + M[i][k]\n\t\t\tsum_j = sum_j + M[j][k]\n\t\tend\n\t\treturn sum_i < sum_j\n\tend\n\ttable.sort(order, cmp)\n\tlocal M_sorted = {}\n\tfor i = 1, #M do\n\t\tM_sorted[i] = M[order[i]]\n\tend\n\treturn M_sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = sum(M[i])\n  end\n  local function compare(i, j)\n    return sums[i] < sums[j]\n  end\n  local indices = {}\n  for i = 1, n do\n    indices[i] = i\n  end\n  table.sort(indices, compare)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = M[indices[i]]\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp2yi339i.lua:6: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpp2yi339i.lua:6: in local 'candidate'\n\t/tmp/tmpp2yi339i.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local sums = {}\n    for i = 1, #M do\n        sums[i] = sum(M[i])\n    end\n    table.sort(sums)\n    return sums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv4hgr8l9.lua:5: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpv4hgr8l9.lua:5: in local 'candidate'\n\t/tmp/tmpv4hgr8l9.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    table.sort(M, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz3jol_s7.lua:12: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpz3jol_s7.lua:12: in function </tmp/tmpz3jol_s7.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpz3jol_s7.lua:14: in local 'candidate'\n\t/tmp/tmpz3jol_s7.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tlocal sum = 0\n\t\tfor j = 1, n do\n\t\t\tsum = sum + M[i][j]\n\t\tend\n\t\tsums[i] = sum\n\tend\n\ttable.sort(sums)\n\tlocal M_sorted = {}\n\tfor i = 1, n do\n\t\tM_sorted[i] = {}\n\t\tfor j = 1, n do\n\t\t\tM_sorted[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn M_sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr8w9ffn8.lua:17: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpr8w9ffn8.lua:17: in local 'candidate'\n\t/tmp/tmpr8w9ffn8.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = {}\n    for j = 1, n do\n      sorted[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkc8_ke95.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpkc8_ke95.lua:16: in local 'candidate'\n\t/tmp/tmpkc8_ke95.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted_matrix = {}\n\tfor i = 1, n do\n\t\tsorted_matrix[i] = {}\n\t\tfor j = 1, n do\n\t\t\tsorted_matrix[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted_matrix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxgbbh3t6.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpxgbbh3t6.lua:16: in local 'candidate'\n\t/tmp/tmpxgbbh3t6.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local sums = {}\n  for i = 1, #M do\n    sums[i] = 0\n    for j = 1, #M[i] do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local result = {}\n  for i = 1, #M do\n    result[i] = {}\n    for j = 1, #M[i] do\n      result[i][j] = M[sums[i]][j]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphiv08ri5.lua:15: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmphiv08ri5.lua:15: in local 'candidate'\n\t/tmp/tmphiv08ri5.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = sum(M[i])\n  end\n  local function compare(i, j)\n    return sums[i] < sums[j]\n  end\n  local indices = {}\n  for i = 1, n do\n    indices[i] = i\n  end\n  table.sort(indices, compare)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = M[indices[i]]\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp2yi339i.lua:6: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpp2yi339i.lua:6: in local 'candidate'\n\t/tmp/tmpp2yi339i.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = sum(M[i])\n\tend\n\tlocal perm = sort_perm(sums)\n\tlocal M_sorted = {}\n\tfor i = 1, n do\n\t\tM_sorted[i] = M[perm[i]]\n\tend\n\treturn M_sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvjo3203d.lua:6: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpvjo3203d.lua:6: in local 'candidate'\n\t/tmp/tmpvjo3203d.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    local function row_sum(row)\n        local sum = 0\n        for i = 1, #row do\n            sum = sum + row[i]\n        end\n        return sum\n    end\n    local function compare(a, b)\n        return row_sum(a) < row_sum(b)\n    end\n    table.sort(M, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqsfmg3o.lua:19: expected: {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}\nactual: nil\nstack traceback:\n\t/tmp/tmptqsfmg3o.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n\tlocal n, m = #M, #M[1]\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, m do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, n do\n\t\tsorted[i] = {}\n\t\tfor j = 1, m do\n\t\t\tsorted[i][j] = M[sums[i]][j]\n\t\tend\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuzcnwg72.lua:16: attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpuzcnwg72.lua:16: in local 'candidate'\n\t/tmp/tmpuzcnwg72.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n  local n = #M\n  local m = #M[1]\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, m do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local function compare(a, b)\n    return sums[a] < sums[b]\n  end\n  table.sort(M, compare)\n  return M\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123504,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd8dmi0fh.lua:13: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpd8dmi0fh.lua:13: in function </tmp/tmpd8dmi0fh.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpd8dmi0fh.lua:15: in local 'candidate'\n\t/tmp/tmpd8dmi0fh.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}