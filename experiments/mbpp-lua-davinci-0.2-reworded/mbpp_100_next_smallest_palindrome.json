{
  "name": "mbpp_100_next_smallest_palindrome",
  "language": "lua",
  "prompt": "-- Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlocal function next_smallest_palindrome(num)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest_palindrome\n    lu.assertEquals(candidate(99), 101)\n    lu.assertEquals(candidate(1221), 1331)\n    lu.assertEquals(candidate(120), 121)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local num_str = tostring(num)\n  local len = #num_str\n  local left = math.floor(len/2)\n  local right = len - left\n  local left_str = string.sub(num_str, 1, left)\n  local right_str = string.sub(num_str, right + 1, len)\n  local left_num = tonumber(left_str)\n  local right_num = tonumber(right_str)\n  local left_num_next = left_num + 1\n  local left_num_next_str = tostring(left_num_next)\n  local left_num_next_len = #left_num_next_str\n  local left_num_next_str_rev = string.reverse(left_num_next_str)\n  local right_num_next = tonumber(left_num_next_str_rev)\n  local right_num_next_str = tostring(right_num_next)\n  local right_num_next_len = #right_num_next_str\n  local right_num_next_str_rev = string.reverse(right_num_next_str)\n  local right_num_next_str_rev_num = tonumber(right_num_next_str_rev)\n  local left_num_next_str_rev_num = tonumber(left_num_next_str_rev)\n  local left_num_next_str_rev_num_str = tostring(left_num_next_str_rev_num)\n  local left_num_next_str_rev_num_str_len = #left_num_next_str_rev_num_str\n  local left_num_next_str_rev_num_str_rev = string.reverse(left_num_next_str_rev_num_str)\n  local left_num_next_str_rev_num_str_rev_num = tonumber(left_num_next_str_rev_num_str_rev)\n  local left_num_next_str_rev_num_str_rev_num_str = tostring(left_num_next_str_rev_num_str_",
    "  local num_str = tostring(num)\n  local num_len = #num_str\n  local left_half = num_str:sub(1, math.floor(num_len / 2))\n  local right_half = num_str:sub(math.ceil(num_len / 2) + 1)\n  local left_half_num = tonumber(left_half)\n  local right_half_num = tonumber(right_half)\n  local left_half_num_next = left_half_num + 1\n  local right_half_num_next = right_half_num + 1\n  local left_half_num_next_str = tostring(left_half_num_next)\n  local right_half_num_next_str = tostring(right_half_num_next)\n  local left_half_num_next_str_rev = left_half_num_next_str:reverse()\n  local right_half_num_next_str_rev = right_half_num_next_str:reverse()\n  local left_half_num_next_str_rev_num = tonumber(left_half_num_next_str_rev)\n  local right_half_num_next_str_rev_num = tonumber(right_half_num_next_str_rev)\n  local left_half_num_next_str_rev_num_str = tostring(left_half_num_next_str_rev_num)\n  local right_half_num_next_str_rev_num_str = tostring(right_half_num_next_str_rev_num)\n  local left_half_num_next_str_rev_num_str_len = #left_half_num_next_str_rev_num_str\n  local right_half_num_next_str_rev_num_str_len = #right_half_num_next_str_rev_num_str\n  local left_half_num_next_str_rev_num_str_len_diff = left_half_num_next_str_rev_num_str_len - left_half_num_next_str_len\n  local right_",
    "  local palindrome = num\n  local i = 1\n  while not is_palindrome(palindrome) do\n    palindrome = num - i\n    i = i + 1\n  end\n  return palindrome\nend",
    "  local num_str = tostring(num)\n  local len = #num_str\n  local half_len = math.floor(len / 2)\n  local left_half = string.sub(num_str, 1, half_len)\n  local right_half = string.sub(num_str, len - half_len + 1, len)\n  local left_half_num = tonumber(left_half)\n  local right_half_num = tonumber(right_half)\n  local next_left_half_num = left_half_num + 1\n  local next_right_half_num = right_half_num + 1\n  local next_left_half = tostring(next_left_half_num)\n  local next_right_half = tostring(next_right_half_num)\n  local next_palindrome = nil\n  if next_left_half_num == next_right_half_num then\n    next_palindrome = next_left_half\n  elseif next_left_half_num < next_right_half_num then\n    next_palindrome = next_left_half .. string.reverse(next_left_half)\n  else\n    next_palindrome = next_right_half .. string.reverse(next_right_half)\n  end\n  return tonumber(next_palindrome)\nend",
    "  local num_str = tostring(num)\n  local num_len = #num_str\n  local is_odd = num_len % 2 == 1\n  local mid_idx = math.floor(num_len / 2)\n  local left_half = string.sub(num_str, 1, mid_idx)\n  local right_half = string.sub(num_str, mid_idx + 1, num_len)\n  local left_half_num = tonumber(left_half)\n  local right_half_num = tonumber(right_half)\n  local left_half_num_str = tostring(left_half_num)\n  local right_half_num_str = tostring(right_half_num)\n  local left_half_num_len = #left_half_num_str\n  local right_half_num_len = #right_half_num_str\n  local left_half_num_len_diff = left_half_num_len - mid_idx\n  local right_half_num_len_diff = right_half_num_len - mid_idx\n  local left_half_num_str_rev = string.reverse(left_half_num_str)\n  local right_half_num_str_rev = string.reverse(right_half_num_str)\n  local left_half_num_str_rev_num = tonumber(left_half_num_str_rev)\n  local right_half_num_str_rev_num = tonumber(right_half_num_str_rev)\n  local left_half_num_str_rev_num_str = tostring(left_half_num_str_rev_num)\n  local right_half_num_str_rev_num_str = tostring(right_half_num_str_rev_num)\n  local left_half_num_str_rev_num_len = #left_half_num_str_rev_num_str\n  local right_half_num_str_rev_num_len = #right_half_num_str_rev_num_str\n  local left_half_num_str_rev_num_len_",
    "  local num_str = tostring(num)\n  local len = #num_str\n  local half_len = math.floor(len / 2)\n  local left = num_str:sub(1, half_len)\n  local right = num_str:sub(len - half_len + 1)\n  local left_num = tonumber(left)\n  local right_num = tonumber(right)\n  if left_num < right_num then\n    left = left .. string.reverse(left):sub(2)\n  else\n    left = next_palindrome_half(left)\n  end\n  return tonumber(left .. string.reverse(left):sub(2))\nend",
    "  local num_str = tostring(num)\n  local num_len = #num_str\n  local left_half = num_str:sub(1, math.floor(num_len / 2))\n  local right_half = num_str:sub(math.ceil(num_len / 2) + 1)\n  local left_half_num = tonumber(left_half)\n  local right_half_num = tonumber(right_half)",
    "  local num_str = tostring(num)\n  local len = #num_str\n  local half_len = math.floor(len / 2)\n  local left_str = num_str:sub(1, half_len)\n  local right_str = num_str:sub(len - half_len + 1, len)\n  local left_num = tonumber(left_str)\n  local right_num = tonumber(right_str)\n  local left_num_next = left_num + 1\n  local left_num_next_str = tostring(left_num_next)\n  local right_num_next_str = left_num_next_str:reverse()\n  local right_num_next = tonumber(right_num_next_str)\n  if right_num_next < right_num then\n    return left_num_next * 10 ^ half_len + right_num_next\n  end\n  return left_num * 10 ^ half_len + right_num\nend",
    "  local num_str = tostring(num)\n  local len = #num_str\n  local left = math.floor(len / 2)\n  local right = math.ceil(len / 2)\n  local left_str = num_str:sub(1, left)\n  local right_str = num_str:sub(right, len)\n  local left_num = tonumber(left_str)\n  local right_num = tonumber(right_str)\n  local next_left_num = left_num + 1\n  local next_right_num = next_left_num\n  if len % 2 == 0 then\n    next_right_num = next_left_num\n  else\n    next_right_num = next_left_num % 10\n  end\n  return tonumber(tostring(next_left_num) .. tostring(next_right_num))\nend",
    "  local num_str = tostring(num)\n  local len = #num_str\n  local left = math.floor(len / 2)\n  local right = math.ceil(len / 2)\n  local left_str = string.sub(num_str, 1, left)\n  local right_str = string.sub(num_str, right + 1)\n  local left_num = tonumber(left_str)\n  local right_num = tonumber(right_str)\n  if left_num < right_num then\n    left_str = left_str .. string.reverse(left_str)\n    return tonumber(left_str)\n  end\n  local left_num = tonumber(left_str)\n  local right_num = tonumber(right_str)\n  local left_num_plus_one = left_num + 1\n  local left_num_plus_one_str = tostring(left_num_plus_one)\n  local left_num_plus_one_str_len = #left_num_plus_one_str\n  if left_num_plus_one_str_len < left then\n    left_num_plus_one_str = string.rep('0', left - left_num_plus_one_str_len) .. left_num_plus_one_str\n  end\n  local left_num_plus_one_str_reverse = string.reverse(left_num_plus_one_str)\n  local next_smallest_palindrome_str = left_num_plus_one_str .. left_num_plus_one_str_reverse\n  return tonumber(next_smallest_palindrome_str)\nend",
    "  local num_str = tostring(num)\n  local num_len = #num_str\n  local left_half = num_str:sub(1, math.floor(num_len / 2))\n  local right_half = num_str:sub(math.ceil(num_len / 2) + 1)\n  local left_half_num = tonumber(left_half)\n  local right_half_num = tonumber(right_half)\n  local next_left_half_num = left_half_num + 1\n  local next_left_half = tostring(next_left_half_num)\n  local next_right_half = string.reverse(next_left_half)\n  local next_palindrome = next_left_half .. next_right_half\n  if #next_left_half < #left_half then\n    next_palindrome = next_palindrome .. \"0\"\n  end\n  return tonumber(next_palindrome)\nend",
    "  local num_str = tostring(num)\n  local len = #num_str\n  local left = math.floor(len / 2)\n  local right = math.ceil(len / 2)\n  local left_str = num_str:sub(1, left)\n  local right_str = num_str:sub(right, len)\n  local left_num = tonumber(left_str)\n  local right_num = tonumber(right_str)\n  if left_num > right_num then\n    return tonumber(left_str .. left_str:reverse())\n  end\n  local next_left_num = left_num + 1\n  local next_left_str = tostring(next_left_num)\n  local next_right_str = next_left_str:reverse()\n  if #next_left_str > left then\n    return tonumber(next_left_str .. next_right_str:sub(2, #next_right_str))\n  end\n  return tonumber(next_left_str .. next_right_str)\nend",
    "  local n = num\n  while true do\n    n = n + 1\n    if is_palindrome(n) then\n      return n\n    end\n  end\nend",
    "  local num_str = tostring(num)\n  local num_len = #num_str\n  local left_half = num_str:sub(1, math.floor(num_len / 2))\n  local right_half = num_str:sub(math.ceil(num_len / 2) + 1)\n  local left_half_num = tonumber(left_half)\n  local right_half_num = tonumber(right_half)\n  local left_half_num_next = left_half_num + 1\n  local left_half_next = tostring(left_half_num_next)\n  local right_half_next = left_half_next:reverse()\n  local next_palindrome = left_half_next .. right_half_next\n  if #next_palindrome > num_len then\n    next_palindrome = left_half_next:sub(1, #left_half_next - 1) .. right_half_next:sub(2)\n  end\n  return tonumber(next_palindrome)\nend",
    "  local num_str = tostring(num)\n  local num_len = #num_str\n  local left_half = num_str:sub(1, math.floor(num_len / 2))\n  local right_half = num_str:sub(math.ceil(num_len / 2) + 1)\n  local left_half_num = tonumber(left_half)\n  local right_half_num = tonumber(right_half)\n  local next_left_half_num = left_half_num + 1\n  local next_right_half_num = right_half_num + 1\n  local next_left_half = tostring(next_left_half_num)\n  local next_right_half = tostring(next_right_half_num)\n  local next_palindrome = nil\n  if num_len % 2 == 0 then\n    next_palindrome = next_left_half .. next_right_half\n  else\n    next_palindrome = next_left_half .. num_str:sub(math.floor(num_len / 2) + 1, math.floor(num_len / 2) + 1) .. next_right_half\n  end\n  return tonumber(next_palindrome)\nend",
    "  local num_str = tostring(num)\n  local len = #num_str\n  local left_half = math.floor(len / 2)\n  local right_half = len - left_half\n  local left_num = tonumber(num_str:sub(1, left_half))\n  local right_num = tonumber(num_str:sub(right_half + 1))\n  local left_num_str = tostring(left_num)\n  local right_num_str = tostring(right_num)\n  local left_num_len = #left_num_str\n  local right_num_len = #right_num_str\n  local left_num_rev = tonumber(left_num_str:reverse())\n  local right_num_rev = tonumber(right_num_str:reverse())\n  local next_num = nil\n  if left_num_rev < right_num_rev then\n    next_num = left_num + 1\n    next_num = next_num * 10 ^ (right_num_len - 1) + next_num\n  else\n    next_num = left_num\n    next_num = next_num * 10 ^ (right_num_len) + next_num\n  end\n  return next_num\nend",
    "  local str = tostring(num)\n  local len = #str\n  local half = math.floor(len / 2)\n  local left = str:sub(1, half)\n  local right = str:sub(len - half + 1, len)\n  local left_num = tonumber(left)\n  local right_num = tonumber(right)\n  if left_num < right_num then\n    left = left_num + 1\n    right = left\n  elseif left_num > right_num then\n    right = left_num\n  else\n    left = left_num + 1\n    right = left\n  end\n  return tonumber(left .. string.reverse(tostring(right)))\nend",
    "  local num_str = tostring(num)\n  local len = #num_str\n  local half_len = math.ceil(len / 2)\n  local left_half = num_str:sub(1, half_len)\n  local right_half = num_str:sub(len - half_len + 1, len)\n  local left_half_num = tonumber(left_half)\n  local right_half_num = tonumber(right_half)\n  local next_left_half_num = left_half_num + 1\n  local next_left_half = tostring(next_left_half_num)\n  local next_right_half = string.reverse(next_left_half)\n  local next_num_str = next_left_half .. next_right_half\n  if len % 2 == 1 then\n    next_num_str = next_num_str:sub(1, half_len) .. num_str:sub(half_len + 1, half_len + 1) .. next_num_str:sub(half_len + 1, len)\n  end\n  return tonumber(next_num_str)\nend",
    "  local num_str = tostring(num)\n  local num_len = #num_str\n  local left = math.floor(num_len / 2)\n  local right = math.ceil(num_len / 2)\n  local left_str = string.sub(num_str, 1, left)\n  local right_str = string.sub(num_str, right + 1, num_len)\n  local left_num = tonumber(left_str)\n  local right_num = tonumber(right_str)\n  local left_num_rev = tonumber(string.reverse(left_str))\n  local right_num_rev = tonumber(string.reverse(right_str))\n  local left_num_rev_str = tostring(left_num_rev)\n  local right_num_rev_str = tostring(right_num_rev)\n  local left_num_rev_len = #left_num_rev_str\n  local right_num_rev_len = #right_num_rev_str\n  local left_num_rev_str_pad = string.rep(\"0\", left - left_num_rev_len) .. left_num_rev_str\n  local right_num_rev_str_pad = string.rep(\"0\", right - right_num_rev_len) .. right_num_rev_str\n  local left_num_rev_str_pad_num = tonumber(left_num_rev_str_pad)\n  local right_num_rev_str_pad_num = tonumber(right_num_rev_str_pad)\n  local left_num_rev_str_pad_num_str = tostring(left_num_rev_str_pad_num)\n  local right_num_rev_str_pad_num_str = tostring(right_num_rev_str_pad_num)\n  local left_num_rev_str_pad_num_str_len = #left_num_rev_str_pad_num_str\n  local right_num_rev_str_pad_num_str_len = #right_num_rev_str_pad_num_str\n  local left_num_rev_str",
    "    local num_str = tostring(num)\n    local num_len = #num_str\n    local half_len = math.floor(num_len / 2)\n    local left_half = num_str:sub(1, half_len)\n    local right_half = num_str:sub(num_len - half_len + 1, num_len)\n    local left_half_num = tonumber(left_half)\n    local right_half_num = tonumber(right_half)\n    local next_num = left_half_num + 1\n    local next_num_str = tostring(next_num)\n    local next_num_len = #next_num_str\n    local next_num_half_len = math.floor(next_num_len / 2)\n    local next_num_left_half = next_num_str:sub(1, next_num_half_len)\n    local next_num_right_half = next_num_str:sub(next_num_len - next_num_half_len + 1, next_num_len)\n    local next_num_left_half_num = tonumber(next_num_left_half)\n    local next_num_right_half_num = tonumber(next_num_right_half)\n    local next_palindrome = nil"
  ]
}