{
  "name": "mbpp_388_highest_Power_of_2",
  "language": "lua",
  "prompt": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local i = 1\n    while i <= n do\n        i = i * 2\n    end\n    return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local i = 1\n    while i <= n do\n        i = i * 2\n    end\n    return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local power = 0\n    while n > 0 do\n        n = n / 2\n        power = power + 1\n    end\n    return 2 ^ (power - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75xcgiuq.lua:14: expected: 8, actual: #Inf\nstack traceback:\n\t/tmp/tmp75xcgiuq.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local i = 1\n  while i <= n do\n    i = i * 2\n  end\n  return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local k = 1\n  while k <= n do\n    k = k * 2\n  end\n  return k / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal i = 1\n\twhile i <= n do\n\t\ti = i * 2\n\tend\n\treturn i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local i = 1\n  while i < n do\n    i = i * 2\n  end\n  return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphjud7d7h.lua:15: expected: 32, actual: 16\nstack traceback:\n\t/tmp/tmphjud7d7h.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local i = 1\n    while i <= n do\n        i = i * 2\n    end\n    return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local i = 1\n    while i <= n do\n        i = i * 2\n    end\n    return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local i = 1\n  while i <= n do\n    i = i * 2\n  end\n  return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local power = 0\n    while n > 1 do\n        n = n / 2\n        power = power + 1\n    end\n    return 2 ^ power\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpok8yic32.lua:14: expected: 8, actual: 16\nstack traceback:\n\t/tmp/tmpok8yic32.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal power = 0\n\twhile n > 1 do\n\t\tn = n / 2\n\t\tpower = power + 1\n\tend\n\treturn power\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjo8huld.lua:14: expected: 8, actual: 4\nstack traceback:\n\t/tmp/tmpmjo8huld.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local i = 1\n    while i <= n do\n        i = i * 2\n    end\n    return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal power = 0\n\twhile n > 0 do\n\t\tn = n / 2\n\t\tpower = power + 1\n\tend\n\treturn 2 ^ (power - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gmappbm.lua:14: expected: 8, actual: #Inf\nstack traceback:\n\t/tmp/tmp1gmappbm.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local pow = 1\n    while pow <= n do\n        pow = pow * 2\n    end\n    return pow / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local power = 0\n  while n > 0 do\n    n = n / 2\n    power = power + 1\n  end\n  return 2 ^ (power - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxz2qxjne.lua:14: expected: 8, actual: #Inf\nstack traceback:\n\t/tmp/tmpxz2qxjne.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local power = 0\n    while 2^power <= n do\n        power = power + 1\n    end\n    return power - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsk7fce2.lua:13: expected: 8, actual: 3\nstack traceback:\n\t/tmp/tmpxsk7fce2.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 1\n  while p <= n do\n    p = p * 2\n  end\n  return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local k = 1\n  while k <= n do\n    k = k * 2\n  end\n  return k / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal p = 1\n\twhile p <= n do\n\t\tp = p * 2\n\tend\n\treturn p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 1\n  while p <= n do\n    p = p * 2\n  end\n  return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal p = 1\n\twhile p <= n do\n\t\tp = p * 2\n\tend\n\treturn p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 0\n  while n > 0 do\n    n = n // 2\n    p = p + 1\n  end\n  return 2^(p-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local i = 0\n    while 2^i <= n do\n        i = i + 1\n    end\n    return 2^(i-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 1\n  while p <= n do\n    p = p * 2\n  end\n  return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local power = 1\n    while power <= n do\n        power = power * 2\n    end\n    return power / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local k = 1\n    while k <= n do\n        k = k * 2\n    end\n    return k / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local i = 1\n  while i <= n do\n    i = i * 2\n  end\n  return i/2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 0\n    while 2^p <= n do\n        p = p + 1\n    end\n    return p - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local i = 1\n  while i < n do\n    i = i * 2\n  end\n  return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphjud7d7h.lua:15: expected: 32, actual: 16\nstack traceback:\n\t/tmp/tmphjud7d7h.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal power = 0\n\twhile n > 0 do\n\t\tn = n / 2\n\t\tpower = power + 1\n\tend\n\treturn power - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1qohi7y.lua:14: expected: 8, actual: 1077\nstack traceback:\n\t/tmp/tmpe1qohi7y.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local k = 1\n    while k <= n do\n        k = k * 2\n    end\n    return k / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local i = 1\n  while i <= n do\n    i = i * 2\n  end\n  return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local power = 0\n    while 2^power <= n do\n        power = power + 1\n    end\n    return power - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsk7fce2.lua:13: expected: 8, actual: 3\nstack traceback:\n\t/tmp/tmpxsk7fce2.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local power = 0\n    while n > 0 do\n        n = n / 2\n        power = power + 1\n    end\n    return 2 ^ (power - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75xcgiuq.lua:14: expected: 8, actual: #Inf\nstack traceback:\n\t/tmp/tmp75xcgiuq.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local i = 0\n    while 2^i <= n do\n        i = i + 1\n    end\n    return 2^(i-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local power = 0\n  while n > 0 do\n    n = n / 2\n    power = power + 1\n  end\n  return 2 ^ (power - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxz2qxjne.lua:14: expected: 8, actual: #Inf\nstack traceback:\n\t/tmp/tmpxz2qxjne.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal i = 1\n\twhile i <= n do\n\t\ti = i * 2\n\tend\n\treturn i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local k = 0\n  while n > 1 do\n    n = n / 2\n    k = k + 1\n  end\n  return 2 ^ k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p < n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwh0xf8nc.lua:15: expected: 32, actual: 16.0\nstack traceback:\n\t/tmp/tmpwh0xf8nc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local i = 1\n    while i <= n do\n        i = i * 2\n    end\n    return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 1\n  while p <= n do\n    p = p * 2\n  end\n  return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local i = 1\n  while i < n do\n    i = i * 2\n  end\n  return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphjud7d7h.lua:15: expected: 32, actual: 16\nstack traceback:\n\t/tmp/tmphjud7d7h.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 1\n  while p <= n do\n    p = p * 2\n  end\n  return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal i = 0\n\twhile 2^i <= n do\n\t\ti = i + 1\n\tend\n\treturn i - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpan6v3cnb.lua:13: expected: 8, actual: 3\nstack traceback:\n\t/tmp/tmpan6v3cnb.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local power = 0\n    while n > 0 do\n        n = n / 2\n        power = power + 1\n    end\n    return 2 ^ (power - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75xcgiuq.lua:14: expected: 8, actual: #Inf\nstack traceback:\n\t/tmp/tmp75xcgiuq.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal i = 1\n\twhile i <= n do\n\t\ti = i * 2\n\tend\n\treturn i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal i = 0\n\twhile 2^i <= n do\n\t\ti = i + 1\n\tend\n\treturn 2^(i-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local power = 0\n    while n > 0 do\n        n = n / 2\n        power = power + 1\n    end\n    return 2 ^ (power - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75xcgiuq.lua:14: expected: 8, actual: #Inf\nstack traceback:\n\t/tmp/tmp75xcgiuq.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local i = 1\n  while i < n do\n    i = i * 2\n  end\n  return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphjud7d7h.lua:15: expected: 32, actual: 16\nstack traceback:\n\t/tmp/tmphjud7d7h.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 1\n  while p <= n do\n    p = p * 2\n  end\n  return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local i = 1\n  while i <= n do\n    i = i * 2\n  end\n  return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 1\n  while p <= n do\n    p = p * 2\n  end\n  return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local power = 0\n    while n > 0 do\n        n = n / 2\n        power = power + 1\n    end\n    return 2 ^ (power - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75xcgiuq.lua:14: expected: 8, actual: #Inf\nstack traceback:\n\t/tmp/tmp75xcgiuq.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local i = 1\n    while i < n do\n        i = i * 2\n    end\n    return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4bdl637h.lua:15: expected: 32, actual: 16.0\nstack traceback:\n\t/tmp/tmp4bdl637h.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n   local p = 0\n   while n > 0 do\n      n = n / 2\n      p = p + 1\n   end\n   return 2^(p-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4zhzloo.lua:14: expected: 8, actual: #Inf\nstack traceback:\n\t/tmp/tmpo4zhzloo.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal i = 1\n\twhile i <= n do\n\t\ti = i * 2\n\tend\n\treturn i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal p = 1\n\twhile p <= n do\n\t\tp = p * 2\n\tend\n\treturn p/2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal i = 1\n\twhile i <= n do\n\t\ti = i * 2\n\tend\n\treturn i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal k = 0\n\twhile n > 0 do\n\t\tn = n / 2\n\t\tk = k + 1\n\tend\n\treturn 2 ^ (k - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6pyd85sf.lua:14: expected: 8, actual: #Inf\nstack traceback:\n\t/tmp/tmp6pyd85sf.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local power = 0\n    while 2^power <= n do\n        power = power + 1\n    end\n    return power - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsk7fce2.lua:13: expected: 8, actual: 3\nstack traceback:\n\t/tmp/tmpxsk7fce2.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal power = 0\n\twhile n > 0 do\n\t\tn = n / 2\n\t\tpower = power + 1\n\tend\n\treturn 2^(power-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqm09x1fc.lua:14: expected: 8, actual: #Inf\nstack traceback:\n\t/tmp/tmpqm09x1fc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal power = 0\n\twhile n > 1 do\n\t\tn = n / 2\n\t\tpower = power + 1\n\tend\n\treturn 2 ^ power\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8jnwm0v.lua:14: expected: 8, actual: 16.0\nstack traceback:\n\t/tmp/tmpj8jnwm0v.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local power = 0\n    while n > 0 do\n        n = n / 2\n        power = power + 1\n    end\n    return 2 ^ (power - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75xcgiuq.lua:14: expected: 8, actual: #Inf\nstack traceback:\n\t/tmp/tmp75xcgiuq.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 0\n  while 2^p <= n do\n    p = p + 1\n  end\n  return p - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1_wb2gh.lua:13: expected: 8, actual: 3\nstack traceback:\n\t/tmp/tmpt1_wb2gh.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local i = 1\n    while i <= n do\n        i = i * 2\n    end\n    return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal power = 0\n\twhile n > 0 do\n\t\tn = n / 2\n\t\tpower = power + 1\n\tend\n\treturn 2 ^ (power - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gmappbm.lua:14: expected: 8, actual: #Inf\nstack traceback:\n\t/tmp/tmp1gmappbm.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 2\n  while p <= n do\n    p = p * 2\n  end\n  return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal p = 1\n\twhile p <= n do\n\t\tp = p * 2\n\tend\n\treturn p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local i = 1\n  while i <= n do\n    i = i * 2\n  end\n  return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal x = 1\n\twhile x <= n do\n\t\tx = x * 2\n\tend\n\treturn x / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local i = 1\n  while i <= n do\n    i = i * 2\n  end\n  return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal power = 0\n\twhile n > 0 do\n\t\tn = n / 2\n\t\tpower = power + 1\n\tend\n\treturn 2 ^ (power - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gmappbm.lua:14: expected: 8, actual: #Inf\nstack traceback:\n\t/tmp/tmp1gmappbm.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal power = 0\n\twhile 2^power <= n do\n\t\tpower = power + 1\n\tend\n\treturn power - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local i = 1\n  while i <= n do\n    i = i * 2\n  end\n  return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal i = 1\n\twhile i <= n do\n\t\ti = i * 2\n\tend\n\treturn i/2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 1\n  while p <= n do\n    p = p * 2\n  end\n  return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local power = 1\n    while power <= n do\n        power = power * 2\n    end\n    return power / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local i = 1\n    while i <= n do\n        i = i * 2\n    end\n    return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal power = 0\n\twhile n > 1 do\n\t\tn = n / 2\n\t\tpower = power + 1\n\tend\n\treturn 2 ^ power\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8jnwm0v.lua:14: expected: 8, actual: 16.0\nstack traceback:\n\t/tmp/tmpj8jnwm0v.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 1\n  while p <= n do\n    p = p * 2\n  end\n  return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local i = 1\n    while i < n do\n        i = i * 2\n    end\n    return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4bdl637h.lua:15: expected: 32, actual: 16.0\nstack traceback:\n\t/tmp/tmp4bdl637h.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal i = 1\n\twhile i <= n do\n\t\ti = i * 2\n\tend\n\treturn i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local power = 0\n  while n > 1 do\n    n = n / 2\n    power = power + 1\n  end\n  return power\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa10hoc7z.lua:14: expected: 8, actual: 4\nstack traceback:\n\t/tmp/tmpa10hoc7z.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local i = 1\n    while i < n do\n        i = i * 2\n    end\n    return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4qi97hup.lua:13: expected: 8, actual: 16\nstack traceback:\n\t/tmp/tmp4qi97hup.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal i = 1\n\twhile i <= n do\n\t\ti = i * 2\n\tend\n\treturn i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 2\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 1\n  while p <= n do\n    p = p * 2\n  end\n  return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local power = 0\n  while 2^power <= n do\n    power = power + 1\n  end\n  return power - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpog_sq_i5.lua:13: expected: 8, actual: 3\nstack traceback:\n\t/tmp/tmpog_sq_i5.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nprint(highest_Power_of_2(9))\nprint(highest_Power_of_2(10))\nprint(highest_Power_of_2(11))\nprint(highest_Power_of_2(12))\nprint(highest_Power_of_2(13))\nprint(highest_Power_of_2(14))\nprint(highest_Power_of_2(15))\nprint(highest_Power_of_2(16))\nprint(highest_Power_of_2(17))\nprint(highest_Power_of_2(18))\nprint(highest_Power_of_2(19))\nprint(highest_Power_of_2(20))\nprint(highest_Power_of_2(21))\nprint(highest_Power_of_2(22))\nprint(highest_Power_of_2(23))\nprint(highest_Power_of_2(24))\nprint(highest_Power_of_2(25))\nprint(highest_Power_of_2(26))\nprint(highest_Power_of_2(27))\nprint(highest_Power_of_2(28))\nprint(highest_Power_of_2(29))\nprint(highest_Power_of_2(30))\nprint(highest_Power_of_2(31))\nprint(highest_Power_of_2(32))\nprint(highest_Power_of_2(33))\nprint(highest_Power_of_2(34))\nprint(highest_Power_of_2(35))\nprint(highest_Power_of_2(36))\nprint(highest_Power_of_2(37))\nprint(highest_Power_of_2(38))\nprint(highest_Power_of_2(39))\nprint(highest_Power_of_2(40))\nprint(highest_Power_of_2(41))\nprint(highest_Power_of_2(42))\nprint(highest_Power_of_2(43))\nprint(highest_Power_of_2(44))\nprint(highest_Power_of_2(45))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "8.0\n8.0\n8.0\n8.0\n8.0\n8.0\n8.0\n16.0\n16.0\n16.0\n16.0\n16.0\n16.0\n16.0\n16.0\n16.0\n16.0\n16.0\n16.0\n16.0\n16.0\n16.0\n16.0\n32.0\n32.0\n32.0\n32.0\n32.0\n32.0\n32.0\n32.0\n32.0\n32.0\n32.0\n32.0\n32.0\n32.0\n.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local power = 0\n    while n > 0 do\n        n = n / 2\n        power = power + 1\n    end\n    return power - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptg83ncps.lua:14: expected: 8, actual: 1077\nstack traceback:\n\t/tmp/tmptg83ncps.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal i = 1\n\twhile i <= n do\n\t\ti = i * 2\n\tend\n\treturn i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local power = 0\n    while n > 0 do\n        n = n / 2\n        power = power + 1\n    end\n    return power - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptg83ncps.lua:14: expected: 8, actual: 1077\nstack traceback:\n\t/tmp/tmptg83ncps.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 1\n  while p <= n do\n    p = p * 2\n  end\n  return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local power = 0\n    while n > 0 do\n        n = n // 2\n        power = power + 1\n    end\n    return 2 ^ (power - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal p = 1\n\twhile p <= n do\n\t\tp = p * 2\n\tend\n\treturn p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local i = 0\n    while 2^i <= n do\n        i = i + 1\n    end\n    return i - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2mm3fcf.lua:13: expected: 8, actual: 3\nstack traceback:\n\t/tmp/tmpm2mm3fcf.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local power = 0\n  while n > 0 do\n    n = n / 2\n    power = power + 1\n  end\n  return 2 ^ (power - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxz2qxjne.lua:14: expected: 8, actual: #Inf\nstack traceback:\n\t/tmp/tmpxz2qxjne.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local i = 0\n    while 2^i <= n do\n        i = i + 1\n    end\n    return i - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2mm3fcf.lua:13: expected: 8, actual: 3\nstack traceback:\n\t/tmp/tmpm2mm3fcf.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local i = 1\n    while i <= n do\n        i = i * 2\n    end\n    return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 0\n  while n > 0 do\n    n = n / 2\n    p = p + 1\n  end\n  return 2 ^ (p - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm98v7_mw.lua:14: expected: 8, actual: #Inf\nstack traceback:\n\t/tmp/tmpm98v7_mw.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local i = 1\n    while i <= n do\n        i = i * 2\n    end\n    return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local power = 0\n  while n > 1 do\n    n = n / 2\n    power = power + 1\n  end\n  return power\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa10hoc7z.lua:14: expected: 8, actual: 4\nstack traceback:\n\t/tmp/tmpa10hoc7z.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local power = 0\n    while n > 0 do\n        n = n / 2\n        power = power + 1\n    end\n    return 2 ^ (power - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75xcgiuq.lua:14: expected: 8, actual: #Inf\nstack traceback:\n\t/tmp/tmp75xcgiuq.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local i = 1\n  while i < n do\n    i = i * 2\n  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplm1bwgbo.lua:13: expected: 8, actual: 16\nstack traceback:\n\t/tmp/tmplm1bwgbo.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 1\n  while p <= n do\n    p = p * 2\n  end\n  return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local i = 1\n    while i <= n do\n        i = i * 2\n    end\n    return i/2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local power = 0\n    while n > 0 do\n        n = n / 2\n        power = power + 1\n    end\n    return 2 ^ (power - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75xcgiuq.lua:14: expected: 8, actual: #Inf\nstack traceback:\n\t/tmp/tmp75xcgiuq.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal p = 1\n\twhile p <= n do\n\t\tp = p * 2\n\tend\n\treturn p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local power = 0\n  while n > 1 do\n    n = n / 2\n    power = power + 1\n  end\n  return power\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa10hoc7z.lua:14: expected: 8, actual: 4\nstack traceback:\n\t/tmp/tmpa10hoc7z.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal power = 0\n\twhile 2^power <= n do\n\t\tpower = power + 1\n\tend\n\treturn 2^(power - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local power = 0\n    while n > 1 do\n        n = n / 2\n        power = power + 1\n    end\n    return 2 ^ power\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpok8yic32.lua:14: expected: 8, actual: 16\nstack traceback:\n\t/tmp/tmpok8yic32.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 1\n  while p <= n do\n    p = p * 2\n  end\n  return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal power = 0\n\twhile n > 1 do\n\t\tn = n / 2\n\t\tpower = power + 1\n\tend\n\treturn 2 ^ power\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8jnwm0v.lua:14: expected: 8, actual: 16.0\nstack traceback:\n\t/tmp/tmpj8jnwm0v.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal power = 0\n\twhile n > 0 do\n\t\tn = n / 2\n\t\tpower = power + 1\n\tend\n\treturn 2 ^ (power - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gmappbm.lua:14: expected: 8, actual: #Inf\nstack traceback:\n\t/tmp/tmp1gmappbm.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 1\n  while p <= n do\n    p = p * 2\n  end\n  return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local i = 1\n    while i < n do\n        i = i * 2\n    end\n    return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4qi97hup.lua:13: expected: 8, actual: 16\nstack traceback:\n\t/tmp/tmp4qi97hup.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local i = 1\n    while i <= n do\n        i = i * 2\n    end\n    return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local i = 1\n  while i <= n do\n    i = i * 2\n  end\n  return i/2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local i = 0\n  while 2^i <= n do\n    i = i + 1\n  end\n  return i - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6rxnv_ta.lua:13: expected: 8, actual: 3\nstack traceback:\n\t/tmp/tmp6rxnv_ta.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local i = 1\n    while i <= n do\n        i = i * 2\n    end\n    return i / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 1\n  while p <= n do\n    p = p * 2\n  end\n  return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local i = 0\n  while 2^i <= n do\n    i = i + 1\n  end\n  return i - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6rxnv_ta.lua:13: expected: 8, actual: 3\nstack traceback:\n\t/tmp/tmp6rxnv_ta.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 1\n  while p <= n do\n    p = p * 2\n  end\n  return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local power = 0\n    while n > 0 do\n        n = n / 2\n        power = power + 1\n    end\n    return 2 ^ (power - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75xcgiuq.lua:14: expected: 8, actual: #Inf\nstack traceback:\n\t/tmp/tmp75xcgiuq.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local power = 0\n    while 2^power <= n do\n        power = power + 1\n    end\n    return power - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsk7fce2.lua:13: expected: 8, actual: 3\nstack traceback:\n\t/tmp/tmpxsk7fce2.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 1\n  while p <= n do\n    p = p * 2\n  end\n  return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 1\n  while p <= n do\n    p = p * 2\n  end\n  return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n  local p = 1\n  while p <= n do\n    p = p * 2\n  end\n  return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n\tlocal p = 1\n\twhile p <= n do\n\t\tp = p * 2\n\tend\n\treturn p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123489,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    local p = 1\n    while p <= n do\n        p = p * 2\n    end\n    return p / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027769,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}