{
  "name": "mbpp_400_extract_freq",
  "language": "lua",
  "prompt": "-- Write a function to extract the number of unique tables in the given table.\nlocal function extract_freq(test_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_freq\n    lu.assertEquals(candidate({{3, 4}, {1, 2}, {4, 3}, {5, 6}}), 3)\n    lu.assertEquals(candidate({{4, 15}, {2, 3}, {5, 4}, {6, 7}}), 4)\n    lu.assertEquals(candidate({{5, 16}, {2, 3}, {6, 5}, {6, 9}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local freq_list = {}\n    for _, v in pairs(test_list) do\n        local freq = v[1]\n        if freq_list[freq] == nil then\n            freq_list[freq] = 1\n        else\n            freq_list[freq] = freq_list[freq] + 1\n        end\n    end\n    return freq_list\nend",
    "  local freq_table = {}\n  for _, v in pairs(test_list) do\n    if freq_table[v] == nil then\n      freq_table[v] = 1\n    else\n      freq_table[v] = freq_table[v] + 1\n    end\n  end\n  return freq_table\nend",
    "    local freq = {}\n    for _, v in ipairs(test_list) do\n        local t = v[1]\n        if not freq[t] then\n            freq[t] = 1\n        else\n            freq[t] = freq[t] + 1\n        end\n    end\n    return freq\nend",
    "\tlocal freq_list = {}\n\tfor i = 1, #test_list do\n\t\tlocal test = test_list[i]\n\t\tlocal freq = test[1]\n\t\tif not freq_list[freq] then\n\t\t\tfreq_list[freq] = true\n\t\tend\n\tend\n\treturn freq_list\nend",
    "    local freq_list = {}\n    for i = 1, #test_list do\n        local test = test_list[i]\n        local freq = test.freq\n        if freq_list[freq] == nil then\n            freq_list[freq] = {}\n        end\n        table.insert(freq_list[freq], test)\n    end\n    return freq_list\nend",
    "\tlocal freq_tbl = {}\n\tfor _, tbl in ipairs(test_list) do\n\t\tfreq_tbl[tbl] = (freq_tbl[tbl] or 0) + 1\n\tend\n\treturn freq_tbl\nend",
    "    local freq = {}\n    for i = 1, #test_list do\n        local test = test_list[i]\n        local num_tables = #test.tables\n        if freq[num_tables] then\n            freq[num_tables] = freq[num_tables] + 1\n        else\n            freq[num_tables] = 1\n        end\n    end\n    return freq\nend",
    "    local freq_table = {}\n    for _, test in ipairs(test_list) do\n        for _, table in ipairs(test) do\n            if not freq_table[table] then\n                freq_table[table] = 1\n            else\n                freq_table[table] = freq_table[table] + 1\n            end\n        end\n    end\n    return freq_table\nend",
    "    local freq_table = {}\n    for _, v in ipairs(test_list) do\n        if freq_table[v] == nil then\n            freq_table[v] = 1\n        else\n            freq_table[v] = freq_table[v] + 1\n        end\n    end\n    return freq_table\nend",
    "    local freq_table = {}\n    for i = 1, #test_list do\n        local test_table = test_list[i]\n        for j = 1, #test_table do\n            local test_item = test_table[j]\n            if freq_table[test_item] == nil then\n                freq_table[test_item] = 1\n            else\n                freq_table[test_item] = freq_table[test_item] + 1\n            end\n        end\n    end\n    return freq_table\nend",
    "    local freq_list = {}\n    for i = 1, #test_list do\n        local freq = test_list[i].freq\n        if not freq_list[freq] then\n            freq_list[freq] = 1\n        else\n            freq_list[freq] = freq_list[freq] + 1\n        end\n    end\n    return freq_list\nend",
    "    local freq = {}\n    for _, test in ipairs(test_list) do\n        local t = test[1]\n        freq[t] = (freq[t] or 0) + 1\n    end\n    return freq\nend",
    "    local freq_list = {}\n    for i = 1, #test_list do\n        local test = test_list[i]\n        local freq = test.freq\n        if freq_list[freq] == nil then\n            freq_list[freq] = 1\n        else\n            freq_list[freq] = freq_list[freq] + 1\n        end\n    end\n    return freq_list\nend",
    "    local freq = {}\n    for _, t in ipairs(test_list) do\n        freq[t] = (freq[t] or 0) + 1\n    end\n    return freq\nend",
    "\tlocal freq_table = {}\n\tfor i = 1, #test_list do\n\t\tlocal test = test_list[i]\n\t\tlocal test_name = test.name\n\t\tif not freq_table[test_name] then\n\t\t\tfreq_table[test_name] = 1\n\t\telse\n\t\t\tfreq_table[test_name] = freq_table[test_name] + 1\n\t\tend\n\tend\n\treturn freq_table\nend",
    "    local freq = {}\n    for _, v in ipairs(test_list) do\n        if freq[v] == nil then\n            freq[v] = 1\n        else\n            freq[v] = freq[v] + 1\n        end\n    end\n    return freq\nend",
    "    local freq = {}\n    for _, test in ipairs(test_list) do\n        local tbl = test.tbl\n        freq[tbl] = (freq[tbl] or 0) + 1\n    end\n    return freq\nend",
    "    local freq = {}\n    for _, v in ipairs(test_list) do\n        if freq[v] == nil then\n            freq[v] = 1\n        else\n            freq[v] = freq[v] + 1\n        end\n    end\n    return freq\nend",
    "\tlocal freq_list = {}\n\tfor i,v in ipairs(test_list) do\n\t\tif freq_list[v] == nil then\n\t\t\tfreq_list[v] = 1\n\t\telse\n\t\t\tfreq_list[v] = freq_list[v] + 1\n\t\tend\n\tend\n\treturn freq_list\nend",
    "    local freq_list = {}\n    for i = 1, #test_list do\n        local test = test_list[i]\n        local freq = test.freq\n        if freq_list[freq] == nil then\n            freq_list[freq] = 1\n        else\n            freq_list[freq] = freq_list[freq] + 1\n        end\n    end\n    return freq_list\nend"
  ]
}