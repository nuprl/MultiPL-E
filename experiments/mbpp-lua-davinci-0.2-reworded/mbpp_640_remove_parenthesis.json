{
  "name": "mbpp_640_remove_parenthesis",
  "language": "lua",
  "prompt": "-- Write a function to remove the parenthesis and what is inbetween them from a string.\nlocal function remove_parenthesis(items)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_parenthesis\n    lu.assertEquals(candidate({'python (chrome)'}), 'python')\n    lu.assertEquals(candidate({'string(.abc)'}), 'string')\n    lu.assertEquals(candidate({'alpha(num)'}), 'alpha')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local new_items = {}\n  for _, item in ipairs(items) do\n    if item:sub(1,1) == \"(\" then\n      local i = 1\n      local count = 0\n      while i <= #item do\n        if item:sub(i,i) == \"(\" then\n          count = count + 1\n        elseif item:sub(i,i) == \")\" then\n          count = count - 1\n        end\n        if count == 0 then\n          break\n        end\n        i = i + 1\n      end\n      if i <= #item then\n        table.insert(new_items, item:sub(2,i-1))\n        table.insert(new_items, item:sub(i+1))\n      else\n        table.insert(new_items, item)\n      end\n    else\n      table.insert(new_items, item)\n    end\n  end\n  return new_items\nend",
    "    local result = {}\n    for _, item in ipairs(items) do\n        local i = 1\n        local j = #item\n        while i <= j do\n            if item:sub(i, i) == \"(\" then\n                while item:sub(j, j) ~= \")\" do\n                    j = j - 1\n                end\n                i = i + 1\n                j = j - 1\n            end\n            result[#result + 1] = item:sub(i, j)\n            i = j + 2\n            j = #item\n        end\n    end\n    return result\nend",
    "    local new_items = {}\n    for i, item in ipairs(items) do\n        if item ~= '(' and item ~= ')' then\n            table.insert(new_items, item)\n        end\n    end\n    return new_items\nend",
    "\tlocal new_items = {}\n\tfor _, item in ipairs(items) do\n\t\tif item.type == \"string\" then\n\t\t\tlocal new_item = item.value:gsub(\"%b()\", \"\")\n\t\t\tif new_item ~= \"\" then\n\t\t\t\ttable.insert(new_items, {type = \"string\", value = new_item})\n\t\t\tend\n\t\telse\n\t\t\ttable.insert(new_items, item)\n\t\tend\n\tend\n\treturn new_items\nend",
    "    local new_items = {}\n    for i, item in ipairs(items) do\n        local new_item = item:gsub(\"%b()\", \"\")\n        table.insert(new_items, new_item)\n    end\n    return new_items\nend",
    "    local new_items = {}\n    for i, item in ipairs(items) do\n        if item.type == \"text\" then\n            local new_text = item.text:gsub(\"%b()\", \"\")\n            new_items[#new_items + 1] = {type = \"text\", text = new_text}\n        else\n            new_items[#new_items + 1] = item\n        end\n    end\n    return new_items\nend",
    "\tlocal new_items = {}\n\tfor _, item in ipairs(items) do\n\t\tif type(item) == \"string\" then\n\t\t\tlocal new_item = item:gsub(\"%b()\", \"\")\n\t\t\tif new_item ~= \"\" then\n\t\t\t\ttable.insert(new_items, new_item)\n\t\t\tend\n\t\telse\n\t\t\ttable.insert(new_items, item)\n\t\tend\n\tend\n\treturn new_items\nend",
    "    local new_items = {}\n    for _, item in ipairs(items) do\n        local new_item = item:gsub(\"%b()\", \"\")\n        table.insert(new_items, new_item)\n    end\n    return new_items\nend",
    "\tlocal new_items = {}\n\tfor _, item in ipairs(items) do\n\t\tlocal new_item = item:gsub(\"%b()\", \"\")\n\t\ttable.insert(new_items, new_item)\n\tend\n\treturn new_items\nend",
    "\tfor i, item in ipairs(items) do\n\t\tif item:find(\"%(\") then\n\t\t\tlocal s, e = item:find(\"%(\")\n\t\t\tlocal s2, e2 = item:find(\"%)\")\n\t\t\tif s2 then\n\t\t\t\titem = item:sub(1, s-1) .. item:sub(e2+1)\n\t\t\telse\n\t\t\t\titem = item:sub(1, s-1)\n\t\t\tend\n\t\tend\n\t\titems[i] = item\n\tend\n\treturn items\nend",
    "    local new_items = {}\n    for _, item in ipairs(items) do\n        if type(item) == \"string\" then\n            item = item:gsub(\"%b()\", \"\")\n        end\n        table.insert(new_items, item)\n    end\n    return new_items\nend",
    "    local new_items = {}\n    for _, item in ipairs(items) do\n        if item:sub(1, 1) == \"(\" and item:sub(-1, -1) == \")\" then\n            item = item:sub(2, -2)\n        end\n        table.insert(new_items, item)\n    end\n    return new_items\nend",
    "    local result = {}\n    for i, item in ipairs(items) do\n        if item:find(\"%(\") then\n            local start, stop = item:find(\"%(\")\n            local new_item = item:sub(1, start - 1)\n            if stop < #item then\n                new_item = new_item .. item:sub(stop + 1)\n            end\n            table.insert(result, new_item)\n        else\n            table.insert(result, item)\n        end\n    end\n    return result\nend",
    "\tlocal new_items = {}\n\tfor _, item in ipairs(items) do\n\t\tif item:sub(1, 1) == \"(\" and item:sub(-1) == \")\" then\n\t\t\ttable.insert(new_items, item:sub(2, -2))\n\t\telse\n\t\t\ttable.insert(new_items, item)\n\t\tend\n\tend\n\treturn new_items\nend",
    "\tlocal new_items = {}\n\tfor _, item in ipairs(items) do\n\t\tlocal new_item = item:gsub(\"%b()\", \"\")\n\t\ttable.insert(new_items, new_item)\n\tend\n\treturn new_items\nend",
    "    local result = {}\n    for _, item in ipairs(items) do\n        if item.type == \"string\" then\n            local s = item.value:gsub(\"%b()\", \"\")\n            if s ~= \"\" then\n                result[#result + 1] = { type = \"string\", value = s }\n            end\n        else\n            result[#result + 1] = item\n        end\n    end\n    return result\nend",
    "    local new_items = {}\n    for _, item in ipairs(items) do\n        if item.type == \"text\" then\n            local new_text = item.text:gsub(\"%b()\", \"\")\n            if new_text ~= \"\" then\n                table.insert(new_items, { type = \"text\", text = new_text })\n            end\n        else\n            table.insert(new_items, item)\n        end\n    end\n    return new_items\nend",
    "    local new_items = {}\n    for i, item in ipairs(items) do\n        if item:sub(1,1) == '(' and item:sub(-1,-1) == ')' then\n            item = item:sub(2,-2)\n        end\n        table.insert(new_items, item)\n    end\n    return new_items\nend",
    "    local new_items = {}\n    for _, item in ipairs(items) do\n        if item:match(\"^%(.*%)$\") then\n            -- Remove the parenthesis.\n            item = item:gsub(\"^%(\", \"\")\n            item = item:gsub(\"%)$\", \"\")\n            -- Remove the spaces.\n            item = item:gsub(\"%s+\", \"\")\n            -- Remove the quotes.\n            item = item:gsub(\"^\\\"\", \"\")\n            item = item:gsub(\"\\\"$\", \"\")\n            -- Remove the braces.\n            item = item:gsub(\"^%{\", \"\")\n            item = item:gsub(\"}$\", \"\")\n        end\n        table.insert(new_items, item)\n    end\n    return new_items\nend",
    "    local new_items = {}\n    for _, item in ipairs(items) do\n        local item_type = type(item)\n        if item_type == \"string\" then\n            local new_item = item:gsub(\"%b()\", \"\")\n            table.insert(new_items, new_item)\n        elseif item_type == \"table\" then\n            local new_item = remove_parenthesis(item)\n            table.insert(new_items, new_item)\n        else\n            table.insert(new_items, item)\n        end\n    end\n    return new_items\nend"
  ]
}