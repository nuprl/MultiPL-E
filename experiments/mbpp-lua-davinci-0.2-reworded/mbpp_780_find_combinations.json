{
  "name": "mbpp_780_find_combinations",
  "language": "lua",
  "prompt": "-- Write a function to find the combinations of sums with tables in the given table table. https://www.geeksforgeeks.org/luathon-combinations-of-sum-with-tables-in-table-table/\nlocal function find_combinations(test_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_combinations\n    lu.assertEquals(candidate({{2, 4}, {6, 7}, {5, 1}, {6, 10}}), {{8, 11}, {7, 5}, {8, 14}, {11, 8}, {12, 17}, {11, 11}})\n    lu.assertEquals(candidate({{3, 5}, {7, 8}, {6, 2}, {7, 11}}), {{10, 13}, {9, 7}, {10, 16}, {13, 10}, {14, 19}, {13, 13}})\n    lu.assertEquals(candidate({{4, 6}, {8, 9}, {7, 3}, {8, 12}}), {{12, 15}, {11, 9}, {12, 18}, {15, 12}, {16, 21}, {15, 15}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local result = {}\n    local function find_combinations_rec(test_list, index, sum, curr_list)\n        if sum == 0 then\n            table.insert(result, curr_list)\n            return\n        end\n        if sum < 0 or index < 1 then\n            return\n        end\n        find_combinations_rec(test_list, index - 1, sum, curr_list)\n        local new_list = table.copy(curr_list)\n        table.insert(new_list, test_list[index])\n        find_combinations_rec(test_list, index - 1, sum - test_list[index], new_list)\n    end\n    find_combinations_rec(test_list, #test_list, 10, {})\n    return result\nend",
    "    local result = {}\n    local function find_combinations_helper(test_list, index, sum, current_list)\n        if sum == 0 then\n            table.insert(result, current_list)\n            return\n        end\n        if index == 0 then\n            return\n        end\n        if test_list[index] > sum then\n            find_combinations_helper(test_list, index - 1, sum, current_list)\n        else\n            find_combinations_helper(test_list, index - 1, sum, current_list)\n            find_combinations_helper(test_list, index - 1, sum - test_list[index], {test_list[index], unpack(current_list)})\n        end\n    end\n    find_combinations_helper(test_list, #test_list, 10, {})\n    return result\nend",
    "  local result = {}\n  local function find_combinations_rec(test_list, index, sum, curr_list)\n    if sum == 0 then\n      table.insert(result, curr_list)\n      return\n    end\n    if sum < 0 or index < 1 then\n      return\n    end\n    find_combinations_rec(test_list, index - 1, sum, curr_list)\n    local new_list = {}\n    for i, v in ipairs(curr_list) do\n      new_list[i] = v\n    end\n    table.insert(new_list, test_list[index])\n    find_combinations_rec(test_list, index - 1, sum - test_list[index], new_list)\n  end\n  find_combinations_rec(test_list, #test_list, 8, {})\n  return result\nend",
    "    local result = {}\n    local function find_combinations_rec(test_list, index, sum, cur_list)\n        if sum == 0 then\n            table.insert(result, cur_list)\n            return\n        end\n        if index == 0 then\n            return\n        end\n        if test_list[index] > sum then\n            find_combinations_rec(test_list, index - 1, sum, cur_list)\n        else\n            find_combinations_rec(test_list, index - 1, sum, cur_list)\n            local new_list = {}\n            for _, v in ipairs(cur_list) do\n                table.insert(new_list, v)\n            end\n            table.insert(new_list, test_list[index])\n            find_combinations_rec(test_list, index - 1, sum - test_list[index], new_list)\n        end\n    end\n    find_combinations_rec(test_list, #test_list, 8, {})\n    return result\nend",
    "    local result = {}\n    local function find_combinations_helper(test_list, index, sum, current_list)\n        if sum == 0 then\n            table.insert(result, current_list)\n            return\n        end\n        if index > #test_list then\n            return\n        end\n        if sum < 0 then\n            return\n        end\n        find_combinations_helper(test_list, index + 1, sum, current_list)\n        local new_list = {}\n        for i = 1, #current_list do\n            table.insert(new_list, current_list[i])\n        end\n        table.insert(new_list, test_list[index])\n        find_combinations_helper(test_list, index + 1, sum - test_list[index], new_list)\n    end\n    find_combinations_helper(test_list, 1, 10, {})\n    return result\nend",
    "    local result = {}\n    local function find_combinations_recursive(test_list, index, partial_sum, partial_list)\n        local sum = 0\n        for i, v in ipairs(partial_list) do\n            sum = sum + v\n        end\n        if sum == partial_sum then\n            table.insert(result, partial_list)\n        end\n        if index == #test_list then\n            return\n        end\n        find_combinations_recursive(test_list, index + 1, partial_sum, partial_list)\n        table.insert(partial_list, test_list[index])\n        find_combinations_recursive(test_list, index + 1, partial_sum, partial_list)\n        table.remove(partial_list)\n    end\n    find_combinations_recursive(test_list, 1, 10, {})\n    return result\nend",
    "    local result = {}\n    local function find_combinations_recursive(test_list, index, sum, curr_list)\n        if sum == 0 then\n            table.insert(result, curr_list)\n            return\n        end\n        if sum < 0 or index < 1 then\n            return\n        end\n        find_combinations_recursive(test_list, index - 1, sum, curr_list)\n        local new_list = {}\n        for _, v in ipairs(curr_list) do\n            table.insert(new_list, v)\n        end\n        table.insert(new_list, test_list[index])\n        find_combinations_recursive(test_list, index - 1, sum - test_list[index], new_list)\n    end\n    find_combinations_recursive(test_list, #test_list, test_list[#test_list], {})\n    return result\nend",
    "  local result = {}\n  local function find_combinations_helper(test_list, index, current_sum, current_list)\n    if current_sum == 0 then\n      table.insert(result, current_list)\n      return\n    end\n    if index == 0 then\n      return\n    end\n    find_combinations_helper(test_list, index - 1, current_sum, current_list)\n    if current_sum >= test_list[index] then\n      find_combinations_helper(test_list, index - 1, current_sum - test_list[index], {test_list[index], unpack(current_list)})\n    end\n  end\n  find_combinations_helper(test_list, #test_list, 10, {})\n  return result\nend",
    "  local result = {}\n  local function find_combinations_rec(test_list, start_index, current_sum, current_list)\n    if current_sum == 0 then\n      table.insert(result, current_list)\n      return\n    end\n    for i = start_index, #test_list do\n      if test_list[i] <= current_sum then\n        find_combinations_rec(test_list, i, current_sum - test_list[i], {table.unpack(current_list), test_list[i]})\n      end\n    end\n  end\n  find_combinations_rec(test_list, 1, 10, {})\n  return result\nend",
    "    local result = {}\n    local function find_combinations_recursive(test_list, index, current_sum, current_list)\n        if current_sum == 0 then\n            table.insert(result, current_list)\n            return\n        end\n        if index == 0 then\n            return\n        end\n        if test_list[index] <= current_sum then\n            find_combinations_recursive(test_list, index - 1, current_sum - test_list[index], {test_list[index], unpack(current_list)})\n        end\n        find_combinations_recursive(test_list, index - 1, current_sum, current_list)\n    end\n    find_combinations_recursive(test_list, #test_list, #test_list, {})\n    return result\nend",
    "  local combinations = {}\n  local function find_combinations_recursive(test_list, index, sum, current_list)\n    if sum == 0 then\n      table.insert(combinations, current_list)\n      return\n    end\n    if index > #test_list then\n      return\n    end\n    if sum < 0 then\n      return\n    end\n    find_combinations_recursive(test_list, index + 1, sum, current_list)\n    local new_list = {}\n    for _, v in ipairs(current_list) do\n      table.insert(new_list, v)\n    end\n    table.insert(new_list, test_list[index])\n    find_combinations_recursive(test_list, index + 1, sum - test_list[index], new_list)\n  end\n  find_combinations_recursive(test_list, 1, test_list[1], {})\n  return combinations\nend",
    "    local result = {}\n    local function find_combinations_helper(test_list, index, sum, current_list)\n        if sum == 0 then\n            table.insert(result, current_list)\n            return\n        end\n        if index > #test_list or sum < 0 then\n            return\n        end\n        find_combinations_helper(test_list, index + 1, sum, current_list)\n        find_combinations_helper(test_list, index + 1, sum - test_list[index], {table.unpack(current_list), test_list[index]})\n    end\n    find_combinations_helper(test_list, 1, 4, {})\n    return result\nend",
    "\tlocal result = {}\n\tlocal function find_combinations_rec(test_list, index, sum, curr_list)\n\t\tif sum == 0 then\n\t\t\ttable.insert(result, curr_list)\n\t\t\treturn\n\t\tend\n\t\tif index == 0 then\n\t\t\treturn\n\t\tend\n\t\tif test_list[index] > sum then\n\t\t\tfind_combinations_rec(test_list, index-1, sum, curr_list)\n\t\telse\n\t\t\tfind_combinations_rec(test_list, index-1, sum, curr_list)\n\t\t\tlocal new_list = {}\n\t\t\tfor _, v in ipairs(curr_list) do\n\t\t\t\ttable.insert(new_list, v)\n\t\t\tend\n\t\t\ttable.insert(new_list, test_list[index])\n\t\t\tfind_combinations_rec(test_list, index-1, sum-test_list[index], new_list)\n\t\tend\n\tend\n\tfind_combinations_rec(test_list, #test_list, 4, {})\n\treturn result\nend",
    "    local result = {}\n    local function find_combinations_rec(test_list, index, sum, current_list)\n        if sum == 0 then\n            table.insert(result, current_list)\n            return\n        end\n        if index == 0 then\n            return\n        end\n        if test_list[index] > sum then\n            find_combinations_rec(test_list, index - 1, sum, current_list)\n        else\n            find_combinations_rec(test_list, index - 1, sum, current_list)\n            local new_list = {}\n            for _, v in ipairs(current_list) do\n                table.insert(new_list, v)\n            end\n            table.insert(new_list, test_list[index])\n            find_combinations_rec(test_list, index - 1, sum - test_list[index], new_list)\n        end\n    end\n    find_combinations_rec(test_list, #test_list, 5, {})\n    return result\nend",
    "    local result = {}\n    local function find_combinations_helper(test_list, index, sum, current_list)\n        if sum == 0 then\n            table.insert(result, current_list)\n            return\n        end\n        if index > #test_list then\n            return\n        end\n        find_combinations_helper(test_list, index + 1, sum, current_list)\n        if sum >= test_list[index] then\n            find_combinations_helper(test_list, index + 1, sum - test_list[index], {test_list[index], unpack(current_list)})\n        end\n    end\n    find_combinations_helper(test_list, 1, 10, {})\n    return result\nend",
    "  local function find_combinations_helper(test_list, target_sum, current_sum, current_index, current_combination, result)\n    if current_sum == target_sum then\n      table.insert(result, current_combination)\n      return\n    end\n    if current_sum > target_sum then\n      return\n    end\n    for i = current_index, #test_list do\n      local new_combination = {}\n      for _, v in ipairs(current_combination) do\n        table.insert(new_combination, v)\n      end\n      table.insert(new_combination, test_list[i])\n      find_combinations_helper(test_list, target_sum, current_sum + test_list[i], i + 1, new_combination, result)\n    end\n  end\n  local result = {}\n  find_combinations_helper(test_list, 10, 0, 1, {}, result)\n  return result\nend",
    "    local result = {}\n    local function find_combinations_helper(test_list, index, sum, path)\n        if sum == 0 then\n            table.insert(result, path)\n            return\n        end\n        if index > #test_list then\n            return\n        end\n        if test_list[index] <= sum then\n            find_combinations_helper(test_list, index + 1, sum - test_list[index], path .. \" \" .. test_list[index])\n        end\n        find_combinations_helper(test_list, index + 1, sum, path)\n    end\n    find_combinations_helper(test_list, 1, 10, \"\")\n    return result\nend",
    "    local result = {}\n    local function find_combinations_helper(test_list, index, sum, current_list)\n        if sum == 0 then\n            table.insert(result, current_list)\n            return\n        end\n        if index == 0 then\n            return\n        end\n        if test_list[index] > sum then\n            find_combinations_helper(test_list, index - 1, sum, current_list)\n        else\n            find_combinations_helper(test_list, index - 1, sum, current_list)\n            table.insert(current_list, test_list[index])\n            find_combinations_helper(test_list, index - 1, sum - test_list[index], current_list)\n            table.remove(current_list)\n        end\n    end\n    find_combinations_helper(test_list, #test_list, 10, {})\n    return result\nend",
    "  local function find_combinations_rec(test_list, index, sum, current_list)\n    if sum == 0 then\n      return {current_list}\n    end\n    if index == 0 then\n      return {}\n    end\n    if test_list[index] > sum then\n      return find_combinations_rec(test_list, index - 1, sum, current_list)\n    end\n    local result = {}\n    local result1 = find_combinations_rec(test_list, index - 1, sum, current_list)\n    local result2 = find_combinations_rec(test_list, index - 1, sum - test_list[index], current_list .. test_list[index] .. \" \")\n    for _, v in ipairs(result1) do\n      table.insert(result, v)\n    end\n    for _, v in ipairs(result2) do\n      table.insert(result, v)\n    end\n    return result\n  end\n  return find_combinations_rec(test_list, #test_list, test_list[1], \"\")\nend",
    "  local result = {}\n  local function find_combinations_rec(test_list, index, sum, combination)\n    if sum == 0 then\n      table.insert(result, combination)\n      return\n    end\n    if index > #test_list then\n      return\n    end\n    local current_number = test_list[index]\n    if current_number <= sum then\n      find_combinations_rec(test_list, index + 1, sum - current_number, combination .. \" \" .. current_number)\n    end\n    find_combinations_rec(test_list, index + 1, sum, combination)\n  end\n  find_combinations_rec(test_list, 1, 4, \"\")\n  return result\nend"
  ]
}