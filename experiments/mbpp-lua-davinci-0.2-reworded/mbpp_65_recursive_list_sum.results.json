{
  "name": "mbpp_65_recursive_list_sum",
  "language": "lua",
  "prompt": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == 'table' then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for i, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for i, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, value in ipairs(data_list) do\n        if type(value) == \"table\" then\n            sum = sum + recursive_list_sum(value)\n        else\n            sum = sum + value\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, data in ipairs(data_list) do\n        if type(data) == \"table\" then\n            sum = sum + recursive_list_sum(data)\n        else\n            sum = sum + data\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, value in ipairs(data_list) do\n        if type(value) == 'table' then\n            sum = sum + recursive_list_sum(value)\n        else\n            sum = sum + value\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for k, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == 'table' then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in pairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for i, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, value in pairs(data_list) do\n    if type(value) == \"table\" then\n      sum = sum + recursive_list_sum(value)\n    else\n      sum = sum + value\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for k, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == 'table' then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, value in ipairs(data_list) do\n        if type(value) == \"table\" then\n            sum = sum + recursive_list_sum(value)\n        else\n            sum = sum + value\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, data in ipairs(data_list) do\n    if type(data) == \"table\" then\n      sum = sum + recursive_list_sum(data)\n    else\n      sum = sum + data\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, value in ipairs(data_list) do\n    if type(value) == \"table\" then\n      sum = sum + recursive_list_sum(value)\n    else\n      sum = sum + value\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for k, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in pairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for k, v in pairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == 'table' then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == 'table' then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, value in ipairs(data_list) do\n        if type(value) == \"table\" then\n            sum = sum + recursive_list_sum(value)\n        else\n            sum = sum + value\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for k, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == 'table' then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for i, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, data in ipairs(data_list) do\n    if type(data) == \"table\" then\n      sum = sum + recursive_list_sum(data)\n    else\n      sum = sum + data\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, data in ipairs(data_list) do\n    if type(data) == \"table\" then\n      sum = sum + recursive_list_sum(data)\n    else\n      sum = sum + data\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == 'table' then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in pairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for k, v in pairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == 'table' then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, data in ipairs(data_list) do\n        if type(data) == \"table\" then\n            sum = sum + recursive_list_sum(data)\n        else\n            sum = sum + data\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local total = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            total = total + recursive_list_sum(v)\n        else\n            total = total + v\n        end\n    end\n    return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in pairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == 'table' then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for k, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for k, v in pairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == 'table' then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for i = 1, #data_list do\n    local v = data_list[i]\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, data in ipairs(data_list) do\n        if type(data) == \"table\" then\n            sum = sum + recursive_list_sum(data)\n        else\n            sum = sum + data\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, value in pairs(data_list) do\n        if type(value) == 'table' then\n            sum = sum + recursive_list_sum(value)\n        else\n            sum = sum + value\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == 'table' then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for i, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, data in ipairs(data_list) do\n        if type(data) == \"table\" then\n            sum = sum + recursive_list_sum(data)\n        else\n            sum = sum + data\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, value in ipairs(data_list) do\n        if type(value) == \"table\" then\n            sum = sum + recursive_list_sum(value)\n        else\n            sum = sum + value\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  if type(data_list) ~= \"table\" then\n    return data_list\n  end\n  local sum = 0\n  for _, v in pairs(data_list) do\n    sum = sum + recursive_list_sum(v)\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == 'table' then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in ipairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for k, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n    for _, v in pairs(data_list) do\n        if type(v) == \"table\" then\n            sum = sum + recursive_list_sum(v)\n        else\n            sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for _, v in pairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123418,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n  local sum = 0\n  for i, v in ipairs(data_list) do\n    if type(v) == \"table\" then\n      sum = sum + recursive_list_sum(v)\n    else\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}