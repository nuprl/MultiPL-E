{
  "name": "mbpp_398_sum_of_digits",
  "language": "lua",
  "prompt": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for i, num in ipairs(nums) do\n        local sum = 0\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n        result[i] = sum\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rrc2p3a.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp2rrc2p3a.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, n in ipairs(nums) do\n    while n > 0 do\n      sum = sum + n % 10\n      n = math.floor(n / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzclgvizq.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpzclgvizq.lua:5: in function 'candidate'\n\t/tmp/tmpzclgvizq.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        for digit in tostring(num):gmatch(\"%d\") do\n            sum = sum + tonumber(digit)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for _, num in ipairs(nums) do\n        local sum = 0\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n        table.insert(result, sum)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaapvqcoi.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpaapvqcoi.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    local num_str = tostring(num)\n    for i = 1, #num_str do\n      sum = sum + tonumber(num_str:sub(i, i))\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp42r6peo7.lua:7: attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp42r6peo7.lua:7: in function 'candidate'\n\t/tmp/tmp42r6peo7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for i, num in ipairs(nums) do\n    local sum = 0\n    for digit in tostring(num):gmatch('%d') do\n      sum = sum + tonumber(digit)\n    end\n    result[i] = sum\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbql3ue_.lua:17: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpsbql3ue_.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for i, num in ipairs(nums) do\n    local sum = 0\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n    result[i] = sum\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0juk01dk.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp0juk01dk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for _, n in ipairs(nums) do\n        local sum = 0\n        for d in tostring(n):gmatch(\"%d\") do\n            sum = sum + tonumber(d)\n        end\n        table.insert(result, sum)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp67hx7bbg.lua:17: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp67hx7bbg.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = {}\n  for i = 1, #nums do\n    local num = nums[i]\n    local sum_of_digits = 0\n    while num > 0 do\n      local digit = num % 10\n      sum_of_digits = sum_of_digits + digit\n      num = math.floor(num / 10)\n    end\n    sum[i] = sum_of_digits\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7za6ffny.lua:20: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp7za6ffny.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, #tostring(nums[i]) do\n      sum = sum + tonumber(tostring(nums[i]):sub(j, j))\n    end\n    result[i] = sum\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1u6e25bk.lua:17: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp1u6e25bk.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for i, num in ipairs(nums) do\n    local sum = 0\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n    result[i] = sum\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0juk01dk.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp0juk01dk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for i, num in ipairs(nums) do\n    local sum = 0\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n    result[i] = sum\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0juk01dk.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp0juk01dk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for i, num in ipairs(nums) do\n        local sum = 0\n        for digit in num:gmatch('%d') do\n            sum = sum + tonumber(digit)\n        end\n        result[i] = sum\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadicarmj.lua:6: attempt to index a number value (local 'num')\nstack traceback:\n\t/tmp/tmpadicarmj.lua:6: in local 'candidate'\n\t/tmp/tmpadicarmj.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        for digit in tostring(num):gmatch(\"%d\") do\n            sum = sum + tonumber(digit)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        for j = 1, #nums[i] do\n            sum = sum + nums[i][j]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpipq0w_70.lua:5: attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmpipq0w_70.lua:5: in local 'candidate'\n\t/tmp/tmpipq0w_70.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            local digit = num % 10\n            sum = sum + digit\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprzw5g5ly.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmprzw5g5ly.lua:6: in local 'candidate'\n\t/tmp/tmprzw5g5ly.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for _, num in ipairs(nums) do\n    local sum = 0\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n    table.insert(result, sum)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77haadv5.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp77haadv5.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ynswu6z.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp7ynswu6z.lua:5: in local 'candidate'\n\t/tmp/tmp7ynswu6z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for i, v in ipairs(nums) do\n        local sum = 0\n        while v > 0 do\n            sum = sum + v % 10\n            v = math.floor(v / 10)\n        end\n        result[i] = sum\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmqmm24me.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpmqmm24me.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    for digit in tostring(num):gmatch('%d') do\n      sum = sum + tonumber(digit)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzukexxa7.lua:16: expected: 19, actual: 45\nstack traceback:\n\t/tmp/tmpzukexxa7.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for i, num in ipairs(nums) do\n        local sum = 0\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n        result[i] = sum\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rrc2p3a.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp2rrc2p3a.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i, n in ipairs(nums) do\n    while n > 0 do\n      sum = sum + n % 10\n      n = math.floor(n / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp013jtri8.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp013jtri8.lua:5: in local 'candidate'\n\t/tmp/tmp013jtri8.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbjsaqol3.lua:13: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      local digit = num % 10\n      sum = sum + digit\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp861wzf42.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp861wzf42.lua:6: in local 'candidate'\n\t/tmp/tmp861wzf42.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    sum = sum + num\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxls6juho.lua:13: expected: 14, actual: 68\nstack traceback:\n\t/tmp/tmpxls6juho.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for i, num in ipairs(nums) do\n        local sum = 0\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n        result[i] = sum\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rrc2p3a.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp2rrc2p3a.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ynswu6z.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp7ynswu6z.lua:5: in local 'candidate'\n\t/tmp/tmp7ynswu6z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for i, num in ipairs(nums) do\n        local sum = 0\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n        result[i] = sum\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rrc2p3a.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp2rrc2p3a.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, n in ipairs(nums) do\n    while n > 0 do\n      sum = sum + n % 10\n      n = math.floor(n / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzclgvizq.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpzclgvizq.lua:5: in function 'candidate'\n\t/tmp/tmpzclgvizq.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    while num > 0 do\n      sum = sum + (num % 10)\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppb_jwaxc.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppb_jwaxc.lua:5: in local 'candidate'\n\t/tmp/tmppb_jwaxc.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for _, num in ipairs(nums) do\n    local sum = 0\n    while num > 0 do\n      local digit = num % 10\n      sum = sum + digit\n      num = math.floor(num / 10)\n    end\n    table.insert(result, sum)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxd4oa2h.lua:19: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmppxd4oa2h.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        local num_str = tostring(num)\n        for i = 1, #num_str do\n            sum = sum + tonumber(num_str:sub(i, i))\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5bqtoflx.lua:7: attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp5bqtoflx.lua:7: in local 'candidate'\n\t/tmp/tmp5bqtoflx.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ynswu6z.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp7ynswu6z.lua:5: in local 'candidate'\n\t/tmp/tmp7ynswu6z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ynswu6z.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp7ynswu6z.lua:5: in local 'candidate'\n\t/tmp/tmp7ynswu6z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    for digit in tostring(num):gmatch('%d') do\n      sum = sum + tonumber(digit)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzukexxa7.lua:16: expected: 19, actual: 45\nstack traceback:\n\t/tmp/tmpzukexxa7.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    while num > 0 do\n      sum = sum + (num % 10)\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppb_jwaxc.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppb_jwaxc.lua:5: in local 'candidate'\n\t/tmp/tmppb_jwaxc.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for i, v in ipairs(nums) do\n        local sum = 0\n        while v > 0 do\n            sum = sum + v % 10\n            v = math.floor(v / 10)\n        end\n        result[i] = sum\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmqmm24me.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpmqmm24me.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            local digit = num % 10\n            sum = sum + digit\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprzw5g5ly.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmprzw5g5ly.lua:6: in local 'candidate'\n\t/tmp/tmprzw5g5ly.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for _, n in ipairs(nums) do\n    local sum = 0\n    while n > 0 do\n      sum = sum + n % 10\n      n = math.floor(n / 10)\n    end\n    table.insert(result, sum)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqg3gtljy.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpqg3gtljy.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        for digit in tostring(num):gmatch(\"%d\") do\n            sum = sum + tonumber(digit)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for i, num in ipairs(nums) do\n        local sum = 0\n        while num > 0 do\n            local digit = num % 10\n            sum = sum + digit\n            num = (num - digit) / 10\n        end\n        result[i] = sum\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscyhgybq.lua:19: expected: 14, actual: {1.0, 2, 11.0}\nstack traceback:\n\t/tmp/tmpscyhgybq.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for i, num in ipairs(nums) do\n    local sum = 0\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n    result[i] = sum\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0juk01dk.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp0juk01dk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    while num > 0 do\n      local digit = num % 10\n      sum = sum + digit\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm3a39ox1.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpm3a39ox1.lua:5: in local 'candidate'\n\t/tmp/tmpm3a39ox1.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ynswu6z.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp7ynswu6z.lua:5: in local 'candidate'\n\t/tmp/tmp7ynswu6z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    local n = num\n    while n > 0 do\n      sum = sum + n % 10\n      n = math.floor(n / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp490qfnua.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp490qfnua.lua:6: in local 'candidate'\n\t/tmp/tmp490qfnua.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for i, num in ipairs(nums) do\n    local sum = 0\n    for digit in tostring(num):gmatch(\"%d\") do\n      sum = sum + tonumber(digit)\n    end\n    result[i] = sum\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5zt_56w.lua:17: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpx5zt_56w.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, n in ipairs(nums) do\n    while n > 0 do\n      sum = sum + n % 10\n      n = math.floor(n / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzclgvizq.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpzclgvizq.lua:5: in function 'candidate'\n\t/tmp/tmpzclgvizq.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for _, num in ipairs(nums) do\n    local sum = 0\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n    table.insert(result, sum)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77haadv5.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp77haadv5.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for _, num in ipairs(nums) do\n        local sum = 0\n        for digit in tostring(num):gmatch(\"%d\") do\n            sum = sum + tonumber(digit)\n        end\n        table.insert(result, sum)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpba60ytp3.lua:17: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpba60ytp3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        for digit in tostring(num):gmatch('.') do\n            sum = sum + tonumber(digit)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphnwhdaee.lua:6: attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmphnwhdaee.lua:6: in local 'candidate'\n\t/tmp/tmphnwhdaee.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      local digit = num % 10\n      sum = sum + digit\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp861wzf42.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp861wzf42.lua:6: in local 'candidate'\n\t/tmp/tmp861wzf42.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for i, num in ipairs(nums) do\n    local sum = 0\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n    result[i] = sum\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0juk01dk.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp0juk01dk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, n in ipairs(nums) do\n    while n > 0 do\n      local d = n % 10\n      sum = sum + d\n      n = math.floor(n / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg3fyxfiq.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpg3fyxfiq.lua:5: in local 'candidate'\n\t/tmp/tmpg3fyxfiq.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for i, v in ipairs(nums) do\n    local sum = 0\n    while v > 0 do\n      sum = sum + v % 10\n      v = math.floor(v / 10)\n    end\n    result[i] = sum\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpai83hwh9.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpai83hwh9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    local num_str = tostring(num)\n    for i = 1, #num_str do\n      local digit = tonumber(num_str:sub(i, i))\n      sum = sum + digit\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmsg91cws.lua:8: attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\t/tmp/tmpmsg91cws.lua:8: in local 'candidate'\n\t/tmp/tmpmsg91cws.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            local digit = num % 10\n            sum = sum + digit\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnnx04v6q.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpnnx04v6q.lua:5: in local 'candidate'\n\t/tmp/tmpnnx04v6q.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for i, num in ipairs(nums) do\n        local sum = 0\n        for digit in tostring(num):gmatch(\"%d\") do\n            sum = sum + tonumber(digit)\n        end\n        result[i] = sum\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps2hm2iko.lua:17: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmps2hm2iko.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + (num % 10)\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1dmcmkjc.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp1dmcmkjc.lua:6: in local 'candidate'\n\t/tmp/tmp1dmcmkjc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ynswu6z.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp7ynswu6z.lua:5: in local 'candidate'\n\t/tmp/tmp7ynswu6z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for i, num in ipairs(nums) do\n        local sum = 0\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n        result[i] = sum\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rrc2p3a.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp2rrc2p3a.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ynswu6z.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp7ynswu6z.lua:5: in local 'candidate'\n\t/tmp/tmp7ynswu6z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for i, num in ipairs(nums) do\n        local sum = 0\n        while num > 0 do\n            local digit = num % 10\n            sum = sum + digit\n            num = math.floor(num / 10)\n        end\n        result[i] = sum\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfz3fs53d.lua:19: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpfz3fs53d.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for i = 1, #nums do\n        local sum = 0\n        for j = 1, #tostring(nums[i]) do\n            sum = sum + tonumber(tostring(nums[i]):sub(j, j))\n        end\n        result[i] = sum\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc81ww5qx.lua:17: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpc81ww5qx.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + (num % 10)\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1dmcmkjc.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp1dmcmkjc.lua:6: in local 'candidate'\n\t/tmp/tmp1dmcmkjc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, n in ipairs(nums) do\n        for d in tostring(n):gmatch(\"%d\") do\n            sum = sum + tonumber(d)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5gla6s3g.lua:16: expected: 19, actual: 33\nstack traceback:\n\t/tmp/tmp5gla6s3g.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    for digit in tostring(num):gmatch('%d') do\n      sum = sum + tonumber(digit)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzukexxa7.lua:16: expected: 19, actual: 45\nstack traceback:\n\t/tmp/tmpzukexxa7.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        sum = sum + num\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpymmwbbv3.lua:13: expected: 14, actual: 68\nstack traceback:\n\t/tmp/tmpymmwbbv3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    local num_str = tostring(num)\n    for i = 1, #num_str do\n      sum = sum + tonumber(num_str:sub(i, i))\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp42r6peo7.lua:7: attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp42r6peo7.lua:7: in function 'candidate'\n\t/tmp/tmp42r6peo7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for i, num in ipairs(nums) do\n    local sum = 0\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n    result[i] = sum\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0juk01dk.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp0juk01dk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ynswu6z.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp7ynswu6z.lua:5: in local 'candidate'\n\t/tmp/tmp7ynswu6z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ynswu6z.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp7ynswu6z.lua:5: in local 'candidate'\n\t/tmp/tmp7ynswu6z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i, num in ipairs(nums) do\n        sum = sum + num\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpphhlw92v.lua:13: expected: 14, actual: 68\nstack traceback:\n\t/tmp/tmpphhlw92v.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    for digit in tostring(num):gmatch(\"%d\") do\n      sum = sum + tonumber(digit)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuw1ppaay.lua:16: expected: 19, actual: 31\nstack traceback:\n\t/tmp/tmpuw1ppaay.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    sum = sum + num\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxls6juho.lua:13: expected: 14, actual: 68\nstack traceback:\n\t/tmp/tmpxls6juho.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ynswu6z.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp7ynswu6z.lua:5: in local 'candidate'\n\t/tmp/tmp7ynswu6z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for _, num in ipairs(nums) do\n    local sum = 0\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n    table.insert(result, sum)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77haadv5.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp77haadv5.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            local digit = num % 10\n            sum = sum + digit\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprzw5g5ly.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmprzw5g5ly.lua:6: in local 'candidate'\n\t/tmp/tmprzw5g5ly.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for i, num in ipairs(nums) do\n    local sum = 0\n    for digit in tostring(num):gmatch(\"%d\") do\n      sum = sum + tonumber(digit)\n    end\n    result[i] = sum\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5zt_56w.lua:17: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpx5zt_56w.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for _, num in ipairs(nums) do\n        local sum = 0\n        for digit in tostring(num):gmatch(\"%d\") do\n            sum = sum + tonumber(digit)\n        end\n        table.insert(result, sum)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpba60ytp3.lua:17: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpba60ytp3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ynswu6z.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp7ynswu6z.lua:5: in local 'candidate'\n\t/tmp/tmp7ynswu6z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ynswu6z.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp7ynswu6z.lua:5: in local 'candidate'\n\t/tmp/tmp7ynswu6z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for _, num in ipairs(nums) do\n        local sum = 0\n        for digit in tostring(num):gmatch('%d') do\n            sum = sum + tonumber(digit)\n        end\n        table.insert(result, sum)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2q7fxh98.lua:17: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp2q7fxh98.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ynswu6z.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp7ynswu6z.lua:5: in local 'candidate'\n\t/tmp/tmp7ynswu6z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    local num_str = tostring(num)\n    for i = 1, #num_str do\n      local digit = tonumber(num_str:sub(i, i))\n      sum = sum + digit\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmsg91cws.lua:8: attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\t/tmp/tmpmsg91cws.lua:8: in local 'candidate'\n\t/tmp/tmpmsg91cws.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for i = 1, #nums do\n    local sum = 0\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n    result[i] = sum\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50mx8q7c.lua:19: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp50mx8q7c.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for i, n in ipairs(nums) do\n    local sum = 0\n    while n > 0 do\n      sum = sum + n % 10\n      n = math.floor(n / 10)\n    end\n    result[i] = sum\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0njzscb.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpa0njzscb.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ynswu6z.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp7ynswu6z.lua:5: in local 'candidate'\n\t/tmp/tmp7ynswu6z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for i, num in ipairs(nums) do\n    result[i] = 0\n    while num > 0 do\n      result[i] = result[i] + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqw6z5gpc.lua:17: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpqw6z5gpc.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      local digit = num % 10\n      sum = sum + digit\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp861wzf42.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp861wzf42.lua:6: in local 'candidate'\n\t/tmp/tmp861wzf42.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for i, num in ipairs(nums) do\n    local sum = 0\n    while num > 0 do\n      local digit = num % 10\n      sum = sum + digit\n      num = math.floor(num / 10)\n    end\n    result[i] = sum\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4ld5auy.lua:19: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpt4ld5auy.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        sum = sum + num\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpymmwbbv3.lua:13: expected: 14, actual: 68\nstack traceback:\n\t/tmp/tmpymmwbbv3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            local digit = num % 10\n            sum = sum + digit\n            num = (num - digit) / 10\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9tun08ec.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp9tun08ec.lua:5: in local 'candidate'\n\t/tmp/tmp9tun08ec.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        sum = sum + num\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpymmwbbv3.lua:13: expected: 14, actual: 68\nstack traceback:\n\t/tmp/tmpymmwbbv3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = {}\n  for i, num in ipairs(nums) do\n    local s = 0\n    while num > 0 do\n      s = s + num % 10\n      num = math.floor(num / 10)\n    end\n    sum[i] = s\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe66wdq3s.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpe66wdq3s.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, n in ipairs(nums) do\n    while n > 0 do\n      sum = sum + n % 10\n      n = math.floor(n / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzclgvizq.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpzclgvizq.lua:5: in function 'candidate'\n\t/tmp/tmpzclgvizq.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for _, num in ipairs(nums) do\n        local sum = 0\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n        table.insert(result, sum)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaapvqcoi.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpaapvqcoi.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for _, num in ipairs(nums) do\n    local sum = 0\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n    table.insert(result, sum)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77haadv5.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp77haadv5.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for i, num in ipairs(nums) do\n        local sum = 0\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n        result[i] = sum\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rrc2p3a.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp2rrc2p3a.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ynswu6z.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp7ynswu6z.lua:5: in local 'candidate'\n\t/tmp/tmp7ynswu6z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ynswu6z.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp7ynswu6z.lua:5: in local 'candidate'\n\t/tmp/tmp7ynswu6z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppwagv6cg.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmppwagv6cg.lua:6: in function 'candidate'\n\t/tmp/tmppwagv6cg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for i, num in ipairs(nums) do\n    local sum = 0\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n    result[i] = sum\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0juk01dk.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp0juk01dk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = {}\n  for i, v in ipairs(nums) do\n    local s = 0\n    while v > 0 do\n      s = s + (v % 10)\n      v = math.floor(v / 10)\n    end\n    sum[i] = s\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa51_iaj1.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpa51_iaj1.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for _, num in ipairs(nums) do\n    local sum = 0\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n    table.insert(result, sum)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77haadv5.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp77haadv5.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, n in ipairs(nums) do\n    while n > 0 do\n      sum = sum + n % 10\n      n = math.floor(n / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzclgvizq.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpzclgvizq.lua:5: in function 'candidate'\n\t/tmp/tmpzclgvizq.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i, num in ipairs(nums) do\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf75i_69h.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpf75i_69h.lua:5: in local 'candidate'\n\t/tmp/tmpf75i_69h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for i, v in ipairs(nums) do\n        local sum = 0\n        for j = 1, #tostring(v) do\n            sum = sum + tonumber(tostring(v):sub(j, j))\n        end\n        result[i] = sum\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbcr51y45.lua:17: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpbcr51y45.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for _, num in ipairs(nums) do\n        local sum = 0\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n        table.insert(result, sum)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaapvqcoi.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpaapvqcoi.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sums = {}\n  for i, num in ipairs(nums) do\n    local sum = 0\n    for digit in tostring(num):gmatch('%d') do\n      sum = sum + tonumber(digit)\n    end\n    sums[i] = sum\n  end\n  return sums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyipfzq7j.lua:17: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpyipfzq7j.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        for digit in tostring(num):gmatch(\"%d\") do\n            sum = sum + tonumber(digit)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    local num_str = tostring(num)\n    for i = 1, #num_str do\n      sum = sum + tonumber(num_str:sub(i, i))\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp42r6peo7.lua:7: attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp42r6peo7.lua:7: in function 'candidate'\n\t/tmp/tmp42r6peo7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm8u7z5u.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmplm8u7z5u.lua:5: in function 'candidate'\n\t/tmp/tmplm8u7z5u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for i = 1, #nums do\n        local sum = 0\n        local num = nums[i]\n        while num > 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n        end\n        result[i] = sum\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n2n3fse.lua:19: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp_n2n3fse.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n\tlocal sum = 0\n\tfor i = 1, #nums do\n\t\tlocal num = nums[i]\n\t\twhile num > 0 do\n\t\t\tsum = sum + num % 10\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5p8iv2_p.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp5p8iv2_p.lua:6: in local 'candidate'\n\t/tmp/tmp5p8iv2_p.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local result = {}\n  for i, num in ipairs(nums) do\n    local sum = 0\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n    result[i] = sum\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0juk01dk.lua:18: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmp0juk01dk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    local num_str = tostring(num)\n    for i = 1, #num_str do\n      local digit = tonumber(num_str:sub(i, i))\n      sum = sum + digit\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmsg91cws.lua:8: attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\t/tmp/tmpmsg91cws.lua:8: in local 'candidate'\n\t/tmp/tmpmsg91cws.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for _, num in ipairs(nums) do\n    while num > 0 do\n      local digit = num % 10\n      sum = sum + digit\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm3a39ox1.lua:5: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpm3a39ox1.lua:5: in local 'candidate'\n\t/tmp/tmpm3a39ox1.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local result = {}\n    for i, num in ipairs(nums) do\n        local sum = 0\n        while num > 0 do\n            local digit = num % 10\n            sum = sum + digit\n            num = math.floor(num / 10)\n        end\n        result[i] = sum\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123613,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfz3fs53d.lua:19: expected: 14, actual: {1, 2, 11}\nstack traceback:\n\t/tmp/tmpfz3fs53d.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n  local sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    while num > 0 do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfgyjbk.lua:6: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpusfgyjbk.lua:6: in function 'candidate'\n\t/tmp/tmpusfgyjbk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}