{
  "name": "mbpp_809_check_smaller",
  "language": "lua",
  "prompt": "-- Write a function to check if each element of second table is smaller than its corresponding element in the first table.\nlocal function check_smaller(test_tup1, test_tup2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_smaller\n    lu.assertEquals(candidate({1, 2, 3}, {2, 3, 4}), false)\n    lu.assertEquals(candidate({4, 5, 6}, {3, 4, 5}), true)\n    lu.assertEquals(candidate({11, 12, 13}, {10, 11, 12}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local result = true\n    for i = 1, #test_tup1 do\n        if test_tup1[i] < test_tup2[i] then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    for i = 1, #test_tup1 do\n        if test_tup1[i] < test_tup2[i] then\n            return false\n        end\n    end\n    return true\nend",
    "  local t1 = test_tup1.t\n  local t2 = test_tup2.t\n  local n = #t1\n  for i = 1, n do\n    if t1[i] < t2[i] then\n      return false\n    end\n  end\n  return true\nend",
    "    local test_tup1_len = #test_tup1\n    local test_tup2_len = #test_tup2\n    if test_tup1_len ~= test_tup2_len then\n        return false\n    end\n    for i = 1, test_tup1_len do\n        if test_tup1[i] <= test_tup2[i] then\n            return false\n        end\n    end\n    return true\nend",
    "    for i = 1, #test_tup1 do\n        if test_tup1[i] < test_tup2[i] then\n            return false\n        end\n    end\n    return true\nend",
    "    local t1 = test_tup1[1]\n    local t2 = test_tup2[1]\n    for i = 1, #t1 do\n        if t1[i] < t2[i] then\n            return false\n        end\n    end\n    return true\nend",
    "    for i = 1, #test_tup1 do\n        if test_tup1[i] < test_tup2[i] then\n            return false\n        end\n    end\n    return true\nend",
    "    for i = 1, #test_tup1 do\n        if test_tup1[i] < test_tup2[i] then\n            return false\n        end\n    end\n    return true\nend",
    "  for i = 1, #test_tup1 do\n    if test_tup1[i] < test_tup2[i] then\n      return false\n    end\n  end\n  return true\nend",
    "  for i = 1, #test_tup1 do\n    if test_tup1[i] < test_tup2[i] then\n      return false\n    end\n  end\n  return true\nend",
    "    for i = 1, #test_tup1 do\n        if test_tup1[i] < test_tup2[i] then\n            return false\n        end\n    end\n    return true\nend",
    "  local t1, t2 = test_tup1[1], test_tup2[1]\n  for i = 1, #t1 do\n    if t1[i] < t2[i] then\n      return false\n    end\n  end\n  return true\nend",
    "  for i = 1, #test_tup1 do\n    if test_tup1[i] < test_tup2[i] then\n      return false\n    end\n  end\n  return true\nend",
    "    for i = 1, #test_tup1 do\n        if test_tup1[i] < test_tup2[i] then\n            return false\n        end\n    end\n    return true\nend",
    "    for i = 1, #test_tup1 do\n        if test_tup1[i] < test_tup2[i] then\n            return false\n        end\n    end\n    return true\nend",
    "    for i = 1, #test_tup1 do\n        if test_tup1[i] < test_tup2[i] then\n            return false\n        end\n    end\n    return true\nend",
    "    for i = 1, #test_tup1 do\n        if test_tup1[i] < test_tup2[i] then\n            return false\n        end\n    end\n    return true\nend",
    "    for i = 1, #test_tup1 do\n        if test_tup1[i] < test_tup2[i] then\n            return false\n        end\n    end\n    return true\nend",
    "  for i = 1, #test_tup1 do\n    if test_tup1[i] <= test_tup2[i] then\n      return false\n    end\n  end\n  return true\nend",
    "    local test_tup1_len = #test_tup1\n    local test_tup2_len = #test_tup2\n    if test_tup1_len ~= test_tup2_len then\n        return false\n    end\n    for i = 1, test_tup1_len do\n        if test_tup1[i] < test_tup2[i] then\n            return false\n        end\n    end\n    return true\nend"
  ]
}