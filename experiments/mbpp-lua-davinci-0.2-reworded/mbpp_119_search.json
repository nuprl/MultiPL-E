{
  "name": "mbpp_119_search",
  "language": "lua",
  "prompt": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "  local i = 1\n  while i <= #arr do\n    if i == #arr then\n      return arr[i]\n    end\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] ~= arr[i-1] and arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 1\n  end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "  local l, r = 1, #arr\n  while l < r do\n    local m = math.floor((l + r) / 2)\n    if arr[m] == arr[m - 1] then\n      if m % 2 == 0 then\n        l = m + 1\n      else\n        r = m - 2\n      end\n    elseif arr[m] == arr[m + 1] then\n      if m % 2 == 0 then\n        r = m - 1\n      else\n        l = m + 2\n      end\n    else\n      return arr[m]\n    end\n  end\n  return arr[l]\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i + 1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend",
    "  for i = 1, #arr do\n    if arr[i] ~= arr[i - 1] and arr[i] ~= arr[i + 1] then\n      return arr[i]\n    end\n  end\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[i]\nend",
    "  local i = 1\n  while arr[i] == arr[i+1] do\n    i = i + 2\n  end\n  return arr[i]\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend",
    "  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend"
  ]
}