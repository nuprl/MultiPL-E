{
  "name": "mbpp_222_check_type",
  "language": "lua",
  "prompt": "-- Write a function to check if all the elements in table have same data type or not.\nlocal function check_type(test_tuple)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_type\n    lu.assertEquals(candidate({5, 6, 7, 3, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, '4'}), false)\n    lu.assertEquals(candidate({3, 2, 1, 4, 5}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local first_type = type(test_tuple[1])\n    for i = 2, #test_tuple do\n        if type(test_tuple[i]) ~= first_type then\n            return false\n        end\n    end\n    return true\nend",
    "    local type_set = {}\n    for _, v in ipairs(test_tuple) do\n        table.insert(type_set, type(v))\n    end\n    local type_set_size = #type_set\n    for i = 1, type_set_size do\n        for j = i + 1, type_set_size do\n            if type_set[i] ~= type_set[j] then\n                return false\n            end\n        end\n    end\n    return true\nend",
    "    local type_table = {}\n    for i,v in ipairs(test_tuple) do\n        if type_table[type(v)] == nil then\n            type_table[type(v)] = 1\n        else\n            type_table[type(v)] = type_table[type(v)] + 1\n        end\n    end\n    local count = 0\n    for k,v in pairs(type_table) do\n        count = count + 1\n    end\n    if count == 1 then\n        return true\n    else\n        return false\n    end\nend",
    "    local first_type = type(test_tuple[1])\n    for _, val in ipairs(test_tuple) do\n        if type(val) ~= first_type then\n            return false\n        end\n    end\n    return true\nend",
    "    local first_type = type(test_tuple[1])\n    for _, value in ipairs(test_tuple) do\n        if type(value) ~= first_type then\n            return false\n        end\n    end\n    return true\nend",
    "    local first_type = type(test_tuple[1])\n    for _, v in ipairs(test_tuple) do\n        if type(v) ~= first_type then\n            return false\n        end\n    end\n    return true\nend",
    "    local first_type = type(test_tuple[1])\n    for i = 2, #test_tuple do\n        if type(test_tuple[i]) ~= first_type then\n            return false\n        end\n    end\n    return true\nend",
    "    local first_type = type(test_tuple[1])\n    for _, v in pairs(test_tuple) do\n        if type(v) ~= first_type then\n            return false\n        end\n    end\n    return true\nend",
    "    local type_tuple = {}\n    for i = 1, #test_tuple do\n        type_tuple[i] = type(test_tuple[i])\n    end\n    for i = 1, #type_tuple do\n        if type_tuple[i] ~= type_tuple[1] then\n            return false\n        end\n    end\n    return true\nend",
    "    local first_type = type(test_tuple[1])\n    for i = 2, #test_tuple do\n        if type(test_tuple[i]) ~= first_type then\n            return false\n        end\n    end\n    return true\nend",
    "    local type_table = {}\n    for i, v in ipairs(test_tuple) do\n        if type_table[type(v)] == nil then\n            type_table[type(v)] = 1\n        else\n            type_table[type(v)] = type_table[type(v)] + 1\n        end\n    end\n    local count = 0\n    for k, v in pairs(type_table) do\n        count = count + 1\n    end\n    if count == 1 then\n        return true\n    else\n        return false\n    end\nend",
    "    local first_type = type(test_tuple[1])\n    for i = 2, #test_tuple do\n        if type(test_tuple[i]) ~= first_type then\n            return false\n        end\n    end\n    return true\nend",
    "    local first_type = type(test_tuple[1])\n    for _, v in ipairs(test_tuple) do\n        if type(v) ~= first_type then\n            return false\n        end\n    end\n    return true\nend",
    "    local first_type = type(test_tuple[1])\n    for i = 2, #test_tuple do\n        if type(test_tuple[i]) ~= first_type then\n            return false\n        end\n    end\n    return true\nend",
    "    local type_tuple = {}\n    for i,v in ipairs(test_tuple) do\n        type_tuple[i] = type(v)\n    end\n    local type_tuple_set = {}\n    for _,v in ipairs(type_tuple) do\n        type_tuple_set[v] = true\n    end\n    if #type_tuple_set == 1 then\n        return true\n    else\n        return false\n    end\nend",
    "\tlocal type_table = {}\n\tfor i,v in ipairs(test_tuple) do\n\t\tif type_table[type(v)] == nil then\n\t\t\ttype_table[type(v)] = 1\n\t\telse\n\t\t\ttype_table[type(v)] = type_table[type(v)] + 1\n\t\tend\n\tend\n\tif #type_table == 1 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    local first_type = type(test_tuple[1])\n    for i = 2, #test_tuple do\n        if type(test_tuple[i]) ~= first_type then\n            return false\n        end\n    end\n    return true\nend",
    "    local first_type = type(test_tuple[1])\n    for i = 2, #test_tuple do\n        if type(test_tuple[i]) ~= first_type then\n            return false\n        end\n    end\n    return true\nend",
    "    local first_type = type(test_tuple[1])\n    for i = 2, #test_tuple do\n        if type(test_tuple[i]) ~= first_type then\n            return false\n        end\n    end\n    return true\nend",
    "    local first_type = type(test_tuple[1])\n    for _, v in ipairs(test_tuple) do\n        if type(v) ~= first_type then\n            return false\n        end\n    end\n    return true\nend"
  ]
}