{
  "name": "mbpp_296_get_Inv_Count",
  "language": "lua",
  "prompt": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if (arr[i] > arr[j]) then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr - 1 do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[j] < arr[i] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif (arr[i] > arr[j]) then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr - 1 do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr - 1 do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr - 1 do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[j] < arr[i] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i=1, #arr do\n        for j=i+1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr - 1 do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n   local inv_count = 0\n   for i = 1, #arr do\n      for j = i + 1, #arr do\n         if arr[i] > arr[j] then\n            inv_count = inv_count + 1\n         end\n      end\n   end\n   return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr - 1 do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[j] < arr[i] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal count = 0\n\tlocal len = #arr\n\tfor i = 1, len do\n\t\tfor j = i + 1, len do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr - 1 do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[j] < arr[i] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i+1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local count = 0\n    for i = 1, #arr - 1 do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local count = 0\n    for i = 1, #arr - 1 do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr - 1 do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i=1,#arr do\n        for j=i+1,#arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n   local inv_count = 0\n   for i = 1, #arr do\n      for j = i + 1, #arr do\n         if arr[i] > arr[j] then\n            inv_count = inv_count + 1\n         end\n      end\n   end\n   return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if (arr[i] > arr[j]) then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if (arr[i] > arr[j]) then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr - 1 do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr - 1 do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr - 1 do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123992,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n  local inv_count = 0\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] > arr[j] then\n        inv_count = inv_count + 1\n      end\n    end\n  end\n  return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if (arr[i] > arr[j]) then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n\tlocal inv_count = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tinv_count = inv_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n    local inv_count = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] > arr[j] then\n                inv_count = inv_count + 1\n            end\n        end\n    end\n    return inv_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}