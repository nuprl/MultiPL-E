{
  "name": "mbpp_401_add_nested_tuples",
  "language": "lua",
  "prompt": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal result = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tup1) do\n        result[i] = v + test_tup2[i]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend",
    "    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend",
    "    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend",
    "    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result_tup\nend",
    "    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result_tup\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend",
    "\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend",
    "\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend",
    "\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend"
  ]
}