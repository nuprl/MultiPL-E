{
  "name": "mbpp_249_intersection_array",
  "language": "lua",
  "prompt": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for i2, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection = {}\n    for _, num in ipairs(array_nums1) do\n        if table.contains(array_nums2, num) then\n            table.insert(intersection, num)\n        end\n    end\n    return intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0i_cw187.lua:5: attempt to call field 'contains' (a nil value)\nstack traceback:\n\t/tmp/tmp0i_cw187.lua:5: in function 'candidate'\n\t/tmp/tmp0i_cw187.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection = {}\n    for i, num1 in ipairs(array_nums1) do\n        for j, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(intersection, num1)\n            end\n        end\n    end\n    return intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, k in ipairs(array_nums2) do\n            if v == k then\n                table.insert(result, v)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, k in ipairs(array_nums2) do\n            if v == k then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_nums = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(array_nums, v)\n                break\n            end\n        end\n    end\n    return array_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_nums = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(array_nums, v)\n            end\n        end\n    end\n    return array_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(intersection, num1)\n                break\n            end\n        end\n    end\n    return intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(array_result, num1)\n                break\n            end\n        end\n    end\n    return array_result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num in ipairs(array_nums1) do\n        if table.indexof(array_nums2, num) then\n            table.insert(result, num)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjg6q93vh.lua:5: attempt to call field 'indexof' (a nil value)\nstack traceback:\n\t/tmp/tmpjg6q93vh.lua:5: in function 'candidate'\n\t/tmp/tmpjg6q93vh.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    local hash = {}\n    for _, v in ipairs(array_nums1) do\n        hash[v] = true\n    end\n    for _, v in ipairs(array_nums2) do\n        if hash[v] then\n            table.insert(result, v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection = {}\n    for i, v in ipairs(array_nums1) do\n        if table.contains(array_nums2, v) then\n            table.insert(intersection, v)\n        end\n    end\n    return intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo0gzyue0.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpo0gzyue0.lua:5: in local 'candidate'\n\t/tmp/tmpo0gzyue0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_nums = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(array_nums, v)\n            end\n        end\n    end\n    return array_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in pairs(array_nums1) do\n        for _, num2 in pairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(intersection, array_nums1[i])\n            end\n        end\n    end\n    return intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection = {}\n    for i, v in ipairs(array_nums1) do\n        for j, w in ipairs(array_nums2) do\n            if v == w then\n                table.insert(intersection, v)\n            end\n        end\n    end\n    return intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(array_result, v)\n            end\n        end\n    end\n    return array_result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n  local result = {}\n  for _, num1 in ipairs(array_nums1) do\n    for _, num2 in ipairs(array_nums2) do\n      if num1 == num2 then\n        table.insert(result, num1)\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n\tlocal intersection = {}\n\tfor i, v in ipairs(array_nums1) do\n\t\tfor j, w in ipairs(array_nums2) do\n\t\t\tif v == w then\n\t\t\t\ttable.insert(intersection, v)\n\t\t\tend\n\t\tend\n\tend\n\treturn intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, v in ipairs(array_nums1) do\n        for _, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(intersection, num1)\n            end\n        end\n    end\n    return intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    local hash = {}\n    for _, num in ipairs(array_nums1) do\n        hash[num] = true\n    end\n    for _, num in ipairs(array_nums2) do\n        if hash[num] then\n            result[#result + 1] = num\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_nums = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(array_nums, num1)\n                break\n            end\n        end\n    end\n    return array_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(intersection, num1)\n            end\n        end\n    end\n    return intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, k in ipairs(array_nums2) do\n            if v == k then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, v in ipairs(array_nums1) do\n        for _, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(intersection, array_nums1[i])\n            end\n        end\n    end\n    return intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, k in ipairs(array_nums2) do\n            if v == k then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, v in ipairs(array_nums1) do\n        if table.indexof(array_nums2, v) then\n            table.insert(result, v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp45hdpuw4.lua:5: attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmp45hdpuw4.lua:5: in local 'candidate'\n\t/tmp/tmp45hdpuw4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_nums = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(array_nums, array_nums1[i])\n            end\n        end\n    end\n    return array_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in pairs(array_nums1) do\n        for _, num2 in pairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(intersection, num1)\n            end\n        end\n    end\n    return intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, num1 in ipairs(array_nums1) do\n        for j, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, v in ipairs(array_nums1) do\n        for _, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection = {}\n    local hash = {}\n    for _, num in ipairs(array_nums1) do\n        hash[num] = true\n    end\n    for _, num in ipairs(array_nums2) do\n        if hash[num] then\n            table.insert(intersection, num)\n        end\n    end\n    return intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num == num2 then\n                table.insert(result, num)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n\tlocal result = {}\n\tfor i, v in ipairs(array_nums1) do\n\t\tfor j, v2 in ipairs(array_nums2) do\n\t\t\tif v == v2 then\n\t\t\t\ttable.insert(result, v)\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, num1 in ipairs(array_nums1) do\n        for j, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_nums = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(array_nums, num1)\n                break\n            end\n        end\n    end\n    return array_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_nums = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(array_nums, v)\n            end\n        end\n    end\n    return array_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num in ipairs(array_nums1) do\n        if table.indexof(array_nums2, num) then\n            table.insert(result, num)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjg6q93vh.lua:5: attempt to call field 'indexof' (a nil value)\nstack traceback:\n\t/tmp/tmpjg6q93vh.lua:5: in function 'candidate'\n\t/tmp/tmpjg6q93vh.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_nums = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(array_nums, v)\n            end\n        end\n    end\n    return array_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(array_result, v)\n                break\n            end\n        end\n    end\n    return array_result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, k in ipairs(array_nums2) do\n            if v == k then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num in ipairs(array_nums1) do\n        if table.contains(array_nums2, num) then\n            table.insert(result, num)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnvsjxo3v.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpnvsjxo3v.lua:5: in local 'candidate'\n\t/tmp/tmpnvsjxo3v.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_nums = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(array_nums, array_nums1[i])\n            end\n        end\n    end\n    return array_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, v in ipairs(array_nums1) do\n        for _, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_nums = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(array_nums, v)\n            end\n        end\n    end\n    return array_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num in ipairs(array_nums1) do\n        if table.indexof(array_nums2, num) then\n            table.insert(result, num)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjg6q93vh.lua:5: attempt to call field 'indexof' (a nil value)\nstack traceback:\n\t/tmp/tmpjg6q93vh.lua:5: in function 'candidate'\n\t/tmp/tmpjg6q93vh.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                result[#result + 1] = array_nums1[i]\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, k in ipairs(array_nums2) do\n            if v == k then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, num1 in ipairs(array_nums1) do\n        for j, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection = {}\n    for i, num in ipairs(array_nums1) do\n        if contains(array_nums2, num) then\n            table.insert(intersection, num)\n        end\n    end\n    return intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgik6s_h9.lua:5: attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpgik6s_h9.lua:5: in local 'candidate'\n\t/tmp/tmpgik6s_h9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, v in ipairs(array_nums1) do\n        for _, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection_array = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(intersection_array, num1)\n            end\n        end\n    end\n    return intersection_array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection_array = {}\n    for i, v in ipairs(array_nums1) do\n        for j, k in ipairs(array_nums2) do\n            if v == k then\n                table.insert(intersection_array, v)\n            end\n        end\n    end\n    return intersection_array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(array_result, num1)\n                break\n            end\n        end\n    end\n    return array_result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n  local result = {}\n  for _, num1 in ipairs(array_nums1) do\n    for _, num2 in ipairs(array_nums2) do\n      if num1 == num2 then\n        table.insert(result, num1)\n        break\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, num1 in ipairs(array_nums1) do\n        for j, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, k in ipairs(array_nums2) do\n            if v == k then\n                table.insert(result, v)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection_array = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(intersection_array, num1)\n            end\n        end\n    end\n    return intersection_array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n  local result = {}\n  for i = 1, #array_nums1 do\n    for j = 1, #array_nums2 do\n      if array_nums1[i] == array_nums2[j] then\n        table.insert(result, array_nums1[i])\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    local map = {}\n    for i, v in ipairs(array_nums1) do\n        map[v] = true\n    end\n    for i, v in ipairs(array_nums2) do\n        if map[v] then\n            table.insert(result, v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_result = {}\n    for _, v in ipairs(array_nums1) do\n        if table.indexof(array_nums2, v) then\n            table.insert(array_result, v)\n        end\n    end\n    return array_result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprqoktgmn.lua:5: attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmprqoktgmn.lua:5: in local 'candidate'\n\t/tmp/tmprqoktgmn.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, num1 in ipairs(array_nums1) do\n        for j, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                result[#result + 1] = num1\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n  local intersection = {}\n  for i = 1, #array_nums1 do\n    for j = 1, #array_nums2 do\n      if array_nums1[i] == array_nums2[j] then\n        table.insert(intersection, array_nums1[i])\n      end\n    end\n  end\n  return intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, w in ipairs(array_nums2) do\n            if v == w then\n                table.insert(result, v)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection = {}\n    for i, v in ipairs(array_nums1) do\n        for j, w in ipairs(array_nums2) do\n            if v == w then\n                table.insert(intersection, v)\n            end\n        end\n    end\n    return intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_nums = {}\n    for i, v in ipairs(array_nums1) do\n        for j, k in ipairs(array_nums2) do\n            if v == k then\n                table.insert(array_nums, v)\n                break\n            end\n        end\n    end\n    return array_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, k in ipairs(array_nums2) do\n            if v == k then\n                table.insert(result, v)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_nums = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(array_nums, array_nums1[i])\n            end\n        end\n    end\n    return array_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection_array = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(intersection_array, num1)\n            end\n        end\n    end\n    return intersection_array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_intersection = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(array_intersection, num1)\n            end\n        end\n    end\n    return array_intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_nums = {}\n    for i, v in ipairs(array_nums1) do\n        for j, k in ipairs(array_nums2) do\n            if v == k then\n                table.insert(array_nums, v)\n            end\n        end\n    end\n    return array_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_intersection = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                array_intersection[#array_intersection + 1] = array_nums1[i]\n            end\n        end\n    end\n    return array_intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n  local result = {}\n  for i = 1, #array_nums1 do\n    for j = 1, #array_nums2 do\n      if array_nums1[i] == array_nums2[j] then\n        table.insert(result, array_nums1[i])\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_intersection = {}\n    for i, num1 in ipairs(array_nums1) do\n        for j, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(array_intersection, num1)\n            end\n        end\n    end\n    return array_intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(intersection, num1)\n            end\n        end\n    end\n    return intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_nums = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(array_nums, array_nums1[i])\n            end\n        end\n    end\n    return array_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_nums = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(array_nums, v)\n                break\n            end\n        end\n    end\n    return array_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    local hash = {}\n    for i, v in ipairs(array_nums1) do\n        hash[v] = true\n    end\n    for i, v in ipairs(array_nums2) do\n        if hash[v] then\n            table.insert(result, v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(intersection, num1)\n            end\n        end\n    end\n    return intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7dl2ply2.lua:13: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_intersection = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(array_intersection, num1)\n            end\n        end\n    end\n    return array_intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, v in ipairs(array_nums1) do\n        for _, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_nums = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(array_nums, v)\n            end\n        end\n    end\n    return array_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_nums = {}\n    for i, v in ipairs(array_nums1) do\n        for j, k in ipairs(array_nums2) do\n            if v == k then\n                table.insert(array_nums, v)\n                break\n            end\n        end\n    end\n    return array_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection = {}\n    for _, v in ipairs(array_nums1) do\n        if table.contains(array_nums2, v) then\n            table.insert(intersection, v)\n        end\n    end\n    return intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_kbox666.lua:5: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp_kbox666.lua:5: in local 'candidate'\n\t/tmp/tmp_kbox666.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection = {}\n    for _, num in ipairs(array_nums1) do\n        if table.contains(array_nums2, num) then\n            table.insert(intersection, num)\n        end\n    end\n    return intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0i_cw187.lua:5: attempt to call field 'contains' (a nil value)\nstack traceback:\n\t/tmp/tmp0i_cw187.lua:5: in function 'candidate'\n\t/tmp/tmp0i_cw187.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(array_result, num1)\n            end\n        end\n    end\n    return array_result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local array_result = {}\n    for i, num1 in ipairs(array_nums1) do\n        for j, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(array_result, num1)\n                break\n            end\n        end\n    end\n    return array_result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i = 1, #array_nums1 do\n        for j = 1, #array_nums2 do\n            if array_nums1[i] == array_nums2[j] then\n                table.insert(result, array_nums1[i])\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(result, num1)\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n\tlocal result = {}\n\tfor _, num1 in ipairs(array_nums1) do\n\t\tfor _, num2 in ipairs(array_nums2) do\n\t\t\tif num1 == num2 then\n\t\t\t\ttable.insert(result, num1)\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n  local array_nums = {}\n  for _, num1 in ipairs(array_nums1) do\n    for _, num2 in ipairs(array_nums2) do\n      if num1 == num2 then\n        table.insert(array_nums, num1)\n      end\n    end\n  end\n  return array_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local intersection = {}\n    for _, num1 in ipairs(array_nums1) do\n        for _, num2 in ipairs(array_nums2) do\n            if num1 == num2 then\n                table.insert(intersection, num1)\n            end\n        end\n    end\n    return intersection\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123218,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n    local result = {}\n    for i, v in ipairs(array_nums1) do\n        for j, v2 in ipairs(array_nums2) do\n            if v == v2 then\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027731,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}