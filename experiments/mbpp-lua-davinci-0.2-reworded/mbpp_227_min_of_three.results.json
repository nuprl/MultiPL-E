{
  "name": "mbpp_227_min_of_three",
  "language": "lua",
  "prompt": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  local min = a\n  if b < min then\n    min = b\n  end\n  if c < min then\n    min = c\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    local min = a\n    if b < min then\n        min = b\n    end\n    if c < min then\n        min = c\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b then\n    if a < c then\n      return a\n    else\n      return c\n    end\n  else\n    if b < c then\n      return b\n    else\n      return c\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n\tif a < b and a < c then\n\t\treturn a\n\telseif b < a and b < c then\n\t\treturn b\n\telse\n\t\treturn c\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  local min = a\n  if b < min then\n    min = b\n  end\n  if c < min then\n    min = c\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  local min = a\n  if b < min then min = b end\n  if c < min then min = c end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    local min = a\n    if b < min then\n        min = b\n    end\n    if c < min then\n        min = c\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n\tif a <= b and a <= c then\n\t\treturn a\n\telseif b <= a and b <= c then\n\t\treturn b\n\telse\n\t\treturn c\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b then\n    if a < c then\n      return a\n    else\n      return c\n    end\n  else\n    if b < c then\n      return b\n    else\n      return c\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n\tif a < b then\n\t\tif a < c then\n\t\t\treturn a\n\t\telse\n\t\t\treturn c\n\t\tend\n\telse\n\t\tif b < c then\n\t\t\treturn b\n\t\telse\n\t\t\treturn c\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n\treturn math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    local min = a\n    if b < min then min = b end\n    if c < min then min = c end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b then\n    if a < c then\n      return a\n    else\n      return c\n    end\n  else\n    if b < c then\n      return b\n    else\n      return c\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  local min = a\n  if b < min then min = b end\n  if c < min then min = c end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n\tif a < b and a < c then\n\t\treturn a\n\telseif b < a and b < c then\n\t\treturn b\n\telse\n\t\treturn c\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b then\n    if a < c then\n      return a\n    else\n      return c\n    end\n  else\n    if b < c then\n      return b\n    else\n      return c\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  local min = a\n  if b < min then min = b end\n  if c < min then min = c end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  local min = a\n  if b < min then min = b end\n  if c < min then min = c end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    local min = a\n    if b < min then min = b end\n    if c < min then min = c end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  local min = a\n  if b < min then min = b end\n  if c < min then min = c end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a <= b and a <= c then\n        return a\n    elseif b <= a and b <= c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n\tif a <= b and a <= c then\n\t\treturn a\n\telseif b <= a and b <= c then\n\t\treturn b\n\telse\n\t\treturn c\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b then\n        if a < c then\n            return a\n        else\n            return c\n        end\n    else\n        if b < c then\n            return b\n        else\n            return c\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    local min = a\n    if b < min then\n        min = b\n    end\n    if c < min then\n        min = c\n    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  local min = a\n  if b < min then\n    min = b\n  end\n  if c < min then\n    min = c\n  end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  local min = a\n  if b < min then min = b end\n  if c < min then min = c end\n  return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a < b and a < c then\n    return a\n  elseif b < a and b < c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a < b and a < c then\n        return a\n    elseif b < a and b < c then\n        return b\n    else\n        return c\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    return math.min(a, b, c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027793,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n  if a <= b and a <= c then\n    return a\n  elseif b <= a and b <= c then\n    return b\n  else\n    return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n\tif a <= b and a <= c then\n\t\treturn a\n\telseif b <= a and b <= c then\n\t\treturn b\n\telse\n\t\treturn c\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122708,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}