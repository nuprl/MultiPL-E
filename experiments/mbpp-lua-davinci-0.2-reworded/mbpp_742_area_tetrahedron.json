{
  "name": "mbpp_742_area_tetrahedron",
  "language": "lua",
  "prompt": "-- Write a function to caluclate the area of a tetrahedron.\nlocal function area_tetrahedron(side)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = area_tetrahedron\n    lu.assertEquals(candidate(3), 15.588457268119894)\n    lu.assertEquals(candidate(20), 692.8203230275509)\n    lu.assertEquals(candidate(10), 173.20508075688772)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  return math.sqrt(3) * side ^ 2\nend",
    "\treturn math.sqrt(3) * side^2\nend",
    "    return math.sqrt(3) * side^2\nend",
    "  return math.sqrt(3) * side^2\nend",
    "    return math.sqrt(3) * side * side\nend",
    "    return math.sqrt(3) * side^2\nend",
    "\treturn math.sqrt(3) * side * side\nend",
    "  return math.sqrt(3) * math.pow(side, 2)\nend",
    "  local s = side\n  local a = math.sqrt(3) * s * s\n  return a\nend",
    "  return math.sqrt(3) * side^2\nend",
    "  local area = math.sqrt(3) * math.pow(side, 2)\n  return area\nend",
    "    return math.sqrt(3) * side * side\nend",
    "\treturn math.sqrt(3) * side * side\nend",
    "  return math.sqrt(3) * side^2\nend",
    "    return math.sqrt(3) * side * side\nend",
    "\treturn math.sqrt(3) * side * side\nend",
    "    local s = side\n    local a = math.sqrt(3) * s * s / 4\n    return a\nend",
    "  return math.sqrt(3) * side * side\nend",
    "\treturn math.sqrt(3) * side^2\nend",
    "  return math.sqrt(3) * side * side\nend"
  ]
}