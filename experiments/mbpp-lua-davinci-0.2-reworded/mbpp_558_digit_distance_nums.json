{
  "name": "mbpp_558_digit_distance_nums",
  "language": "lua",
  "prompt": "-- Write a luathon function to find the sum of the per-digit difference between two integers.\nlocal function digit_distance_nums(n1, n2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digit_distance_nums\n    lu.assertEquals(candidate(1, 2), 1)\n    lu.assertEquals(candidate(23, 56), 6)\n    lu.assertEquals(candidate(123, 256), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  -- TODO: Write this function.\nend",
    "  local sum = 0\n  local n1_digits = get_digits(n1)\n  local n2_digits = get_digits(n2)\n  for i = 1, #n1_digits do\n    sum = sum + math.abs(n1_digits[i] - n2_digits[i])\n  end\n  return sum\nend",
    "  local sum = 0\n  local n1_digits = {}\n  local n2_digits = {}\n  local n1_len = 0\n  local n2_len = 0",
    "  local sum = 0\n  for i = 1, #tostring(n1) do\n    local d1 = tonumber(tostring(n1):sub(i, i))\n    local d2 = tonumber(tostring(n2):sub(i, i))\n    sum = sum + math.abs(d1 - d2)\n  end\n  return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  for i = 1, #n1_str do\n    sum = sum + math.abs(tonumber(n1_str:sub(i, i)) - tonumber(n2_str:sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  local n1_len = #n1_str\n  local n2_len = #n2_str\n  local n1_idx = 1\n  local n2_idx = 1\n  while n1_idx <= n1_len and n2_idx <= n2_len do\n    local n1_digit = tonumber(n1_str:sub(n1_idx, n1_idx))\n    local n2_digit = tonumber(n2_str:sub(n2_idx, n2_idx))\n    sum = sum + math.abs(n1_digit - n2_digit)\n    n1_idx = n1_idx + 1\n    n2_idx = n2_idx + 1\n  end\n  return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  for i = 1, #n1_str do\n    local n1_digit = tonumber(n1_str:sub(i, i))\n    local n2_digit = tonumber(n2_str:sub(i, i))\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "  local sum = 0\n  while n1 > 0 or n2 > 0 do\n    local d1 = n1 % 10\n    local d2 = n2 % 10\n    sum = sum + math.abs(d1 - d2)\n    n1 = math.floor(n1 / 10)\n    n2 = math.floor(n2 / 10)\n  end\n  return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  local n1_len = #n1_str\n  local n2_len = #n2_str\n  local max_len = math.max(n1_len, n2_len)\n  for i = 1, max_len do\n    local n1_digit = tonumber(n1_str:sub(i, i)) or 0\n    local n2_digit = tonumber(n2_str:sub(i, i)) or 0\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(n1:sub(i, i) - n2:sub(i, i))\n  end\n  return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  for i = 1, #n1_str do\n    local n1_digit = tonumber(n1_str:sub(i, i))\n    local n2_digit = tonumber(n2_str:sub(i, i))\n    sum = sum + math.abs(n1_digit - n2_digit)\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(tonumber(n1:sub(i, i)) - tonumber(n2:sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #n1 do\n    sum = sum + math.abs(n1:sub(i, i) - n2:sub(i, i))\n  end\n  return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  for i = 1, #n1_str do\n    sum = sum + math.abs(tonumber(n1_str:sub(i, i)) - tonumber(n2_str:sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  while n1 > 0 or n2 > 0 do\n    local d1 = n1 % 10\n    local d2 = n2 % 10\n    sum = sum + math.abs(d1 - d2)\n    n1 = math.floor(n1 / 10)\n    n2 = math.floor(n2 / 10)\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #tostring(n1) do\n    local d1 = tonumber(tostring(n1):sub(i, i))\n    local d2 = tonumber(tostring(n2):sub(i, i))\n    sum = sum + math.abs(d1 - d2)\n  end\n  return sum\nend",
    "  local sum = 0\n  local n1_str = tostring(n1)\n  local n2_str = tostring(n2)\n  for i = 1, #n1_str do\n    sum = sum + math.abs(tonumber(n1_str:sub(i, i)) - tonumber(n2_str:sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  for i = 1, #tostring(n1) do\n    sum = sum + math.abs(tonumber(tostring(n1):sub(i, i)) - tonumber(tostring(n2):sub(i, i)))\n  end\n  return sum\nend",
    "  local sum = 0\n  while n1 > 0 or n2 > 0 do\n    local d1 = n1 % 10\n    local d2 = n2 % 10\n    sum = sum + math.abs(d1 - d2)\n    n1 = math.floor(n1 / 10)\n    n2 = math.floor(n2 / 10)\n  end\n  return sum\nend",
    "    local sum = 0\n    for i = 1, math.max(#tostring(n1), #tostring(n2)) do\n        local d1 = tonumber(tostring(n1):sub(i, i)) or 0\n        local d2 = tonumber(tostring(n2):sub(i, i)) or 0\n        sum = sum + math.abs(d1 - d2)\n    end\n    return sum\nend"
  ]
}