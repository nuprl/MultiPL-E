{
  "name": "mbpp_417_group_tuples",
  "language": "lua",
  "prompt": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for i,v in ipairs(Input) do\n        local key = v[1]\n        if not Output[key] then Output[key] = {} end\n        table.insert(Output[key], v)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65ucug8g.lua:15: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65ucug8g.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Result = {}\n\tfor _, Tuple in ipairs(Input) do\n\t\tlocal Key = Tuple[1]\n\t\tif not Result[Key] then\n\t\t\tResult[Key] = {}\n\t\tend\n\t\ttable.insert(Result[Key], Tuple)\n\tend\n\treturn Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2__jjssg.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp2__jjssg.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Result = {}\n\tfor _, Tuple in ipairs(Input) do\n\t\tlocal Key = Tuple[1]\n\t\tif not Result[Key] then\n\t\t\tResult[Key] = {}\n\t\tend\n\t\ttable.insert(Result[Key], Tuple)\n\tend\n\treturn Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2__jjssg.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp2__jjssg.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local First = Tuple[1]\n        if not Result[First] then\n            Result[First] = {}\n        end\n        table.insert(Result[First], Tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvqfaj1a.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpdvqfaj1a.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6voluj9o.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6voluj9o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local First = Tuple[1]\n        if not Result[First] then\n            Result[First] = {}\n        end\n        table.insert(Result[First], Tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvqfaj1a.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpdvqfaj1a.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, Tuple in ipairs(Input) do\n        local Key = Tuple[1]\n        if Output[Key] == nil then\n            Output[Key] = {}\n        end\n        table.insert(Output[Key], Tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpok_8tz0m.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpok_8tz0m.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, Tuple in ipairs(Input) do\n        local Key = Tuple[1]\n        local Value = Tuple[2]\n        if Output[Key] == nil then\n            Output[Key] = { Value }\n        else\n            table.insert(Output[Key], Value)\n        end\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc6r2noi.lua:19: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmphc6r2noi.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local Key = Tuple[1]\n        local Value = Tuple[2]\n        if Result[Key] == nil then\n            Result[Key] = {}\n        end\n        table.insert(Result[Key], Value)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0j26i4_n.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp0j26i4_n.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Output = {}\n\tfor _,v in ipairs(Input) do\n\t\tlocal key = v[1]\n\t\tif not Output[key] then\n\t\t\tOutput[key] = {}\n\t\tend\n\t\ttable.insert(Output[key], v)\n\tend\n\treturn Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7v2j_wtb.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp7v2j_wtb.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Result = {}\n  for _, Tuple in ipairs(Input) do\n    local First = Tuple[1]\n    if not Result[First] then\n      Result[First] = {}\n    end\n    table.insert(Result[First], Tuple)\n  end\n  return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewcmjpzv.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpewcmjpzv.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        local value = tuple[2]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], value)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsp76wox2.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmpsp76wox2.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, v in ipairs(Input) do\n        local Key = v[1]\n        if not Output[Key] then\n            Output[Key] = {}\n        end\n        table.insert(Output[Key], v)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpom8_yqra.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpom8_yqra.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local First = Tuple[1]\n        if not Result[First] then\n            Result[First] = {}\n        end\n        table.insert(Result[First], Tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvqfaj1a.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpdvqfaj1a.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _,tuple in ipairs(Input) do\n        local key = tuple[1]\n        local value = tuple[2]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], value)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpic3qd3sd.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmpic3qd3sd.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _,v in ipairs(Input) do\n        local key = v[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], v)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkg6ntek4.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpkg6ntek4.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Output = {}\n\tfor _,v in ipairs(Input) do\n\t\tlocal key = v[1]\n\t\tif Output[key] == nil then\n\t\t\tOutput[key] = {}\n\t\tend\n\t\ttable.insert(Output[key], v)\n\tend\n\treturn Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5gluyfvz.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp5gluyfvz.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6voluj9o.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6voluj9o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local Key = Tuple[1]\n        local Value = Tuple[2]\n        if Result[Key] == nil then\n            Result[Key] = { Value }\n        else\n            table.insert(Result[Key], Value)\n        end\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprssegeld.lua:19: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmprssegeld.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, Tuple in ipairs(Input) do\n    local Key = Tuple[1]\n    local Value = Tuple[2]\n    if not Output[Key] then\n      Output[Key] = {}\n    end\n    table.insert(Output[Key], Value)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjpsnv5x5.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmpjpsnv5x5.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Output = {}\n\tfor _, v in ipairs(Input) do\n\t\tlocal key = v[1]\n\t\tif Output[key] == nil then\n\t\t\tOutput[key] = {}\n\t\tend\n\t\ttable.insert(Output[key], v)\n\tend\n\treturn Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp627n2rz7.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp627n2rz7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _,v in ipairs(Input) do\n    local key = v[1]\n    if not Output[key] then\n      Output[key] = {}\n    end\n    table.insert(Output[key], v)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpur_7qyx0.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpur_7qyx0.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local first = tuple[1]\n    if not Output[first] then\n      Output[first] = {}\n    end\n    table.insert(Output[first], tuple)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfhf_cl4.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmptfhf_cl4.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, v in ipairs(Input) do\n    local key = v[1]\n    if not Output[key] then\n      Output[key] = {}\n    end\n    table.insert(Output[key], v)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpir2koi4t.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpir2koi4t.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Output = {}\n\tfor _,Tuple in ipairs(Input) do\n\t\tlocal Key = Tuple[1]\n\t\tif not Output[Key] then\n\t\t\tOutput[Key] = {}\n\t\tend\n\t\ttable.insert(Output[Key], Tuple)\n\tend\n\treturn Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkpkjpitl.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpkpkjpitl.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local Key = Tuple[1]\n        local Value = Tuple[2]\n        if not Result[Key] then\n            Result[Key] = {}\n        end\n        table.insert(Result[Key], Value)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_sls5ssv.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp_sls5ssv.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Output = {}\n\tfor _, tuple in ipairs(Input) do\n\t\tlocal key = tuple[1]\n\t\tif not Output[key] then\n\t\t\tOutput[key] = {}\n\t\tend\n\t\ttable.insert(Output[key], tuple)\n\tend\n\treturn Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_x962yi.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpe_x962yi.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Result = {}\n  for _, Tuple in ipairs(Input) do\n    local Key = Tuple[1]\n    if not Result[Key] then\n      Result[Key] = {}\n    end\n    table.insert(Result[Key], Tuple)\n  end\n  return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsczr567g.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpsczr567g.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local First = Tuple[1]\n        if not Result[First] then\n            Result[First] = {}\n        end\n        table.insert(Result[First], Tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvqfaj1a.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpdvqfaj1a.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local key = tuple[1]\n    local value = tuple[2]\n    Output[key] = Output[key] or {}\n    table.insert(Output[key], value)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprobkp1aj.lua:16: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmprobkp1aj.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, t in ipairs(Input) do\n    local key = t[1]\n    if Output[key] == nil then\n      Output[key] = {}\n    end\n    table.insert(Output[key], t)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2wye373s.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp2wye373s.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6voluj9o.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6voluj9o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, Tuple in ipairs(Input) do\n    local First = Tuple[1]\n    if not Output[First] then\n      Output[First] = {}\n    end\n    table.insert(Output[First], Tuple)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxl0leci2.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpxl0leci2.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local key = tuple[1]\n    local value = tuple[2]\n    if not Output[key] then\n      Output[key] = {}\n    end\n    table.insert(Output[key], value)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpppf_88yp.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmpppf_88yp.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local Key = Tuple[1]\n        local Value = Tuple[2]\n        if Result[Key] == nil then\n            Result[Key] = {}\n        end\n        table.insert(Result[Key], Value)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0j26i4_n.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp0j26i4_n.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, v in ipairs(Input) do\n        local key = v[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], v)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoj79xqzm.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpoj79xqzm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for i = 1, #Input do\n        local First = Input[i][1]\n        if Output[First] == nil then\n            Output[First] = {}\n        end\n        table.insert(Output[First], Input[i])\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4t9iu49d.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp4t9iu49d.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local key = tuple[1]\n    if not Output[key] then\n      Output[key] = {}\n    end\n    table.insert(Output[key], tuple)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpheytyi62.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpheytyi62.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local first = tuple[1]\n        if not Output[first] then\n            Output[first] = {}\n        end\n        table.insert(Output[first], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ywveup9.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp3ywveup9.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local Key = Tuple[1]\n        if not Result[Key] then\n            Result[Key] = {}\n        end\n        table.insert(Result[Key], Tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8uvcl2y8.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp8uvcl2y8.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6voluj9o.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6voluj9o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        local value = tuple[2]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], value)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsp76wox2.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmpsp76wox2.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local Key = Tuple[1]\n        local Value = Tuple[2]\n        if not Result[Key] then\n            Result[Key] = {}\n        end\n        table.insert(Result[Key], Value)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_sls5ssv.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp_sls5ssv.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local Key = Tuple[1]\n        local Value = Tuple[2]\n        if Result[Key] == nil then\n            Result[Key] = {}\n        end\n        table.insert(Result[Key], Value)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0j26i4_n.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp0j26i4_n.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Output = {}\n\tfor _, v in ipairs(Input) do\n\t\tlocal t = v[1]\n\t\tif not Output[t] then\n\t\t\tOutput[t] = {}\n\t\tend\n\t\ttable.insert(Output[t], v)\n\tend\n\treturn Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ixkfsdg.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp5ixkfsdg.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, v in ipairs(Input) do\n        local key = v[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], v)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoj79xqzm.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpoj79xqzm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        local value = tuple[2]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], value)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5j70_z4x.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp5j70_z4x.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Result = {}\n  for _, Tuple in ipairs(Input) do\n    local First = Tuple[1]\n    if not Result[First] then\n      Result[First] = {}\n    end\n    table.insert(Result[First], Tuple)\n  end\n  return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewcmjpzv.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpewcmjpzv.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Result = {}\n  for _, Tuple in ipairs(Input) do\n    local First = Tuple[1]\n    if not Result[First] then\n      Result[First] = {}\n    end\n    table.insert(Result[First], Tuple)\n  end\n  return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewcmjpzv.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpewcmjpzv.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Result = {}\n  for _, Tuple in ipairs(Input) do\n    local First = Tuple[1]\n    if not Result[First] then\n      Result[First] = {}\n    end\n    table.insert(Result[First], Tuple)\n  end\n  return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewcmjpzv.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpewcmjpzv.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Result = {}\n  for _, Tuple in ipairs(Input) do\n    local First = Tuple[1]\n    if not Result[First] then\n      Result[First] = {}\n    end\n    table.insert(Result[First], Tuple)\n  end\n  return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewcmjpzv.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpewcmjpzv.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Result = {}\n  for _, Tuple in ipairs(Input) do\n    local First = Tuple[1]\n    if not Result[First] then\n      Result[First] = {}\n    end\n    table.insert(Result[First], Tuple)\n  end\n  return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewcmjpzv.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpewcmjpzv.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Result = {}\n  for _, Tuple in ipairs(Input) do\n    local Key = Tuple[1]\n    local Value = Tuple[2]\n    if Result[Key] == nil then\n      Result[Key] = { Value }\n    else\n      table.insert(Result[Key], Value)\n    end\n  end\n  return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdty34ovg.lua:19: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmpdty34ovg.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, Tuple in ipairs(Input) do\n        local Key = Tuple[1]\n        local Value = Tuple[2]\n        if not Output[Key] then\n            Output[Key] = {}\n        end\n        table.insert(Output[Key], Value)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dzy_695.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp4dzy_695.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6voluj9o.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6voluj9o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, Tuple in ipairs(Input) do\n        local Key = Tuple[1]\n        local Value = Tuple[2]\n        if not Output[Key] then\n            Output[Key] = {}\n        end\n        table.insert(Output[Key], Value)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dzy_695.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp4dzy_695.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local First = Tuple[1]\n        if not Result[First] then\n            Result[First] = {}\n        end\n        table.insert(Result[First], Tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvqfaj1a.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpdvqfaj1a.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        local value = tuple[2]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], value)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5j70_z4x.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp5j70_z4x.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        local value = tuple[2]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], value)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5j70_z4x.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp5j70_z4x.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Output = {}\n\tfor _, v in ipairs(Input) do\n\t\tlocal key = v[1]\n\t\tif Output[key] == nil then\n\t\t\tOutput[key] = {}\n\t\tend\n\t\ttable.insert(Output[key], v)\n\tend\n\treturn Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp627n2rz7.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp627n2rz7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Result = {}\n  for _, Tuple in ipairs(Input) do\n    local Key = Tuple[1]\n    if not Result[Key] then\n      Result[Key] = {}\n    end\n    table.insert(Result[Key], Tuple)\n  end\n  return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsczr567g.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpsczr567g.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local First = Tuple[1]\n        if not Result[First] then\n            Result[First] = {}\n        end\n        table.insert(Result[First], Tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvqfaj1a.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpdvqfaj1a.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, t in ipairs(Input) do\n        local key = t[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], t)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7g8gwxq.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpj7g8gwxq.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Result = {}\n  for _, Tuple in ipairs(Input) do\n    local First = Tuple[1]\n    local Rest = { unpack(Tuple, 2) }\n    if not Result[First] then\n      Result[First] = {}\n    end\n    table.insert(Result[First], Rest)\n  end\n  return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_e0yaxmw.lua:6: attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp_e0yaxmw.lua:6: in local 'candidate'\n\t/tmp/tmp_e0yaxmw.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Result[key] then\n            Result[key] = {}\n        end\n        table.insert(Result[key], tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9zf4kd_.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpm9zf4kd_.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local first = tuple[1]\n        if not Output[first] then\n            Output[first] = {}\n        end\n        table.insert(Output[first], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ywveup9.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp3ywveup9.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local first = tuple[1]\n    if not Output[first] then\n      Output[first] = {}\n    end\n    table.insert(Output[first], tuple)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfhf_cl4.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmptfhf_cl4.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6voluj9o.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6voluj9o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local key = tuple[1]\n    local value = tuple[2]\n    if Output[key] == nil then\n      Output[key] = {}\n    end\n    table.insert(Output[key], value)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgb3iuh84.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmpgb3iuh84.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Output = {}\n\tfor _,v in ipairs(Input) do\n\t\tlocal key = v[1]\n\t\tOutput[key] = Output[key] or {}\n\t\ttable.insert(Output[key], v)\n\tend\n\treturn Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw78psq5e.lua:15: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpw78psq5e.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Result = {}\n  for _, Tuple in ipairs(Input) do\n    local Key = Tuple[1]\n    local Value = Tuple[2]\n    if not Result[Key] then\n      Result[Key] = {}\n    end\n    table.insert(Result[Key], Value)\n  end\n  return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64vsc6af.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp64vsc6af.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6voluj9o.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6voluj9o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        local value = tuple[2]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], value)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5j70_z4x.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp5j70_z4x.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _,v in ipairs(Input) do\n    local key = v[1]\n    if not Output[key] then\n      Output[key] = {}\n    end\n    table.insert(Output[key], v)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpur_7qyx0.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpur_7qyx0.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6voluj9o.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6voluj9o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local key = tuple[1]\n    if not Output[key] then\n      Output[key] = {}\n    end\n    table.insert(Output[key], tuple)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpheytyi62.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpheytyi62.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, Tuple in ipairs(Input) do\n    local Key = Tuple[1]\n    local Value = Tuple[2]\n    if Output[Key] == nil then\n      Output[Key] = {}\n    end\n    table.insert(Output[Key], Value)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_c0v1j_.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmpi_c0v1j_.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _,tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0rdb8966.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp0rdb8966.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Output = {}\n\tfor _, tuple in ipairs(Input) do\n\t\tlocal key = tuple[1]\n\t\tif Output[key] == nil then\n\t\t\tOutput[key] = {}\n\t\tend\n\t\ttable.insert(Output[key], tuple)\n\tend\n\treturn Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdldsfd13.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpdldsfd13.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Output = {}\n\tfor _,v in ipairs(Input) do\n\t\tOutput[v[1]] = Output[v[1]] or {}\n\t\ttable.insert(Output[v[1]], v)\n\tend\n\treturn Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpty3m2dmf.lua:14: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpty3m2dmf.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local first = tuple[1]\n        if Output[first] == nil then\n            Output[first] = {}\n        end\n        table.insert(Output[first], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local Key = Tuple[1]\n        local Value = Tuple[2]\n        if not Result[Key] then\n            Result[Key] = {}\n        end\n        table.insert(Result[Key], Value)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_sls5ssv.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp_sls5ssv.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local key = tuple[1]\n    Output[key] = Output[key] or {}\n    table.insert(Output[key], tuple)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupn8nib7.lua:15: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpupn8nib7.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Output = {}\n\tfor _,v in ipairs(Input) do\n\t\tlocal key = v[1]\n\t\tif Output[key] == nil then\n\t\t\tOutput[key] = {}\n\t\tend\n\t\ttable.insert(Output[key], v)\n\tend\n\treturn Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5gluyfvz.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp5gluyfvz.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local Key = Tuple[1]\n        if not Result[Key] then\n            Result[Key] = {}\n        end\n        table.insert(Result[Key], Tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8uvcl2y8.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp8uvcl2y8.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local First = Tuple[1]\n        if not Result[First] then\n            Result[First] = {}\n        end\n        table.insert(Result[First], Tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvqfaj1a.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpdvqfaj1a.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local Key = Tuple[1]\n        local Value = Tuple[2]\n        if not Result[Key] then\n            Result[Key] = {}\n        end\n        table.insert(Result[Key], Value)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_sls5ssv.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp_sls5ssv.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        local value = tuple[2]\n        if Output[key] == nil then\n            Output[key] = {value}\n        else\n            table.insert(Output[key], value)\n        end\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkb56znng.lua:19: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmpkb56znng.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        Output[key] = Output[key] or {}\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw63dzsuh.lua:15: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpw63dzsuh.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Output = {}\n\tfor _, tuple in ipairs(Input) do\n\t\tlocal key = tuple[1]\n\t\tif not Output[key] then\n\t\t\tOutput[key] = {}\n\t\tend\n\t\ttable.insert(Output[key], tuple)\n\tend\n\treturn Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_x962yi.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpe_x962yi.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        local value = tuple[2]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], value)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5j70_z4x.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp5j70_z4x.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, v in ipairs(Input) do\n        local key = v[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], v)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_c62qmo.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6_c62qmo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Output = {}\n\tfor _,v in ipairs(Input) do\n\t\tlocal t = Output\n\t\tfor _,e in ipairs(v) do\n\t\t\tt[e] = t[e] or {}\n\t\t\tt = t[e]\n\t\tend\n\tend\n\treturn Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1r0_aoll.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={t={}}, x={y={}, z={}}}\nstack traceback:\n\t/tmp/tmp1r0_aoll.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local key = tuple[1]\n    local value = tuple[2]\n    if Output[key] == nil then\n      Output[key] = {}\n    end\n    table.insert(Output[key], value)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgb3iuh84.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmpgb3iuh84.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local key = tuple[1]\n    local value = tuple[2]\n    if Output[key] == nil then\n      Output[key] = {}\n    end\n    table.insert(Output[key], value)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgb3iuh84.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmpgb3iuh84.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Result = {}\n  for _, Tuple in ipairs(Input) do\n    local First = Tuple[1]\n    if not Result[First] then\n      Result[First] = {}\n    end\n    table.insert(Result[First], Tuple)\n  end\n  return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewcmjpzv.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpewcmjpzv.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local Key = Tuple[1]\n        if not Result[Key] then\n            Result[Key] = {}\n        end\n        table.insert(Result[Key], Tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8uvcl2y8.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp8uvcl2y8.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local key = tuple[1]\n    if not Output[key] then\n      Output[key] = {}\n    end\n    table.insert(Output[key], tuple)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpheytyi62.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpheytyi62.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local key = tuple[1]\n    if Output[key] == nil then\n      Output[key] = {}\n    end\n    table.insert(Output[key], tuple)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxip40653.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpxip40653.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Result = {}\n  for _, Tuple in ipairs(Input) do\n    local First = Tuple[1]\n    local Rest = Result[First] or {}\n    Result[First] = rest_of_tuple(Tuple, Rest)\n  end\n  return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptgxime43.lua:7: attempt to call a nil value (global 'rest_of_tuple')\nstack traceback:\n\t/tmp/tmptgxime43.lua:7: in local 'candidate'\n\t/tmp/tmptgxime43.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, v in ipairs(Input) do\n        local key = v[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], v)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_c62qmo.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6_c62qmo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, v in ipairs(Input) do\n        local key = v[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], v)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_c62qmo.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6_c62qmo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Output = {}\n\tfor _,v in ipairs(Input) do\n\t\tlocal key = v[1]\n\t\tif not Output[key] then\n\t\t\tOutput[key] = {}\n\t\tend\n\t\ttable.insert(Output[key], v)\n\tend\n\treturn Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7v2j_wtb.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp7v2j_wtb.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        local value = tuple[2]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], value)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5j70_z4x.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp5j70_z4x.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local Key = Tuple[1]\n        if not Result[Key] then\n            Result[Key] = {}\n        end\n        table.insert(Result[Key], Tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8uvcl2y8.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp8uvcl2y8.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local Key = Tuple[1]\n        if not Result[Key] then\n            Result[Key] = {}\n        end\n        table.insert(Result[Key], Tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8uvcl2y8.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp8uvcl2y8.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Output = {}\n\tfor _, tuple in ipairs(Input) do\n\t\tlocal key = tuple[1]\n\t\tOutput[key] = Output[key] or {}\n\t\ttable.insert(Output[key], tuple)\n\tend\n\treturn Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6eri76d.lua:15: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpz6eri76d.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Result = {}\n  for _, Tuple in ipairs(Input) do\n    local Key = Tuple[1]\n    local Value = Tuple[2]\n    if not Result[Key] then\n      Result[Key] = {}\n    end\n    table.insert(Result[Key], Value)\n  end\n  return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64vsc6af.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp64vsc6af.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Output = {}\n\tfor _,v in ipairs(Input) do\n\t\tlocal key = v[1]\n\t\tif not Output[key] then\n\t\t\tOutput[key] = {}\n\t\tend\n\t\ttable.insert(Output[key], v)\n\tend\n\treturn Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7v2j_wtb.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp7v2j_wtb.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6voluj9o.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6voluj9o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6voluj9o.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6voluj9o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local first = tuple[1]\n        if not Output[first] then\n            Output[first] = {}\n        end\n        table.insert(Output[first], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ywveup9.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp3ywveup9.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local First = Tuple[1]\n        local Rest = table.slice(Tuple, 2)\n        if Result[First] == nil then\n            Result[First] = {}\n        end\n        table.insert(Result[First], Rest)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2383f93x.lua:6: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp2383f93x.lua:6: in local 'candidate'\n\t/tmp/tmp2383f93x.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local First = Tuple[1]\n        local Rest = table.slice(Tuple, 2)\n        if not Result[First] then\n            Result[First] = {}\n        end\n        table.insert(Result[First], Rest)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqbiupe8c.lua:6: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpqbiupe8c.lua:6: in local 'candidate'\n\t/tmp/tmpqbiupe8c.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, t in ipairs(Input) do\n    local key = t[1]\n    if not Output[key] then\n      Output[key] = {}\n    end\n    table.insert(Output[key], t)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm833s25y.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpm833s25y.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Result = {}\n  for _, Tuple in ipairs(Input) do\n    local First = Tuple[1]\n    if not Result[First] then\n      Result[First] = {}\n    end\n    table.insert(Result[First], Tuple)\n  end\n  return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewcmjpzv.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpewcmjpzv.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local First = Tuple[1]\n        if not Result[First] then\n            Result[First] = {}\n        end\n        table.insert(Result[First], Tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvqfaj1a.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpdvqfaj1a.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6voluj9o.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6voluj9o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local key = tuple[1]\n    local value = tuple[2]\n    if Output[key] == nil then\n      Output[key] = {value}\n    else\n      table.insert(Output[key], value)\n    end\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdal72lu.lua:19: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmpxdal72lu.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local key = tuple[1]\n    Output[key] = Output[key] or {}\n    table.insert(Output[key], tuple)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupn8nib7.lua:15: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpupn8nib7.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local First = Tuple[1]\n        local Rest = Tuple[2]\n        if not Result[First] then\n            Result[First] = {}\n        end\n        table.insert(Result[First], Rest)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoc8cd3pv.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmpoc8cd3pv.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local key = tuple[1]\n    if not Output[key] then\n      Output[key] = {}\n    end\n    table.insert(Output[key], tuple)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpheytyi62.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpheytyi62.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local First = Tuple[1]\n        if not Result[First] then\n            Result[First] = {}\n        end\n        table.insert(Result[First], Tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvqfaj1a.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpdvqfaj1a.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        local value = tuple[2]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], value)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5j70_z4x.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp5j70_z4x.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _,v in ipairs(Input) do\n        if not Output[v[1]] then\n            Output[v[1]] = {}\n        end\n        table.insert(Output[v[1]], v)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxtr7uukg.lua:16: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpxtr7uukg.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6voluj9o.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6voluj9o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _,v in ipairs(Input) do\n        local key = v[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], v)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7olcniu.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpc7olcniu.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for i,v in ipairs(Input) do\n        if Output[v[1]] == nil then\n            Output[v[1]] = {}\n        end\n        table.insert(Output[v[1]], v)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplctb5mqo.lua:16: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmplctb5mqo.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local First = Tuple[1]\n        if not Result[First] then\n            Result[First] = {}\n        end\n        table.insert(Result[First], Tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvqfaj1a.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpdvqfaj1a.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _,v in ipairs(Input) do\n    local key = v[1]\n    if Output[key] == nil then\n      Output[key] = {}\n    end\n    table.insert(Output[key], v)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_ogl935.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpl_ogl935.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Result = {}\n\tfor _, Tuple in ipairs(Input) do\n\t\tlocal First = Tuple[1]\n\t\tif not Result[First] then\n\t\t\tResult[First] = {}\n\t\tend\n\t\ttable.insert(Result[First], Tuple)\n\tend\n\treturn Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppvgdxsxl.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmppvgdxsxl.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Result = {}\n  for _, Tuple in ipairs(Input) do\n    local Key = Tuple[1]\n    local Value = Tuple[2]\n    if Result[Key] == nil then\n      Result[Key] = {}\n    end\n    table.insert(Result[Key], Value)\n  end\n  return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigkw2yrk.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmpigkw2yrk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, Tuple in ipairs(Input) do\n    local First = Tuple[1]\n    if not Output[First] then\n      Output[First] = {}\n    end\n    table.insert(Output[First], Tuple)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxl0leci2.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpxl0leci2.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, Tuple in ipairs(Input) do\n    local Key = Tuple[1]\n    if not Output[Key] then\n      Output[Key] = {}\n    end\n    table.insert(Output[Key], Tuple)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvvi4ufz.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpbvvi4ufz.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local key = tuple[1]\n    if not Output[key] then\n      Output[key] = {}\n    end\n    table.insert(Output[key], tuple)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpheytyi62.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpheytyi62.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Result = {}\n  for _, Tuple in ipairs(Input) do\n    local First = Tuple[1]\n    if not Result[First] then\n      Result[First] = {}\n    end\n    table.insert(Result[First], Tuple)\n  end\n  return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewcmjpzv.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpewcmjpzv.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, v in ipairs(Input) do\n        local First = v[1]\n        if not Output[First] then\n            Output[First] = {}\n        end\n        table.insert(Output[First], v)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpse581fo5.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpse581fo5.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        local value = tuple[2]\n        if Result[key] == nil then\n            Result[key] = {}\n        end\n        table.insert(Result[key], value)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigui7uny.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmpigui7uny.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        local value = tuple[2]\n        if Output[key] == nil then\n            Output[key] = {value}\n        else\n            table.insert(Output[key], value)\n        end\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkb56znng.lua:19: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmpkb56znng.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6voluj9o.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6voluj9o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Output = {}\n\tfor _, v in ipairs(Input) do\n\t\tlocal key = v[1]\n\t\tif Output[key] then\n\t\t\ttable.insert(Output[key], v)\n\t\telse\n\t\t\tOutput[key] = {v}\n\t\tend\n\tend\n\treturn Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1m0lk__w.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp1m0lk__w.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Result = {}\n  for _, Tuple in ipairs(Input) do\n    local First = Tuple[1]\n    if not Result[First] then\n      Result[First] = {}\n    end\n    table.insert(Result[First], Tuple)\n  end\n  return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewcmjpzv.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpewcmjpzv.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local Key = Tuple[1]\n        if not Result[Key] then\n            Result[Key] = {}\n        end\n        table.insert(Result[Key], Tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8uvcl2y8.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp8uvcl2y8.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        local value = tuple[2]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], value)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5j70_z4x.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp5j70_z4x.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local First = Tuple[1]\n        if not Result[First] then\n            Result[First] = {}\n        end\n        table.insert(Result[First], Tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvqfaj1a.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpdvqfaj1a.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, t in ipairs(Input) do\n        local key = t[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], t)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvlaet64.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpwvlaet64.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, t in ipairs(Input) do\n    local key = t[1]\n    if not Output[key] then\n      Output[key] = {}\n    end\n    table.insert(Output[key], t)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm833s25y.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpm833s25y.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local First = Tuple[1]\n        if not Result[First] then\n            Result[First] = {}\n        end\n        table.insert(Result[First], Tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvqfaj1a.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpdvqfaj1a.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for i,v in ipairs(Input) do\n        if not Output[v[1]] then\n            Output[v[1]] = {}\n        end\n        table.insert(Output[v[1]], v)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4d5gq1y.lua:16: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpt4d5gq1y.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Result = {}\n\tfor _, Tuple in ipairs(Input) do\n\t\tlocal Key = Tuple[1]\n\t\tlocal Value = Tuple[2]\n\t\tif not Result[Key] then\n\t\t\tResult[Key] = {}\n\t\tend\n\t\ttable.insert(Result[Key], Value)\n\tend\n\treturn Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgl9cu66c.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmpgl9cu66c.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local first = tuple[1]\n    if not Output[first] then\n      Output[first] = {}\n    end\n    table.insert(Output[first], tuple)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfhf_cl4.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmptfhf_cl4.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, v in ipairs(Input) do\n        local key = v[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], v)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_c62qmo.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6_c62qmo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local First = Tuple[1]\n        if not Result[First] then\n            Result[First] = {}\n        end\n        table.insert(Result[First], Tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvqfaj1a.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpdvqfaj1a.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, Tuple in ipairs(Input) do\n        local First = Tuple[1]\n        if not Result[First] then\n            Result[First] = {}\n        end\n        table.insert(Result[First], Tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvqfaj1a.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpdvqfaj1a.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6voluj9o.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6voluj9o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6voluj9o.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6voluj9o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Result = {}\n  for _, Tuple in ipairs(Input) do\n    local Key = Tuple[1]\n    local Value = Tuple[2]\n    if not Result[Key] then\n      Result[Key] = {}\n    end\n    table.insert(Result[Key], Value)\n  end\n  return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64vsc6af.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp64vsc6af.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local first = tuple[1]\n    if not Output[first] then\n      Output[first] = {}\n    end\n    table.insert(Output[first], tuple)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfhf_cl4.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmptfhf_cl4.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, Tuple in ipairs(Input) do\n    local First = Tuple[1]\n    if not Output[First] then\n      Output[First] = {}\n    end\n    table.insert(Output[First], Tuple)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxl0leci2.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpxl0leci2.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local first = tuple[1]\n    if not Output[first] then\n      Output[first] = {}\n    end\n    table.insert(Output[first], tuple)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfhf_cl4.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmptfhf_cl4.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6voluj9o.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6voluj9o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Result = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Result[key] then\n            Result[key] = {}\n        end\n        table.insert(Result[key], tuple)\n    end\n    return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9zf4kd_.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpm9zf4kd_.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local key = tuple[1]\n    local value = tuple[2]\n    if Output[key] == nil then\n      Output[key] = {}\n    end\n    table.insert(Output[key], value)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgb3iuh84.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmpgb3iuh84.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6voluj9o.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6voluj9o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, Tuple in ipairs(Input) do\n    local Key = Tuple[1]\n    local Value = Tuple[2]\n    if Output[Key] == nil then\n      Output[Key] = {}\n    end\n    table.insert(Output[Key], Value)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_c0v1j_.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmpi_c0v1j_.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6voluj9o.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6voluj9o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6voluj9o.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6voluj9o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        local value = tuple[2]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], value)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5j70_z4x.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp5j70_z4x.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local key = tuple[1]\n    Output[key] = Output[key] or {}\n    table.insert(Output[key], tuple)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupn8nib7.lua:15: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpupn8nib7.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Result = {}\n\tfor _,t in ipairs(Input) do\n\t\tlocal key = t[1]\n\t\tif not Result[key] then\n\t\t\tResult[key] = {}\n\t\tend\n\t\ttable.insert(Result[key], t)\n\tend\n\treturn Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyl0pdsjl.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpyl0pdsjl.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Result = {}\n  local First = Input[1]\n  for i = 1, #First do\n    local Key = First[i]\n    Result[Key] = {}\n    for j = 1, #Input do\n      local Value = Input[j][i]\n      Result[Key][Value] = true\n    end\n  end\n  return Result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsh3zs53.lua:19: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {x={w=true, x=true}, y={t=true, y=true, z=true}}\nstack traceback:\n\t/tmp/tmpvsh3zs53.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6voluj9o.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp6voluj9o.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65f5k297.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp65f5k297.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for i = 1, #Input do\n        local Tuple = Input[i]\n        local First = Tuple[1]\n        if not Output[First] then\n            Output[First] = {}\n        end\n        table.insert(Output[First], Tuple)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpie1w2r3c.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpie1w2r3c.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        local value = tuple[2]\n        if Output[key] == nil then\n            Output[key] = {}\n        end\n        table.insert(Output[key], value)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5j70_z4x.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmp5j70_z4x.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, tuple in ipairs(Input) do\n    local key = tuple[1]\n    local value = tuple[2]\n    if Output[key] == nil then\n      Output[key] = {value}\n    else\n      table.insert(Output[key], value)\n    end\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdal72lu.lua:19: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmpxdal72lu.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n  local Output = {}\n  for _, v in ipairs(Input) do\n    local Key = v[1]\n    if not Output[Key] then\n      Output[Key] = {}\n    end\n    table.insert(Output[Key], v)\n  end\n  return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_d3ya9rn.lua:17: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmp_d3ya9rn.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n    local Output = {}\n    for _, tuple in ipairs(Input) do\n        local key = tuple[1]\n        local value = tuple[2]\n        if not Output[key] then\n            Output[key] = {}\n        end\n        table.insert(Output[key], value)\n    end\n    return Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsp76wox2.lua:18: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={\"t\"}, x={\"y\", \"z\"}}\nstack traceback:\n\t/tmp/tmpsp76wox2.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find common first element in given table of table.\nlocal function group_tuples(Input)\n\tlocal Output = {}\n\tfor _,v in ipairs(Input) do\n\t\tlocal key = v[1]\n\t\tOutput[key] = Output[key] or {}\n\t\ttable.insert(Output[key], v)\n\tend\n\treturn Output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122817,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw78psq5e.lua:15: expected: {{\"x\", \"y\", \"z\"}, {\"w\", \"t\"}}\nactual: {w={{\"w\", \"t\"}}, x={{\"x\", \"y\"}, {\"x\", \"z\"}}}\nstack traceback:\n\t/tmp/tmpw78psq5e.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}