{
  "name": "mbpp_304_find_Element",
  "language": "lua",
  "prompt": "-- Write a luathon function to find element at a given index after number of rotations.\nlocal function find_Element(arr, ranges, rotations, index)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Element\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, {{0, 2}, {0, 3}}, 2, 1), 3)\n    lu.assertEquals(candidate({1, 2, 3, 4}, {{0, 1}, {0, 2}}, 1, 2), 3)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {{0, 1}, {0, 2}}, 1, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local index = index + rotations\n    if index > ranges then\n        index = index - ranges\n    end\n    return arr[index]\nend",
    "  local n = #arr\n  local new_index = (index + rotations) % n\n  return arr[new_index]\nend",
    "\tlocal index = index + rotations\n\tif index > ranges then\n\t\tindex = index - ranges\n\tend\n\treturn arr[index]\nend",
    "  local index = index + rotations\n  if index > ranges then\n    index = index - ranges\n  end\n  return arr[index]\nend",
    "    local function rotate(arr, ranges, rotations)\n        local function rotate_left(arr, ranges, rotations)\n            local function rotate_once(arr, ranges)\n                local temp = arr[ranges[1]]\n                for i = ranges[1], ranges[2] - 1 do\n                    arr[i] = arr[i + 1]\n                end\n                arr[ranges[2]] = temp\n            end\n            for i = 1, rotations do\n                rotate_once(arr, ranges)\n            end\n        end\n        local function rotate_right(arr, ranges, rotations)\n            local function rotate_once(arr, ranges)\n                local temp = arr[ranges[2]]\n                for i = ranges[2], ranges[1] + 1, -1 do\n                    arr[i] = arr[i - 1]\n                end\n                arr[ranges[1]] = temp\n            end\n            for i = 1, rotations do\n                rotate_once(arr, ranges)\n            end\n        end\n        if ranges[1] < ranges[2] then\n            rotate_left(arr, ranges, rotations)\n        else\n            rotate_right(arr, ranges, rotations)\n        end\n    end\n    rotate(arr, ranges, rotations)\n    return arr[index]\nend",
    "    local index = index + rotations\n    if index > ranges then\n        index = index - ranges\n    end\n    return arr[index]\nend",
    "  local len = #arr\n  local new_index = (index + rotations) % len\n  return arr[new_index]\nend",
    "    local len = #arr\n    local ranges = ranges or len\n    local rotations = rotations or 0\n    local index = index or 1\n    local new_index = (index + rotations) % ranges\n    return arr[new_index]\nend",
    "    local len = #arr\n    local rotations = rotations % len\n    local index = index + rotations\n    if index > len then\n        index = index - len\n    end\n    return arr[index]\nend",
    "    local len = #arr\n    local new_index = (index + rotations) % len\n    return arr[new_index]\nend",
    "  local index = index + rotations\n  if index > ranges then\n    index = index - ranges\n  end\n  return arr[index]\nend",
    "\tlocal len = #arr\n\tlocal new_index = (index + rotations) % len\n\treturn arr[new_index]\nend",
    "  local len = #arr\n  local new_index = (index + rotations) % len\n  return arr[new_index]\nend",
    "    local index = index + rotations\n    if index > ranges then\n        index = index - ranges\n    end\n    return arr[index]\nend",
    "  local len = #arr\n  local new_index = (index + rotations) % len\n  return arr[new_index]\nend",
    "  local size = #arr\n  local new_index = (index + rotations) % size\n  return arr[new_index]\nend",
    "    local len = #arr\n    local new_index = (index + rotations) % len\n    return arr[new_index]\nend",
    "    local new_index = (index + rotations) % ranges\n    return arr[new_index]\nend",
    "    local index = index + rotations\n    if index > ranges then\n        index = index - ranges\n    end\n    return arr[index]\nend",
    "    local len = #arr\n    local new_index = (index + rotations) % len\n    return arr[new_index]\nend"
  ]
}