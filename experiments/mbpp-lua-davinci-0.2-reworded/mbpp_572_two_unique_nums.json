{
  "name": "mbpp_572_two_unique_nums",
  "language": "lua",
  "prompt": "-- Write a luathon function to remove duplicate numbers from a given number of tables.\nlocal function two_unique_nums(nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = two_unique_nums\n    lu.assertEquals(candidate({1, 2, 3, 2, 3, 4, 5}), {1, 4, 5})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 5}), {1, 3, 4, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 2, 3, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local unique_nums = {}\n    for _, num in ipairs(nums) do\n        if not unique_nums[num] then\n            unique_nums[num] = true\n        end\n    end\n    return unique_nums\nend",
    "  local unique_nums = {}\n  for _, num in ipairs(nums) do\n    if not unique_nums[num] then\n      unique_nums[num] = true\n    end\n  end\n  return unique_nums\nend",
    "  local unique_nums = {}\n  for _, num in ipairs(nums) do\n    if not unique_nums[num] then\n      unique_nums[num] = true\n    end\n  end\n  return unique_nums\nend",
    "  local unique_nums = {}\n  for _, num in ipairs(nums) do\n    if not unique_nums[num] then\n      unique_nums[num] = true\n    end\n  end\n  return unique_nums\nend",
    "  local unique_nums = {}\n  for i = 1, #nums do\n    local num = nums[i]\n    if not unique_nums[num] then\n      unique_nums[num] = true\n    end\n  end\n  return unique_nums\nend",
    "  local unique_nums = {}\n  for i, num in ipairs(nums) do\n    if not unique_nums[num] then\n      unique_nums[num] = true\n    end\n  end\n  return unique_nums\nend",
    "  local unique_nums = {}\n  for i = 1, #nums do\n    if not unique_nums[nums[i]] then\n      unique_nums[nums[i]] = true\n    end\n  end\n  return unique_nums\nend",
    "  local unique_nums = {}\n  for _, num in ipairs(nums) do\n    if not unique_nums[num] then\n      unique_nums[num] = true\n    end\n  end\n  return unique_nums\nend",
    "  local unique_nums = {}\n  for _, num in ipairs(nums) do\n    if not unique_nums[num] then\n      unique_nums[num] = true\n    end\n  end\n  return unique_nums\nend",
    "  local nums_set = {}\n  for _, num in ipairs(nums) do\n    nums_set[num] = true\n  end\n  local result = {}\n  for num in pairs(nums_set) do\n    table.insert(result, num)\n  end\n  return result\nend",
    "    local unique_nums = {}\n    for _, num in ipairs(nums) do\n        if not unique_nums[num] then\n            unique_nums[num] = true\n            coroutine.yield(num)\n        end\n    end\nend",
    "\tlocal unique_nums = {}\n\tfor _, num in ipairs(nums) do\n\t\tif not unique_nums[num] then\n\t\t\tunique_nums[num] = true\n\t\tend\n\tend\n\treturn unique_nums\nend",
    "  local unique_nums = {}\n  local unique_nums_count = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    if not unique_nums[num] then\n      unique_nums_count = unique_nums_count + 1\n      unique_nums[num] = true\n    end\n  end\n  return unique_nums_count\nend",
    "  local unique_nums = {}\n  for i = 1, #nums do\n    local num = nums[i]\n    if not unique_nums[num] then\n      unique_nums[num] = true\n    end\n  end\n  return unique_nums\nend",
    "  local unique_nums = {}\n  for _, num in ipairs(nums) do\n    if not unique_nums[num] then\n      unique_nums[num] = true\n    end\n  end\n  return unique_nums\nend",
    "  local unique_nums = {}\n  for i = 1, #nums do\n    if not unique_nums[nums[i]] then\n      unique_nums[nums[i]] = true\n    end\n  end\n  return unique_nums\nend",
    "  local unique = {}\n  for _, num in ipairs(nums) do\n    if not unique[num] then\n      unique[num] = true\n    end\n  end\n  return unique\nend",
    "  local unique_nums = {}\n  for _, num in ipairs(nums) do\n    if not unique_nums[num] then\n      unique_nums[num] = true\n    end\n  end\n  return unique_nums\nend",
    "  local unique_nums = {}\n  for i, num in ipairs(nums) do\n    if not unique_nums[num] then\n      unique_nums[num] = true\n    end\n  end\n  return unique_nums\nend",
    "    local unique_nums = {}\n    for i = 1, #nums do\n        if not unique_nums[nums[i]] then\n            unique_nums[nums[i]] = true\n        end\n    end\n    return unique_nums\nend"
  ]
}