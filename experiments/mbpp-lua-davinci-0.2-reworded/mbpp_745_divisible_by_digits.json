{
  "name": "mbpp_745_divisible_by_digits",
  "language": "lua",
  "prompt": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = num_to_digits(num)\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "  local res = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(res, i)\n    end\n  end\n  return res\nend",
    "    local function divisible_by_digits_helper(num)\n        local digits = {}\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 then\n                return false\n            end\n            digits[#digits + 1] = digit\n            num = math.floor(num / 10)\n        end\n        for i = 1, #digits do\n            if num % digits[i] ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible_by_digits_helper(i) then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend",
    "  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits+1] = tonumber(digit)\n    end\n    for i = 1, #digits do\n      if num % digits[i] ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      result[#result+1] = i\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local divisible = true\n        for digit in tostring(i):gmatch(\"%d\") do\n            if i % tonumber(digit) ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local number = i\n    local divisible = true\n    while number > 0 do\n      local digit = number % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      number = math.floor(number / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local nums = {}\n  for i = startnum, endnum do\n    local num = tostring(i)\n    local divisible = true\n    for _, digit in ipairs(num:split(\"\")) do\n      if tonumber(digit) == 0 then\n        divisible = false\n        break\n      end\n      if i % tonumber(digit) ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(nums, i)\n    end\n  end\n  return nums\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch('%d') do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for num = startnum, endnum do\n    if divisible(num) then\n      result[#result + 1] = num\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "    local function is_divisible(num)\n        local function is_divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = to_digits(num)\n        return all(digits, is_divisible_by_digit)\n    end\n    return filter(range(startnum, endnum), is_divisible)\nend",
    "\tlocal function divisible(num)\n\t\tlocal digits = {}\n\t\tfor digit in tostring(num):gmatch('%d') do\n\t\t\tdigits[#digits+1] = tonumber(digit)\n\t\tend\n\t\tfor _, digit in ipairs(digits) do\n\t\t\tif num % digit ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor num = startnum, endnum do\n\t\tif divisible(num) then\n\t\t\tresult[#result+1] = num\n\t\tend\n\tend\n\treturn result\nend",
    "  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      divisible_numbers[#divisible_numbers + 1] = i\n    end\n  end\n  return divisible_numbers\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "    local function is_divisible_by_digits(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for num = startnum, endnum do\n        if is_divisible_by_digits(num) then\n            result[#result + 1] = num\n        end\n    end\n    return result\nend",
    "\tlocal function is_divisible(num)\n\t\tlocal function is_divisible_by_digit(num, digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\tfor digit in tostring(num):gmatch(\"%d\") do\n\t\t\tif not is_divisible_by_digit(num, tonumber(digit)) then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif is_divisible(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local number = i\n        local is_divisible = true\n        while number > 0 do\n            local digit = number % 10\n            if digit ~= 0 and i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n            number = math.floor(number / 10)\n        end\n        if is_divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend",
    "  local function divisible(num)\n    local function divisible_by(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by, digits(num))\n  end\n  return filter(divisible, range(startnum, endnum))\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "\tlocal function divisible_by_digits_helper(num)\n\t\tlocal function divisible_by_digits_helper_helper(num, divisor)\n\t\t\tif num == 0 then\n\t\t\t\treturn true\n\t\t\telseif num % divisor ~= 0 then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\treturn divisible_by_digits_helper_helper(num / 10, divisor)\n\t\t\tend\n\t\tend\n\t\tlocal function divisible_by_digits_helper_helper_helper(num, divisor)\n\t\t\tif num == 0 then\n\t\t\t\treturn true\n\t\t\telseif divisible_by_digits_helper_helper(num, divisor) then\n\t\t\t\treturn divisible_by_digits_helper_helper_helper(num, divisor + 1)\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn divisible_by_digits_helper_helper_helper(num, 2)\n\tend\n\tlocal function divisible_by_digits_helper_helper(startnum, endnum, acc)\n\t\tif startnum > endnum then\n\t\t\treturn acc\n\t\telseif divisible_by_digits_helper(startnum) then\n\t\t\treturn divisible_by_digits_helper_helper(startnum + 1, endnum, acc .. startnum .. \" \")\n\t\telse\n\t\t\treturn divisible_by_digits_helper_helper(startnum + 1, endnum, acc)\n\t\tend\n\tend\n\treturn divisible_by_digits_helper_helper(startnum, endnum, \"\")\nend",
    "  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits+1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      divisible_numbers[#divisible_numbers+1] = i\n    end\n  end\n  return divisible_numbers\nend",
    "  local function divisible(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible, range(startnum, endnum))\nend",
    "  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = get_digits(i)\n        local is_divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend",
    "    local function divisible(num)\n        local function divisible_by(digit)\n            return num % digit == 0\n        end\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            table.insert(digits, tonumber(digit))\n        end\n        return all(divisible_by, digits)\n    end\n    return filter(divisible, range(startnum, endnum))\nend",
    "  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible_by_digits_inner, range(startnum, endnum))\nend",
    "  local function divisible_by_digits_helper(num)\n    local digits = {}\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 then\n        table.insert(digits, digit)\n      end\n      num = math.floor(num / 10)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for num = startnum, endnum do\n    if divisible_by_digits_helper(num) then\n      table.insert(result, num)\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "\tlocal function divisible_by_digits_inner(num)\n\t\tlocal function divisible_by_digits_inner_inner(num, digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\treturn num:to_digits():all(divisible_by_digits_inner_inner, num)\n\tend\n\treturn startnum:range(endnum):filter(divisible_by_digits_inner)\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend",
    "  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend",
    "  local function divisible_by_digits_helper(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local is_divisible = true\n    for digit in tostring(i):gmatch(\"%d\") do\n      if i % tonumber(digit) ~= 0 then\n        is_divisible = false\n        break\n      end\n    end\n    if is_divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = to_digits(num)\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "  local function divisible_by_digits_helper(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible_by_digits_helper(i) then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local number = i\n        local is_divisible = true\n        while number > 0 do\n            local digit = number % 10\n            if digit == 0 or i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n            number = math.floor(number / 10)\n        end\n        if is_divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend",
    "  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      divisible_numbers[#divisible_numbers + 1] = i\n    end\n  end\n  return divisible_numbers\nend",
    "  local divisible = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for j = 1, #tostring(i) do\n      digits[#digits + 1] = tonumber(tostring(i):sub(j, j))\n    end\n    local divisible_by_all = true\n    for j = 1, #digits do\n      if i % digits[j] ~= 0 then\n        divisible_by_all = false\n        break\n      end\n    end\n    if divisible_by_all then\n      divisible[#divisible + 1] = i\n    end\n  end\n  return divisible\nend",
    "    local function divisible_by_digits_inner(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            table.insert(digits, tonumber(digit))\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible_by_digits_inner(i) then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = to_digits(num)\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local digits = {}\n    local num = i\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 then\n        break\n      end\n      digits[#digits + 1] = digit\n      num = math.floor(num / 10)\n    end\n    if num == 0 then\n      local divisible = true\n      for _, digit in ipairs(digits) do\n        if i % digit ~= 0 then\n          divisible = false\n          break\n        end\n      end\n      if divisible then\n        result[#result + 1] = i\n      end\n    end\n  end\n  return result\nend",
    "    local function divisible_by_digits_inner(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        return num > 9 and num < 100 and all(divisible_by_digit, digits(num))\n    end\n    return filter(divisible_by_digits_inner, range(startnum, endnum))\nend",
    "  local divisible = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible_by_all = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible_by_all = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible_by_all then\n      table.insert(divisible, i)\n    end\n  end\n  return divisible\nend",
    "  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_inner, range(startnum, endnum))\nend",
    "\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local number = i\n    local is_divisible = true\n    while number > 0 do\n      local digit = number % 10\n      if digit == 0 or i % digit ~= 0 then\n        is_divisible = false\n        break\n      end\n      number = math.floor(number / 10)\n    end\n    if is_divisible then\n      table.insert(divisible_numbers, i)\n    end\n  end\n  return divisible_numbers\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local function divisible(num)\n    local function divisible_by(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by, digits(num))\n  end\n  return filter(divisible, range(startnum, endnum))\nend",
    "  local function is_divisible(num)\n    local function is_divisible_by_digit(num, digit)\n      return num % digit == 0\n    end\n    local digits = to_digits(num)\n    for _, digit in ipairs(digits) do\n      if not is_divisible_by_digit(num, digit) then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if is_divisible(i) then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local function divisible_by_digits_helper(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible_by_digits_helper(i) then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend",
    "    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            divisible_by_digits[#divisible_by_digits + 1] = i\n        end\n    end\n    return divisible_by_digits\nend",
    "    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local number = i\n        local divisible = true\n        while number > 0 do\n            local digit = number % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            number = math.floor(number / 10)\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend",
    "  local function divisible(num)\n    local function divisible_by_digit(num, digit)\n      return num % digit == 0\n    end\n    local function divisible_by_all_digits(num)\n      local digits = {}\n      for digit in tostring(num):gmatch(\"%d\") do\n        digits[#digits + 1] = tonumber(digit)\n      end\n      for _, digit in ipairs(digits) do\n        if not divisible_by_digit(num, digit) then\n          return false\n        end\n      end\n      return true\n    end\n    return divisible_by_all_digits(num)\n  end\n  local function in_range(num)\n    return num >= startnum and num <= endnum\n  end\n  local function filter(num)\n    return divisible(num) and in_range(num)\n  end\n  local function map(num)\n    return num\n  end\n  local function reduce(acc, num)\n    return acc + num\n  end\n  local function range(startnum, endnum)\n    local range = {}\n    for i = startnum, endnum do\n      range[#range + 1] = i\n    end\n    return range\n  end\n  return reduce(0, map(filter(range(startnum, endnum))))\nend",
    "  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(num, digit)\n      return num % digit == 0\n    end",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local function is_divisible(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for num = startnum, endnum do\n        if is_divisible(num) then\n            result[#result + 1] = num\n        end\n    end\n    return result\nend",
    "\tlocal divisible = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = tostring(i)\n\t\tlocal divisible_by_all = true\n\t\tfor j = 1, #num do\n\t\t\tlocal digit = tonumber(num:sub(j, j))\n\t\t\tif digit ~= 0 and i % digit ~= 0 then\n\t\t\t\tdivisible_by_all = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif divisible_by_all then\n\t\t\ttable.insert(divisible, i)\n\t\tend\n\tend\n\treturn divisible\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = {}\n    for digit in tostring(num):gmatch('%d') do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = tostring(i)\n    local divisible = true\n    for j = 1, #num do\n      local digit = tonumber(num:sub(j, j))\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend",
    "  local function divisible_by_digits_helper(num)\n    local num_str = tostring(num)\n    for i = 1, #num_str do\n      local digit = tonumber(num_str:sub(i, i))\n      if digit ~= 0 and num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible_by_digits_helper(i) then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local function is_divisible_by_digits(num)\n    local function is_divisible_by(divisor)\n      return num % divisor == 0\n    end\n    local function is_divisible_by_digit(digit)\n      return is_divisible_by(tonumber(digit))\n    end\n    return all(is_divisible_by_digit, tostring(num))\n  end\n  local function is_in_range(num)\n    return num >= startnum and num <= endnum\n  end\n  return filter(is_in_range, filter(is_divisible_by_digits, range(startnum, endnum)))\nend",
    "    local function divisible_by_digit(num)\n        local function divisible_by_digit_helper(num, digit)\n            if digit == 0 then\n                return true\n            else\n                return num % digit == 0 and divisible_by_digit_helper(num, digit // 10)\n            end\n        end\n        return divisible_by_digit_helper(num, num)\n    end\n    local function divisible_by_digits_helper(startnum, endnum, acc)\n        if startnum == endnum then\n            if divisible_by_digit(startnum) then\n                return {startnum}\n            else\n                return {}\n            end\n        else\n            if divisible_by_digit(startnum) then\n                return divisible_by_digits_helper(startnum + 1, endnum, {startnum})\n            else\n                return divisible_by_digits_helper(startnum + 1, endnum, {})\n            end\n        end\n    end\n    return divisible_by_digits_helper(startnum, endnum, {})\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "\tlocal function divisible_by_digits_inner(num)\n\t\tlocal function divisible_by_digits_inner_inner(num, digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\treturn num:to_digits():all(divisible_by_digits_inner_inner, num)\n\tend\n\treturn range(startnum, endnum):filter(divisible_by_digits_inner)\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local function divisible(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible, range(startnum, endnum))\nend",
    "\tlocal function divisible(num)\n\t\tlocal digits = tostring(num):gmatch(\"%d\")\n\t\tfor digit in digits do\n\t\t\tif num % tonumber(digit) ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif divisible(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local function divisible(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible, range(startnum, endnum))\nend",
    "  local divisible = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      table.insert(digits, tonumber(digit))\n    end\n    local divisible_by_all = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible_by_all = false\n        break\n      end\n    end\n    if divisible_by_all then\n      table.insert(divisible, i)\n    end\n  end\n  return divisible\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % tonumber(digit) == 0\n    end\n    return num >= startnum and num <= endnum and all(divisible_by_digit, tostring(num))\n  end\n  return divisible_by_digits_helper\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "\tlocal function is_divisible(num)\n\t\tlocal function is_divisible_by(digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\treturn string.gsub(num, \"%d\", function(digit)\n\t\t\treturn is_divisible_by(tonumber(digit)) and \"\" or nil\n\t\tend) == \"\"\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif is_divisible(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "\tlocal function divisible_by_digits_inner(num)\n\t\tlocal function divisible_by_digits_inner_inner(num, digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\tlocal digits = {}\n\t\tfor digit in tostring(num):gmatch(\"%d\") do\n\t\t\ttable.insert(digits, tonumber(digit))\n\t\tend\n\t\treturn all(digits, curry(divisible_by_digits_inner_inner, num))\n\tend\n\treturn filter(divisible_by_digits_inner, range(startnum, endnum))\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local number = i\n        local is_divisible = true\n        while number > 0 do\n            local digit = number % 10\n            if digit == 0 or i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n            number = math.floor(number / 10)\n        end\n        if is_divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend",
    "    local function divisible(num)\n        local n = num\n        while n > 0 do\n            local digit = n % 10\n            if digit == 0 or num % digit ~= 0 then\n                return false\n            end\n            n = math.floor(n / 10)\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible(i) then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = num_to_digits(num)\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local res = {}\n  for i = startnum, endnum do\n    local num = tostring(i)\n    local divisible = true\n    for j = 1, #num do\n      if i % tonumber(num:sub(j, j)) ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(res, i)\n    end\n  end\n  return res\nend",
    "    local function is_divisible_by_digits(num)\n        local digits = tostring(num)\n        for i = 1, #digits do\n            if num % tonumber(digits:sub(i, i)) ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if is_divisible_by_digits(i) then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local function divisible_by_digits_inner(num)\n        local function divisible_by_digits_inner_inner(num, digit)\n            return num % digit == 0\n        end\n        return num % 10 == 0 and num % 2 == 0 and num % 3 == 0 and num % 4 == 0 and num % 5 == 0 and num % 6 == 0 and num % 7 == 0 and num % 8 == 0 and num % 9 == 0 and num % 10 == 0\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible_by_digits_inner(i) then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch('%d') do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for num = startnum, endnum do\n    if divisible(num) then\n      result[#result + 1] = num\n    end\n  end\n  return result\nend",
    "    local function divisible_by_digits_inner(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = string.gmatch(tostring(num), \"%d\")\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible_by_digits_inner, range(startnum, endnum))\nend",
    "  local function divisible(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = to_digits(num)\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible, range(startnum, endnum))\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit_helper(num, digit)\n      return num % digit == 0\n    end\n    local function divisible_by_digits_helper(num, digits)\n      if digits == 0 then\n        return true\n      else\n        return divisible_by_digit_helper(num, digits % 10) and divisible_by_digits_helper(num, math.floor(digits / 10))\n      end\n    end\n    return divisible_by_digits_helper(num, num)\n  end\n  local function divisible_by_digits_helper(startnum, endnum, acc)\n    if startnum > endnum then\n      return acc\n    else\n      if divisible_by_digits_helper(startnum) then\n        return divisible_by_digits_helper(startnum + 1, endnum, acc .. startnum .. ' ')\n      else\n        return divisible_by_digits_helper(startnum + 1, endnum, acc)\n      end\n    end\n  end\n  return divisible_by_digits_helper(startnum, endnum, '')\nend\nprint(divisible_by_digits(1, 100))",
    "  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible_by_digits_inner, range(startnum, endnum))\nend",
    "\tlocal divisible_by_digits = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend",
    "  local function divisible(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible, range(startnum, endnum))\nend",
    "  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local number = i\n    local divisible = true\n    while number > 0 do\n      local digit = number % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      number = math.floor(number / 10)\n    end\n    if divisible then\n      table.insert(divisible_numbers, i)\n    end\n  end\n  return divisible_numbers\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = tostring(i)\n    local divisible = true\n    for j = 1, #num do\n      local digit = tonumber(num:sub(j, j))\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      table.insert(digits, tonumber(digit))\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_inner, range(startnum, endnum))\nend",
    "  local function is_divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if is_divisible(i) then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local function divisible(n)\n        local function divisible_by_digit(d)\n            return n % d == 0\n        end\n        local digits = to_digits(n)\n        for _, d in ipairs(digits) do\n            if not divisible_by_digit(d) then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for n = startnum, endnum do\n        if divisible(n) then\n            table.insert(result, n)\n        end\n    end\n    return result\nend",
    "    local function divisible_by_digits_helper(num)\n        local digits = {}\n        for i = 1, #num do\n            digits[i] = tonumber(num:sub(i, i))\n        end\n        for i = 1, #digits do\n            if digits[i] ~= 0 and num % digits[i] ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible_by_digits_helper(tostring(i)) then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local is_divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if is_divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end",
    "    local result = {}\n    for i = startnum, endnum do\n        local divisible = true\n        for digit in string.gmatch(tostring(i), '%d') do\n            if i % tonumber(digit) ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local function divisible_by_digits_inner(num)\n    local function divisible_by(num, divisor)\n      return num % divisor == 0\n    end\n    local function divisible_by_digits_inner_inner(num, divisor)\n      if num == 0 then\n        return true\n      elseif divisible_by(num, divisor) then\n        return divisible_by_digits_inner_inner(math.floor(num / 10), divisor)\n      else\n        return false\n      end\n    end\n    return divisible_by_digits_inner_inner(num, num % 10)\n  end\n  local function divisible_by_digits_inner_inner(startnum, endnum, acc)\n    if startnum > endnum then\n      return acc\n    elseif divisible_by_digits_inner(startnum) then\n      return divisible_by_digits_inner_inner(startnum + 1, endnum, acc .. startnum .. \" \")\n    else\n      return divisible_by_digits_inner_inner(startnum + 1, endnum, acc)\n    end\n  end\n  return divisible_by_digits_inner_inner(startnum, endnum, \"\")\nend",
    "\tlocal function divisible_by_digits_inner(num)\n\t\tlocal num_str = tostring(num)\n\t\tfor i = 1, #num_str do\n\t\t\tif num % tonumber(num_str:sub(i, i)) ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif divisible_by_digits_inner(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local function digits(num)\n      local digits = {}\n      while num > 0 do\n        digits[#digits + 1] = num % 10\n        num = math.floor(num / 10)\n      end\n      return digits\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible_by_digits_inner, range(startnum, endnum))\nend",
    "  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch('%d') do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      divisible_numbers[#divisible_numbers + 1] = i\n    end\n  end\n  return divisible_numbers\nend",
    "  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits+1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      result[#result+1] = i\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local divisible = true\n    for digit in tostring(i):gmatch(\"%d\") do\n      if tonumber(digit) ~= 0 and i % tonumber(digit) ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = to_digits(num)\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "    local function divisible(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible(i) then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend",
    "  local function divisible(num)\n    local function divisible_by(digit)\n      return num % digit == 0\n    end\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    return all(divisible_by, digits)\n  end\n  return filter(divisible, range(startnum, endnum))\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local divisible = true\n    for digit in (tostring(i)):gmatch(\"%d\") do\n      if i % tonumber(digit) ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        local number = i\n        while number > 0 do\n            local digit = number % 10\n            if digit == 0 then\n                break\n            end\n            table.insert(digits, digit)\n            number = math.floor(number / 10)\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend",
    "\tlocal function divisible(num)\n\t\tlocal digits = {}\n\t\tfor i = 1, #num do\n\t\t\tlocal digit = tonumber(num:sub(i, i))\n\t\t\tif digit == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\ttable.insert(digits, digit)\n\t\tend\n\t\tfor _, digit in ipairs(digits) do\n\t\t\tif num % digit ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif divisible(tostring(i)) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch('%d') do\n      digits[#digits+1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      result[#result+1] = i\n    end\n  end\n  return result\nend",
    "  local function divisible_by_digits_helper(num)\n    local num_str = tostring(num)\n    local divisible = true\n    for i = 1, #num_str do\n      local digit = tonumber(num_str:sub(i, i))\n      if digit ~= 0 and num % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    return divisible\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible_by_digits_helper(i) then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "    local function divisible(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for num = startnum, endnum do\n        if divisible(num) then\n            result[#result + 1] = num\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "    local function divisible(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits+1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    return divisible\nend",
    "    local function divisible(n)\n        local function divisible_by(d)\n            return n % d == 0\n        end\n        return all(divisible_by, digits(n))\n    end\n    return filter(divisible, range(startnum, endnum))\nend",
    "  local divisible = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible_by_all = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible_by_all = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible_by_all then\n      table.insert(divisible, i)\n    end\n  end\n  return divisible\nend",
    "\tlocal function divisible_by_digits_inner(num)\n\t\tlocal function divisible_by_digit(digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\tlocal digits = to_digits(num)\n\t\treturn all(digits, divisible_by_digit)\n\tend\n\treturn filter(range(startnum, endnum), divisible_by_digits_inner)\nend",
    "\tlocal function divisible(n)\n\t\tlocal function divisible_by_digit(d)\n\t\t\treturn n % d == 0\n\t\tend\n\t\treturn all(divisible_by_digit, digits(n))\n\tend\n\treturn filter(divisible, range(startnum, endnum))\nend",
    "    local function divisible_by_digits_helper(num)\n        local num_str = tostring(num)\n        for i = 1, #num_str do\n            local digit = tonumber(num_str:sub(i, i))\n            if digit == 0 then\n                return false\n            end\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible_by_digits_helper(i) then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digits_helper_helper(num, digit)\n      if digit == 0 then\n        return true\n      elseif num % digit == 0 then\n        return divisible_by_digits_helper_helper(num, digit / 10)\n      else\n        return false\n      end\n    end\n    return divisible_by_digits_helper_helper(num, num)\n  end\n  local function divisible_by_digits_helper_helper(startnum, endnum, acc)\n    if startnum > endnum then\n      return acc\n    elseif divisible_by_digits_helper(startnum) then\n      return divisible_by_digits_helper_helper(startnum + 1, endnum, acc .. startnum .. \" \")\n    else\n      return divisible_by_digits_helper_helper(startnum + 1, endnum, acc)\n    end\n  end\n  return divisible_by_digits_helper_helper(startnum, endnum, \"\")\nend",
    "  local function is_divisible(num)\n    local function is_divisible_by_digit(num, digit)\n      return num % digit == 0\n    end\n    local function is_divisible_by_digits(num)\n      local digits = {}\n      for digit in tostring(num):gmatch(\"%d\") do\n        digits[#digits + 1] = tonumber(digit)\n      end\n      for _, digit in ipairs(digits) do\n        if not is_divisible_by_digit(num, digit) then\n          return false\n        end\n      end\n      return true\n    end\n    return is_divisible_by_digits(num)\n  end\n  local function is_in_range(num)\n    return num >= startnum and num <= endnum\n  end\n  local function is_divisible_in_range(num)\n    return is_in_range(num) and is_divisible(num)\n  end\n  local result = {}\n  for num = startnum, endnum do\n    if is_divisible_in_range(num) then\n      result[#result + 1] = num\n    end\n  end\n  return result\nend",
    "  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = string.gmatch(tostring(num), \"%d\")\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_inner, range(startnum, endnum))\nend",
    "  local function is_divisible(num)\n    local function is_divisible_by(divisor)\n      return num % divisor == 0\n    end\n    local function is_divisible_by_all_digits(num)\n      local digits = {}\n      for digit in tostring(num):gmatch('%d') do\n        table.insert(digits, tonumber(digit))\n      end\n      return all(digits, is_divisible_by)\n    end\n    return is_divisible_by_all_digits(num)\n  end\n  local function is_in_range(num)\n    return num >= startnum and num <= endnum\n  end\n  return filter(is_in_range, filter(is_divisible, range(startnum, endnum)))\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = to_digits(num)\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "    local function divisible(n)\n        local function divisible_by_digit(d)\n            return n % d == 0\n        end\n        return all(divisible_by_digit, digits(n))\n    end\n    return filter(divisible, range(startnum, endnum))\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local function divisible_by_digits_inner(num)\n    local function divisible_by_digits_inner_inner(num, digit)\n      return num % digit == 0\n    end\n    return num % 10 == 0 and num % 100 == 0 and num % 1000 == 0 and num % 10000 == 0 and num % 100000 == 0 and num % 1000000 == 0 and num % 10000000 == 0 and num % 100000000 == 0 and num % 1000000000 == 0 and num % 10000000000 == 0 and num % 100000000000 == 0 and num % 1000000000000 == 0 and num % 10000000000000 == 0 and num % 100000000000000 == 0 and num % 1000000000000000 == 0 and num % 10000000000000000 == 0 and num % 100000000000000000 == 0 and num % 1000000000000000000 == 0 and num % 10000000000000000000 == 0 and num % 100000000000000000000 == 0 and num % 1000000000000000000000 == 0 and num % 10000000000000000000000 == 0 and num % 100000000000000000000000 == 0 and num % 1000000000000000000000000 == 0 and num % 10000000000000000000000000 == 0 and num % 100000000000000000000000000 == 0 and num % 1000000000000000000000000000 == 0 and num % 10000000000000000000000000000 == 0 and num % 100000000000000000000000000000 == 0 and num % 1000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit ~= 0 and i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = to_digits(num)\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "  local function divisible(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible, range(startnum, endnum))\nend",
    "    local function divisible_by_digits_inner(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        return all(divisible_by_digit, digits(num))\n    end\n    return filter(divisible_by_digits_inner, range(startnum, endnum))\nend",
    "  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(num, digit)\n      return num % digit == 0\n    end\n    local function divisible_by_digits_inner_inner(num, digit)\n      if digit == 0 then\n        return true\n      else\n        return divisible_by_digit(num, digit) and divisible_by_digits_inner_inner(num, digit // 10)\n      end\n    end\n    return divisible_by_digits_inner_inner(num, num)\n  end\n  local function divisible_by_digits_outer(startnum, endnum)\n    if startnum > endnum then\n      return {}\n    else\n      return divisible_by_digits_inner(startnum) and {startnum} or {} + divisible_by_digits_outer(startnum + 1, endnum)\n    end\n  end\n  return divisible_by_digits_outer(startnum, endnum)\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "    local function divisible_by_digits_inner(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            table.insert(digits, tonumber(digit))\n        end\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible_by_digits_inner, range(startnum, endnum))\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = to_digits(num)\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "    local function is_divisible(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local numbers = {}\n    for num = startnum, endnum do\n        if is_divisible(num) then\n            numbers[#numbers + 1] = num\n        end\n    end\n    return numbers\nend",
    "  local function divisible(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = to_digits(num)\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible, range(startnum, endnum))\nend",
    "\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local number = tostring(i)\n        local divisible = true\n        for j = 1, #number do\n            local digit = tonumber(number:sub(j, j))\n            if digit ~= 0 and i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend",
    "  local function is_divisible_by_digits(num)\n    local digits = to_digits(num)\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if is_divisible_by_digits(i) then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local function divisible_by_digits_helper(num)\n        local digits = {}\n        for digit in tostring(num):gmatch('%d') do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local results = {}\n    for num = startnum, endnum do\n        if divisible_by_digits_helper(num) then\n            results[#results + 1] = num\n        end\n    end\n    return results\nend",
    "  local function divisible_by_digits_helper(num)\n    local digits = {}\n    for digit in string.gmatch(num, \"%d\") do\n      digits[#digits + 1] = digit\n    end\n    for _, digit in ipairs(digits) do\n      if num % tonumber(digit) ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for num = startnum, endnum do\n    if divisible_by_digits_helper(num) then\n      result[#result + 1] = num\n    end\n  end\n  return result\nend",
    "    local function divisible(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = {}\n        for digit in tostring(num):gmatch('%d') do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible, range(startnum, endnum))\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local function divisible_by_digits_inner(num)\n        local function divisible_by_digits_inner_inner(num, acc)\n            if num == 0 then\n                return acc\n            else\n                local digit = num % 10\n                if digit == 0 then\n                    return false\n                else\n                    return divisible_by_digits_inner_inner(math.floor(num / 10), acc and (num % digit == 0))\n                end\n            end\n        end\n        return divisible_by_digits_inner_inner(num, true)\n    end\n    local function divisible_by_digits_inner_outer(startnum, endnum, acc)\n        if startnum > endnum then\n            return acc\n        else\n            return divisible_by_digits_inner_outer(startnum + 1, endnum, divisible_by_digits_inner(startnum) and table.insert(acc, startnum) or acc)\n        end\n    end\n    return divisible_by_digits_inner_outer(startnum, endnum, {})\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit ~= 0 and i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = (num - digit) / 10\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "\tlocal function divisible_by_digits_helper(num)\n\t\tlocal function divisible_by_digits_helper_helper(num, digit)\n\t\t\tif digit == 0 then\n\t\t\t\treturn true\n\t\t\telseif num % digit == 0 then\n\t\t\t\treturn divisible_by_digits_helper_helper(num, digit / 10)\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn divisible_by_digits_helper_helper(num, num)\n\tend\n\tlocal function divisible_by_digits_helper_helper(startnum, endnum)\n\t\tif startnum > endnum then\n\t\t\treturn {}\n\t\telseif divisible_by_digits_helper(startnum) then\n\t\t\treturn {startnum} + divisible_by_digits_helper_helper(startnum + 1, endnum)\n\t\telse\n\t\t\treturn divisible_by_digits_helper_helper(startnum + 1, endnum)\n\t\tend\n\tend\n\treturn divisible_by_digits_helper_helper(startnum, endnum)\nend",
    "  local divisible_by_digits = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(divisible_by_digits, i)\n    end\n  end\n  return divisible_by_digits\nend",
    "\tlocal divisible_numbers = {}\n\tfor i = startnum, endnum do\n\t\tlocal digits = {}\n\t\tfor digit in tostring(i):gmatch(\"%d\") do\n\t\t\ttable.insert(digits, tonumber(digit))\n\t\tend\n\t\tlocal divisible = true\n\t\tfor _, digit in ipairs(digits) do\n\t\t\tif i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(divisible_numbers, i)\n\t\tend\n\tend\n\treturn divisible_numbers\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "    local res = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(res, i)\n        end\n    end\n    return res\nend",
    "    local function divisible_by_digits_inner(num)\n        local function divisible_by_digits_inner_inner(num, digit)\n            return num % digit == 0\n        end\n        local function divisible_by_digits_inner_inner_inner(num, digit)\n            return divisible_by_digits_inner_inner(num, digit) and divisible_by_digits_inner_inner(num, digit)\n        end\n        return divisible_by_digits_inner_inner_inner(num, num % 10)\n    end\n    local function divisible_by_digits_inner_inner(startnum, endnum)\n        if startnum > endnum then\n            return {}\n        elseif divisible_by_digits_inner(startnum) then\n            return {startnum}\n        else\n            return {}\n        end\n    end\n    local function divisible_by_digits_inner_inner_inner(startnum, endnum)\n        return table.concat(divisible_by_digits_inner_inner(startnum, endnum), \" \")\n    end\n    return divisible_by_digits_inner_inner_inner(startnum, endnum)\nend",
    "\tlocal function divisible_by_digits_inner(num)\n\t\tlocal function divisible_by_digit(digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\tlocal digits = to_digits(num)\n\t\treturn all(divisible_by_digit, digits)\n\tend\n\treturn filter(divisible_by_digits_inner, range(startnum, endnum))\nend",
    "  local divisible = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible_by_all = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible_by_all = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible_by_all then\n      table.insert(divisible, i)\n    end\n  end\n  return divisible\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = tostring(i)\n        local divisible = true\n        for j = 1, #num do\n            local digit = tonumber(num:sub(j, j))\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local is_divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if is_divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local function divisible_by_digits_helper(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible_by_digits_helper(i) then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local divisible = true\n        for digit in tostring(i):gmatch(\"%d\") do\n            if i % tonumber(digit) ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits+1] = tonumber(digit)\n        end\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "  local function divisible(num)\n    local function divisible_by(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by, digits(num))\n  end\n  return filter(divisible, range(startnum, endnum))\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local function is_divisible(num)\n    local function is_divisible_by_digit(num, digit)\n      return num % digit == 0\n    end\n    local function is_divisible_by_digits(num, digits)\n      if #digits == 0 then\n        return true\n      else\n        return is_divisible_by_digit(num, digits[1]) and is_divisible_by_digits(num, {select(2, unpack(digits))})\n      end\n    end\n    return is_divisible_by_digits(num, digits(num))\n  end\n  local function divisible_numbers(startnum, endnum)\n    if startnum > endnum then\n      return {}\n    else\n      if is_divisible(startnum) then\n        return {startnum} .. divisible_numbers(startnum + 1, endnum)\n      else\n        return divisible_numbers(startnum + 1, endnum)\n      end\n    end\n  end\n  return divisible_numbers(startnum, endnum)\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local is_divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        is_divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if is_divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digits_helper_helper(num, digit)\n      if digit == 0 then\n        return true\n      elseif num % digit == 0 then\n        return divisible_by_digits_helper_helper(num, digit // 10)\n      else\n        return false\n      end\n    end\n    return divisible_by_digits_helper_helper(num, num)\n  end\n  local function divisible_by_digits_helper_helper(startnum, endnum)\n    if startnum > endnum then\n      return {}\n    elseif divisible_by_digits_helper(startnum) then\n      return {startnum} + divisible_by_digits_helper_helper(startnum + 1, endnum)\n    else\n      return divisible_by_digits_helper_helper(startnum + 1, endnum)\n    end\n  end\n  return divisible_by_digits_helper_helper(startnum, endnum)\nend",
    "  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local number = i\n    local divisible = true\n    while number > 0 do\n      local digit = number % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      number = math.floor(number / 10)\n    end\n    if divisible then\n      table.insert(divisible_numbers, i)\n    end\n  end\n  return divisible_numbers\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local divisible = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible_by_all = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible_by_all = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible_by_all then\n      table.insert(divisible, i)\n    end\n  end\n  return divisible\nend",
    "    local function is_divisible(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            table.insert(digits, tonumber(digit))\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for num = startnum, endnum do\n        if is_divisible(num) then\n            table.insert(result, num)\n        end\n    end\n    return result\nend",
    "  local divisible = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible_by_all = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible_by_all = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible_by_all then\n      table.insert(divisible, i)\n    end\n  end\n  return divisible\nend",
    "  local divisible_numbers = {}\n  for i=startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(divisible_numbers, i)\n    end\n  end\n  return divisible_numbers\nend",
    "  local function divisible(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = string.gmatch(num, '%d')\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible, range(startnum, endnum))\nend",
    "  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return num > 9 and all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible_by_digits_inner, range(startnum, endnum))\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = string.gmatch(tostring(num), \"%d\")\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        return num % 10 == 0 and divisible_by_digits_helper(num / 10) or divisible_by_digit(num % 10) and divisible_by_digits_helper(num / 10)\n    end\n    return function(num)\n        return num >= startnum and num <= endnum and divisible_by_digits_helper(num)\n    end\nend"
  ]
}