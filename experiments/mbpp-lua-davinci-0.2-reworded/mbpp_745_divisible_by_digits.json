{
  "name": "mbpp_745_divisible_by_digits",
  "language": "lua",
  "prompt": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = num_to_digits(num)\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "  local res = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(res, i)\n    end\n  end\n  return res\nend",
    "    local function divisible_by_digits_helper(num)\n        local digits = {}\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 then\n                return false\n            end\n            digits[#digits + 1] = digit\n            num = math.floor(num / 10)\n        end\n        for i = 1, #digits do\n            if num % digits[i] ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible_by_digits_helper(i) then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend",
    "  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits+1] = tonumber(digit)\n    end\n    for i = 1, #digits do\n      if num % digits[i] ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      result[#result+1] = i\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local divisible = true\n        for digit in tostring(i):gmatch(\"%d\") do\n            if i % tonumber(digit) ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local number = i\n    local divisible = true\n    while number > 0 do\n      local digit = number % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      number = math.floor(number / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local nums = {}\n  for i = startnum, endnum do\n    local num = tostring(i)\n    local divisible = true\n    for _, digit in ipairs(num:split(\"\")) do\n      if tonumber(digit) == 0 then\n        divisible = false\n        break\n      end\n      if i % tonumber(digit) ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(nums, i)\n    end\n  end\n  return nums\nend",
    "  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend",
    "  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch('%d') do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for num = startnum, endnum do\n    if divisible(num) then\n      result[#result + 1] = num\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "    local function is_divisible(num)\n        local function is_divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = to_digits(num)\n        return all(digits, is_divisible_by_digit)\n    end\n    return filter(range(startnum, endnum), is_divisible)\nend",
    "\tlocal function divisible(num)\n\t\tlocal digits = {}\n\t\tfor digit in tostring(num):gmatch('%d') do\n\t\t\tdigits[#digits+1] = tonumber(digit)\n\t\tend\n\t\tfor _, digit in ipairs(digits) do\n\t\t\tif num % digit ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor num = startnum, endnum do\n\t\tif divisible(num) then\n\t\t\tresult[#result+1] = num\n\t\tend\n\tend\n\treturn result\nend",
    "  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      divisible_numbers[#divisible_numbers + 1] = i\n    end\n  end\n  return divisible_numbers\nend",
    "    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend",
    "    local function is_divisible_by_digits(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for num = startnum, endnum do\n        if is_divisible_by_digits(num) then\n            result[#result + 1] = num\n        end\n    end\n    return result\nend",
    "\tlocal function is_divisible(num)\n\t\tlocal function is_divisible_by_digit(num, digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\tfor digit in tostring(num):gmatch(\"%d\") do\n\t\t\tif not is_divisible_by_digit(num, tonumber(digit)) then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif is_divisible(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend",
    "    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local number = i\n        local is_divisible = true\n        while number > 0 do\n            local digit = number % 10\n            if digit ~= 0 and i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n            number = math.floor(number / 10)\n        end\n        if is_divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend",
    "  local function divisible(num)\n    local function divisible_by(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by, digits(num))\n  end\n  return filter(divisible, range(startnum, endnum))\nend",
    "  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend",
    "\tlocal function divisible_by_digits_helper(num)\n\t\tlocal function divisible_by_digits_helper_helper(num, divisor)\n\t\t\tif num == 0 then\n\t\t\t\treturn true\n\t\t\telseif num % divisor ~= 0 then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\treturn divisible_by_digits_helper_helper(num / 10, divisor)\n\t\t\tend\n\t\tend\n\t\tlocal function divisible_by_digits_helper_helper_helper(num, divisor)\n\t\t\tif num == 0 then\n\t\t\t\treturn true\n\t\t\telseif divisible_by_digits_helper_helper(num, divisor) then\n\t\t\t\treturn divisible_by_digits_helper_helper_helper(num, divisor + 1)\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn divisible_by_digits_helper_helper_helper(num, 2)\n\tend\n\tlocal function divisible_by_digits_helper_helper(startnum, endnum, acc)\n\t\tif startnum > endnum then\n\t\t\treturn acc\n\t\telseif divisible_by_digits_helper(startnum) then\n\t\t\treturn divisible_by_digits_helper_helper(startnum + 1, endnum, acc .. startnum .. \" \")\n\t\telse\n\t\t\treturn divisible_by_digits_helper_helper(startnum + 1, endnum, acc)\n\t\tend\n\tend\n\treturn divisible_by_digits_helper_helper(startnum, endnum, \"\")\nend"
  ]
}