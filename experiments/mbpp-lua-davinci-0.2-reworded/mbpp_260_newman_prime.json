{
  "name": "mbpp_260_newman_prime",
  "language": "lua",
  "prompt": "-- Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nlocal function newman_prime(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = newman_prime\n    lu.assertEquals(candidate(3), 7)\n    lu.assertEquals(candidate(4), 17)\n    lu.assertEquals(candidate(5), 41)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal nsw_primes = {2, 3, 7, 23, 89, 233, 1597, 28657, 514229, 433494437, 2971215073, 99194853094755497}\n\treturn nsw_primes[n]\nend",
    "  local p = 1\n  for i = 1, n do\n    p = newman_prime_next(p)\n  end\n  return p\nend",
    "\tlocal i = 1\n\tlocal p = 2\n\twhile i < n do\n\t\tp = p + 1\n\t\tif not is_prime(p) then\n\t\t\tlocal q = p - 1\n\t\t\tlocal a = math.floor(math.sqrt(q))\n\t\t\tlocal b = a * a - q\n\t\t\twhile not is_square(b) do\n\t\t\t\ta = a + 1\n\t\t\t\tb = a * a - q\n\t\t\tend\n\t\t\tif a * a == q + b then\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn p\nend",
    "\tlocal a = 2\n\tlocal b = 1\n\tlocal c = 1\n\tlocal d = 1\n\tlocal e = 0\n\tlocal f = 0\n\tlocal g = 0\n\tlocal h = 0\n\tlocal i = 0\n\tlocal j = 0\n\tlocal k = 0\n\tlocal l = 0\n\tlocal m = 0\n\tlocal p = 0\n\tlocal q = 0\n\tlocal r = 0\n\tlocal s = 0\n\tlocal t = 0\n\tlocal u = 0\n\tlocal v = 0\n\tlocal w = 0\n\tlocal x = 0\n\tlocal y = 0\n\tlocal z = 0\n\tlocal A = 0\n\tlocal B = 0\n\tlocal C = 0\n\tlocal D = 0\n\tlocal E = 0\n\tlocal F = 0\n\tlocal G = 0\n\tlocal H = 0\n\tlocal I = 0\n\tlocal J = 0\n\tlocal K = 0\n\tlocal L = 0\n\tlocal M = 0\n\tlocal N = 0\n\tlocal O = 0\n\tlocal P = 0\n\tlocal Q = 0\n\tlocal R = 0\n\tlocal S = 0\n\tlocal T = 0\n\tlocal U = 0\n\tlocal V = 0\n\tlocal W = 0\n\tlocal X = 0\n\tlocal Y = 0\n\tlocal Z = 0\n\tlocal aa = 0\n\tlocal ab = 0\n\tlocal ac = 0\n\tlocal ad = 0\n\tlocal ae = 0\n\tlocal af = 0\n\tlocal ag = 0\n\tlocal ah = 0\n\tlocal ai = 0\n\tlocal aj = 0\n\tlocal ak = 0\n\tlocal al = 0\n\tlocal am = 0\n\tlocal an = 0\n\tlocal ao = 0\n\tlocal ap = 0\n\tlocal aq = 0\n\tlocal ar = 0\n\tlocal as = 0\n\tlocal at = 0\n\tlocal au = 0\n\tlocal av = 0\n\tlocal aw = 0\n\tlocal ax = 0\n\tlocal ay = 0\n\tlocal az = 0\n\tlocal ba = 0\n\tlocal bb = 0\n\tlocal bc = 0\n\tlocal bd = 0\n\tlocal be = 0\n\tlocal bf = 0\n\tlocal bg = 0\n\tlocal b",
    "\tlocal function newman_prime_iter(a, b, p, q, k)\n\t\tif k == n then\n\t\t\treturn p\n\t\telse\n\t\t\tlocal a2 = (a * a - 2 * b * b) % p\n\t\t\tlocal b2 = (2 * a * b) % p\n\t\t\tlocal p2 = (p * p - 2 * q * q) % n\n\t\t\tlocal q2 = (2 * p * q) % n\n\t\t\tlocal k2 = k + 1\n\t\t\treturn newman_prime_iter(a2, b2, p2, q2, k2)\n\t\tend\n\tend\n\treturn newman_prime_iter(1, 0, 3, 2, 1)\nend",
    "  local function is_prime(n)\n    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n        return false\n      end\n    end\n    return true\n  end",
    "    local primes = {2, 3, 7, 43, 1807, 3263443, 10650056950807, 113423713055421844361000443}\n    return primes[n]\nend",
    "  local p = 1\n  for i = 1, n do\n    p = newman_prime_after(p)\n  end\n  return p\nend",
    "\tlocal p = 1\n\tlocal q = 1\n\tlocal i = 1\n\twhile i < n do\n\t\tp, q = q, p + q\n\t\ti = i + 1\n\tend\n\treturn p\nend",
    "  local p = 1\n  local i = 1\n  while i <= n do\n    p = p + 2\n    if not is_prime(p) then\n      local q = p\n      while q % 2 == 0 do\n        q = q / 2\n      end\n      if q % 4 == 3 then\n        i = i + 1\n      end\n    end\n  end\n  return p\nend",
    "  local function newman_prime_iter(a, b, p, q, k)\n    if k == n then return p end\n    local a2 = (a * a) % p\n    local q2 = (q * q) % p\n    local d = (p - 1) / q2\n    local e = (p - 1) % q2\n    if e == 0 then\n      return newman_prime_iter(a2, b, p, q2, k + 1)\n    else\n      local f = d * q + 1\n      local g = e * q + 1\n      local h = gcd(f, g)\n      local i = f / h\n      local j = g / h\n      local k = (i * a + j * b) % p\n      local l = (i * a - j * b) % p\n      local m = (k * k + l * l) % p\n      return newman_prime_iter(a2, b, m, q2, k + 1)\n    end\n  end\n  return newman_prime_iter(1, 1, 2, 2, 1)\nend",
    "  local p = 2\n  local i = 1\n  while i < n do\n    p = p + 1\n    if is_prime(p) and is_prime((p-1)/2) then\n      i = i + 1\n    end\n  end\n  return p\nend",
    "\tlocal primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213,",
    "\tlocal p = 1\n\tlocal i = 0\n\twhile i < n do\n\t\tp = p + 2 * (2 ^ i)\n\t\ti = i + 1\n\tend\n\treturn p\nend",
    "  local p = 2\n  local i = 1\n  while i < n do\n    p = p + 1\n    if not is_prime(p) then\n      local q = p - 1\n      local r = q % 2^i\n      if r == 0 then\n        p = p + 2^i - r\n      end\n    else\n      i = i + 1\n    end\n  end\n  return p\nend",
    "\tlocal p = 2\n\tlocal i = 1\n\twhile i < n do\n\t\tp = p + 1\n\t\tif p % 2 == 0 then\n\t\t\tp = p + 1\n\t\tend\n\t\tlocal j = 1\n\t\twhile j < i do\n\t\t\tlocal q = newman_primes[j]\n\t\t\tif p % q == 0 then\n\t\t\t\tp = p + 2\n\t\t\t\tj = 1\n\t\t\telse\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\t\tnewman_primes[i] = p\n\tend\n\treturn p\nend",
    "  local function newman_prime_iter(a, b, p, q, k)\n    if k == n then return p end\n    local a2 = (a * a - 2 * b * b) % p\n    local b2 = (2 * a * b) % p\n    local p2 = (p * p - 2 * q * q) % n\n    local q2 = (2 * p * q) % n\n    return newman_prime_iter(a2, b2, p2, q2, k + 1)\n  end\n  return newman_prime_iter(1, 0, 1, 1, 1)\nend",
    "    local primes = {3, 7, 61}\n    local i = #primes\n    while i < n do\n        local p = primes[i]\n        local q = primes[i-1]\n        local r = primes[i-2]\n        local s = p*p - 2*q*r\n        local t = p*p - q*r\n        local u = p*p + q*r\n        local v = p*p + 2*q*r\n        local w = p*p + 3*q*r\n        local x = p*p + 4*q*r\n        local y = p*p + 5*q*r\n        local z = p*p + 6*q*r\n        if s % 3 == 0 then s = s / 3 end\n        if t % 3 == 0 then t = t / 3 end\n        if u % 3 == 0 then u = u / 3 end\n        if v % 3 == 0 then v = v / 3 end\n        if w % 3 == 0 then w = w / 3 end\n        if x % 3 == 0 then x = x / 3 end\n        if y % 3 == 0 then y = y / 3 end\n        if z % 3 == 0 then z = z / 3 end\n        if is_prime(s) then table.insert(primes, s) end\n        if is_prime(t) then table.insert(primes, t) end\n        if is_prime(u) then table.insert(primes, u) end\n        if is_prime(v) then table.insert(primes, v) end\n        if is_prime(w) then table.insert(primes, w) end\n        if is_prime(x) then table.insert(primes, x) end\n        if is_prime(y) then table.insert(primes, y) end\n        if is_prime(z) then table.insert(primes, z) end\n        i = i + 1\n    end\n    return primes[n]\nend",
    "    local nsw_primes = {2, 3, 7, 23, 89, 233, 1597, 28657, 514229, 433494437, 2971215073, 99194853094755497}\n    return nsw_primes[n]\nend",
    "\tlocal p = 2\n\tlocal i = 1\n\twhile i < n do\n\t\tp = p + 1\n\t\twhile not is_prime(p) do\n\t\t\tp = p + 1\n\t\tend\n\t\tlocal q = p\n\t\twhile q % 2 == 0 do\n\t\t\tq = q / 2\n\t\tend\n\t\tif q % 4 == 3 then\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn p\nend"
  ]
}