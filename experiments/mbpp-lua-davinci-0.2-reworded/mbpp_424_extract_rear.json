{
  "name": "mbpp_424_extract_rear",
  "language": "lua",
  "prompt": "-- Write a function to extract only the rear index element of each string in the given table.\nlocal function extract_rear(test_tuple)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_rear\n    lu.assertEquals(candidate({'Mers', 'for', 'Vers'}), {'s', 'r', 's'})\n    lu.assertEquals(candidate({'Avenge', 'for', 'People'}), {'e', 'r', 'e'})\n    lu.assertEquals(candidate({'Gotta', 'get', 'go'}), {'a', 't', 'o'})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        result[#result + 1] = v:sub(-1)\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        result[i] = v:sub(-1)\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        result[i] = string.sub(v, -1)\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        result[i] = v:sub(-1)\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        result[i] = v:sub(-1)\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        table.insert(result, string.sub(v, -1))\n    end\n    return result\nend",
    "    local rear_index = {}\n    for i, v in ipairs(test_tuple) do\n        rear_index[i] = string.sub(v, -1)\n    end\n    return rear_index\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        result[i] = v:sub(-1)\n    end\n    return result\nend",
    "    local result = {}\n    for _, tuple in ipairs(test_tuple) do\n        local rear_index = tuple[2]\n        table.insert(result, rear_index)\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        table.insert(result, string.sub(v, -1))\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        result[#result + 1] = v:sub(-1)\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        result[i] = test_tuple[i]:sub(-1)\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        result[#result + 1] = v:sub(-1)\n    end\n    return result\nend",
    "    local rear_index = {}\n    for i, v in ipairs(test_tuple) do\n        rear_index[i] = string.sub(v, -1)\n    end\n    return rear_index\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        result[#result + 1] = string.sub(v, -1)\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        result[i] = v:sub(-1)\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(test_tuple) do\n        result[i] = string.sub(v, -1)\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        result[#result + 1] = v:sub(-1)\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(test_tuple) do\n        result[#result + 1] = v:sub(-1)\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #test_tuple do\n        result[i] = test_tuple[i]:sub(-1)\n    end\n    return result\nend"
  ]
}