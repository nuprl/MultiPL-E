{
  "name": "mbpp_632_move_zero",
  "language": "lua",
  "prompt": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmlq8yfp.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpvmlq8yfp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local count = 0\n  for i = 1, #num_list do\n    if num_list[i] ~= 0 then\n      num_list[count + 1] = num_list[i]\n      count = count + 1\n    end\n  end\n  while count < #num_list do\n    num_list[count + 1] = 0\n    count = count + 1\n  end\n  return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for _, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zero_list, num)\n    else\n      table.insert(non_zero_list, num)\n    end\n  end\n  return non_zero_list + zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxv3w89jz.lua:12: attempt to perform arithmetic on local 'non_zero_list' (a table value)\nstack traceback:\n\t/tmp/tmpxv3w89jz.lua:12: in function 'candidate'\n\t/tmp/tmpxv3w89jz.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n\tlocal zero_list = {}\n\tlocal non_zero_list = {}\n\tfor i, v in ipairs(num_list) do\n\t\tif v == 0 then\n\t\t\ttable.insert(zero_list, v)\n\t\telse\n\t\t\ttable.insert(non_zero_list, v)\n\t\tend\n\tend\n\treturn non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrikj5tu.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpxrikj5tu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36bcyhc.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_36bcyhc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for _, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zero_list, num)\n    else\n      table.insert(non_zero_list, num)\n    end\n  end\n  return non_zero_list + zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxv3w89jz.lua:12: attempt to perform arithmetic on local 'non_zero_list' (a table value)\nstack traceback:\n\t/tmp/tmpxv3w89jz.lua:12: in function 'candidate'\n\t/tmp/tmpxv3w89jz.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_count = 0\n  for i = 1, #num_list do\n    if num_list[i] == 0 then\n      zero_count = zero_count + 1\n    else\n      num_list[i - zero_count] = num_list[i]\n    end\n  end\n  for i = 1, zero_count do\n    num_list[#num_list - i + 1] = 0\n  end\n  return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf8szvhj.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpxf8szvhj.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_count = 0\n    for i = 1, #num_list do\n        if num_list[i] == 0 then\n            zero_count = zero_count + 1\n        else\n            num_list[i - zero_count] = num_list[i]\n        end\n    end\n    for i = #num_list - zero_count + 1, #num_list do\n        num_list[i] = 0\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list + zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ngsj_k9.lua:12: attempt to perform arithmetic on local 'non_zero_list' (a table value)\nstack traceback:\n\t/tmp/tmp8ngsj_k9.lua:12: in function 'candidate'\n\t/tmp/tmp8ngsj_k9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  for i, v in ipairs(zero_list) do\n    table.insert(non_zero_list, v)\n  end\n  return non_zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zeros = {}\n  local non_zeros = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zeros, v)\n    else\n      table.insert(non_zeros, v)\n    end\n  end\n  return non_zeros + zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_u0p4bj9.lua:12: attempt to perform arithmetic on local 'non_zeros' (a table value)\nstack traceback:\n\t/tmp/tmp_u0p4bj9.lua:12: in function 'candidate'\n\t/tmp/tmp_u0p4bj9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local i = 1\n    local j = #num_list\n    while i < j do\n        if num_list[i] == 0 then\n            table.remove(num_list, i)\n            table.insert(num_list, j, 0)\n            j = j - 1\n        else\n            i = i + 1\n        end\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local i = 1\n    local j = #num_list\n    while i < j do\n        if num_list[i] == 0 then\n            table.remove(num_list, i)\n            table.insert(num_list, 0)\n            j = j - 1\n        else\n            i = i + 1\n        end\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local count = 0\n  for i = 1, #num_list do\n    if num_list[i] ~= 0 then\n      num_list[count] = num_list[i]\n      count = count + 1\n    end\n  end\n  while count < #num_list do\n    num_list[count] = 0\n    count = count + 1\n  end\n  return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1u2mn4w.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpo1u2mn4w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmlq8yfp.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpvmlq8yfp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf8szvhj.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpxf8szvhj.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local i = 1\n    local j = #num_list\n    while i < j do\n        if num_list[i] == 0 then\n            table.remove(num_list, i)\n            table.insert(num_list, j, 0)\n            j = j - 1\n        else\n            i = i + 1\n        end\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zeros = {}\n    local non_zeros = {}\n    for i, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zeros, num)\n        else\n            table.insert(non_zeros, num)\n        end\n    end\n    return non_zeros + zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local count = 0\n  for i = 1, #num_list do\n    if num_list[i] ~= 0 then\n      num_list[count + 1] = num_list[i]\n      count = count + 1\n    end\n  end\n  for i = count + 1, #num_list do\n    num_list[i] = 0\n  end\n  return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_index = 1\n  local non_zero_index = 1\n  while non_zero_index <= #num_list do\n    if num_list[non_zero_index] == 0 then\n      non_zero_index = non_zero_index + 1\n    else\n      num_list[zero_index] = num_list[non_zero_index]\n      zero_index = zero_index + 1\n      non_zero_index = non_zero_index + 1\n    end\n  end\n  while zero_index <= #num_list do\n    num_list[zero_index] = 0\n    zero_index = zero_index + 1\n  end\n  return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for _, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2r5lr6k.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpz2r5lr6k.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  for i, v in ipairs(zero_list) do\n    table.insert(non_zero_list, v)\n  end\n  return non_zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local i = 1\n  local j = #num_list\n  while i < j do\n    if num_list[i] == 0 then\n      table.remove(num_list, i)\n      table.insert(num_list, j, 0)\n      j = j - 1\n    else\n      i = i + 1\n    end\n  end\n  return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local i = 1\n    local j = 1\n    while i <= #num_list do\n        if num_list[i] == 0 then\n            table.remove(num_list, i)\n            table.insert(num_list, j, 0)\n            j = j + 1\n        else\n            i = i + 1\n        end\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppa26n2n6.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0, 0, 1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmppa26n2n6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n\tlocal zero_list = {}\n\tlocal non_zero_list = {}\n\tfor i, v in ipairs(num_list) do\n\t\tif v == 0 then\n\t\t\ttable.insert(zero_list, v)\n\t\telse\n\t\t\ttable.insert(non_zero_list, v)\n\t\tend\n\tend\n\treturn table.concat(non_zero_list, \",\") .. \",\" .. table.concat(zero_list, \",\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local i = 1\n    local j = #num_list\n    while i < j do\n        if num_list[i] == 0 then\n            table.remove(num_list, i)\n            table.insert(num_list, j, 0)\n            j = j - 1\n        else\n            i = i + 1\n        end\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgppzosmn.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpgppzosmn.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36bcyhc.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_36bcyhc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_count = 0\n    for i = 1, #num_list do\n        if num_list[i] == 0 then\n            zero_count = zero_count + 1\n        else\n            num_list[i - zero_count] = num_list[i]\n        end\n    end\n    for i = #num_list - zero_count + 1, #num_list do\n        num_list[i] = 0\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36bcyhc.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_36bcyhc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list .. zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp25gq28nj.lua:12: attempt to concatenate a table value (local 'non_zero_list')\nstack traceback:\n\t/tmp/tmp25gq28nj.lua:12: in local 'candidate'\n\t/tmp/tmp25gq28nj.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count + 1] = num_list[i]\n            count = count + 1\n        end\n    end\n    for i = count + 1, #num_list do\n        num_list[i] = 0\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list + zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ngsj_k9.lua:12: attempt to perform arithmetic on local 'non_zero_list' (a table value)\nstack traceback:\n\t/tmp/tmp8ngsj_k9.lua:12: in function 'candidate'\n\t/tmp/tmp8ngsj_k9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for _, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zero_list, num)\n    else\n      table.insert(non_zero_list, num)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3ih677v.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpq3ih677v.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list + zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ngsj_k9.lua:12: attempt to perform arithmetic on local 'non_zero_list' (a table value)\nstack traceback:\n\t/tmp/tmp8ngsj_k9.lua:12: in function 'candidate'\n\t/tmp/tmp8ngsj_k9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zeros = {}\n    local non_zeros = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zeros, v)\n        else\n            table.insert(non_zeros, v)\n        end\n    end\n    return non_zeros, zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2kspuham.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp2kspuham.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n\tlocal count = 0\n\tfor i = 1, #num_list do\n\t\tif num_list[i] ~= 0 then\n\t\t\tnum_list[count] = num_list[i]\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\twhile count < #num_list do\n\t\tnum_list[count] = 0\n\t\tcount = count + 1\n\tend\n\treturn num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1468afob.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmp1468afob.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16c17_ev.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp16c17_ev.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return table.concat(non_zero_list, \",\") .. \",\" .. table.concat(zero_list, \",\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivcrro4q.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: \"1,2,3,4,0,0\"\nstack traceback:\n\t/tmp/tmpivcrro4q.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n\tlocal zero_list = {}\n\tlocal non_zero_list = {}\n\tfor i = 1, #num_list do\n\t\tif num_list[i] == 0 then\n\t\t\ttable.insert(zero_list, num_list[i])\n\t\telse\n\t\t\ttable.insert(non_zero_list, num_list[i])\n\t\tend\n\tend\n\treturn non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4s3f6wwc.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp4s3f6wwc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count + 1] = num_list[i]\n            count = count + 1\n        end\n    end\n    for i = count + 1, #num_list do\n        num_list[i] = 0\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzopg3ben.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36bcyhc.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_36bcyhc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmlq8yfp.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpvmlq8yfp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local i = 1\n    while i <= #num_list do\n        if num_list[i] == 0 then\n            table.remove(num_list, i)\n            table.insert(num_list, 0)\n        else\n            i = i + 1\n        end\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count + 1] = num_list[i]\n            count = count + 1\n        end\n    end\n    for i = count + 1, #num_list do\n        num_list[i] = 0\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36bcyhc.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_36bcyhc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36bcyhc.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_36bcyhc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmlq8yfp.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpvmlq8yfp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_count = 0\n    for i = 1, #num_list do\n        if num_list[i] == 0 then\n            zero_count = zero_count + 1\n        else\n            num_list[i - zero_count] = num_list[i]\n        end\n    end\n    for i = #num_list - zero_count + 1, #num_list do\n        num_list[i] = 0\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  for i, v in ipairs(zero_list) do\n    table.insert(non_zero_list, v)\n  end\n  return non_zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list .. zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0xau2oha.lua:12: attempt to concatenate a table value (local 'non_zero_list')\nstack traceback:\n\t/tmp/tmp0xau2oha.lua:12: in local 'candidate'\n\t/tmp/tmp0xau2oha.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local i = 1\n    local j = 1\n    while j <= #num_list do\n        if num_list[j] == 0 then\n            j = j + 1\n        else\n            num_list[i] = num_list[j]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= #num_list do\n        num_list[i] = 0\n        i = i + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf8szvhj.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpxf8szvhj.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list .. zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp25gq28nj.lua:12: attempt to concatenate a table value (local 'non_zero_list')\nstack traceback:\n\t/tmp/tmp25gq28nj.lua:12: in local 'candidate'\n\t/tmp/tmp25gq28nj.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list + zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkw0skmxh.lua:12: attempt to perform arithmetic on a table value (local 'non_zero_list')\nstack traceback:\n\t/tmp/tmpkw0skmxh.lua:12: in local 'candidate'\n\t/tmp/tmpkw0skmxh.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local num_list_len = #num_list\n    local zero_count = 0\n    for i = 1, num_list_len do\n        if num_list[i] == 0 then\n            zero_count = zero_count + 1\n        else\n            num_list[i - zero_count] = num_list[i]\n        end\n    end\n    for i = num_list_len - zero_count + 1, num_list_len do\n        num_list[i] = 0\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for _, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2r5lr6k.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpz2r5lr6k.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmlq8yfp.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpvmlq8yfp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i = 1, #num_list do\n        if num_list[i] == 0 then\n            table.insert(zero_list, num_list[i])\n        else\n            table.insert(non_zero_list, num_list[i])\n        end\n    end\n    return non_zero_list .. zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplvlduff7.lua:12: attempt to concatenate a table value (local 'non_zero_list')\nstack traceback:\n\t/tmp/tmplvlduff7.lua:12: in local 'candidate'\n\t/tmp/tmplvlduff7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmlq8yfp.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpvmlq8yfp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local count = 0\n  for i = 1, #num_list do\n    if num_list[i] ~= 0 then\n      num_list[count] = num_list[i]\n      count = count + 1\n    end\n  end\n  while count < #num_list do\n    num_list[count] = 0\n    count = count + 1\n  end\n  return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1u2mn4w.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpo1u2mn4w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list + zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkw0skmxh.lua:12: attempt to perform arithmetic on a table value (local 'non_zero_list')\nstack traceback:\n\t/tmp/tmpkw0skmxh.lua:12: in local 'candidate'\n\t/tmp/tmpkw0skmxh.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n\tlocal zero_list = {}\n\tlocal non_zero_list = {}\n\tfor i, v in ipairs(num_list) do\n\t\tif v == 0 then\n\t\t\ttable.insert(zero_list, v)\n\t\telse\n\t\t\ttable.insert(non_zero_list, v)\n\t\tend\n\tend\n\treturn non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrikj5tu.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpxrikj5tu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16c17_ev.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp16c17_ev.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list + zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ngsj_k9.lua:12: attempt to perform arithmetic on local 'non_zero_list' (a table value)\nstack traceback:\n\t/tmp/tmp8ngsj_k9.lua:12: in function 'candidate'\n\t/tmp/tmp8ngsj_k9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zeros = {}\n  local non_zeros = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zeros, v)\n    else\n      table.insert(non_zeros, v)\n    end\n  end\n  for i, v in ipairs(zeros) do\n    table.insert(non_zeros, v)\n  end\n  return non_zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n   local zero_list = {}\n   local non_zero_list = {}\n   for i, v in ipairs(num_list) do\n      if v == 0 then\n         table.insert(zero_list, v)\n      else\n         table.insert(non_zero_list, v)\n      end\n   end\n   return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5oe5gb4o.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp5oe5gb4o.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36bcyhc.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_36bcyhc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return table.concat(non_zero_list, \",\") .. \",\" .. table.concat(zero_list, \",\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivcrro4q.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: \"1,2,3,4,0,0\"\nstack traceback:\n\t/tmp/tmpivcrro4q.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16c17_ev.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp16c17_ev.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpot5g8sbp.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpot5g8sbp.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuo5l_x6a.lua:9: expected: {1, 2, 3, 4, 0, 0}\nactual: nil\nstack traceback:\n\t/tmp/tmpuo5l_x6a.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zeros = {}\n  local non_zeros = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zeros, v)\n    else\n      table.insert(non_zeros, v)\n    end\n  end\n  return non_zeros + zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_u0p4bj9.lua:12: attempt to perform arithmetic on local 'non_zeros' (a table value)\nstack traceback:\n\t/tmp/tmp_u0p4bj9.lua:12: in function 'candidate'\n\t/tmp/tmp_u0p4bj9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zero_list, num)\n    else\n      table.insert(non_zero_list, num)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy25sodx_.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpy25sodx_.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return table.move(non_zero_list, 1, #non_zero_list, 1, num_list)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18bnz5lk.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4, 3, 4}\nstack traceback:\n\t/tmp/tmp18bnz5lk.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for _, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zero_list, num)\n    else\n      table.insert(non_zero_list, num)\n    end\n  end\n  return non_zero_list + zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxv3w89jz.lua:12: attempt to perform arithmetic on local 'non_zero_list' (a table value)\nstack traceback:\n\t/tmp/tmpxv3w89jz.lua:12: in function 'candidate'\n\t/tmp/tmpxv3w89jz.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf8szvhj.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpxf8szvhj.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36bcyhc.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_36bcyhc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for _, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list + zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp58z6j639.lua:12: attempt to perform arithmetic on a table value (local 'non_zero_list')\nstack traceback:\n\t/tmp/tmp58z6j639.lua:12: in local 'candidate'\n\t/tmp/tmp58z6j639.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list + zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ngsj_k9.lua:12: attempt to perform arithmetic on local 'non_zero_list' (a table value)\nstack traceback:\n\t/tmp/tmp8ngsj_k9.lua:12: in function 'candidate'\n\t/tmp/tmp8ngsj_k9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list + zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ngsj_k9.lua:12: attempt to perform arithmetic on local 'non_zero_list' (a table value)\nstack traceback:\n\t/tmp/tmp8ngsj_k9.lua:12: in function 'candidate'\n\t/tmp/tmp8ngsj_k9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36bcyhc.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_36bcyhc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf8szvhj.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpxf8szvhj.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zeros = {}\n  local non_zeros = {}\n  for i, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zeros, num)\n    else\n      table.insert(non_zeros, num)\n    end\n  end\n  return non_zeros + zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2t9tlhwu.lua:12: attempt to perform arithmetic on a table value (local 'non_zeros')\nstack traceback:\n\t/tmp/tmp2t9tlhwu.lua:12: in local 'candidate'\n\t/tmp/tmp2t9tlhwu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zeros = {}\n  local non_zeros = {}\n  for i, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zeros, num)\n    else\n      table.insert(non_zeros, num)\n    end\n  end\n  return non_zeros + zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2t9tlhwu.lua:12: attempt to perform arithmetic on a table value (local 'non_zeros')\nstack traceback:\n\t/tmp/tmp2t9tlhwu.lua:12: in local 'candidate'\n\t/tmp/tmp2t9tlhwu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n\tlocal count = 0\n\tfor i = 1, #num_list do\n\t\tif num_list[i] ~= 0 then\n\t\t\tnum_list[count + 1] = num_list[i]\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\tfor i = count + 1, #num_list do\n\t\tnum_list[i] = 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcvh2on8o.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: nil\nstack traceback:\n\t/tmp/tmpcvh2on8o.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local count = 0\n  for i = 1, #num_list do\n    if num_list[i] ~= 0 then\n      num_list[count] = num_list[i]\n      count = count + 1\n    end\n  end\n  while count < #num_list do\n    num_list[count] = 0\n    count = count + 1\n  end\n  return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1u2mn4w.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpo1u2mn4w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36bcyhc.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_36bcyhc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf8szvhj.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpxf8szvhj.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local nonzero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(nonzero_list, v)\n        end\n    end\n    return nonzero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkofpa22.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmprkofpa22.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zero_list, num)\n    else\n      table.insert(non_zero_list, num)\n    end\n  end\n  return table.concat(non_zero_list, \",\") .. \",\" .. table.concat(zero_list, \",\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3e3w2l9e.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: \"1,2,3,4,0,0\"\nstack traceback:\n\t/tmp/tmp3e3w2l9e.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for _, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zero_list, num)\n    else\n      table.insert(non_zero_list, num)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3ih677v.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpq3ih677v.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for _, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zero_list, num)\n    else\n      table.insert(non_zero_list, num)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3ih677v.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpq3ih677v.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for _, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zero_list, num)\n    else\n      table.insert(non_zero_list, num)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3ih677v.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpq3ih677v.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_count = 0\n    for i = 1, #num_list do\n        if num_list[i] == 0 then\n            zero_count = zero_count + 1\n        else\n            num_list[i - zero_count] = num_list[i]\n        end\n    end\n    for i = #num_list - zero_count + 1, #num_list do\n        num_list[i] = 0\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list + zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkw0skmxh.lua:12: attempt to perform arithmetic on a table value (local 'non_zero_list')\nstack traceback:\n\t/tmp/tmpkw0skmxh.lua:12: in local 'candidate'\n\t/tmp/tmpkw0skmxh.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count + 1] = num_list[i]\n            count = count + 1\n        end\n    end\n    for i = count + 1, #num_list do\n        num_list[i] = 0\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_count = 0\n    for i = 1, #num_list do\n        if num_list[i] == 0 then\n            zero_count = zero_count + 1\n        else\n            num_list[i - zero_count] = num_list[i]\n        end\n    end\n    for i = #num_list - zero_count + 1, #num_list do\n        num_list[i] = 0\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zeros = {}\n    local non_zeros = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zeros, num)\n        else\n            table.insert(non_zeros, num)\n        end\n    end\n    return non_zeros + zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpayz0065a.lua:12: attempt to perform arithmetic on a table value (local 'non_zeros')\nstack traceback:\n\t/tmp/tmpayz0065a.lua:12: in local 'candidate'\n\t/tmp/tmpayz0065a.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for _, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2r5lr6k.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpz2r5lr6k.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zero_list, num)\n    else\n      table.insert(non_zero_list, num)\n    end\n  end\n  return non_zero_list + zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpga_jut3o.lua:12: attempt to perform arithmetic on a table value (local 'non_zero_list')\nstack traceback:\n\t/tmp/tmpga_jut3o.lua:12: in local 'candidate'\n\t/tmp/tmpga_jut3o.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zeros = {}\n  local non_zeros = {}\n  for _, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zeros, num)\n    else\n      table.insert(non_zeros, num)\n    end\n  end\n  return non_zeros + zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpalxkce41.lua:12: attempt to perform arithmetic on a table value (local 'non_zeros')\nstack traceback:\n\t/tmp/tmpalxkce41.lua:12: in local 'candidate'\n\t/tmp/tmpalxkce41.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf8szvhj.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpxf8szvhj.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zeros = {}\n  local non_zeros = {}\n  for i, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zeros, num)\n    else\n      table.insert(non_zeros, num)\n    end\n  end\n  return non_zeros + zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2t9tlhwu.lua:12: attempt to perform arithmetic on a table value (local 'non_zeros')\nstack traceback:\n\t/tmp/tmp2t9tlhwu.lua:12: in local 'candidate'\n\t/tmp/tmp2t9tlhwu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for _, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zero_list, num)\n    else\n      table.insert(non_zero_list, num)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3ih677v.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpq3ih677v.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16c17_ev.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp16c17_ev.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36bcyhc.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_36bcyhc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36bcyhc.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_36bcyhc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmlq8yfp.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpvmlq8yfp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local i = 1\n    local j = #num_list\n    while i < j do\n        if num_list[i] == 0 then\n            table.remove(num_list, i)\n            table.insert(num_list, j, 0)\n            j = j - 1\n        else\n            i = i + 1\n        end\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list + zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ngsj_k9.lua:12: attempt to perform arithmetic on local 'non_zero_list' (a table value)\nstack traceback:\n\t/tmp/tmp8ngsj_k9.lua:12: in function 'candidate'\n\t/tmp/tmp8ngsj_k9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zeros = {}\n    local non_zeros = {}\n    for _, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zeros, v)\n        else\n            table.insert(non_zeros, v)\n        end\n    end\n    return non_zeros + zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8f77lm03.lua:12: attempt to perform arithmetic on a table value (local 'non_zeros')\nstack traceback:\n\t/tmp/tmp8f77lm03.lua:12: in local 'candidate'\n\t/tmp/tmp8f77lm03.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return table.concat(non_zero_list, \",\") .. \",\" .. table.concat(zero_list, \",\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivcrro4q.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: \"1,2,3,4,0,0\"\nstack traceback:\n\t/tmp/tmpivcrro4q.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zeros = {}\n  local non_zeros = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zeros, v)\n    else\n      table.insert(non_zeros, v)\n    end\n  end\n  return non_zeros, zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps75awy04.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmps75awy04.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local nonzero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(nonzero_list, v)\n    end\n  end\n  return table.concat(nonzero_list, \",\") .. \",\" .. table.concat(zero_list, \",\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgs0gsg7u.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: \"1,2,3,4,0,0\"\nstack traceback:\n\t/tmp/tmpgs0gsg7u.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n\tlocal zero_list = {}\n\tlocal non_zero_list = {}\n\tfor i,v in ipairs(num_list) do\n\t\tif v == 0 then\n\t\t\ttable.insert(zero_list, v)\n\t\telse\n\t\t\ttable.insert(non_zero_list, v)\n\t\tend\n\tend\n\tfor i,v in ipairs(zero_list) do\n\t\ttable.insert(non_zero_list, v)\n\tend\n\treturn non_zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36bcyhc.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_36bcyhc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zeros = {}\n  local non_zeros = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zeros, v)\n    else\n      table.insert(non_zeros, v)\n    end\n  end\n  return non_zeros + zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_u0p4bj9.lua:12: attempt to perform arithmetic on local 'non_zeros' (a table value)\nstack traceback:\n\t/tmp/tmp_u0p4bj9.lua:12: in function 'candidate'\n\t/tmp/tmp_u0p4bj9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16c17_ev.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp16c17_ev.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    for i = count, #num_list do\n        num_list[i] = 0\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppamvxeoh.lua:19: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 0}\nstack traceback:\n\t/tmp/tmppamvxeoh.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_u05zix1.lua:19: expected: {1, 2, 3, 4, 0, 0}\nactual: nil\nstack traceback:\n\t/tmp/tmp_u05zix1.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    -- Write your code here\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81me3r4q.lua:19: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp81me3r4q.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_count = 0\n    for i = 1, #num_list do\n        if num_list[i] == 0 then\n            zero_count = zero_count + 1\n        else\n            num_list[i - zero_count] = num_list[i]\n        end\n    end\n    for i = #num_list - zero_count + 1, #num_list do\n        num_list[i] = 0\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    for i = count, #num_list do\n        num_list[i] = 0\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppamvxeoh.lua:19: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 0}\nstack traceback:\n\t/tmp/tmppamvxeoh.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return table.concat(non_zero_list, ' ') .. ' ' .. table.concat(zero_list, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8lbv43n.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: \"1 2 3 4 0 0\"\nstack traceback:\n\t/tmp/tmpu8lbv43n.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "lua: /tmp/tmpruk89aoy.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16c17_ev.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp16c17_ev.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_count = 0\n    for i = 1, #num_list do\n        if num_list[i] == 0 then\n            zero_count = zero_count + 1\n        else\n            num_list[i - zero_count] = num_list[i]\n        end\n    end\n    for i = #num_list - zero_count + 1, #num_list do\n        num_list[i] = 0\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n   local zero_list = {}\n   local non_zero_list = {}\n   for _, v in ipairs(num_list) do\n      if v == 0 then\n         table.insert(zero_list, v)\n      else\n         table.insert(non_zero_list, v)\n      end\n   end\n   return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5wku7vre.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp5wku7vre.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local index = 1\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[index] = num_list[i]\n            index = index + 1\n        end\n    end\n    for i = index, #num_list do\n        num_list[i] = 0\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmlq8yfp.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpvmlq8yfp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list + zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ngsj_k9.lua:12: attempt to perform arithmetic on local 'non_zero_list' (a table value)\nstack traceback:\n\t/tmp/tmp8ngsj_k9.lua:12: in function 'candidate'\n\t/tmp/tmp8ngsj_k9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36bcyhc.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_36bcyhc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf8szvhj.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpxf8szvhj.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16c17_ev.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp16c17_ev.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zeros = {}\n    local non_zeros = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zeros, num)\n        else\n            table.insert(non_zeros, num)\n        end\n    end\n    return non_zeros + zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpayz0065a.lua:12: attempt to perform arithmetic on a table value (local 'non_zeros')\nstack traceback:\n\t/tmp/tmpayz0065a.lua:12: in local 'candidate'\n\t/tmp/tmpayz0065a.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmlq8yfp.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpvmlq8yfp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local count = 0\n  for i = 1, #num_list do\n    if num_list[i] ~= 0 then\n      num_list[count] = num_list[i]\n      count = count + 1\n    end\n  end\n  while count < #num_list do\n    num_list[count] = 0\n    count = count + 1\n  end\n  return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1u2mn4w.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpo1u2mn4w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return table.concat(non_zero_list, \",\") .. \",\" .. table.concat(zero_list, \",\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivcrro4q.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: \"1,2,3,4,0,0\"\nstack traceback:\n\t/tmp/tmpivcrro4q.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmlq8yfp.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpvmlq8yfp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zeros = {}\n  local non_zeros = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zeros, v)\n    else\n      table.insert(non_zeros, v)\n    end\n  end\n  return table.concat(non_zeros, \" \") .. \" \" .. table.concat(zeros, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngw8149p.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: \"1 2 3 4 0 0\"\nstack traceback:\n\t/tmp/tmpngw8149p.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmlq8yfp.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpvmlq8yfp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for _, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zero_list, num)\n    else\n      table.insert(non_zero_list, num)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3ih677v.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpq3ih677v.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zeros = {}\n  local non_zeros = {}\n  for _, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zeros, num)\n    else\n      table.insert(non_zeros, num)\n    end\n  end\n  return non_zeros + zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpalxkce41.lua:12: attempt to perform arithmetic on a table value (local 'non_zeros')\nstack traceback:\n\t/tmp/tmpalxkce41.lua:12: in local 'candidate'\n\t/tmp/tmpalxkce41.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list + zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkw0skmxh.lua:12: attempt to perform arithmetic on a table value (local 'non_zero_list')\nstack traceback:\n\t/tmp/tmpkw0skmxh.lua:12: in local 'candidate'\n\t/tmp/tmpkw0skmxh.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zeros = 0\n    for i = 1, #num_list do\n        if num_list[i] == 0 then\n            zeros = zeros + 1\n        else\n            num_list[i - zeros] = num_list[i]\n        end\n    end\n    for i = #num_list - zeros + 1, #num_list do\n        num_list[i] = 0\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36bcyhc.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_36bcyhc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local i = 1\n    local j = #num_list\n    while i < j do\n        if num_list[i] == 0 then\n            table.remove(num_list, i)\n            table.insert(num_list, 0)\n            j = j - 1\n        else\n            i = i + 1\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_0egfzj.lua:19: expected: {1, 2, 3, 4, 0, 0}\nactual: nil\nstack traceback:\n\t/tmp/tmpi_0egfzj.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36bcyhc.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_36bcyhc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf8szvhj.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpxf8szvhj.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zeros = {}\n  local non_zeros = {}\n  for _, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zeros, num)\n    else\n      table.insert(non_zeros, num)\n    end\n  end\n  return non_zeros, zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfmyx48a.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbfmyx48a.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36bcyhc.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_36bcyhc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zeros = {}\n    local non_zeros = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zeros, v)\n        else\n            table.insert(non_zeros, v)\n        end\n    end\n    return non_zeros + zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpowsvubmw.lua:12: attempt to perform arithmetic on a table value (local 'non_zeros')\nstack traceback:\n\t/tmp/tmpowsvubmw.lua:12: in local 'candidate'\n\t/tmp/tmpowsvubmw.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16c17_ev.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp16c17_ev.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local i = 1\n    local j = 1\n    while i <= #num_list do\n        if num_list[i] ~= 0 then\n            num_list[j] = num_list[i]\n            j = j + 1\n        end\n        i = i + 1\n    end\n    while j <= #num_list do\n        num_list[j] = 0\n        j = j + 1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp815enh7n.lua:21: expected: {1, 2, 3, 4, 0, 0}\nactual: nil\nstack traceback:\n\t/tmp/tmp815enh7n.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36bcyhc.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_36bcyhc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count + 1] = num_list[i]\n            count = count + 1\n        end\n    end\n    for i = count + 1, #num_list do\n        num_list[i] = 0\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local nonzero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(nonzero_list, v)\n        end\n    end\n    return nonzero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprkofpa22.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmprkofpa22.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for i, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zero_list, v)\n    else\n      table.insert(non_zero_list, v)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_36bcyhc.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp_36bcyhc.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmlq8yfp.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpvmlq8yfp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n\tlocal zero_list = {}\n\tlocal non_zero_list = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "lua: /tmp/tmp2fb4bnmd.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaujtty4.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpbaujtty4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zero_list = {}\n  local non_zero_list = {}\n  for _, num in ipairs(num_list) do\n    if num == 0 then\n      table.insert(zero_list, num)\n    else\n      table.insert(non_zero_list, num)\n    end\n  end\n  return non_zero_list, zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3ih677v.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: {1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpq3ih677v.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0\n    for i = 1, #num_list do\n        if num_list[i] ~= 0 then\n            num_list[count] = num_list[i]\n            count = count + 1\n        end\n    end\n    while count < #num_list do\n        num_list[count] = 0\n        count = count + 1\n    end\n    return num_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmlq8yfp.lua:20: expected: {1, 2, 3, 4, 0, 0}\nactual: {0=1, 2, 3, 4, 0, 0, 4}\nstack traceback:\n\t/tmp/tmpvmlq8yfp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for i, v in ipairs(num_list) do\n        if v == 0 then\n            table.insert(zero_list, v)\n        else\n            table.insert(non_zero_list, v)\n        end\n    end\n    return non_zero_list + zero_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2hp6kjec.lua:12: attempt to perform arithmetic on a table value (local 'non_zero_list')\nstack traceback:\n\t/tmp/tmp2hp6kjec.lua:12: in local 'candidate'\n\t/tmp/tmp2hp6kjec.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local zero_list = {}\n    local non_zero_list = {}\n    for _, num in ipairs(num_list) do\n        if num == 0 then\n            table.insert(zero_list, num)\n        else\n            table.insert(non_zero_list, num)\n        end\n    end\n    return table.concat(non_zero_list, \",\") .. \",\" .. table.concat(zero_list, \",\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp49_gnbyy.lua:18: expected: {1, 2, 3, 4, 0, 0}\nactual: \"1,2,3,4,0,0\"\nstack traceback:\n\t/tmp/tmp49_gnbyy.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n  local zeros = {}\n  local non_zeros = {}\n  for _, v in ipairs(num_list) do\n    if v == 0 then\n      table.insert(zeros, v)\n    else\n      table.insert(non_zeros, v)\n    end\n  end\n  return non_zeros + zeros\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123946,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9b6qahdh.lua:12: attempt to perform arithmetic on a table value (local 'non_zeros')\nstack traceback:\n\t/tmp/tmp9b6qahdh.lua:12: in local 'candidate'\n\t/tmp/tmp9b6qahdh.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}