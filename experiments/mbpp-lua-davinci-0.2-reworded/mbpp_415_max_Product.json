{
  "name": "mbpp_415_max_Product",
  "language": "lua",
  "prompt": "-- Write a luathon function to find a pair with highest product from a given table of integers.\nlocal function max_Product(arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_Product\n    lu.assertEquals(candidate({1, 2, 3, 4, 7, 0, 8, 4}), {7, 8})\n    lu.assertEquals(candidate({0, -1, -2, -4, 5, 0, -6}), {-4, -6})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local max = arr[1] * arr[2]\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            local product = arr[i] * arr[j]\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend",
    "  local max = arr[1] * arr[2]\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] * arr[j] > max then\n        max = arr[i] * arr[j]\n      end\n    end\n  end\n  return max\nend",
    "    local max_product = arr[1] * arr[2]\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            local product = arr[i] * arr[j]\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend",
    "\tlocal max = 0\n\tlocal max_i, max_j = 0, 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] * arr[j] > max then\n\t\t\t\tmax = arr[i] * arr[j]\n\t\t\t\tmax_i, max_j = i, j\n\t\t\tend\n\t\tend\n\tend\n\treturn max_i, max_j\nend",
    "  local max_product = arr[1] * arr[2]\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] * arr[j] > max_product then\n        max_product = arr[i] * arr[j]\n      end\n    end\n  end\n  return max_product\nend",
    "    local max = arr[1] * arr[2]\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            local product = arr[i] * arr[j]\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend",
    "\tlocal max = arr[1] * arr[2]\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] * arr[j] > max then\n\t\t\t\tmax = arr[i] * arr[j]\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend",
    "\tlocal max = 0\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] * arr[j] > max then\n\t\t\t\tmax = arr[i] * arr[j]\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend",
    "    local max = arr[1] * arr[2]\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] * arr[j] > max then\n                max = arr[i] * arr[j]\n            end\n        end\n    end\n    return max\nend",
    "    local max = arr[1] * arr[2]\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] * arr[j] > max then\n                max = arr[i] * arr[j]\n            end\n        end\n    end\n    return max\nend",
    "    local max = -math.huge\n    local max_i = 0\n    local max_j = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] * arr[j] > max then\n                max = arr[i] * arr[j]\n                max_i = i\n                max_j = j\n            end\n        end\n    end\n    return max_i, max_j\nend",
    "\tlocal max = arr[1]\n\tlocal max_2 = arr[2]\n\tfor i = 3, #arr do\n\t\tif arr[i] > max then\n\t\t\tmax_2 = max\n\t\t\tmax = arr[i]\n\t\telseif arr[i] > max_2 then\n\t\t\tmax_2 = arr[i]\n\t\tend\n\tend\n\treturn max, max_2\nend",
    "\tlocal max = arr[1] * arr[2]\n\tfor i = 1, #arr do\n\t\tfor j = i + 1, #arr do\n\t\t\tif arr[i] * arr[j] > max then\n\t\t\t\tmax = arr[i] * arr[j]\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend",
    "    local max_product = 0\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            if arr[i] * arr[j] > max_product then\n                max_product = arr[i] * arr[j]\n            end\n        end\n    end\n    return max_product\nend",
    "  local max = arr[1] * arr[2]\n  for i = 1, #arr do\n    for j = i + 1, #arr do\n      if arr[i] * arr[j] > max then\n        max = arr[i] * arr[j]\n      end\n    end\n  end\n  return max\nend",
    "\tlocal max_product = 0\n\tlocal max_i = 0\n\tlocal max_j = 0\n\tfor i = 1, #arr do\n\t\tfor j = i+1, #arr do\n\t\t\tif arr[i]*arr[j] > max_product then\n\t\t\t\tmax_product = arr[i]*arr[j]\n\t\t\t\tmax_i = i\n\t\t\t\tmax_j = j\n\t\t\tend\n\t\tend\n\tend\n\treturn max_i, max_j\nend",
    "    local max = -math.huge\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            local product = arr[i] * arr[j]\n            if product > max then\n                max = product\n            end\n        end\n    end\n    return max\nend",
    "  local max_product = 1\n  for i = 1, #arr do\n    max_product = max_product * arr[i]\n  end\n  return max_product\nend",
    "    local max_product = -math.huge\n    for i = 1, #arr do\n        for j = i + 1, #arr do\n            local product = arr[i] * arr[j]\n            if product > max_product then\n                max_product = product\n            end\n        end\n    end\n    return max_product\nend",
    "\tlocal max = arr[1]\n\tlocal max_index = 1\n\tlocal min = arr[1]\n\tlocal min_index = 1\n\tfor i,v in ipairs(arr) do\n\t\tif v > max then\n\t\t\tmax = v\n\t\t\tmax_index = i\n\t\tend\n\t\tif v < min then\n\t\t\tmin = v\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn max_index, min_index\nend"
  ]
}