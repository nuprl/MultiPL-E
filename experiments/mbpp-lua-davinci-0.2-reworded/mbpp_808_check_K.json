{
  "name": "mbpp_808_check_K",
  "language": "lua",
  "prompt": "-- Write a function to check if the given tables contain the k or not.\nlocal function check_K(test_tup, K)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_K\n    lu.assertEquals(candidate({10, 4, 5, 6, 8}, 6), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, 7), false)\n    lu.assertEquals(candidate({7, 8, 9, 44, 11, 12}, 11), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    for i = 1, #test_tup do\n        if test_tup[i] == K then\n            return true\n        end\n    end\n    return false\nend",
    "    for i = 1, #test_tup do\n        if test_tup[i] == K then\n            return true\n        end\n    end\n    return false\nend",
    "\tlocal tup_len = #test_tup\n\tfor i = 1, tup_len do\n\t\tif test_tup[i] == K then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "    local k_found = false\n    for i, tup in ipairs(test_tup) do\n        if tup.k == K then\n            k_found = true\n            break\n        end\n    end\n    return k_found\nend",
    "    local k = test_tup[1]\n    if k == K then\n        return true\n    end\n    return false\nend",
    "    for i = 1, #test_tup do\n        if test_tup[i] == K then\n            return true\n        end\n    end\n    return false\nend",
    "    for i = 1, #test_tup do\n        if test_tup[i] == K then\n            return true\n        end\n    end\n    return false\nend",
    "  for i = 1, #test_tup do\n    if test_tup[i] == K then\n      return true\n    end\n  end\n  return false\nend",
    "    for i = 1, #test_tup do\n        if test_tup[i] == K then\n            return true\n        end\n    end\n    return false\nend",
    "    for i = 1, #test_tup do\n        if test_tup[i] == K then\n            return true\n        end\n    end\n    return false\nend",
    "    local k_found = false\n    for _, tup in ipairs(test_tup) do\n        if tup[1] == K then\n            k_found = true\n            break\n        end\n    end\n    return k_found\nend",
    "    for i, v in ipairs(test_tup) do\n        if v == K then\n            return true\n        end\n    end\n    return false\nend",
    "    for i = 1, #test_tup do\n        if test_tup[i] == K then\n            return true\n        end\n    end\n    return false\nend",
    "    for _, tup in ipairs(test_tup) do\n        if tup[1] == K then\n            return true\n        end\n    end\n    return false\nend",
    "    for i = 1, #test_tup do\n        if test_tup[i] == K then\n            return true\n        end\n    end\n    return false\nend",
    "    for i = 1, #test_tup do\n        if test_tup[i] == K then\n            return true\n        end\n    end\n    return false\nend",
    "    for _, v in ipairs(test_tup) do\n        if v == K then\n            return true\n        end\n    end\n    return false\nend",
    "    for i = 1, #test_tup do\n        if test_tup[i] == K then\n            return true\n        end\n    end\n    return false\nend",
    "    for i, v in ipairs(test_tup) do\n        if v == K then\n            return true\n        end\n    end\n    return false\nend",
    "\tlocal k_found = false\n\tfor k, v in pairs(test_tup) do\n\t\tif v == K then\n\t\t\tk_found = true\n\t\t\tbreak\n\t\tend\n\tend\n\treturn k_found\nend"
  ]
}