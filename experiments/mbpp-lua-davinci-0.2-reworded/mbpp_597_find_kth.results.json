{
  "name": "mbpp_597_find_kth",
  "language": "lua",
  "prompt": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local i = 1\n  local j = 1\n  local kth = 0\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      kth = arr1[i]\n      i = i + 1\n    else\n      kth = arr2[j]\n      j = j + 1\n    end\n    k = k - 1\n    if k == 0 then\n      return kth\n    end\n  end\n  while i <= #arr1 do\n    kth = arr1[i]\n    i = i + 1\n    k = k - 1\n    if k == 0 then\n      return kth\n    end\n  end\n  while j <= #arr2 do\n    kth = arr2[j]\n    j = j + 1\n    k = k - 1\n    if k == 0 then\n      return kth\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then return nil end\n  if #arr1 == 0 then return arr2[k] end\n  if #arr2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8npfnbjb.lua:12: attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmp8npfnbjb.lua:12: in function 'candidate'\n\t/tmp/tmp8npfnbjb.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local mid1 = math.min(#arr1, k / 2)\n    local mid2 = math.min(#arr2, k / 2)\n    if arr1[mid1] < arr2[mid2] then\n        return find_kth(arr1, arr2, k - mid1)\n    else\n        return find_kth(arr1, arr2, k - mid2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph83nr29f.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmph83nr29f.lua:14: in function 'candidate'\n\t/tmp/tmph83nr29f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if not arr1 or not arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local m = math.min(#arr1, math.floor(k / 2))\n  local n = math.min(#arr2, math.floor(k / 2))\n  if arr1[m] < arr2[n] then\n    return find_kth(arr1, arr2, k - m)\n  else\n    return find_kth(arr1, arr2, k - n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_25kfkg.lua:27: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp6_25kfkg.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k <= 0 or k > #arr1 + #arr2 then\n        return nil\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "",
      "stderr": "lua: /tmp/tmpds2d7d1w.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local i, j = 1, 1\n    while true do\n        if i > #arr1 then return arr2[j + k - 1] end\n        if j > #arr2 then return arr1[i + k - 1] end\n        if k == 1 then return math.min(arr1[i], arr2[j]) end\n        local half = math.floor(k / 2)\n        local new_i = math.min(i + half, #arr1)\n        local new_j = math.min(j + half, #arr2)\n        if arr1[new_i] <= arr2[new_j] then\n            i = new_i + 1\n            k = k - (new_i - i + 1)\n        else\n            j = new_j + 1\n            k = k - (new_j - j + 1)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1dc9ukcb.lua:24: expected: 6, actual: nil\nstack traceback:\n\t/tmp/tmp1dc9ukcb.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local mid1 = math.min(#arr1, k / 2)\n    local mid2 = math.min(#arr2, k / 2)\n    if arr1[mid1] > arr2[mid2] then\n        return find_kth(arr1, arr2.slice(mid2 + 1), k - mid2)\n    else\n        return find_kth(arr1.slice(mid1 + 1), arr2, k - mid1)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjltgod5a.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpjltgod5a.lua:14: in function 'candidate'\n\t/tmp/tmpjltgod5a.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local i = 1\n    local j = 1\n    local kth = 0\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            kth = arr1[i]\n            i = i + 1\n        else\n            kth = arr2[j]\n            j = j + 1\n        end\n        k = k - 1\n        if k == 0 then\n            return kth\n        end\n    end\n    while i <= #arr1 do\n        kth = arr1[i]\n        i = i + 1\n        k = k - 1\n        if k == 0 then\n            return kth\n        end\n    end\n    while j <= #arr2 do\n        kth = arr2[j]\n        j = j + 1\n        k = k - 1\n        if k == 0 then\n            return kth\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "",
      "stderr": "lua: /tmp/tmpocrz7xb3.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  local mid1 = math.floor(#arr1 / 2)\n  local mid2 = math.floor(#arr2 / 2)\n  if mid1 + mid2 < k then\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1, arr2:sub(mid2 + 1), k - mid2)\n    else\n      return find_kth(arr1:sub(mid1 + 1), arr2, k - mid1)\n    end\n  else\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1:sub(1, mid1), arr2, k)\n    else\n      return find_kth(arr1, arr2:sub(1, mid2), k)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj3exq8c_.lua:18: attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmpj3exq8c_.lua:18: in function 'candidate'\n\t/tmp/tmpj3exq8c_.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local i = 1\n  local j = 1\n  local kth = nil\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      if i + j == k then\n        kth = arr1[i]\n        break\n      end\n      i = i + 1\n    else\n      if i + j == k then\n        kth = arr2[j]\n        break\n      end\n      j = j + 1\n    end\n  end\n  if kth == nil then\n    if i <= #arr1 then\n      kth = arr1[k - j]\n    else\n      kth = arr2[k - i]\n    end\n  end\n  return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpog7nftuy.lua:34: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpog7nftuy.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(#arr1, math.floor(k/2))\n    local j = math.min(#arr2, math.floor(k/2))\n    if arr1[i] < arr2[j] then\n        return find_kth(arr1, arr2, k-i)\n    else\n        return find_kth(arr1, arr2, k-j)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxop4w88.lua:24: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpbxop4w88.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    local i = math.min(#arr1, math.floor(k / 2))\n    local j = math.min(#arr2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2[j + 1], k - j)\n    else\n        return find_kth(arr1[i + 1], arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpro1hl43u.lua:6: attempt to get length of local 'arr1' (a number value)\nstack traceback:\n\t/tmp/tmpro1hl43u.lua:6: in function </tmp/tmpro1hl43u.lua:2>\n\t(tail call): ?\n\t/tmp/tmpro1hl43u.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local m = #arr1\n  local n = #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(k / 2, m)\n  local j = k - i\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  elseif arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return arr1[i]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpymfrvr7u.lua:16: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpymfrvr7u.lua:16: in function </tmp/tmpymfrvr7u.lua:2>\n\t(tail call): ?\n\t/tmp/tmpymfrvr7u.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(math.floor(k/2), #arr1)\n  local mid2 = math.min(math.floor(k/2), #arr2)\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1, arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2, k - mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjana6s1m.lua:24: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpjana6s1m.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  local mid1 = math.floor(#arr1 / 2)\n  local mid2 = math.floor(#arr2 / 2)\n  if mid1 + mid2 < k then\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1, arr2:sub(mid2 + 1), k - mid2 - 1)\n    else\n      return find_kth(arr1:sub(mid1 + 1), arr2, k - mid1 - 1)\n    end\n  else\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1:sub(1, mid1), arr2, k)\n    else\n      return find_kth(arr1, arr2:sub(1, mid2), k)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfjeyko8e.lua:18: attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmpfjeyko8e.lua:18: in function 'candidate'\n\t/tmp/tmpfjeyko8e.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local len1 = #arr1\n    local len2 = #arr2\n    if len1 == 0 then\n        return arr2[k]\n    end\n    if len2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(len1, math.floor(k / 2))\n    local j = math.min(len2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2.slice(j + 1), k - j)\n    else\n        return find_kth(arr1.slice(i + 1), arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2zfdqf33.lua:19: attempt to call field 'slice' (a nil value)\nstack traceback:\n\t/tmp/tmp2zfdqf33.lua:19: in function 'candidate'\n\t/tmp/tmp2zfdqf33.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local m = #arr1\n  local n = #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(m, k / 2)\n  local j = math.min(n, k / 2)\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, {unpack(arr2, j + 1)}, k - j)\n  else\n    return find_kth({unpack(arr1, i + 1)}, arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps1p1v2jp.lua:16: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmps1p1v2jp.lua:16: in function </tmp/tmps1p1v2jp.lua:2>\n\t(tail call): ?\n\t/tmp/tmps1p1v2jp.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  elseif len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(len1, math.floor(k/2))\n  local j = math.min(len2, math.floor(k/2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2[j+1], k-j)\n  else\n    return find_kth(arr1[i+1], arr2, k-i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyu1v6r2v.lua:3: attempt to get length of local 'arr1' (a number value)\nstack traceback:\n\t/tmp/tmpyu1v6r2v.lua:3: in function </tmp/tmpyu1v6r2v.lua:2>\n\t(tail call): ?\n\t/tmp/tmpyu1v6r2v.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  end\n  if len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  if k > len1 + len2 then\n    return nil\n  end\n  local i = math.min(k / 2, len1)\n  local j = math.min(k / 2, len2)\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1, arr2, k - i)\n  else\n    return find_kth(arr1, arr2, k - j)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt1n6n9cs.lua:19: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpt1n6n9cs.lua:19: in function 'candidate'\n\t/tmp/tmpt1n6n9cs.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local m = math.floor(k / 2)\n  local n = k - m\n  if arr1[m] < arr2[n] then\n    return find_kth(arr1, arr2, k - m)\n  else\n    return find_kth(arr1, arr2, k - n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoq2zypuz.lua:24: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpoq2zypuz.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local i = 1\n    local j = 1\n    local kth = 0\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            kth = arr1[i]\n            i = i + 1\n        else\n            kth = arr2[j]\n            j = j + 1\n        end\n        k = k - 1\n        if k == 0 then\n            break\n        end\n    end\n    if i > #arr1 then\n        kth = arr2[j + k - 1]\n    elseif j > #arr2 then\n        kth = arr1[i + k - 1]\n    end\n    return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjvl9jy9q.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local m, n = #arr1, #arr2\n  if m > n then return find_kth(arr2, arr1, k) end\n  if m == 0 then return arr2[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  local i = math.min(m, math.floor(k/2))\n  local j = math.min(n, math.floor(k/2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j+1), k-j)\n  else\n    return find_kth(arr1.slice(i+1), arr2, k-i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgsd34l3.lua:10: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpzgsd34l3.lua:10: in function </tmp/tmpzgsd34l3.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpzgsd34l3.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local i, j = 1, 1\n    while true do\n        if i > #arr1 then\n            return arr2[k - #arr1 + j - 1]\n        elseif j > #arr2 then\n            return arr1[k - #arr2 + i - 1]\n        end\n        if k == 1 then\n            return math.min(arr1[i], arr2[j])\n        end\n        if arr1[i] < arr2[j] then\n            i = i + 1\n        else\n            j = j + 1\n        end\n        k = k - 1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i, j = math.min(n1, math.floor(k / 2)), math.min(n2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5zenagp1.lua:15: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp5zenagp1.lua:15: in local 'candidate'\n\t/tmp/tmp5zenagp1.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local k1 = math.min(#arr1, math.floor(k / 2))\n  local k2 = math.min(#arr2, math.floor(k / 2))\n  if arr1[k1] < arr2[k2] then\n    return find_kth(arr1, arr2, k - k1)\n  else\n    return find_kth(arr1, arr2, k - k2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphf99vzve.lua:27: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmphf99vzve.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3okavgkx.lua:17: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp3okavgkx.lua:17: in local 'candidate'\n\t/tmp/tmp3okavgkx.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjvl9jy9q.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local i, j = 1, 1\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            if k == 1 then\n                return arr1[i]\n            end\n            i = i + 1\n            k = k - 1\n        else\n            if k == 1 then\n                return arr2[j]\n            end\n            j = j + 1\n            k = k - 1\n        end\n    end\n    if i <= #arr1 then\n        return arr1[i + k - 1]\n    else\n        return arr2[j + k - 1]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n = #arr1\n  local m = #arr2\n  if n == 0 then\n    return arr2[k]\n  end\n  if m == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(math.floor(k/2), n)\n  local j = math.min(math.floor(k/2), m)\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1[i+1], arr2, k-i)\n  else\n    return find_kth(arr1, arr2[j+1], k-j)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1evyp9dq.lua:3: attempt to get length of a number value (local 'arr1')\nstack traceback:\n\t/tmp/tmp1evyp9dq.lua:3: in function </tmp/tmp1evyp9dq.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp1evyp9dq.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 + n2 < k then\n    return nil\n  end\n  if n1 == 0 then\n    return arr2[k]\n  end\n  if n2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(n1, math.floor(k / 2))\n  local j = math.min(n2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4zydoo4_.lua:21: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp4zydoo4_.lua:21: in local 'candidate'\n\t/tmp/tmp4zydoo4_.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local i, j = 1, 1\n    while k > 1 do\n        if arr1[i] < arr2[j] then\n            i = i + 1\n        else\n            j = j + 1\n        end\n        k = k - 1\n    end\n    return math.min(arr1[i], arr2[j])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then return arr2[k] end\n  if n2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  if k == n1 + n2 then return math.max(arr1[n1], arr2[n2]) end\n  local i, j = math.floor(k/2), math.floor(k/2)\n  if i > n1 then i = n1 end\n  if j > n2 then j = n2 end\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1[i+1], arr2, k-i)\n  else\n    return find_kth(arr1, arr2[j+1], k-j)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg00vny1b.lua:3: attempt to get length of a number value (local 'arr1')\nstack traceback:\n\t/tmp/tmpg00vny1b.lua:3: in function </tmp/tmpg00vny1b.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpg00vny1b.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local len1 = #arr1\n    local len2 = #arr2\n    if len1 > len2 then\n        return find_kth(arr2, arr1, k)\n    end\n    if len1 == 0 then\n        return arr2[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(len1, math.floor(k / 2))\n    local j = math.min(len2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2, k - j)\n    else\n        return find_kth(arr1, arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4p1co87.lua:26: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpv4p1co87.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local m = math.floor(k / 2)\n  local n = math.min(#arr1, m)\n  local p = math.min(#arr2, m)\n  if arr1[n] < arr2[p] then\n    return find_kth(arr1, arr2, k - n)\n  else\n    return find_kth(arr2, arr1, k - p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7q6sxlxu.lua:19: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp7q6sxlxu.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local m = #arr1\n  local n = #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(k / 2, m)\n  local j = k - i\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  elseif arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return arr1[i]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpymfrvr7u.lua:16: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpymfrvr7u.lua:16: in function </tmp/tmpymfrvr7u.lua:2>\n\t(tail call): ?\n\t/tmp/tmpymfrvr7u.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if k > n1 + n2 then return nil end\n  if n1 == 0 then return arr2[k] end\n  if n2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  local i = math.min(n1, math.floor(k / 2))\n  local j = math.min(n2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2, k - j)\n  else\n    return find_kth(arr1, arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7hfqlrmd.lua:20: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp7hfqlrmd.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local i, j = 1, 1\n  local len1, len2 = #arr1, #arr2\n  while i <= len1 and j <= len2 do\n    if arr1[i] < arr2[j] then\n      if k == i + j - 1 then\n        return arr1[i]\n      end\n      i = i + 1\n    else\n      if k == i + j - 1 then\n        return arr2[j]\n      end\n      j = j + 1\n    end\n  end\n  if i > len1 then\n    return arr2[k - len1]\n  else\n    return arr1[k - len2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\n    local i = 1\n    local j = 1\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            k = k - 1\n            if k == 0 then\n                return arr1[i]\n            end\n            i = i + 1\n        else\n            k = k - 1\n            if k == 0 then\n                return arr2[j]\n            end\n            j = j + 1\n        end\n    end\n    if i <= #arr1 then\n        return arr1[i + k - 1]\n    else\n        return arr2[j + k - 1]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  elseif len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(len1, math.floor(k / 2))\n  local j = math.min(len2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxbm_mig3.lua:18: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpxbm_mig3.lua:18: in local 'candidate'\n\t/tmp/tmpxbm_mig3.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(#arr1, math.floor(k / 2))\n  local mid2 = math.min(#arr2, math.floor(k / 2))\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1, arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2, k - mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  local i = 1\n  local j = 1\n  local kth = nil\n  while i <= #arr1 and j <= #arr2 and k > 0 do\n    if arr1[i] < arr2[j] then\n      kth = arr1[i]\n      i = i + 1\n    else\n      kth = arr2[j]\n      j = j + 1\n    end\n    k = k - 1\n  end\n  while i <= #arr1 and k > 0 do\n    kth = arr1[i]\n    i = i + 1\n    k = k - 1\n  end\n  while j <= #arr2 and k > 0 do\n    kth = arr2[j]\n    j = j + 1\n    k = k - 1\n  end\n  return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local i, j = 1, 1\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            if i + j == k then\n                return arr1[i]\n            end\n            i = i + 1\n        else\n            if i + j == k then\n                return arr2[j]\n            end\n            j = j + 1\n        end\n    end\n    if i <= #arr1 then\n        return arr1[k - #arr2]\n    else\n        return arr2[k - #arr1]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  end\n  if len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(len1, math.floor(k / 2))\n  local j = math.min(len2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2[j + 1], k - j)\n  else\n    return find_kth(arr1[i + 1], arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd6_6bilr.lua:3: attempt to get length of a number value (local 'arr1')\nstack traceback:\n\t/tmp/tmpd6_6bilr.lua:3: in function </tmp/tmpd6_6bilr.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpd6_6bilr.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjvl9jy9q.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  end\n  if len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(len1, math.floor(k/2))\n  local j = math.min(len2, math.floor(k/2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j+1), k-j)\n  else\n    return find_kth(arr1.slice(i+1), arr2, k-i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfvfp_98o.lua:19: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpfvfp_98o.lua:19: in local 'candidate'\n\t/tmp/tmpfvfp_98o.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1, #arr2), k - j)\n  else\n    return find_kth(arr1.slice(i + 1, #arr1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbyydskd2.lua:20: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpbyydskd2.lua:20: in local 'candidate'\n\t/tmp/tmpbyydskd2.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local m, n = #arr1, #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(m, k / 2)\n  local j = math.min(n, k / 2)\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2[j + 1], k - j)\n  else\n    return find_kth(arr1[i + 1], arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptmxvf9ih.lua:15: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmptmxvf9ih.lua:15: in function </tmp/tmptmxvf9ih.lua:2>\n\t(...tail calls...)\n\t/tmp/tmptmxvf9ih.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  local i, j = 1, 1\n  while i <= len1 and j <= len2 do\n    if arr1[i] < arr2[j] then\n      if k == 1 then\n        return arr1[i]\n      end\n      i = i + 1\n      k = k - 1\n    else\n      if k == 1 then\n        return arr2[j]\n      end\n      j = j + 1\n      k = k - 1\n    end\n  end\n  while i <= len1 do\n    if k == 1 then\n      return arr1[i]\n    end\n    i = i + 1\n    k = k - 1\n  end\n  while j <= len2 do\n    if k == 1 then\n      return arr2[j]\n    end\n    j = j + 1\n    k = k - 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local i = 1\n    local j = 1\n    local kth = nil\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            kth = arr1[i]\n            i = i + 1\n        else\n            kth = arr2[j]\n            j = j + 1\n        end\n        k = k - 1\n        if k == 0 then\n            break\n        end\n    end\n    if k > 0 then\n        if i > #arr1 then\n            kth = arr2[j + k - 1]\n        else\n            kth = arr1[i + k - 1]\n        end\n    end\n    return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then return arr2[k] end\n  if n2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  if k == n1 + n2 then return math.max(arr1[n1], arr2[n2]) end\n  local i = math.floor(n1 / (n1 + n2) * (k - 1))\n  local j = (k - 1) - i\n  local ai_1, ai, bj_1, bj = arr1[i], arr1[i + 1], arr2[j], arr2[j + 1]\n  if ai < bj and bj_1 < ai then\n    return ai\n  elseif ai_1 < bj and bj_1 < ai_1 then\n    return bj\n  else\n    if ai < bj then\n      return find_kth(arr1, arr2, k - i - 1)\n    else\n      return find_kth(arr1, arr2, k - j - 1)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptbh03lzx.lua:29: expected: 8, actual: 4\nstack traceback:\n\t/tmp/tmptbh03lzx.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "",
      "stderr": "lua: /tmp/tmpocrz7xb3.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local i, j = 1, 1\n  local m, n = #arr1, #arr2\n  while i <= m and j <= n do\n    if arr1[i] < arr2[j] then\n      if i + j == k then\n        return arr1[i]\n      end\n      i = i + 1\n    else\n      if i + j == k then\n        return arr2[j]\n      end\n      j = j + 1\n    end\n  end\n  if i > m then\n    return arr2[k - m]\n  else\n    return arr1[k - n]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09lbmide.lua:28: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp09lbmide.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local m = #arr1\n  local n = #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(m, k / 2)\n  local j = math.min(n, k / 2)\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2, k - j)\n  else\n    return find_kth(arr1, arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcvv6hrlr.lua:16: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpcvv6hrlr.lua:16: in function </tmp/tmpcvv6hrlr.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpcvv6hrlr.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  if k == #arr1 + #arr2 then\n    return math.max(arr1[#arr1], arr2[#arr2])\n  end\n  local mid1 = math.floor(#arr1 / 2)\n  local mid2 = math.floor(#arr2 / 2)\n  if mid1 + mid2 < k then\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1, arr2:slice(mid2 + 1), k - mid2)\n    else\n      return find_kth(arr1:slice(mid1 + 1), arr2, k - mid1)\n    end\n  else\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1:slice(1, mid1), arr2, k)\n    else\n      return find_kth(arr1, arr2:slice(1, mid2), k)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyjesrzg.lua:24: attempt to call a nil value (method 'slice')\nstack traceback:\n\t/tmp/tmphyjesrzg.lua:24: in local 'candidate'\n\t/tmp/tmphyjesrzg.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(n1, math.floor(k / 2))\n  local j = math.min(n2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp944yi695.lua:16: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp944yi695.lua:16: in local 'candidate'\n\t/tmp/tmp944yi695.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local i, j = 1, 1\n    local len1, len2 = #arr1, #arr2\n    while i <= len1 and j <= len2 do\n        if arr1[i] <= arr2[j] then\n            if i + j == k then\n                return arr1[i]\n            end\n            i = i + 1\n        else\n            if i + j == k then\n                return arr2[j]\n            end\n            j = j + 1\n        end\n    end\n    if i <= len1 then\n        return arr1[k - len2]\n    else\n        return arr2[k - len1]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlmru6st.lua:28: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpjlmru6st.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local i = 1\n    local j = 1\n    local kth = 0\n    while true do\n        if arr1[i] < arr2[j] then\n            kth = arr1[i]\n            i = i + 1\n        else\n            kth = arr2[j]\n            j = j + 1\n        end\n        if i + j - 1 == k then\n            break\n        end\n    end\n    return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp49ecj6rj.lua:24: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp49ecj6rj.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(math.floor(k/2), #arr1)\n  local j = math.min(math.floor(k/2), #arr2)\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1[i+1], arr2, k-i)\n  else\n    return find_kth(arr1, arr2[j+1], k-j)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmiw6qfax.lua:3: attempt to get length of a number value (local 'arr1')\nstack traceback:\n\t/tmp/tmpmiw6qfax.lua:3: in function </tmp/tmpmiw6qfax.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpmiw6qfax.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if k == 1 then\n    return arr1[1] < arr2[1] and arr1[1] or arr2[1]\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == #arr1 + #arr2 then\n    return arr1[#arr1] > arr2[#arr2] and arr1[#arr1] or arr2[#arr2]\n  end\n  local i = math.floor(k / 2)\n  local j = k - i\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1, arr2, k - i)\n  elseif arr1[i] > arr2[j] then\n    return find_kth(arr2, arr1, k - j)\n  else\n    return arr1[i]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0tv3iu_e.lua:32: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp0tv3iu_e.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\n    local i = 1\n    local j = 1\n    local kth = nil\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            kth = arr1[i]\n            i = i + 1\n        else\n            kth = arr2[j]\n            j = j + 1\n        end\n        k = k - 1\n        if k == 0 then\n            break\n        end\n    end\n    if k > 0 then\n        if i > #arr1 then\n            kth = arr2[j + k - 1]\n        else\n            kth = arr1[i + k - 1]\n        end\n    end\n    return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\n    local i, j = 1, 1\n    while k > 1 do\n        if arr1[i] < arr2[j] then\n            i = i + 1\n        else\n            j = j + 1\n        end\n        k = k - 1\n    end\n    if arr1[i] < arr2[j] then\n        return arr1[i]\n    else\n        return arr2[j]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local len1 = #arr1\n    local len2 = #arr2\n    if len1 == 0 then\n        return arr2[k]\n    end\n    if len2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    if len1 > len2 then\n        return find_kth(arr2, arr1, k)\n    end\n    local i = math.min(len1, math.floor(k / 2))\n    local j = math.min(len2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2, k - j)\n    else\n        return find_kth(arr1, arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6mienb28.lua:29: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp6mienb28.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  elseif k == n1 + n2 then\n    return math.max(arr1[n1], arr2[n2])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqbsymwiz.lua:22: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local len1 = #arr1\n    local len2 = #arr2\n    if k > len1 + len2 then\n        return nil\n    end\n    if len1 == 0 then\n        return arr2[k]\n    end\n    if len2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(len1, math.floor(k / 2))\n    local j = math.min(len2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2, k - j)\n    else\n        return find_kth(arr1, arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl4mu8it7.lua:29: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpl4mu8it7.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local i, j = 1, 1\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      if i + j == k then return arr1[i] end\n      i = i + 1\n    else\n      if i + j == k then return arr2[j] end\n      j = j + 1\n    end\n  end\n  if i <= #arr1 then\n    return arr1[k - #arr2]\n  else\n    return arr2[k - #arr1]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm6akx_7b.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpm6akx_7b.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\n    local i, j = 1, 1\n    local kth = nil\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] <= arr2[j] then\n            kth = arr1[i]\n            i = i + 1\n        else\n            kth = arr2[j]\n            j = j + 1\n        end\n        k = k - 1\n        if k == 0 then\n            break\n        end\n    end\n    if k > 0 then\n        if i > #arr1 then\n            kth = arr2[j + k - 1]\n        else\n            kth = arr1[i + k - 1]\n        end\n    end\n    return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then return arr2[k] end\n  if #arr2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9eu3dkhq.lua:11: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp9eu3dkhq.lua:11: in local 'candidate'\n\t/tmp/tmp9eu3dkhq.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local i = 1\n    local j = 1\n    local kth = 0\n    while k > 0 do\n        if arr1[i] < arr2[j] then\n            kth = arr1[i]\n            i = i + 1\n        else\n            kth = arr2[j]\n            j = j + 1\n        end\n        k = k - 1\n    end\n    return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local len1, len2 = #arr1, #arr2\n  if len1 == 0 then return arr2[k] end\n  if len2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  if k == len1 + len2 then return math.max(arr1[len1], arr2[len2]) end\n  local mid1, mid2 = math.floor(k / 2), math.floor(k / 2)\n  if mid1 > len1 then mid1 = len1 end\n  if mid2 > len2 then mid2 = len2 end\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1, arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2, k - mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnhe4akl.lua:21: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpnnhe4akl.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "",
      "stderr": "lua: /tmp/tmpocrz7xb3.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local i = 1\n    local j = 1\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            k = k - 1\n            if k == 0 then\n                return arr1[i]\n            end\n            i = i + 1\n        else\n            k = k - 1\n            if k == 0 then\n                return arr2[j]\n            end\n            j = j + 1\n        end\n    end\n    if i <= #arr1 then\n        return arr1[i + k - 1]\n    else\n        return arr2[j + k - 1]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local len1 = #arr1\n    local len2 = #arr2\n    if len1 == 0 then\n        return arr2[k]\n    elseif len2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(len1, math.floor(k / 2))\n    local j = math.min(len2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2, k - j)\n    else\n        return find_kth(arr1, arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmygkuq47.lua:25: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpmygkuq47.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5ueiolhj.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(#arr1, math.floor(k / 2))\n  local mid2 = math.min(#arr2, math.floor(k / 2))\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1, arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2, k - mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0xmjldw.lua:27: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpx0xmjldw.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if #arr1 == 0 then\n        return arr2[k]\n    elseif #arr2 == 0 then\n        return arr1[k]\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0mymgt55.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local n1, n2 = #arr1, #arr2\n    if n1 == 0 then\n        return arr2[k]\n    elseif n2 == 0 then\n        return arr1[k]\n    elseif k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwdk0ekml.lua:20: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(#arr1, math.floor(k / 2))\n    local j = math.min(#arr2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, table.slice(arr2, j + 1), k - j)\n    else\n        return find_kth(table.slice(arr1, i + 1), arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphkz_yygh.lua:17: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmphkz_yygh.lua:17: in local 'candidate'\n\t/tmp/tmphkz_yygh.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local i = 1\n    local j = 1\n    local kth = 0\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] <= arr2[j] then\n            kth = arr1[i]\n            i = i + 1\n        else\n            kth = arr2[j]\n            j = j + 1\n        end\n        k = k - 1\n        if k == 0 then\n            return kth\n        end\n    end\n    if i <= #arr1 then\n        kth = arr1[i + k - 1]\n    else\n        kth = arr2[j + k - 1]\n    end\n    return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local i = 1\n  local j = 1\n  local kth = nil\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      kth = arr1[i]\n      i = i + 1\n    else\n      kth = arr2[j]\n      j = j + 1\n    end\n    k = k - 1\n    if k == 0 then\n      break\n    end\n  end\n  if k > 0 then\n    if i > #arr1 then\n      kth = arr2[j + k - 1]\n    elseif j > #arr2 then\n      kth = arr1[i + k - 1]\n    end\n  end\n  return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local len1 = #arr1\n    local len2 = #arr2\n    if len1 == 0 then\n        return arr2[k]\n    elseif len2 == 0 then\n        return arr1[k]\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzcf_b04w.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local i, j = 1, 1\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      k = k - 1\n      if k == 0 then return arr1[i] end\n      i = i + 1\n    else\n      k = k - 1\n      if k == 0 then return arr2[j] end\n      j = j + 1\n    end\n  end\n  if i <= #arr1 then\n    return arr1[i + k - 1]\n  else\n    return arr2[j + k - 1]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then return arr2[k] end\n  if n2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  if k == n1 + n2 then return math.max(arr1[n1], arr2[n2]) end\n  local i, j = math.floor(k / 2), math.floor(k / 2)\n  if i + j < k then\n    if arr1[i] < arr2[j] then\n      i = i + 1\n    else\n      j = j + 1\n    end\n  end\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1, arr2, k - i)\n  else\n    return find_kth(arr1, arr2, k - j)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0_feqx9.lua:26: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpi0_feqx9.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjvl9jy9q.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then return arr2[k] end\n  if n2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  if k == n1 + n2 then return math.max(arr1[n1], arr2[n2]) end\n  local i = math.floor(n1 / (n1 + n2) * (k - 1))\n  local j = (k - 1) - i\n  local ai_1, ai, bj_1, bj = arr1[i], arr1[i + 1], arr2[j], arr2[j + 1]\n  if ai < bj and bj_1 < ai_1 then\n    return find_kth(arr1, arr2, k)\n  elseif ai > bj and bj_1 > ai_1 then\n    return find_kth(arr2, arr1, k)\n  elseif ai <= bj then\n    return find_kth(arr1, arr2, k - i - 1)\n  else\n    return find_kth(arr2, arr1, k - j - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfae719tb.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpfae719tb.lua:11: in function </tmp/tmpfae719tb.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpfae719tb.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local m, n = #arr1, #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(m, math.floor(k/2))\n  local j = math.min(n, math.floor(k/2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2, k-j)\n  else\n    return find_kth(arr1, arr2, k-i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdgwmd7b.lua:25: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpzdgwmd7b.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmpui0m9vxs.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "",
      "stderr": "lua: /tmp/tmpocrz7xb3.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local m = math.min(#arr1, math.floor(k / 2))\n  local n = math.min(#arr2, math.floor(k / 2))\n  if arr1[m] < arr2[n] then\n    return find_kth(arr1, arr2, k - m)\n  else\n    return find_kth(arr1, arr2, k - n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0t3tloa.lua:24: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpv0t3tloa.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local m = math.floor(k / 2)\n  local n = k - m\n  if arr1[m] < arr2[n] then\n    return find_kth(arr1, arr2, m)\n  else\n    return find_kth(arr1, arr2, n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmparnrx58l.lua:24: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmparnrx58l.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n1 = #arr1\n  local n2 = #arr2\n  if k > n1 + n2 then\n    return nil\n  end\n  if n1 == 0 then\n    return arr2[k]\n  end\n  if n2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(math.floor(k / 2), n1)\n  local j = math.min(k - i, n2)\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  else\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0l_utkvo.lua:20: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp0l_utkvo.lua:20: in local 'candidate'\n\t/tmp/tmp0l_utkvo.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(#arr1, math.floor(k / 2))\n    local j = math.min(#arr2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2.slice(j + 1, #arr2), k - j)\n    else\n        return find_kth(arr1.slice(i + 1, #arr1), arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzxs4s8hh.lua:11: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpzxs4s8hh.lua:11: in local 'candidate'\n\t/tmp/tmpzxs4s8hh.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local m1 = math.min(#arr1, k / 2)\n  local m2 = math.min(#arr2, k / 2)\n  if arr1[m1] < arr2[m2] then\n    return find_kth(arr1:sub(m1 + 1), arr2, k - m1)\n  else\n    return find_kth(arr1, arr2:sub(m2 + 1), k - m2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbtxrtz46.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpbtxrtz46.lua:14: in local 'candidate'\n\t/tmp/tmpbtxrtz46.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn5sna0ze.lua:17: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpn5sna0ze.lua:17: in local 'candidate'\n\t/tmp/tmpn5sna0ze.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5ueiolhj.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_5ks73ii.lua:17: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp_5ks73ii.lua:17: in local 'candidate'\n\t/tmp/tmp_5ks73ii.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\n    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(#arr1, math.floor(k / 2))\n    local j = math.min(#arr2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2[j + 1], k - j)\n    else\n        return find_kth(arr1[i + 1], arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfw7crn4w.lua:3: attempt to get length of a number value (local 'arr1')\nstack traceback:\n\t/tmp/tmpfw7crn4w.lua:3: in function </tmp/tmpfw7crn4w.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpfw7crn4w.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  elseif #arr2 == 0 then\n    return arr1[k]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8mfb_nh8.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  local i = 1\n  local j = 1\n  local kth = nil\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      kth = arr1[i]\n      i = i + 1\n    else\n      kth = arr2[j]\n      j = j + 1\n    end\n    k = k - 1\n    if k == 0 then\n      return kth\n    end\n  end\n  if i <= #arr1 then\n    return arr1[i + k - 1]\n  else\n    return arr2[j + k - 1]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjvl9jy9q.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  elseif k == n1 + n2 then\n    return math.max(arr1[n1], arr2[n2])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqbsymwiz.lua:22: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\n    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    local mid1 = math.floor(#arr1 / 2)\n    local mid2 = math.floor(#arr2 / 2)\n    if mid1 + mid2 < k then\n        if arr1[mid1 + 1] > arr2[mid2 + 1] then\n            return find_kth(arr1, arr2:sub(mid2 + 1), k - mid2 - 1)\n        else\n            return find_kth(arr1:sub(mid1 + 1), arr2, k - mid1 - 1)\n        end\n    else\n        if arr1[mid1 + 1] > arr2[mid2 + 1] then\n            return find_kth(arr1:sub(1, mid1), arr2, k)\n        else\n            return find_kth(arr1, arr2:sub(1, mid2), k)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk2f79zns.lua:18: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpk2f79zns.lua:18: in local 'candidate'\n\t/tmp/tmpk2f79zns.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local len1 = #arr1\n    local len2 = #arr2\n    if len1 == 0 then\n        return arr2[k]\n    elseif len2 == 0 then\n        return arr1[k]\n    elseif k == 1 then\n        return math.min(arr1[1], arr2[1])\n    else\n        local i = math.min(len1, math.floor(k / 2))\n        local j = math.min(len2, math.floor(k / 2))\n        if arr1[i] > arr2[j] then\n            return find_kth(arr1, arr2, k - j)\n        else\n            return find_kth(arr1, arr2, k - i)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnkm7a_s6.lua:25: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpnkm7a_s6.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local len1 = #arr1\n    local len2 = #arr2\n    if len1 == 0 then\n        return arr2[k]\n    end\n    if len2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    if k > len1 + len2 then\n        return nil\n    end\n    local mid1 = math.floor(len1 / 2)\n    local mid2 = math.floor(len2 / 2)\n    if arr1[mid1] <= arr2[mid2] then\n        if k <= mid1 + mid2 then\n            return find_kth(arr1, arr2, k)\n        else\n            return find_kth(arr1, arr2, k - mid1)\n        end\n    else\n        if k <= mid1 + mid2 then\n            return find_kth(arr1, arr2, k)\n        else\n            return find_kth(arr1, arr2, k - mid2)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local i = 1\n    local j = 1\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            if k == 1 then\n                return arr1[i]\n            end\n            k = k - 1\n            i = i + 1\n        else\n            if k == 1 then\n                return arr2[j]\n            end\n            k = k - 1\n            j = j + 1\n        end\n    end\n    if i <= #arr1 then\n        return arr1[i + k - 1]\n    else\n        return arr2[j + k - 1]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3okavgkx.lua:17: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp3okavgkx.lua:17: in local 'candidate'\n\t/tmp/tmp3okavgkx.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local len1 = #arr1\n    local len2 = #arr2\n    if len1 == 0 then\n        return arr2[k]\n    end\n    if len2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(len1, k / 2)\n    local j = math.min(len2, k / 2)\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2, k - j)\n    else\n        return find_kth(arr1, arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7rfjvktb.lua:16: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp7rfjvktb.lua:16: in local 'candidate'\n\t/tmp/tmp7rfjvktb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if not arr1 then return arr2[k] end\n  if not arr2 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  local i = math.min(#arr1, math.floor(k/2))\n  local j = math.min(#arr2, math.floor(k/2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2[j+1], k-j)\n  else\n    return find_kth(arr1[i+1], arr2, k-i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6thtdih3.lua:6: attempt to get length of a number value (local 'arr1')\nstack traceback:\n\t/tmp/tmp6thtdih3.lua:6: in function </tmp/tmp6thtdih3.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp6thtdih3.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local i, j = 1, 1\n    local n1, n2 = #arr1, #arr2\n    while i <= n1 and j <= n2 do\n        if arr1[i] < arr2[j] then\n            if i + j == k then\n                return arr1[i]\n            end\n            i = i + 1\n        else\n            if i + j == k then\n                return arr2[j]\n            end\n            j = j + 1\n        end\n    end\n    if i > n1 then\n        return arr2[k - n1]\n    else\n        return arr1[k - n2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxnn15fg_.lua:28: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpxnn15fg_.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  local i = 1\n  local j = 1\n  local kth = 0\n  while i <= len1 and j <= len2 do\n    if arr1[i] < arr2[j] then\n      kth = arr1[i]\n      i = i + 1\n    else\n      kth = arr2[j]\n      j = j + 1\n    end\n    k = k - 1\n    if k == 0 then\n      break\n    end\n  end\n  if k > 0 then\n    if i <= len1 then\n      kth = arr1[i + k - 1]\n    else\n      kth = arr2[j + k - 1]\n    end\n  end\n  return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k <= 0 or k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  local m = math.floor(k / 2)\n  local n = k - m\n  if arr1[m] < arr2[n] then\n    return find_kth(arr1, arr2, k - m)\n  else\n    return find_kth(arr1, arr2, k - n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9rx5f1t8.lua:14: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp9rx5f1t8.lua:14: in function </tmp/tmp9rx5f1t8.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp9rx5f1t8.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local m = math.floor(k / 2)\n  local n = k - m\n  if arr1[m] == nil then\n    return find_kth(arr1, arr2, k - n)\n  elseif arr2[n] == nil then\n    return find_kth(arr1, arr2, k - m)\n  elseif arr1[m] < arr2[n] then\n    return find_kth(arr1, arr2, k - m)\n  else\n    return find_kth(arr1, arr2, k - n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1ik1st7.lua:22: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpd1ik1st7.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(#arr1, math.floor(k/2))\n    local j = math.min(#arr2, math.floor(k/2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2.slice(j+1), k-j)\n    else\n        return find_kth(arr1.slice(i+1), arr2, k-i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfar7vbsf.lua:17: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpfar7vbsf.lua:17: in local 'candidate'\n\t/tmp/tmpfar7vbsf.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  elseif #arr2 == 0 then\n    return arr1[k]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8mfb_nh8.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 > n2 then\n    return find_kth(arr2, arr1, k)\n  end\n  if n1 == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(n1, math.floor(k/2))\n  local j = math.min(n2, math.floor(k/2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2, k-j)\n  else\n    return find_kth(arr1, arr2, k-i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbcqdi8ua.lua:25: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpbcqdi8ua.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local len1 = #arr1\n    local len2 = #arr2\n    if len1 == 0 then\n        return arr2[k]\n    elseif len2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(len1, math.floor(k / 2))\n    local j = math.min(len2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2, k - j)\n    else\n        return find_kth(arr1, arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmygkuq47.lua:25: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpmygkuq47.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  elseif #arr2 == 0 then\n    return arr1[k]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8mfb_nh8.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local i = 1\n    local j = 1\n    local kth = 0\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            kth = arr1[i]\n            i = i + 1\n        else\n            kth = arr2[j]\n            j = j + 1\n        end\n        k = k - 1\n        if k == 0 then\n            break\n        end\n    end\n    if i <= #arr1 then\n        kth = arr1[i + k - 1]\n    elseif j <= #arr2 then\n        kth = arr2[j + k - 1]\n    end\n    return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjvl9jy9q.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  end\n  if len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(len1, math.floor(k/2))\n  local j = math.min(len2, math.floor(k/2))\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1, arr2, k-i)\n  else\n    return find_kth(arr1, arr2, k-j)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7leq0adk.lua:26: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp7leq0adk.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k/2))\n  local j = math.min(#arr2, math.floor(k/2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2[j+1], k-j)\n  else\n    return find_kth(arr1[i+1], arr2, k-i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp639iop6y.lua:3: attempt to get length of a number value (local 'arr1')\nstack traceback:\n\t/tmp/tmp639iop6y.lua:3: in function </tmp/tmp639iop6y.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp639iop6y.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local m, n = #arr1, #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(m, k / 2)\n  local j = math.min(n, k / 2)\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2, k - j)\n  else\n    return find_kth(arr1, arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2p9jiemw.lua:15: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp2p9jiemw.lua:15: in function </tmp/tmp2p9jiemw.lua:2>\n\t(...tail calls...)\n\t/tmp/tmp2p9jiemw.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local i = 1\n  local j = 1\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      if i + j == k then\n        return arr1[i]\n      end\n      i = i + 1\n    else\n      if i + j == k then\n        return arr2[j]\n      end\n      j = j + 1\n    end\n  end\n  if i > #arr1 then\n    return arr2[k - #arr1]\n  else\n    return arr1[k - #arr2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3l0y2ew.lua:28: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpb3l0y2ew.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local i = 1\n  local j = 1\n  local k = k\n  local n = #arr1\n  local m = #arr2\n  while i <= n and j <= m and k > 0 do\n    if arr1[i] < arr2[j] then\n      i = i + 1\n    else\n      j = j + 1\n    end\n    k = k - 1\n  end\n  if k == 0 then\n    if i <= n and j <= m then\n      return math.min(arr1[i], arr2[j])\n    elseif i <= n then\n      return arr1[i]\n    else\n      return arr2[j]\n    end\n  else\n    if i <= n then\n      return arr1[i + k - 1]\n    else\n      return arr2[j + k - 1]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0cksor4.lua:36: expected: 6, actual: 7\nstack traceback:\n\t/tmp/tmpj0cksor4.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  local i = 1\n  local j = 1\n  local kth = nil\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      kth = arr1[i]\n      i = i + 1\n    else\n      kth = arr2[j]\n      j = j + 1\n    end\n    k = k - 1\n    if k == 0 then\n      return kth\n    end\n  end\n  if i <= #arr1 then\n    return arr1[i + k - 1]\n  else\n    return arr2[j + k - 1]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  elseif #arr2 == 0 then\n    return arr1[k]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8mfb_nh8.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then return arr2[k] end\n  if n2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  if k == n1 + n2 then return math.max(arr1[n1], arr2[n2]) end\n  local i = math.floor(n1 / (n1 + n2) * (k - 1))\n  local j = (k - 1) - i\n  local ai_1, ai, bj_1, bj = arr1[i], arr1[i + 1], arr2[j], arr2[j + 1]\n  if ai < bj and bj_1 < ai then\n    return ai\n  elseif ai_1 < bj and bj_1 < ai_1 then\n    return bj_1\n  else\n    if ai < bj then\n      return find_kth(arr1, arr2, k - i - 1)\n    else\n      return find_kth(arr1, arr2, k - j - 1)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfa8gdz9l.lua:29: expected: 8, actual: 4\nstack traceback:\n\t/tmp/tmpfa8gdz9l.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  end\n  if len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  if len1 > len2 then\n    return find_kth(arr2, arr1, k)\n  end\n  local i = math.min(len1, math.floor(k / 2))\n  local j = math.min(len2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2, k - j)\n  else\n    return find_kth(arr1, arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12282dlo.lua:29: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp12282dlo.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then return arr2[k] end\n  if n2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  local i = math.min(n1, math.floor(k / 2))\n  local j = math.min(n2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpypg1j9m3.lua:12: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpypg1j9m3.lua:12: in local 'candidate'\n\t/tmp/tmpypg1j9m3.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5ueiolhj.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  elseif k > n1 + n2 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmp94o_2doa.lua:22: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n\tif k > #arr1 + #arr2 then\n\t\treturn nil\n\tend\n\tlocal i = 1\n\tlocal j = 1\n\tlocal kth = nil\n\twhile i <= #arr1 and j <= #arr2 and k > 0 do\n\t\tif arr1[i] < arr2[j] then\n\t\t\tkth = arr1[i]\n\t\t\ti = i + 1\n\t\telse\n\t\t\tkth = arr2[j]\n\t\t\tj = j + 1\n\t\tend\n\t\tk = k - 1\n\tend\n\twhile i <= #arr1 and k > 0 do\n\t\tkth = arr1[i]\n\t\ti = i + 1\n\t\tk = k - 1\n\tend\n\twhile j <= #arr2 and k > 0 do\n\t\tkth = arr2[j]\n\t\tj = j + 1\n\t\tk = k - 1\n\tend\n\treturn kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n = #arr1\n  local m = #arr2\n  if n == 0 then\n    return arr2[k]\n  elseif m == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(n, math.floor(k / 2))\n  local j = math.min(m, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkqeftla7.lua:18: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpkqeftla7.lua:18: in local 'candidate'\n\t/tmp/tmpkqeftla7.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6_81o4kr.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local i, j = 1, 1\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            k = k - 1\n            if k == 0 then\n                return arr1[i]\n            end\n            i = i + 1\n        else\n            k = k - 1\n            if k == 0 then\n                return arr2[j]\n            end\n            j = j + 1\n        end\n    end\n    while i <= #arr1 do\n        k = k - 1\n        if k == 0 then\n            return arr1[i]\n        end\n        i = i + 1\n    end\n    while j <= #arr2 do\n        k = k - 1\n        if k == 0 then\n            return arr2[j]\n        end\n        j = j + 1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmpty5uxkar.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\n    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local mid1 = math.min(#arr1, math.floor(k / 2))\n    local mid2 = math.min(#arr2, math.floor(k / 2))\n    if arr1[mid1] < arr2[mid2] then\n        return find_kth(arr1, arr2, k - mid1)\n    else\n        return find_kth(arr1, arr2, k - mid2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6joxgjb6.lua:27: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp6joxgjb6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmpw74hhmpm.lua:20: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(#arr1, math.floor(k / 2))\n    local j = math.min(#arr2, math.floor(k / 2))\n    if arr1[i] < arr2[j] then\n        return find_kth(arr1, arr2, k - i)\n    else\n        return find_kth(arr1, arr2, k - j)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3n1diz6w.lua:18: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp3n1diz6w.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local len1, len2 = #arr1, #arr2\n  if len1 == 0 then\n    return arr2[k]\n  elseif len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(len1, math.floor(k / 2))\n  local j = math.min(len2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2[j + 1, len2], k - j)\n  else\n    return find_kth(arr1[i + 1, len1], arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx4jm8432.lua:15: ']' expected near ','\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local i, j = 1, 1\n  local kth\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      kth = arr1[i]\n      i = i + 1\n    else\n      kth = arr2[j]\n      j = j + 1\n    end\n    k = k - 1\n    if k == 0 then\n      break\n    end\n  end\n  if k > 0 then\n    if i > #arr1 then\n      kth = arr2[j + k - 1]\n    else\n      kth = arr1[i + k - 1]\n    end\n  end\n  return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  elseif #arr2 == 0 then\n    return arr1[k]\n  end\n  local mid1 = math.floor(#arr1 / 2)\n  local mid2 = math.floor(#arr2 / 2)\n  if mid1 + mid2 < k then\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1, arr2[mid2 + 1], k - mid2 - 1)\n    else\n      return find_kth(arr1[mid1 + 1], arr2, k - mid1 - 1)\n    end\n  else\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1[1:mid1], arr2, k)\n    else\n      return find_kth(arr1, arr2[1:mid2], k)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmpb8xrriyh.lua:18: ']' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  -- if k is greater than the sum of lengths of the two arrays,\n  -- then there is no kth element\n  if k > #arr1 + #arr2 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmpspnps4n7.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local a = arr1[math.floor(k/2)] or math.huge\n  local b = arr2[math.floor(k/2)] or math.huge\n  if a < b then\n    return find_kth(arr1, arr2, k - math.floor(k/2))\n  else\n    return find_kth(arr2, arr1, k - math.floor(k/2))\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2q627re.lua:27: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpw2q627re.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph_5n_z0h.lua:11: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmph_5n_z0h.lua:11: in local 'candidate'\n\t/tmp/tmph_5n_z0h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  elseif len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(k/2, len1)\n  local j = math.min(k/2, len2)\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j+1), k-j)\n  else\n    return find_kth(arr1.slice(i+1), arr2, k-i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p8dorog.lua:15: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp_p8dorog.lua:15: in local 'candidate'\n\t/tmp/tmp_p8dorog.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\n    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local mid1 = math.floor(#arr1 / 2)\n    local mid2 = math.floor(#arr2 / 2)\n    if mid1 + mid2 < k then\n        if arr1[mid1] > arr2[mid2] then\n            return find_kth(arr1, arr2[mid2 + 1], k - mid2)\n        else\n            return find_kth(arr1[mid1 + 1], arr2, k - mid1)\n        end\n    else\n        if arr1[mid1] > arr2[mid2] then\n            return find_kth(arr1[1, mid1], arr2, k)\n        else\n            return find_kth(arr1, arr2[1, mid2], k)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmpn5jm41tz.lua:25: ']' expected near ','\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  -- If arr1 is empty, return kth element from arr2.\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  -- If arr2 is empty, return kth element from arr1.\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  -- If k is 1, return the minimum of first element of both arrays.\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  -- If k is greater than the sum of lengths of both arrays, return the maximum of last element of both arrays.\n  if k > #arr1 + #arr2 then\n    return math.max(arr1[#arr1], arr2[#arr2])\n  end\n  -- Now, we need to divide k into two parts.\n  -- Let's assume that we divide k into two parts as k1 and k2, where k1 + k2 = k.\n  -- We can assume that k1 = math.floor(k / 2) and k2 = k - k1.\n  local k1 = math.floor(k / 2)\n  local k2 = k - k1\n  -- Now, we need to compare the k1th element of arr1 and k2th element of arr2.\n  -- If arr1[k1] < arr2[k2], we need to recur for arr1[k1 + 1...n] and arr2.\n  -- Else, we need to recur for arr1 and arr2[k2 + 1...n].\n  if arr1[k1] < arr2[k2] then\n    return find_kth(slice(arr1, k1 + 1, #arr1), arr2, k2)\n  else\n    return find_kth(arr1, slice(arr2, k2 + 1, #arr2), k1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8sxk5q1f.lua:28: attempt to call a nil value (global 'slice')\nstack traceback:\n\t/tmp/tmp8sxk5q1f.lua:28: in local 'candidate'\n\t/tmp/tmp8sxk5q1f.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local k1 = math.min(#arr1, math.floor(k / 2))\n  local k2 = math.min(#arr2, math.floor(k / 2))\n  if arr1[k1] < arr2[k2] then\n    return find_kth(arr1:sub(k1 + 1), arr2, k - k1)\n  else\n    return find_kth(arr1, arr2:sub(k2 + 1), k - k2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2_r1kmr4.lua:9: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp2_r1kmr4.lua:9: in local 'candidate'\n\t/tmp/tmp2_r1kmr4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpedkeok7l.lua:20: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpedkeok7l.lua:20: in local 'candidate'\n\t/tmp/tmpedkeok7l.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local i = 1\n    local j = 1\n    local kth = 0\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            kth = arr1[i]\n            i = i + 1\n        else\n            kth = arr2[j]\n            j = j + 1\n        end\n        k = k - 1\n        if k == 0 then\n            break\n        end\n    end\n    if k > 0 then\n        if i > #arr1 then\n            kth = arr2[j + k - 1]\n        else\n            kth = arr1[i + k - 1]\n        end\n    end\n    return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  local i = 1\n  local j = 1\n  while k > 0 do\n    if arr1[i] == nil then\n      return arr2[j + k - 1]\n    end\n    if arr2[j] == nil then\n      return arr1[i + k - 1]\n    end\n    if arr1[i] < arr2[j] then\n      i = i + 1\n    else\n      j = j + 1\n    end\n    k = k - 1\n  end\n  return math.min(arr1[i], arr2[j])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33q99y8z.lua:28: expected: 6, actual: 7\nstack traceback:\n\t/tmp/tmp33q99y8z.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\n    local i = 1\n    local j = 1\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            if i + j == k then\n                return arr1[i]\n            end\n            i = i + 1\n        else\n            if i + j == k then\n                return arr2[j]\n            end\n            j = j + 1\n        end\n    end\n    if i > #arr1 then\n        return arr2[k - #arr1]\n    else\n        return arr1[k - #arr2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbgmdk_kp.lua:31: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpbgmdk_kp.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local m = math.floor(k / 2)\n  local n = k - m\n  if arr1[m] < arr2[n] then\n    return find_kth(arr1, arr2, m)\n  else\n    return find_kth(arr1, arr2, n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmparnrx58l.lua:24: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmparnrx58l.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then return arr2[k] end\n  if n2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  if k == n1 + n2 then return math.max(arr1[n1], arr2[n2]) end\n  local i = math.floor(k / 2)\n  local j = k - i\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1, arr2, k - i)\n  elseif arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2, k - j)\n  else\n    return arr1[i]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ntldyd8.lua:22: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp1ntldyd8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k <= 0 or k > #arr1 + #arr2 then\n    return nil\n  end\n  local i = 1\n  local j = 1\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      if i + j == k then\n        return arr1[i]\n      end\n      i = i + 1\n    else\n      if i + j == k then\n        return arr2[j]\n      end\n      j = j + 1\n    end\n  end\n  if i <= #arr1 then\n    return arr1[k - #arr2]\n  end\n  return arr2[k - #arr1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9kl4cwe.lua:30: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpy9kl4cwe.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then return arr2[k] end\n  if n2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmp39r294ak.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local m = math.floor(k / 2)\n  local n = k - m\n  if arr1[m] < arr2[n] then\n    return find_kth(arr1, arr2, k - m)\n  else\n    return find_kth(arr1, arr2, k - n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoq2zypuz.lua:24: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpoq2zypuz.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5ueiolhj.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n\tif k > #arr1 + #arr2 then\n\t\treturn nil\n\tend\n\tlocal i = 1\n\tlocal j = 1\n\tlocal kth = nil\n\twhile i <= #arr1 and j <= #arr2 do\n\t\tif arr1[i] < arr2[j] then\n\t\t\tkth = arr1[i]\n\t\t\ti = i + 1\n\t\telse\n\t\t\tkth = arr2[j]\n\t\t\tj = j + 1\n\t\tend\n\t\tk = k - 1\n\t\tif k == 0 then\n\t\t\treturn kth\n\t\tend\n\tend\n\tif i <= #arr1 then\n\t\treturn arr1[i + k - 1]\n\telse\n\t\treturn arr2[j + k - 1]\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(#arr1, math.floor(k / 2))\n  local mid2 = math.min(#arr2, math.floor(k / 2))\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1, arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2, k - mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local m, n = #arr1, #arr2\n    if m > n then\n        return find_kth(arr2, arr1, k)\n    end\n    if m == 0 then\n        return arr2[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmpf_f14vrv.lua:22: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5ueiolhj.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.floor(#arr1 / 2)\n  local mid2 = math.floor(#arr2 / 2)\n  if mid1 + mid2 < k then\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1, arr2:sub(mid2 + 1), k - mid2)\n    else\n      return find_kth(arr1:sub(mid1 + 1), arr2, k - mid1)\n    end\n  else\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1:sub(1, mid1), arr2, k)\n    else\n      return find_kth(arr1, arr2:sub(1, mid2), k)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp64piu22r.lua:18: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp64piu22r.lua:18: in local 'candidate'\n\t/tmp/tmp64piu22r.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local i, j = 1, 1\n    local n1, n2 = #arr1, #arr2\n    while i <= n1 and j <= n2 do\n        if arr1[i] < arr2[j] then\n            if k == 1 then\n                return arr1[i]\n            end\n            i = i + 1\n            k = k - 1\n        else\n            if k == 1 then\n                return arr2[j]\n            end\n            j = j + 1\n            k = k - 1\n        end\n    end\n    while i <= n1 do\n        if k == 1 then\n            return arr1[i]\n        end\n        i = i + 1\n        k = k - 1\n    end\n    while j <= n2 do\n        if k == 1 then\n            return arr2[j]\n        end\n        j = j + 1\n        k = k - 1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2[j + 1], k - j)\n  else\n    return find_kth(arr1[i + 1], arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpweqqcdwn.lua:3: attempt to get length of a number value (local 'arr1')\nstack traceback:\n\t/tmp/tmpweqqcdwn.lua:3: in function </tmp/tmpweqqcdwn.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpweqqcdwn.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "",
      "stderr": "lua: /tmp/tmpocrz7xb3.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then return arr2[k] end\n  if n2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  if k == n1 + n2 then return math.max(arr1[n1], arr2[n2]) end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgdzfgok1.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjvl9jy9q.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjvl9jy9q.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local i = 1\n  local j = 1\n  local k = k\n  while k > 0 do\n    if arr1[i] < arr2[j] then\n      i = i + 1\n    else\n      j = j + 1\n    end\n    k = k - 1\n  end\n  return arr1[i] < arr2[j] and arr1[i] or arr2[j]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpez7x29t1.lua:20: expected: 6, actual: 7\nstack traceback:\n\t/tmp/tmpez7x29t1.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  local i, j = 1, 1\n  while k > 1 do\n    if arr1[i] < arr2[j] then\n      i = i + 1\n    else\n      j = j + 1\n    end\n    k = k - 1\n  end\n  return arr1[i] < arr2[j] and arr1[i] or arr2[j]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local len1 = #arr1\n    local len2 = #arr2\n    if len1 > len2 then\n        return find_kth(arr2, arr1, k)\n    end\n    if len1 == 0 then\n        return arr2[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(len1, math.floor(k / 2))\n    local j = math.min(len2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2, k - j)\n    else\n        return find_kth(arr1, arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4p1co87.lua:26: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmpv4p1co87.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6_81o4kr.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  end\n  if len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(len1, math.floor(k / 2))\n  local j = math.min(len2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2[j + 1], k - j)\n  else\n    return find_kth(arr1[i + 1], arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd6_6bilr.lua:3: attempt to get length of a number value (local 'arr1')\nstack traceback:\n\t/tmp/tmpd6_6bilr.lua:3: in function </tmp/tmpd6_6bilr.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpd6_6bilr.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local n1, n2 = #arr1, #arr2\n    if n1 == 0 then\n        return arr2[k]\n    elseif n2 == 0 then\n        return arr1[k]\n    elseif k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i, j = math.min(n1, k/2), math.min(n2, k/2)\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2[j+1], k-j)\n    else\n        return find_kth(arr1[i+1], arr2, k-i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwik0nbvc.lua:12: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpwik0nbvc.lua:12: in local 'candidate'\n\t/tmp/tmpwik0nbvc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjvl9jy9q.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local n1, n2 = #arr1, #arr2\n    local i, j = math.floor(k / 2), math.floor(k / 2)\n    while i > 0 and j > 0 do\n        if arr1[i] > arr2[j] then\n            i = i - 1\n            j = j + 1\n        else\n            i = i + 1\n            j = j - 1\n        end\n    end\n    if i == 0 then\n        return arr2[k]\n    elseif j == 0 then\n        return arr1[k]\n    else\n        return math.min(arr1[i], arr2[j])\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123432,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "",
      "stderr": "lua: /tmp/tmpocrz7xb3.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6dm4_vl0.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  elseif k == n1 + n2 then\n    return math.max(arr1[n1], arr2[n2])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqbsymwiz.lua:22: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(#arr1, k / 2)\n  local j = math.min(#arr2, k / 2)\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwrbhqc0l.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpwrbhqc0l.lua:14: in local 'candidate'\n\t/tmp/tmpwrbhqc0l.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local i, j = 1, 1\n    while true do\n        if i > #arr1 then\n            return arr2[k - #arr1 + i - 1]\n        elseif j > #arr2 then\n            return arr1[k - #arr2 + j - 1]\n        elseif k == 1 then\n            return math.min(arr1[i], arr2[j])\n        end\n        local half = math.floor(k / 2)\n        local new_i = math.min(i + half - 1, #arr1)\n        local new_j = math.min(j + half - 1, #arr2)\n        if arr1[new_i] <= arr2[new_j] then\n            i = new_i + 1\n            k = k - (new_i - i + 1)\n        else\n            j = new_j + 1\n            k = k - (new_j - j + 1)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllizjey8.lua:28: expected: 6, actual: nil\nstack traceback:\n\t/tmp/tmpllizjey8.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local i, j = 1, 1\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      if i + j == k then\n        return arr1[i]\n      end\n      i = i + 1\n    else\n      if i + j == k then\n        return arr2[j]\n      end\n      j = j + 1\n    end\n  end\n  if i <= #arr1 then\n    return arr1[k - #arr2]\n  else\n    return arr2[k - #arr1]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1qf_15fq.lua:27: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp1qf_15fq.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjvl9jy9q.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local i, j = 1, 1\n  local len1, len2 = #arr1, #arr2\n  while i <= len1 and j <= len2 do\n    if arr1[i] < arr2[j] then\n      if i + j == k then\n        return arr1[i]\n      end\n      i = i + 1\n    else\n      if i + j == k then\n        return arr2[j]\n      end\n      j = j + 1\n    end\n  end\n  if i > len1 then\n    return arr2[k - len1]\n  else\n    return arr1[k - len2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplouxs4bj.lua:28: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmplouxs4bj.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local n1, n2 = #arr1, #arr2\n  if n1 == 0 then\n    return arr2[k]\n  elseif n2 == 0 then\n    return arr1[k]\n  elseif k == 1 then\n    return math.min(arr1[1], arr2[1])\n  elseif k == n1 + n2 then\n    return math.max(arr1[n1], arr2[n2])\n  end\n  local i = math.floor(k / 2)\n  local j = k - i\n  if arr1[i] <= arr2[j] then\n    return find_kth(arr1, arr2, k - i)\n  else\n    return find_kth(arr1, arr2, k - j)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ap_kwpl.lua:25: expected: 6, actual: 1\nstack traceback:\n\t/tmp/tmp5ap_kwpl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\n    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(#arr1, math.floor(k / 2))\n    local j = math.min(#arr2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2[j + 1], k - j)\n    else\n        return find_kth(arr1[i + 1], arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfw7crn4w.lua:3: attempt to get length of a number value (local 'arr1')\nstack traceback:\n\t/tmp/tmpfw7crn4w.lua:3: in function </tmp/tmpfw7crn4w.lua:2>\n\t(...tail calls...)\n\t/tmp/tmpfw7crn4w.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k > #arr1 + #arr2 then\n    return nil\n  end\n  local i = 1\n  local j = 1\n  local kth = nil\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      kth = arr1[i]\n      i = i + 1\n    else\n      kth = arr2[j]\n      j = j + 1\n    end\n    k = k - 1\n    if k == 0 then\n      break\n    end\n  end\n  if k > 0 then\n    if i > #arr1 then\n      kth = arr2[j + k - 1]\n    else\n      kth = arr1[i + k - 1]\n    end\n  end\n  return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(#arr1, math.floor(k / 2))\n  local mid2 = math.min(#arr2, math.floor(k / 2))\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1:sub(mid1 + 1), arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2:sub(mid2 + 1), k - mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0rf254lv.lua:15: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp0rf254lv.lua:15: in local 'candidate'\n\t/tmp/tmp0rf254lv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local m = #arr1\n  local n = #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(m, k / 2)\n  local j = math.min(n, k / 2)\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, {unpack(arr2, j + 1)}, k - j)\n  else\n    return find_kth({unpack(arr1, i + 1)}, arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps1p1v2jp.lua:16: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmps1p1v2jp.lua:16: in function </tmp/tmps1p1v2jp.lua:2>\n\t(tail call): ?\n\t/tmp/tmps1p1v2jp.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local len1 = #arr1\n    local len2 = #arr2\n    if len1 == 0 then\n        return arr2[k]\n    end\n    if len2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(k / 2, len1)\n    local j = math.min(k / 2, len2)\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2, k - j)\n    else\n        return find_kth(arr1, arr2, k - i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1t9o6uyx.lua:16: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp1t9o6uyx.lua:16: in local 'candidate'\n\t/tmp/tmp1t9o6uyx.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then return arr2[k] end\n  if len2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  local i = math.min(len1, math.floor(k / 2))\n  local j = math.min(len2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2.slice(j + 1), k - j)\n  else\n    return find_kth(arr1.slice(i + 1), arr2, k - i)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqtolvts4.lua:13: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpqtolvts4.lua:13: in local 'candidate'\n\t/tmp/tmpqtolvts4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(#arr1, math.floor(k / 2))\n  local mid2 = math.min(#arr2, math.floor(k / 2))\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1, arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2, k - mid2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\n    local i = 1\n    local j = 1\n    local kth = nil\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            kth = arr1[i]\n            i = i + 1\n        else\n            kth = arr2[j]\n            j = j + 1\n        end\n        k = k - 1\n        if k == 0 then\n            break\n        end\n    end\n    if k > 0 then\n        if i <= #arr1 then\n            kth = arr1[i + k - 1]\n        else\n            kth = arr2[j + k - 1]\n        end\n    end\n    return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local i, j = 1, 1\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            if k == 1 then\n                return arr1[i]\n            end\n            i = i + 1\n            k = k - 1\n        else\n            if k == 1 then\n                return arr2[j]\n            end\n            j = j + 1\n            k = k - 1\n        end\n    end\n    if i <= #arr1 then\n        return arr1[i + k - 1]\n    else\n        return arr2[j + k - 1]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjvl9jy9q.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    if k > #arr1 + #arr2 then\n        return nil\n    end\n    if k == 1 then\n        return math.min(arr1[1] or math.huge, arr2[1] or math.huge)\n    end\n    local i = math.min(math.floor(k / 2), #arr1)\n    local j = math.min(math.floor(k / 2), #arr2)\n    if arr1[i] < arr2[j] then\n        return find_kth(arr1:sub(i + 1), arr2, k - i)\n    else\n        return find_kth(arr1, arr2:sub(j + 1), k - j)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_12eo47s.lua:12: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp_12eo47s.lua:12: in local 'candidate'\n\t/tmp/tmp_12eo47s.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n  local m, n = #arr1, #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(k / 2, m)\n  local j = k - i\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  elseif arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return arr1[i]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123417,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppjegw63q.lua:15: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmppjegw63q.lua:15: in function </tmp/tmppjegw63q.lua:2>\n\t(...tail calls...)\n\t/tmp/tmppjegw63q.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}