{
  "name": "mbpp_724_power_base_sum",
  "language": "lua",
  "prompt": "-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal sum = 0\n\tlocal power_base = base ^ power\n\twhile power_base > 0 do\n\t\tsum = sum + power_base % 10\n\t\tpower_base = math.floor(power_base / 10)\n\tend\n\treturn sum\nend",
    "    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend",
    "    local result = base ^ power\n    local sum = 0\n    while result > 0 do\n        local digit = result % 10\n        sum = sum + digit\n        result = math.floor(result / 10)\n    end\n    return sum\nend",
    "    local sum = 0\n    local power_str = tostring(base ^ power)\n    for i = 1, #power_str do\n        sum = sum + tonumber(string.sub(power_str, i, i))\n    end\n    return sum\nend",
    "  local sum = 0\n  local result = base ^ power\n  while result > 0 do\n    sum = sum + result % 10\n    result = math.floor(result / 10)\n  end\n  return sum\nend",
    "    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend",
    "    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        sum = sum + digit\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend",
    "    local sum = 0\n    local power_str = tostring(base ^ power)\n    for i = 1, #power_str do\n        sum = sum + tonumber(power_str:sub(i, i))\n    end\n    return sum\nend",
    "\tlocal result = base^power\n\tlocal sum = 0\n\twhile result > 0 do\n\t\tsum = sum + result % 10\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn sum\nend",
    "\tlocal sum = 0\n\tlocal power_base = base ^ power\n\twhile power_base > 0 do\n\t\tsum = sum + power_base % 10\n\t\tpower_base = math.floor(power_base / 10)\n\tend\n\treturn sum\nend",
    "    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        local digit = power_base % 10\n        power_base = math.floor(power_base / 10)\n        sum = sum + digit\n    end\n    return sum\nend",
    "    local sum = 0\n    local base_power = base ^ power\n    while base_power > 0 do\n        local digit = base_power % 10\n        sum = sum + digit\n        base_power = math.floor(base_power / 10)\n    end\n    return sum\nend",
    "    local sum = 0\n    local power_base = base ^ power\n    while power_base > 0 do\n        sum = sum + power_base % 10\n        power_base = math.floor(power_base / 10)\n    end\n    return sum\nend",
    "    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + (result % 10)\n        result = math.floor(result / 10)\n    end\n    return sum\nend",
    "  local sum = 0\n  local power_base = base ^ power\n  while power_base > 0 do\n    local digit = power_base % 10\n    sum = sum + digit\n    power_base = math.floor(power_base / 10)\n  end\n  return sum\nend",
    "\tlocal result = base ^ power\n\tlocal sum = 0\n\twhile result > 0 do\n\t\tsum = sum + (result % 10)\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn sum\nend",
    "\tlocal sum = 0\n\tlocal result = base ^ power\n\twhile result > 0 do\n\t\tsum = sum + result % 10\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn sum\nend",
    "    local sum = 0\n    local power_str = tostring(base ^ power)\n    for i = 1, #power_str do\n        sum = sum + tonumber(power_str:sub(i, i))\n    end\n    return sum\nend",
    "    local sum = 0\n    local result = base ^ power\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend",
    "    local result = base ^ power\n    local sum = 0\n    while result > 0 do\n        sum = sum + result % 10\n        result = math.floor(result / 10)\n    end\n    return sum\nend"
  ]
}