{
  "name": "mbpp_638_wind_chill",
  "language": "lua",
  "prompt": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215*t - 11.37*v^0.16 + 0.3965*t*v^0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n\treturn math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n\treturn math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    local wc = 13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16\n    return math.floor(wc + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    local v = v * 0.277778\n    local t = t + 273.15\n    local w = 13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16\n    return math.floor(w + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfq_f0mg.lua:12: expected: 40, actual: 399\nstack traceback:\n\t/tmp/tmptfq_f0mg.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    else\n        return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215*t - 11.37*v^0.16 + 0.3965*t*v^0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n\treturn math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + (0.6215 * t) - (11.37 * (v ^ 0.16)) + (0.3965 * t * (v ^ 0.16)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t + (0.3965 * t - 11.37) * math.pow(v, 0.16))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n\tlocal wci = 13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16\n\treturn math.floor(wci + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    local v = v * 0.621371192\n    local t = (t - 32) * 5 / 9\n    local w = 35.74 + 0.6215 * t - 35.75 * v ^ 0.16 + 0.4275 * t * v ^ 0.16\n    return math.ceil(w)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphhsiiu2h.lua:12: expected: 40, actual: -33\nstack traceback:\n\t/tmp/tmphhsiiu2h.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215*t - 11.37*v^0.16 + 0.3965*t*v^0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215*t - 11.37*v^0.16 + 0.3965*t*v^0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n\treturn math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.ceil(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwzkuytim.lua:9: expected: 40, actual: 41\nstack traceback:\n\t/tmp/tmpwzkuytim.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n\treturn math.floor(13.12 + 0.6215*t - 11.37*v^0.16 + 0.3965*t*v^0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + (0.6215 * t) - (11.37 * (v ^ 0.16)) + (0.3965 * t * (v ^ 0.16)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215*t - 11.37*v^0.16 + 0.3965*t*v^0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    else\n        return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215*t - 11.37*v^0.16 + 0.3965*t*v^0.16)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n\treturn math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v^0.16 + 0.3965 * t * v^0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    local wci = 13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16\n    return math.floor(wci + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n\tif v < 4.8 then\n\t\treturn t\n\tend\n\treturn math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    local v = v * 0.621371192\n    local t = (t - 32) * 5 / 9\n    local w = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * math.pow(v, 0.16)\n    return math.floor(w + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6gs806g.lua:12: expected: 40, actual: -33\nstack traceback:\n\t/tmp/tmp_6gs806g.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n\treturn math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    local wci = 13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16\n    return math.floor(wci + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n\treturn math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v^0.16 + 0.3965 * t * v^0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v^0.16 + 0.3965 * t * v^0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n\tlocal wc = 13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16\n\treturn math.floor(wc + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    -- v is the wind velocity in km/h\n    -- t is the temperature in celsius\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + (0.6215 * t) - (11.37 * (v ^ 0.16)) + (0.3965 * t * (v ^ 0.16)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n\treturn math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    -- Wind chill index formula from https://en.wikipedia.org/wiki/Wind_chill\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n\treturn math.ceil(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprlv2jqfi.lua:9: expected: 40, actual: 41\nstack traceback:\n\t/tmp/tmprlv2jqfi.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 or t > 10 then\n        return nil\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvj3b_8yi.lua:12: expected: 40, actual: nil\nstack traceback:\n\t/tmp/tmpvj3b_8yi.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 or t > 10 then\n        return nil\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprvlunjtj.lua:12: expected: 40, actual: nil\nstack traceback:\n\t/tmp/tmprvlunjtj.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215*t - 11.37*v^0.16 + 0.3965*t*v^0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 then\n        return t\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215*t - 11.37*v^0.16 + 0.3965*t*v^0.16)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    if v < 4.8 or t > 10 then\n        return nil\n    end\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprvlunjtj.lua:12: expected: 40, actual: nil\nstack traceback:\n\t/tmp/tmprvlunjtj.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    local v = v * 0.277778\n    local t = t + 273.15\n    local wci = 13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16\n    return math.ceil(wci)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyarqxlgp.lua:12: expected: 40, actual: 399\nstack traceback:\n\t/tmp/tmpyarqxlgp.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n\treturn math.floor(13.12 + 0.6215*t - 11.37*v^0.16 + 0.3965*t*v^0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + (0.6215 * t) - (11.37 * v ^ 0.16) + (0.3965 * t * v ^ 0.16) + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    local v = v * 0.277778\n    local t = t + 273.15\n    local wci = 13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16\n    return math.floor(wci + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124116,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bqpnkm1.lua:12: expected: 40, actual: 399\nstack traceback:\n\t/tmp/tmp8bqpnkm1.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n  return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    return math.floor(13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16 + 0.5)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027814,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}