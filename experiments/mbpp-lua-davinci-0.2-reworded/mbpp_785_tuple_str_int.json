{
  "name": "mbpp_785_tuple_str_int",
  "language": "lua",
  "prompt": "-- Write a function to convert table string to integer table.\nlocal function tuple_str_int(test_str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_str_int\n    lu.assertEquals(candidate('(7, 8, 9)'), {7, 8, 9})\n    lu.assertEquals(candidate('(1, 2, 3)'), {1, 2, 3})\n    lu.assertEquals(candidate('(4, 5, 6)'), {4, 5, 6})\n    lu.assertEquals(candidate('(7, 81, 19)'), {7, 81, 19})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local test_int = {}\n    for i = 1, #test_str do\n        test_int[i] = tonumber(test_str[i])\n    end\n    return test_int\nend",
    "    local test_int = {}\n    for i = 1, #test_str do\n        test_int[i] = tonumber(test_str[i])\n    end\n    return test_int\nend",
    "    local test_int = {}\n    for i = 1, #test_str do\n        test_int[i] = tonumber(test_str[i])\n    end\n    return test_int\nend",
    "    local test_int = {}\n    for i = 1, #test_str do\n        test_int[i] = tonumber(test_str[i])\n    end\n    return test_int\nend",
    "    local test_int = {}\n    for i = 1, #test_str do\n        test_int[i] = tonumber(test_str[i])\n    end\n    return test_int\nend",
    "    local test_int = {}\n    for i, v in ipairs(test_str) do\n        test_int[i] = tonumber(v)\n    end\n    return test_int\nend",
    "    local test_int = {}\n    for i = 1, #test_str do\n        test_int[i] = tonumber(test_str[i])\n    end\n    return test_int\nend",
    "  local test_int = {}\n  for i = 1, #test_str do\n    test_int[i] = tonumber(test_str[i])\n  end\n  return test_int\nend",
    "    local test_int = {}\n    for i = 1, #test_str do\n        test_int[i] = tonumber(test_str[i])\n    end\n    return test_int\nend",
    "  local test_int = {}\n  for i,v in ipairs(test_str) do\n    test_int[i] = tonumber(v)\n  end\n  return test_int\nend",
    "    local test_int = {}\n    for i, v in ipairs(test_str) do\n        test_int[i] = tonumber(v)\n    end\n    return test_int\nend",
    "  local test_int = {}\n  for i = 1, #test_str do\n    test_int[i] = string.byte(test_str, i)\n  end\n  return test_int\nend",
    "    local test_int = {}\n    for i = 1, #test_str do\n        test_int[i] = tonumber(test_str[i])\n    end\n    return test_int\nend",
    "    local test_int = {}\n    for i = 1, #test_str do\n        test_int[i] = tonumber(test_str[i])\n    end\n    return test_int\nend",
    "    local test_int = {}\n    for i,v in ipairs(test_str) do\n        test_int[i] = tonumber(v)\n    end\n    return test_int\nend",
    "    local test_int = {}\n    for i = 1, #test_str do\n        test_int[i] = tonumber(test_str[i])\n    end\n    return test_int\nend",
    "    local test_int = {}\n    for i, v in ipairs(test_str) do\n        test_int[i] = tonumber(v)\n    end\n    return test_int\nend",
    "  local t = {}\n  for i = 1, #test_str do\n    t[i] = test_str:byte(i)\n  end\n  return t\nend",
    "    local test_int = {}\n    for i = 1, #test_str do\n        test_int[i] = tonumber(test_str[i])\n    end\n    return test_int\nend",
    "    local test_int = {}\n    for i = 1, #test_str do\n        test_int[i] = tonumber(test_str[i])\n    end\n    return test_int\nend"
  ]
}