{
  "name": "mbpp_619_move_num",
  "language": "lua",
  "prompt": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local str_table = {}\n    local num_table = {}\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            table.insert(num_table, test_str:sub(i, i))\n        else\n            table.insert(str_table, test_str:sub(i, i))\n        end\n    end\n    return table.concat(str_table) .. table.concat(num_table)\nend",
    "    local nums = {}\n    local chars = {}\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            table.insert(nums, test_str:sub(i, i))\n        else\n            table.insert(chars, test_str:sub(i, i))\n        end\n    end\n    return table.concat(chars) .. table.concat(nums)\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num = num .. test_str[i]\n        else\n            str = str .. test_str[i]\n        end\n    end\n    return str .. num\nend",
    "    local str_table = {}\n    local num_table = {}\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            table.insert(num_table, string.sub(test_str, i, i))\n            test_str = string.gsub(test_str, string.sub(test_str, i, i), \"\", 1)\n        else\n            table.insert(str_table, string.sub(test_str, i, i))\n        end\n    end\n    return table.concat(str_table) .. table.concat(num_table)\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = string.sub(test_str, i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str:sub(i, i), \"%d\") then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num = num .. test_str[i]\n        else\n            str = str .. test_str[i]\n        end\n    end\n    return str .. num\nend",
    "    local str_tbl = {}\n    local num_tbl = {}\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            table.insert(num_tbl, c)\n        else\n            table.insert(str_tbl, c)\n        end\n    end\n    return table.concat(str_tbl) .. table.concat(num_tbl)\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num_str = num_str .. test_str[i]\n        else\n            char_str = char_str .. test_str[i]\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str_t = {}\n    local num_t = {}\n    local new_str = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            table.insert(num_t, test_str:sub(i, i))\n        else\n            table.insert(str_t, test_str:sub(i, i))\n        end\n    end\n    for i = 1, #str_t do\n        new_str = new_str .. str_t[i]\n    end\n    for i = 1, #num_t do\n        new_str = new_str .. num_t[i]\n    end\n    return new_str\nend",
    "\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tif tonumber(test_str:sub(i, i)) then\n\t\t\tnum = num .. test_str:sub(i, i)\n\t\telse\n\t\t\tstr = str .. test_str:sub(i, i)\n\t\tend\n\tend\n\treturn str .. num\nend",
    "    local str = ''\n    local num = ''\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend"
  ]
}