{
  "name": "mbpp_619_move_num",
  "language": "lua",
  "prompt": "-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local str_table = {}\n    local num_table = {}\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            table.insert(num_table, test_str:sub(i, i))\n        else\n            table.insert(str_table, test_str:sub(i, i))\n        end\n    end\n    return table.concat(str_table) .. table.concat(num_table)\nend",
    "    local nums = {}\n    local chars = {}\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            table.insert(nums, test_str:sub(i, i))\n        else\n            table.insert(chars, test_str:sub(i, i))\n        end\n    end\n    return table.concat(chars) .. table.concat(nums)\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num = num .. test_str[i]\n        else\n            str = str .. test_str[i]\n        end\n    end\n    return str .. num\nend",
    "    local str_table = {}\n    local num_table = {}\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            table.insert(num_table, string.sub(test_str, i, i))\n            test_str = string.gsub(test_str, string.sub(test_str, i, i), \"\", 1)\n        else\n            table.insert(str_table, string.sub(test_str, i, i))\n        end\n    end\n    return table.concat(str_table) .. table.concat(num_table)\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = string.sub(test_str, i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str:sub(i, i), \"%d\") then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num = num .. test_str[i]\n        else\n            str = str .. test_str[i]\n        end\n    end\n    return str .. num\nend",
    "    local str_tbl = {}\n    local num_tbl = {}\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            table.insert(num_tbl, c)\n        else\n            table.insert(str_tbl, c)\n        end\n    end\n    return table.concat(str_tbl) .. table.concat(num_tbl)\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num_str = num_str .. test_str[i]\n        else\n            char_str = char_str .. test_str[i]\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str_t = {}\n    local num_t = {}\n    local new_str = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            table.insert(num_t, test_str:sub(i, i))\n        else\n            table.insert(str_t, test_str:sub(i, i))\n        end\n    end\n    for i = 1, #str_t do\n        new_str = new_str .. str_t[i]\n    end\n    for i = 1, #num_t do\n        new_str = new_str .. num_t[i]\n    end\n    return new_str\nend",
    "\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tif tonumber(test_str:sub(i, i)) then\n\t\t\tnum = num .. test_str:sub(i, i)\n\t\telse\n\t\t\tstr = str .. test_str:sub(i, i)\n\t\tend\n\tend\n\treturn str .. num\nend",
    "    local str = ''\n    local num = ''\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num = num .. char\n        else\n            str = str .. char\n        end\n    end\n    return str .. num\nend",
    "  local num_str = \"\"\n  local str = \"\"\n  for i = 1, #test_str do\n    if tonumber(test_str:sub(i, i)) then\n      num_str = num_str .. test_str:sub(i, i)\n    else\n      str = str .. test_str:sub(i, i)\n    end\n  end\n  return str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%d\") then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local c = string.sub(test_str, i, i)\n        if tonumber(c) then\n            num_str = num_str .. c\n        else\n            char_str = char_str .. c\n        end\n    end\n    return char_str .. num_str\nend",
    "\tlocal num_str = \"\"\n\tlocal other_str = \"\"\n\tfor i = 1, #test_str do\n\t\tif tonumber(test_str:sub(i, i)) then\n\t\t\tnum_str = num_str .. test_str:sub(i, i)\n\t\telse\n\t\t\tother_str = other_str .. test_str:sub(i, i)\n\t\tend\n\tend\n\treturn other_str .. num_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend",
    "\tlocal str_table = {}\n\tlocal num_table = {}\n\tlocal str_table_index = 1\n\tlocal num_table_index = 1\n\tfor i = 1, #test_str do\n\t\tif string.match(test_str, \"%d\") then\n\t\t\tnum_table[num_table_index] = string.match(test_str, \"%d\")\n\t\t\tnum_table_index = num_table_index + 1\n\t\t\ttest_str = string.gsub(test_str, \"%d\", \"\", 1)\n\t\telse\n\t\t\tstr_table[str_table_index] = string.sub(test_str, 1, 1)\n\t\t\tstr_table_index = str_table_index + 1\n\t\t\ttest_str = string.sub(test_str, 2)\n\t\tend\n\tend\n\treturn table.concat(str_table) .. table.concat(num_table)\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "    local str_table = {}\n    local num_table = {}\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num_table[#num_table + 1] = string.sub(test_str, i, i)\n            test_str = string.gsub(test_str, string.sub(test_str, i, i), \"\", 1)\n        else\n            str_table[#str_table + 1] = string.sub(test_str, i, i)\n        end\n    end\n    return table.concat(str_table) .. table.concat(num_table)\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "  local str = \"\"\n  local num = \"\"\n  for i = 1, #test_str do\n    local char = test_str:sub(i, i)\n    if tonumber(char) then\n      num = num .. char\n    else\n      str = str .. char\n    end\n  end\n  return str .. num\nend",
    "    local str_len = string.len(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, str_len do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local nums = {}\n    local chars = {}\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            table.insert(nums, c)\n        else\n            table.insert(chars, c)\n        end\n    end\n    return table.concat(chars) .. table.concat(nums)\nend",
    "\tlocal num_str = \"\"\n\tlocal char_str = \"\"\n\tfor i = 1, #test_str do\n\t\tif string.find(test_str, \"%d\") then\n\t\t\tnum_str = num_str .. string.sub(test_str, i, i)\n\t\telse\n\t\t\tchar_str = char_str .. string.sub(test_str, i, i)\n\t\tend\n\tend\n\treturn char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num_str = num_str .. test_str[i]\n        else\n            char_str = char_str .. test_str[i]\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str_tbl = {}\n    local num_tbl = {}\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%d\") then\n            table.insert(num_tbl, test_str:sub(i, i))\n        else\n            table.insert(str_tbl, test_str:sub(i, i))\n        end\n    end\n    return table.concat(str_tbl) .. table.concat(num_tbl)\nend",
    "    local str = test_str\n    local num = {}\n    local char = {}\n    for i = 1, #str do\n        if string.byte(str, i) >= 48 and string.byte(str, i) <= 57 then\n            table.insert(num, string.sub(str, i, i))\n        else\n            table.insert(char, string.sub(str, i, i))\n        end\n    end\n    return table.concat(char) .. table.concat(num)\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%d\") then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i,i), \"%d\") then\n            num = num .. test_str:sub(i,i)\n        else\n            str = str .. test_str:sub(i,i)\n        end\n    end\n    return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = string.sub(test_str, i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local str = test_str\n    local num = {}\n    local i = 1\n    while i <= #str do\n        if tonumber(str:sub(i, i)) then\n            num[#num + 1] = str:sub(i, i)\n            str = str:sub(1, i - 1) .. str:sub(i + 1)\n        else\n            i = i + 1\n        end\n    end\n    return str .. table.concat(num)\nend",
    "    local num_str = ''\n    local char_str = ''\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match('%d') then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str_table = {}\n    local num_table = {}\n    local new_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            table.insert(num_table, test_str[i])\n        else\n            table.insert(str_table, test_str[i])\n        end\n    end\n    for i = 1, #str_table do\n        new_str = new_str .. str_table[i]\n    end\n    for i = 1, #num_table do\n        new_str = new_str .. num_table[i]\n    end\n    return new_str\nend",
    "    local str = test_str\n    local num = {}\n    local alpha = {}\n    for i = 1, #str do\n        if tonumber(str:sub(i, i)) then\n            table.insert(num, str:sub(i, i))\n        else\n            table.insert(alpha, str:sub(i, i))\n        end\n    end\n    return table.concat(alpha) .. table.concat(num)\nend",
    "    local str = test_str\n    local num = {}\n    local str_num = {}\n    local new_str = \"\"\n    for i = 1, #str do\n        if string.find(str, \"%d\") then\n            local index = string.find(str, \"%d\")\n            local num_str = string.sub(str, index, index)\n            table.insert(num, num_str)\n            table.insert(str_num, index)\n            str = string.gsub(str, \"%d\", \"\", 1)\n        end\n    end\n    for i = 1, #str do\n        new_str = new_str .. string.sub(str, i, i)\n    end\n    for i = 1, #num do\n        new_str = new_str .. num[i]\n    end\n    return new_str\nend",
    "    local str_len = string.len(test_str)\n    local num_str = ''\n    local char_str = ''\n    for i = 1, str_len do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = ''\n    local char_str = ''\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num_str = num_str .. c\n        else\n            char_str = char_str .. c\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "    local str_table = {}\n    local num_table = {}\n    local result = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            table.insert(num_table, string.sub(test_str, i, i))\n        else\n            table.insert(str_table, string.sub(test_str, i, i))\n        end\n    end\n    for i = 1, #str_table do\n        result = result..str_table[i]\n    end\n    for i = 1, #num_table do\n        result = result..num_table[i]\n    end\n    return result\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "    local str = test_str\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #str do\n        local c = string.sub(str, i, i)\n        if tonumber(c) then\n            num_str = num_str .. c\n        else\n            char_str = char_str .. c\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i,i), \"%d\") then\n            num = num .. test_str:sub(i,i)\n        else\n            str = str .. test_str:sub(i,i)\n        end\n    end\n    return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str_len = string.len(test_str)\n    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, str_len do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "\tlocal new_str = \"\"\n\tlocal num_str = \"\"\n\tfor i = 1, #test_str do\n\t\tlocal c = string.sub(test_str, i, i)\n\t\tif tonumber(c) then\n\t\t\tnum_str = num_str .. c\n\t\telse\n\t\t\tnew_str = new_str .. c\n\t\tend\n\tend\n\treturn new_str .. num_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num_str = num_str .. test_str[i]\n        else\n            char_str = char_str .. test_str[i]\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = ''\n    local char_str = ''\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i=1,#test_str do\n\t\tlocal char = test_str:sub(i,i)\n\t\tif tonumber(char) then\n\t\t\tnum = num .. char\n\t\telse\n\t\t\tstr = str .. char\n\t\tend\n\tend\n\treturn str .. num\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i,i)) then\n            num = num .. test_str:sub(i,i)\n        else\n            str = str .. test_str:sub(i,i)\n        end\n    end\n    return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = string.sub(test_str, i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local str_table = {}\n    local num_table = {}\n    local new_str = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            table.insert(num_table, string.sub(test_str, i, i))\n        else\n            table.insert(str_table, string.sub(test_str, i, i))\n        end\n    end\n    for i = 1, #str_table do\n        new_str = new_str .. str_table[i]\n    end\n    for i = 1, #num_table do\n        new_str = new_str .. num_table[i]\n    end\n    return new_str\nend",
    "    local str_tbl = {}\n    local num_tbl = {}\n    local ret_str = \"\"",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "  local str = \"\"\n  local num = \"\"\n  for i = 1, #test_str do\n    if string.match(test_str:sub(i, i), \"%d\") then\n      num = num .. test_str:sub(i, i)\n    else\n      str = str .. test_str:sub(i, i)\n    end\n  end\n  return str .. num\nend",
    "    local str_table = {}\n    for i = 1, #test_str do\n        str_table[i] = test_str:sub(i, i)\n    end\n    local num_table = {}\n    local str_table_new = {}\n    for i = 1, #str_table do\n        if tonumber(str_table[i]) then\n            num_table[#num_table + 1] = str_table[i]\n        else\n            str_table_new[#str_table_new + 1] = str_table[i]\n        end\n    end\n    local str_table_new_new = {}\n    for i = 1, #str_table_new do\n        str_table_new_new[i] = str_table_new[i]\n    end\n    for i = 1, #num_table do\n        str_table_new_new[#str_table_new_new + 1] = num_table[i]\n    end\n    local str_new = \"\"\n    for i = 1, #str_table_new_new do\n        str_new = str_new .. str_table_new_new[i]\n    end\n    return str_new\nend",
    "\tlocal num_str = \"\"\n\tlocal char_str = \"\"\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif tonumber(c) then\n\t\t\tnum_str = num_str .. c\n\t\telse\n\t\t\tchar_str = char_str .. c\n\t\tend\n\tend\n\treturn char_str .. num_str\nend",
    "    local str_table = {}\n    local num_table = {}\n    local new_str = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            table.insert(num_table, string.sub(test_str, i, i))\n        else\n            table.insert(str_table, string.sub(test_str, i, i))\n        end\n    end\n    for i = 1, #str_table do\n        new_str = new_str .. str_table[i]\n    end\n    for i = 1, #num_table do\n        new_str = new_str .. num_table[i]\n    end\n    return new_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tif tonumber(test_str:sub(i,i)) then\n\t\t\tnum = num .. test_str:sub(i,i)\n\t\telse\n\t\t\tstr = str .. test_str:sub(i,i)\n\t\tend\n\tend\n\treturn str .. num\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local ch = string.sub(test_str, i, i)\n        if ch >= \"0\" and ch <= \"9\" then\n            num_str = num_str .. ch\n        else\n            char_str = char_str .. ch\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str_table = {}\n    local num_table = {}\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            table.insert(num_table, char)\n        else\n            table.insert(str_table, char)\n        end\n    end\n    return table.concat(str_table) .. table.concat(num_table)\nend",
    "\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif tonumber(c) then\n\t\t\tnum = num .. c\n\t\telse\n\t\t\tstr = str .. c\n\t\tend\n\tend\n\treturn str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str, \"%d\") then\n            num = num .. string.match(test_str, \"%d\")\n            test_str = string.gsub(test_str, \"%d\", \"\")\n        else\n            str = str .. string.sub(test_str, 1, 1)\n            test_str = string.sub(test_str, 2, -1)\n        end\n    end\n    return str .. num\nend",
    "    local str_arr = {}\n    local num_arr = {}\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            table.insert(num_arr, test_str:sub(i, i))\n        else\n            table.insert(str_arr, test_str:sub(i, i))\n        end\n    end\n    return table.concat(str_arr) .. table.concat(num_arr)\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "    local str = test_str\n    local num = {}\n    local str_table = {}\n    local count = 0\n    for i = 1, #str do\n        if tonumber(str:sub(i, i)) then\n            count = count + 1\n            num[count] = str:sub(i, i)\n        else\n            table.insert(str_table, str:sub(i, i))\n        end\n    end\n    for i = 1, #num do\n        table.insert(str_table, num[i])\n    end\n    return table.concat(str_table)\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local num = {}\n    local str = {}\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            table.insert(num, test_str:sub(i, i))\n        else\n            table.insert(str, test_str:sub(i, i))\n        end\n    end\n    return table.concat(str) .. table.concat(num)\nend",
    "    local str = test_str\n    local num = {}\n    local char = {}\n    for i = 1, #str do\n        if string.find(str:sub(i, i), \"%d\") then\n            table.insert(num, str:sub(i, i))\n        else\n            table.insert(char, str:sub(i, i))\n        end\n    end\n    return table.concat(char) .. table.concat(num)\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num_str = num_str .. test_str[i]\n        else\n            char_str = char_str .. test_str[i]\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local str_table = {}\n    local num_table = {}\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            table.insert(num_table, test_str:sub(i, i))\n        else\n            table.insert(str_table, test_str:sub(i, i))\n        end\n    end\n    return table.concat(str_table) .. table.concat(num_table)\nend",
    "    local str_tbl = {}\n    local num_tbl = {}\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            table.insert(num_tbl, char)\n        else\n            table.insert(str_tbl, char)\n        end\n    end\n    return table.concat(str_tbl) .. table.concat(num_tbl)\nend",
    "    local str = {}\n    local num = {}\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            table.insert(num, test_str[i])\n        else\n            table.insert(str, test_str[i])\n        end\n    end\n    return table.concat(str) .. table.concat(num)\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "\tlocal str = ''\n\tlocal num = ''\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif tonumber(c) then\n\t\t\tnum = num .. c\n\t\telse\n\t\t\tstr = str .. c\n\t\tend\n\tend\n\treturn str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num = num .. test_str[i]\n        else\n            str = str .. test_str[i]\n        end\n    end\n    return str .. num\nend",
    "  local num_str = \"\"\n  local char_str = \"\"\n  for i = 1, #test_str do\n    if tonumber(test_str:sub(i, i)) then\n      num_str = num_str .. test_str:sub(i, i)\n    else\n      char_str = char_str .. test_str:sub(i, i)\n    end\n  end\n  return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str = test_str\n    local num = {}\n    local char = {}\n    for i = 1, #str do\n        if string.match(str[i], \"%d\") then\n            table.insert(num, str[i])\n        else\n            table.insert(char, str[i])\n        end\n    end\n    return table.concat(char) .. table.concat(num)\nend",
    "    local nums = {}\n    local chars = {}\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            table.insert(nums, c)\n        else\n            table.insert(chars, c)\n        end\n    end\n    return table.concat(chars) .. table.concat(nums)\nend",
    "  local num_str = \"\"\n  local char_str = \"\"\n  for i = 1, #test_str do\n    local char = string.sub(test_str, i, i)\n    if tonumber(char) then\n      num_str = num_str .. char\n    else\n      char_str = char_str .. char\n    end\n  end\n  return char_str .. num_str\nend",
    "    local str = test_str\n    local num = \"\"\n    for i = 1, #str do\n        if tonumber(str:sub(i, i)) then\n            num = num .. str:sub(i, i)\n        end\n    end\n    str = str:gsub(\"%d\", \"\")\n    return str .. num\nend",
    "    local num_str = ''\n    local char_str = ''\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), '%d') then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend",
    "  local str_tbl = {}\n  local num_tbl = {}\n  for i = 1, #test_str do\n    if tonumber(test_str:sub(i, i)) then\n      table.insert(num_tbl, test_str:sub(i, i))\n    else\n      table.insert(str_tbl, test_str:sub(i, i))\n    end\n  end\n  return table.concat(str_tbl) .. table.concat(num_tbl)\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "\tlocal str = {}\n\tlocal num = {}\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif tonumber(c) then\n\t\t\ttable.insert(num, c)\n\t\telse\n\t\t\ttable.insert(str, c)\n\t\tend\n\tend\n\treturn table.concat(str) .. table.concat(num)\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str_tbl = {}\n    local num_tbl = {}\n    local str_len = string.len(test_str)\n    for i = 1, str_len do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            table.insert(num_tbl, char)\n        else\n            table.insert(str_tbl, char)\n        end\n    end\n    return table.concat(str_tbl) .. table.concat(num_tbl)\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = ''\n    local char_str = ''\n    for i = 1, #test_str do\n        if string.find(test_str:sub(i, i), '%d') then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str_list = {}\n    local num_list = {}\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            table.insert(num_list, test_str:sub(i, i))\n        else\n            table.insert(str_list, test_str:sub(i, i))\n        end\n    end\n    return table.concat(str_list) .. table.concat(num_list)\nend",
    "    local result = {}\n    local num = {}\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            table.insert(num, char)\n        else\n            table.insert(result, char)\n        end\n    end\n    return table.concat(result) .. table.concat(num)\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif tonumber(c) then\n\t\t\tnum = num .. c\n\t\telse\n\t\t\tstr = str .. c\n\t\tend\n\tend\n\treturn str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local num_str = ''\n    local char_str = ''\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num_str = num_str .. test_str[i]\n        else\n            char_str = char_str .. test_str[i]\n        end\n    end\n    return char_str .. num_str\nend",
    "  local str = \"\"\n  local num = \"\"\n  for i = 1, #test_str do\n    if tonumber(test_str:sub(i, i)) then\n      num = num .. test_str:sub(i, i)\n    else\n      str = str .. test_str:sub(i, i)\n    end\n  end\n  return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i,i), \"%d\") then\n            num = num .. test_str:sub(i,i)\n        else\n            str = str .. test_str:sub(i,i)\n        end\n    end\n    return str .. num\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "    local str = test_str\n    local num = ''\n    local i = 1\n    while i <= #str do\n        if tonumber(str:sub(i, i)) then\n            num = num .. str:sub(i, i)\n            str = str:sub(1, i - 1) .. str:sub(i + 1)\n        else\n            i = i + 1\n        end\n    end\n    return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tif tonumber(test_str:sub(i, i)) then\n\t\t\tnum = num .. test_str:sub(i, i)\n\t\telse\n\t\t\tstr = str .. test_str:sub(i, i)\n\t\tend\n\tend\n\treturn str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "  local num_str = \"\"\n  local char_str = \"\"\n  for i = 1, #test_str do\n    if string.match(test_str:sub(i, i), \"%d\") then\n      num_str = num_str .. test_str:sub(i, i)\n    else\n      char_str = char_str .. test_str:sub(i, i)\n    end\n  end\n  return char_str .. num_str\nend",
    "    local new_str = \"\"\n    local num_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            new_str = new_str .. char\n        end\n    end\n    return new_str .. num_str\nend",
    "    local str = test_str\n    local num = {}\n    local str_new = {}\n    for i = 1, #str do\n        if tonumber(str:sub(i, i)) then\n            table.insert(num, str:sub(i, i))\n        else\n            table.insert(str_new, str:sub(i, i))\n        end\n    end\n    return table.concat(str_new) .. table.concat(num)\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i,i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "    local str = test_str\n    local num = {}\n    local char = {}\n    for i = 1, #str do\n        if string.find(str[i], \"%d\") then\n            table.insert(num, str[i])\n        else\n            table.insert(char, str[i])\n        end\n    end\n    return table.concat(char) .. table.concat(num)\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num_str = num_str .. string.sub(test_str, i, i)\n        else\n            char_str = char_str .. string.sub(test_str, i, i)\n        end\n    end\n    return char_str .. num_str\nend",
    "    local nums = {}\n    local letters = {}\n    for i = 1, #test_str do\n        if test_str:sub(i,i):match(\"%d\") then\n            table.insert(nums, test_str:sub(i,i))\n        else\n            table.insert(letters, test_str:sub(i,i))\n        end\n    end\n    return table.concat(letters) .. table.concat(nums)\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num = num .. test_str[i]\n        else\n            str = str .. test_str[i]\n        end\n    end\n    return str .. num\nend",
    "    local str_t = {}\n    local num_t = {}\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            table.insert(num_t, test_str[i])\n        else\n            table.insert(str_t, test_str[i])\n        end\n    end\n    return table.concat(str_t) .. table.concat(num_t)\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num = num .. c\n        else\n            str = str .. c\n        end\n    end\n    return str .. num\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str_list = {}\n    local num_list = {}\n    for i=1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            table.insert(num_list, char)\n        else\n            table.insert(str_list, char)\n        end\n    end\n    return table.concat(str_list) .. table.concat(num_list)\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num_str = num_str .. c\n        else\n            char_str = char_str .. c\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str = ''\n    local num = ''\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), '%d') then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local new_str = \"\"\n    local num_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            new_str = new_str .. test_str:sub(i, i)\n        end\n    end\n    return new_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str, \"%d\") then\n            num_str = num_str .. string.match(test_str, \"%d\")\n            test_str = string.gsub(test_str, \"%d\", \"\")\n        else\n            char_str = char_str .. string.sub(test_str, 1, 1)\n            test_str = string.sub(test_str, 2)\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num_str = num_str .. test_str[i]\n        else\n            char_str = char_str .. test_str[i]\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local cur_char = string.sub(test_str, i, i)\n        if tonumber(cur_char) then\n            num_str = num_str .. cur_char\n        else\n            char_str = char_str .. cur_char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = ''\n    local char_str = ''\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.byte(test_str, i) >= 48 and string.byte(test_str, i) <= 57 then\n            num = num .. string.sub(test_str, i, i)\n        else\n            str = str .. string.sub(test_str, i, i)\n        end\n    end\n    return str .. num\nend",
    "  local num_str = \"\"\n  local char_str = \"\"\n  for i = 1, #test_str do\n    local c = test_str:sub(i, i)\n    if tonumber(c) then\n      num_str = num_str .. c\n    else\n      char_str = char_str .. c\n    end\n  end\n  return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "\tlocal num_str = \"\"\n\tlocal char_str = \"\"\n\tfor i = 1, #test_str do\n\t\tlocal char = test_str:sub(i, i)\n\t\tif tonumber(char) then\n\t\t\tnum_str = num_str .. char\n\t\telse\n\t\t\tchar_str = char_str .. char\n\t\tend\n\tend\n\treturn char_str .. num_str\nend",
    "    local str_list = {}\n    for i = 1, #test_str do\n        str_list[i] = string.sub(test_str, i, i)\n    end\n    local num_list = {}\n    local char_list = {}\n    for i = 1, #str_list do\n        if tonumber(str_list[i]) then\n            num_list[#num_list + 1] = str_list[i]\n        else\n            char_list[#char_list + 1] = str_list[i]\n        end\n    end\n    local result = table.concat(char_list) .. table.concat(num_list)\n    return result\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local nums = {}\n    local strs = {}\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            table.insert(nums, c)\n        else\n            table.insert(strs, c)\n        end\n    end\n    return table.concat(strs) .. table.concat(nums)\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local num_str = \"\"\n    local other_str = \"\"\n    for i = 1, #test_str do\n        local c = string.sub(test_str, i, i)\n        if tonumber(c) then\n            num_str = num_str .. c\n        else\n            other_str = other_str .. c\n        end\n    end\n    return other_str .. num_str\nend",
    "    local num_str = \"\"\n    local other_str = \"\"\n    for i = 1, #test_str do\n        local cur_char = test_str:sub(i, i)\n        if tonumber(cur_char) then\n            num_str = num_str .. cur_char\n        else\n            other_str = other_str .. cur_char\n        end\n    end\n    return other_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num_str = num_str .. string.sub(test_str, i, i)\n        else\n            char_str = char_str .. string.sub(test_str, i, i)\n        end\n    end\n    return char_str .. num_str\nend",
    "\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i,i)\n\t\tif tonumber(c) then\n\t\t\tnum = num .. c\n\t\telse\n\t\t\tstr = str .. c\n\t\tend\n\tend\n\treturn str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num = num .. string.sub(test_str, i, i)\n        else\n            str = str .. string.sub(test_str, i, i)\n        end\n    end\n    return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local str_tbl = {}\n    local num_tbl = {}\n    local ret_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            table.insert(num_tbl, test_str[i])\n        else\n            table.insert(str_tbl, test_str[i])\n        end\n    end\n    for i = 1, #str_tbl do\n        ret_str = ret_str .. str_tbl[i]\n    end\n    for i = 1, #num_tbl do\n        ret_str = ret_str .. num_tbl[i]\n    end\n    return ret_str\nend",
    "  local num_str = ''\n  local char_str = ''\n  for i = 1, #test_str do\n    if tonumber(test_str:sub(i, i)) then\n      num_str = num_str .. test_str:sub(i, i)\n    else\n      char_str = char_str .. test_str:sub(i, i)\n    end\n  end\n  return char_str .. num_str\nend",
    "    local num_str = ''\n    local char_str = ''\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num_str = num_str .. test_str[i]\n        else\n            char_str = char_str .. test_str[i]\n        end\n    end\n    return char_str .. num_str\nend",
    "    local str_tbl = {}\n    local num_tbl = {}\n    local ret_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            table.insert(num_tbl, char)\n        else\n            table.insert(str_tbl, char)\n        end\n    end\n    for _, v in ipairs(str_tbl) do\n        ret_str = ret_str .. v\n    end\n    for _, v in ipairs(num_tbl) do\n        ret_str = ret_str .. v\n    end\n    return ret_str\nend",
    "\tlocal str = \"\"\n\tlocal num = \"\"\n\tfor i=1,#test_str do\n\t\tlocal c = string.sub(test_str,i,i)\n\t\tif tonumber(c) then\n\t\t\tnum = num..c\n\t\telse\n\t\t\tstr = str..c\n\t\tend\n\tend\n\treturn str..num\nend",
    "  local str_tbl = {}\n  local num_tbl = {}\n  local new_str = \"\"",
    "    local str_tbl = {}\n    local num_tbl = {}\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if tonumber(char) then\n            table.insert(num_tbl, char)\n        else\n            table.insert(str_tbl, char)\n        end\n    end\n    return table.concat(str_tbl) .. table.concat(num_tbl)\nend",
    "    local str = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str\nend",
    "    local str = test_str\n    local num = {}\n    local char = {}\n    local result = \"\"\n    for i = 1, #str do\n        if tonumber(str:sub(i, i)) then\n            table.insert(num, str:sub(i, i))\n        else\n            table.insert(char, str:sub(i, i))\n        end\n    end\n    for i = 1, #char do\n        result = result .. char[i]\n    end\n    for i = 1, #num do\n        result = result .. num[i]\n    end\n    return result\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if string.find(test_str, \"%d\") then\n            num = num .. string.sub(test_str, i, i)\n        else\n            str = str .. string.sub(test_str, i, i)\n        end\n    end\n    return str .. num\nend",
    "    local str = \"\"\n    local num = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num = num .. test_str:sub(i, i)\n        else\n            str = str .. test_str:sub(i, i)\n        end\n    end\n    return str .. num\nend",
    "  local str_tbl = {}\n  local num_tbl = {}\n  for i = 1, #test_str do\n    local char = test_str:sub(i, i)\n    if tonumber(char) then\n      table.insert(num_tbl, char)\n    else\n      table.insert(str_tbl, char)\n    end\n  end\n  return table.concat(str_tbl) .. table.concat(num_tbl)\nend",
    "\tlocal num_str = ''\n\tlocal char_str = ''\n\tfor i = 1, #test_str do\n\t\tif string.match(test_str, '%d') then\n\t\t\tnum_str = num_str .. string.match(test_str, '%d')\n\t\t\ttest_str = string.gsub(test_str, '%d', '', 1)\n\t\telse\n\t\t\tchar_str = char_str .. string.match(test_str, '%a')\n\t\t\ttest_str = string.gsub(test_str, '%a', '', 1)\n\t\tend\n\tend\n\treturn char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if tonumber(test_str:sub(i, i)) then\n            num_str = num_str .. test_str:sub(i, i)\n        else\n            char_str = char_str .. test_str:sub(i, i)\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if tonumber(char) then\n            num_str = num_str .. char\n        else\n            char_str = char_str .. char\n        end\n    end\n    return char_str .. num_str\nend",
    "    local num_str = \"\"\n    local char_str = \"\"\n    for i = 1, #test_str do\n        if string.match(test_str[i], \"%d\") then\n            num_str = num_str .. test_str[i]\n        else\n            char_str = char_str .. test_str[i]\n        end\n    end\n    return char_str .. num_str\nend",
    "    local new_str = \"\"\n    local num_str = \"\"\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if tonumber(c) then\n            num_str = num_str .. c\n        else\n            new_str = new_str .. c\n        end\n    end\n    return new_str .. num_str\nend"
  ]
}