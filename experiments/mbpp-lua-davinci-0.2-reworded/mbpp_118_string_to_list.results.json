{
  "name": "mbpp_118_string_to_list",
  "language": "lua",
  "prompt": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tlocal i = 1\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\tlist[i] = word\n\t\ti = i + 1\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string.gmatch(string, \"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list+1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tlocal index = 1\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\tlist[index] = word\n\t\tindex = index + 1\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string.gmatch(string, \"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        list[#list + 1] = word\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, '%S+') do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string.gmatch(string, \"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string.gmatch(string, \"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        list[#list + 1] = word\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string.gmatch(string, \"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        list[#list + 1] = word\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        list[#list + 1] = word\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\tlist[#list + 1] = word\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        list[#list + 1] = word\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        list[#list + 1] = word\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string.gmatch(string, '%S+') do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, '%w+') do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%w+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string.gmatch(string, \"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string.gmatch(string, \"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string.gmatch(string, \"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        list[#list + 1] = word\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string.gmatch(string, \"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string.gmatch(string, \"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string.gmatch(string, \"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\tlist[#list + 1] = word\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        list[#list + 1] = word\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%w+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%w+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%w+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    local i = 1\n    for word in string.gmatch(string, \"%S+\") do\n        list[i] = word\n        i = i + 1\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string.gmatch(string, \"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        list[#list + 1] = word\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        list[#list + 1] = word\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string.gmatch(string, \"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string.gmatch(string, \"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string.gmatch(string, \"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string.gmatch(string, \"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string.gmatch(string, '%w+') do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string.gmatch(string, \"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string:gmatch(\"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    table.insert(list, word)\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n    local list = {}\n    for word in string:gmatch(\"%S+\") do\n        table.insert(list, word)\n    end\n    return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124221,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n  local list = {}\n  for word in string:gmatch(\"%S+\") do\n    list[#list + 1] = word\n  end\n  return list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n\tlocal list = {}\n\tfor word in string.gmatch(string, \"%S+\") do\n\t\ttable.insert(list, word)\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}