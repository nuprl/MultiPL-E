{
  "name": "mbpp_119_search",
  "language": "lua",
  "prompt": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if i == #arr then\n      return arr[i]\n    end\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] ~= arr[i-1] and arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local l, r = 1, #arr\n  while l < r do\n    local m = math.floor((l + r) / 2)\n    if arr[m] == arr[m - 1] then\n      if m % 2 == 0 then\n        l = m + 1\n      else\n        r = m - 2\n      end\n    elseif arr[m] == arr[m + 1] then\n      if m % 2 == 0 then\n        r = m - 1\n      else\n        l = m + 2\n      end\n    else\n      return arr[m]\n    end\n  end\n  return arr[l]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i + 1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  for i = 1, #arr do\n    if arr[i] ~= arr[i - 1] and arr[i] ~= arr[i + 1] then\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while arr[i] == arr[i+1] do\n    i = i + 2\n  end\n  return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i < #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i < #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local low = 1\n    local high = #arr\n    local mid\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "lua: /tmp/tmpo5mbdmm4.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i <= #arr do\n        if arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i + 1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local low = 1\n  local high = #arr\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if mid == 1 or arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    elseif arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        high = mid - 2\n      else\n        low = mid + 1\n      end\n    elseif arr[mid] == arr[mid + 1] then\n      if mid % 2 == 0 then\n        low = mid + 2\n      else\n        high = mid - 1\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd03arukw.lua:28: expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpd03arukw.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n\tlocal i = 1\n\twhile i <= #arr do\n\t\tif arr[i] == arr[i+1] then\n\t\t\ti = i + 2\n\t\telse\n\t\t\treturn arr[i]\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i <= #arr do\n        if arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i + 1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  local j = #arr\n  while i < j do\n    local mid = math.floor((i + j) / 2)\n    if mid % 2 == 0 then\n      if arr[mid] == arr[mid + 1] then\n        i = mid + 2\n      else\n        j = mid\n      end\n    else\n      if arr[mid] == arr[mid - 1] then\n        i = mid + 1\n      else\n        j = mid - 1\n      end\n    end\n  end\n  return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx076ohh3.lua:27: expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpx076ohh3.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local low = 1\n    local high = #arr\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if mid == 1 or arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n            return arr[mid]\n        elseif arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                high = mid - 2\n            else\n                low = mid + 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                low = mid + 2\n            else\n                high = mid - 1\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmzg3pf5o.lua:28: expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpmzg3pf5o.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 0\n  while i < #arr do\n    if arr[i] == arr[i + 1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqv_r95o7.lua:16: expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpqv_r95o7.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i < #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i + 1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i < #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i + 1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i + 1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n\tlocal i = 1\n\twhile i <= #arr do\n\t\tif arr[i] == arr[i+1] then\n\t\t\ti = i + 2\n\t\telse\n\t\t\treturn arr[i]\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i < #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i + 1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i + 1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i + 1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i < #arr do\n        if arr[i] == arr[i + 1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while arr[i] == arr[i+1] do\n    i = i + 2\n  end\n  return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i + 1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local n = #arr\n    if n == 1 then\n        return arr[1]\n    end\n    local mid = math.floor(n / 2)\n    if mid % 2 == 0 then\n        if arr[mid] == arr[mid + 1] then\n            return search(arr, mid + 2, n)\n        else\n            return search(arr, 1, mid)\n        end\n    else\n        if arr[mid] == arr[mid - 1] then\n            return search(arr, mid + 1, n)\n        else\n            return search(arr, 1, mid - 1)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123440,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n\tlocal low = 1\n\tlocal high = #arr\n\twhile low <= high do\n\t\tlocal mid = math.floor((low + high) / 2)\n\t\tif (mid == 1 or arr[mid - 1] ~= arr[mid]) and (mid == #arr or arr[mid + 1] ~= arr[mid]) then\n\t\t\treturn arr[mid]\n\t\telseif mid > 1 and arr[mid - 1] == arr[mid] then\n\t\t\tif mid % 2 == 0 then\n\t\t\t\thigh = mid - 2\n\t\t\telse\n\t\t\t\tlow = mid + 1\n\t\t\tend\n\t\telseif mid < #arr and arr[mid + 1] == arr[mid] then\n\t\t\tif mid % 2 == 0 then\n\t\t\t\tlow = mid + 2\n\t\t\telse\n\t\t\t\thigh = mid - 1\n\t\t\tend\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm2n_dmg.lua:28: expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpgm2n_dmg.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i + 1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while arr[i] == arr[i+1] do\n    i = i + 2\n  end\n  return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i < #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i < #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i < #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i + 1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i + 1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local low = 1\n  local high = #arr\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if mid == 1 or mid == #arr then\n      return arr[mid]\n    end\n    if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    end\n    if mid % 2 == 0 then\n      if arr[mid] == arr[mid + 1] then\n        low = mid + 2\n      else\n        high = mid - 2\n      end\n    else\n      if arr[mid] == arr[mid - 1] then\n        low = mid + 1\n      else\n        high = mid - 1\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0oqhdrcb.lua:32: expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp0oqhdrcb.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while arr[i] == arr[i+1] do\n    i = i + 2\n  end\n  return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i < #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local low = 1\n  local high = #arr\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if mid == 1 or arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    end\n    if arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        high = mid - 2\n      else\n        low = mid + 1\n      end\n    else\n      if mid % 2 == 0 then\n        low = mid + 2\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxc92akc.lua:30: expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpnxc92akc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    local j = i + 1\n    while j <= #arr and arr[i] == arr[j] do\n      j = j + 1\n    end\n    if j - i == 1 then\n      return arr[i]\n    end\n    i = j\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  local j = #arr\n  local mid = math.floor((i + j) / 2)\n  while i < j do\n    if arr[mid] == arr[mid - 1] then\n      i = mid + 1\n    elseif arr[mid] == arr[mid + 1] then\n      j = mid - 1\n    else\n      return arr[mid]\n    end\n    mid = math.floor((i + j) / 2)\n  end\n  return arr[mid]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57lh5v7d.lua:22: expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmp57lh5v7d.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local low = 1\n    local high = #arr\n    local mid = 0\n    while low <= high do\n        mid = math.floor((low + high) / 2)\n        if arr[mid] == arr[mid - 1] then\n            if mid % 2 == 0 then\n                high = mid - 2\n            else\n                low = mid + 1\n            end\n        elseif arr[mid] == arr[mid + 1] then\n            if mid % 2 == 0 then\n                low = mid + 2\n            else\n                high = mid - 1\n            end\n        else\n            return arr[mid]\n        end\n    end\n    return arr[mid]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp882h9mle.lua:30: expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp882h9mle.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i + 1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local n = #arr\n    if n == 1 then\n        return arr[1]\n    end\n    local mid = math.floor(n / 2)\n    if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n        return arr[mid]\n    end\n    if arr[mid] == arr[mid - 1] then\n        if mid % 2 == 0 then\n            return search(arr, 1, mid - 1)\n        else\n            return search(arr, mid + 1, n)\n        end\n    end\n    if mid % 2 == 0 then\n        return search(arr, mid + 1, n)\n    else\n        return search(arr, 1, mid - 1)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123440,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n\tlocal i = 1\n\tlocal j = #arr\n\tlocal mid = math.floor((i+j)/2)\n\twhile i < j do\n\t\tif arr[mid] == arr[mid-1] then\n\t\t\ti = mid + 1\n\t\telseif arr[mid] == arr[mid+1] then\n\t\t\tj = mid - 1\n\t\telse\n\t\t\treturn arr[mid]\n\t\tend\n\t\tmid = math.floor((i+j)/2)\n\tend\n\treturn arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpennts0sb.lua:22: expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpennts0sb.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local low = 1\n  local high = #arr\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if mid == 1 or arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    elseif arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        high = mid - 2\n      else\n        low = mid + 1\n      end\n    elseif arr[mid] == arr[mid + 1] then\n      if mid % 2 == 0 then\n        low = mid + 2\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpux_780ne.lua:29: expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpux_780ne.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i + 1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i <= #arr do\n        if arr[i] ~= arr[i-1] and arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n\tlocal i = 1\n\twhile i <= #arr do\n\t\tif arr[i] == arr[i+1] then\n\t\t\ti = i + 2\n\t\telse\n\t\t\treturn arr[i]\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i < #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i < #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i + 1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n\tlocal i = 1\n\twhile i <= #arr do\n\t\tif arr[i] == arr[i+1] then\n\t\t\ti = i + 2\n\t\telse\n\t\t\treturn arr[i]\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i < #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i < #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n\tlocal i = 1\n\twhile i < #arr do\n\t\tif arr[i] == arr[i + 1] then\n\t\t\ti = i + 2\n\t\telse\n\t\t\treturn arr[i]\n\t\tend\n\tend\n\treturn arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  local j = #arr\n  while i < j do\n    local mid = math.floor((i + j) / 2)\n    if arr[mid] == arr[mid + 1] then\n      if mid % 2 == 0 then\n        i = mid + 2\n      else\n        j = mid - 1\n      end\n    elseif arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        j = mid - 2\n      else\n        i = mid + 1\n      end\n    else\n      return arr[mid]\n    end\n  end\n  return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6p5ukp5a.lua:29: expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp6p5ukp5a.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i < #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i < #arr do\n        if arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\n    return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i < #arr do\n        if arr[i] ~= arr[i+1] then\n            return arr[i]\n        end\n        i = i + 2\n    end\n    return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i + 1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i + 1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i + 1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  local j = #arr\n  while i < j do\n    local mid = math.floor((i + j) / 2)\n    if arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        i = mid + 1\n      else\n        j = mid - 2\n      end\n    elseif arr[mid] == arr[mid + 1] then\n      if mid % 2 == 0 then\n        j = mid - 1\n      else\n        i = mid + 2\n      end\n    else\n      return arr[mid]\n    end\n  end\n  return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while arr[i] == arr[i+1] do\n    i = i + 2\n  end\n  return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n   local i = 1\n   while i <= #arr do\n      if arr[i] == arr[i+1] then\n         i = i + 2\n      else\n         return arr[i]\n      end\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local low = 1\n  local high = #arr\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdorb8f6d.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i < #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local low = 1\n  local high = #arr\n  local mid\n  while low < high do\n    mid = math.floor((low + high) / 2)\n    if mid % 2 == 0 then\n      if arr[mid] == arr[mid + 1] then\n        low = mid + 2\n      else\n        high = mid\n      end\n    else\n      if arr[mid] == arr[mid - 1] then\n        low = mid + 1\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return arr[low]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmtooumf.lua:28: expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpwmtooumf.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i < #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\n    return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local l, r = 1, #arr\n  while l < r do\n    local m = math.floor((l + r) / 2)\n    if arr[m] == arr[m - 1] then\n      if m % 2 == 0 then\n        l = m + 1\n      else\n        r = m - 1\n      end\n    elseif arr[m] == arr[m + 1] then\n      if m % 2 == 0 then\n        r = m - 1\n      else\n        l = m + 1\n      end\n    else\n      return arr[m]\n    end\n  end\n  return arr[l]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  local j = #arr\n  while i < j do\n    local mid = math.floor((i + j) / 2)\n    if arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        i = mid + 1\n      else\n        j = mid - 1\n      end\n    elseif arr[mid] == arr[mid + 1] then\n      if mid % 2 == 0 then\n        j = mid - 1\n      else\n        i = mid + 1\n      end\n    else\n      return arr[mid]\n    end\n  end\n  return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i + 1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i + 1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local low = 1\n  local high = #arr\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if mid == 1 or arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    elseif mid % 2 == 0 then\n      if arr[mid] == arr[mid + 1] then\n        low = mid + 2\n      else\n        high = mid - 2\n      end\n    else\n      if arr[mid] == arr[mid - 1] then\n        low = mid + 1\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_629bin.lua:29: expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp5_629bin.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  local j = #arr\n  while i < j do\n    local mid = math.floor((i + j) / 2)\n    if arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        i = mid + 1\n      else\n        j = mid - 2\n      end\n    elseif arr[mid] == arr[mid + 1] then\n      if mid % 2 == 0 then\n        j = mid - 1\n      else\n        i = mid + 2\n      end\n    else\n      return arr[mid]\n    end\n  end\n  return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i + 1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local low = 1\n  local high = #arr\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if mid == 1 then\n      return arr[1]\n    end\n    if mid == #arr then\n      return arr[#arr]\n    end\n    if arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    end\n    if arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        low = mid + 1\n      else\n        high = mid - 1\n      end\n    else\n      if mid % 2 == 0 then\n        high = mid - 1\n      else\n        low = mid + 1\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i + 1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i <= #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  local j = #arr\n  while i < j do\n    local mid = math.floor((i + j) / 2)\n    if arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        i = mid + 1\n      else\n        j = mid - 1\n      end\n    elseif arr[mid] == arr[mid + 1] then\n      if mid % 2 == 0 then\n        j = mid - 1\n      else\n        i = mid + 1\n      end\n    else\n      return arr[mid]\n    end\n  end\n  return arr[i]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] == arr[i+1] then\n      i = i + 2\n    else\n      return arr[i]\n    end\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local i = 1\n  while i < #arr do\n    if arr[i] ~= arr[i+1] then\n      return arr[i]\n    end\n    i = i + 2\n  end\n  return arr[#arr]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local low = 1\n  local high = #arr\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if mid == 1 or arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    elseif arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        high = mid - 2\n      else\n        low = mid + 1\n      end\n    elseif arr[mid] == arr[mid + 1] then\n      if mid % 2 == 0 then\n        low = mid + 2\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpysazp0xq.lua:29: expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpysazp0xq.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local lo, hi = 1, #arr\n    while lo < hi do\n        local mid = lo + (hi - lo) / 2\n        if mid % 2 == 1 then mid = mid - 1 end\n        if arr[mid] == arr[mid + 1] then\n            lo = mid + 2\n        else\n            hi = mid\n        end\n    end\n    return arr[lo]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp564sxg9i.lua:19: expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmp564sxg9i.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local result = nil\n  for i = 1, #arr do\n    if i == 1 then\n      if arr[i] ~= arr[i+1] then\n        result = arr[i]\n        break\n      end\n    elseif i == #arr then\n      if arr[i] ~= arr[i-1] then\n        result = arr[i]\n        break\n      end\n    else\n      if arr[i] ~= arr[i-1] and arr[i] ~= arr[i+1] then\n        result = arr[i]\n        break\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    local i = 1\n    while i <= #arr do\n        if arr[i] == arr[i+1] then\n            i = i + 2\n        else\n            return arr[i]\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n  local low = 1\n  local high = #arr\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if mid == 1 and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    elseif mid == #arr and arr[mid] ~= arr[mid - 1] then\n      return arr[mid]\n    elseif arr[mid] ~= arr[mid - 1] and arr[mid] ~= arr[mid + 1] then\n      return arr[mid]\n    elseif arr[mid] == arr[mid - 1] then\n      if mid % 2 == 0 then\n        high = mid - 2\n      else\n        low = mid + 1\n      end\n    elseif arr[mid] == arr[mid + 1] then\n      if mid % 2 == 0 then\n        low = mid + 2\n      else\n        high = mid - 1\n      end\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123425,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvj_njfm.lua:32: expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpkvj_njfm.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}