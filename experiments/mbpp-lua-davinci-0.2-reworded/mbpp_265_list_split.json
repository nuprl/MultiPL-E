{
  "name": "mbpp_265_list_split",
  "language": "lua",
  "prompt": "-- Write a function that takes in a table and an integer n and splits a table for every nth element, returning a table of the resulting tables.\nlocal function list_split(S, step)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = list_split\n    lu.assertEquals(candidate({'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'}, 3), {{'a', 'd', 'g', 'j', 'm'}, {'b', 'e', 'h', 'k', 'n'}, {'c', 'f', 'i', 'l'}})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, 3), {{1, 4, 7, 10, 13}, {2, 5, 8, 11, 14}, {3, 6, 9, 12}})\n    lu.assertEquals(candidate({'python', 'java', 'C', 'C++', 'DBMS', 'SQL'}, 2), {{'python', 'C', 'DBMS'}, {'java', 'C++', 'SQL'}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T+1] = {unpack(S, i, i+step-1)}\n    end\n    return T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T+1] = {unpack(S, i, i+step-1)}\n    end\n    return T\nend",
    "\tlocal t = {}\n\tfor i = 1, #S, step do\n\t\tlocal t2 = {}\n\t\tfor j = i, i + step - 1 do\n\t\t\tif S[j] then\n\t\t\t\ttable.insert(t2, S[j])\n\t\t\tend\n\t\tend\n\t\ttable.insert(t, t2)\n\tend\n\treturn t\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn T\nend",
    "\tlocal t = {}\n\tfor i = 1, #S, step do\n\t\tt[#t+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn t\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    T[#T + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return T\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn result\nend",
    "\tlocal t = {}\n\tfor i = 1, #S, step do\n\t\tt[#t+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn t\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local t = {}\n    for i = 1, #S, step do\n        t[#t + 1] = S:sub(i, i + step - 1)\n    end\n    return t\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local t = {}\n    for i = 1, #S, step do\n        t[#t+1] = S:sub(i, i + step - 1)\n    end\n    return t\nend",
    "\tlocal T = {}\n\tlocal n = 1\n\tfor i = 1, #S, step do\n\t\tT[n] = {}\n\t\tfor j = i, i + step - 1 do\n\t\t\tT[n][j - i + 1] = S[j]\n\t\tend\n\t\tn = n + 1\n\tend\n\treturn T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn T\nend",
    "    local res = {}\n    for i = 1, #S, step do\n        res[#res + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return res\nend",
    "\tlocal t = {}\n\tfor i = 1, #S, step do\n\t\tt[#t+1] = S:sub(i, i+step-1)\n\tend\n\treturn t\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn T\nend",
    "\tlocal t = {}\n\tfor i = 1, #S, step do\n\t\tlocal s = {}\n\t\tfor j = i, i + step - 1 do\n\t\t\ts[#s + 1] = S[j]\n\t\tend\n\t\tt[#t + 1] = s\n\tend\n\treturn t\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T+1] = {unpack(S, i, i+step-1)}\n    end\n    return T\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "\tlocal R = {}\n\tfor i = 1, #S, step do\n\t\tR[#R + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn R\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {}\n        for j = i, i + step - 1 do\n            if S[j] then\n                result[#result][#result[#result] + 1] = S[j]\n            end\n        end\n    end\n    return result\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn result\nend",
    "    local R = {}\n    for i = 1, #S, step do\n        R[#R + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return R\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        local t = {}\n        for j = i, i + step - 1 do\n            t[#t + 1] = S[j]\n        end\n        T[#T + 1] = t\n    end\n    return T\nend",
    "  local t = {}\n  for i = 1, #S, step do\n    t[#t+1] = {unpack(S, i, i+step-1)}\n  end\n  return t\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn T\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    T[#T+1] = {}\n    for j = i, i+step-1 do\n      if S[j] then\n        T[#T][#T[#T]+1] = S[j]\n      end\n    end\n  end\n  return T\nend",
    "  local t = {}\n  for i = 1, #S, step do\n    t[#t+1] = {unpack(S, i, i+step-1)}\n  end\n  return t\nend",
    "\tlocal T = {}\n\tlocal i = 1\n\twhile i <= #S do\n\t\tT[#T+1] = {unpack(S, i, i+step-1)}\n\t\ti = i + step\n\tend\n\treturn T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T+1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn T\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T+1] = {unpack(S, i, i+step-1)}\n    end\n    return T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {}\n        for j = i, i + step - 1 do\n            result[#result][#result[#result] + 1] = S[j]\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    T[#T+1] = {unpack(S, i, i+step-1)}\n  end\n  return T\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return T\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn result\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn T\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn T\nend",
    "    local t = {}\n    local n = #S\n    for i = 1, n, step do\n        local e = math.min(i + step - 1, n)\n        table.insert(t, {unpack(S, i, e)})\n    end\n    return t\nend",
    "  local t = {}\n  for i = 1, #S, step do\n    t[#t+1] = {unpack(S, i, i+step-1)}\n  end\n  return t\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    T[#T+1] = {unpack(S, i, i+step-1)}\n  end\n  return T\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return T\nend",
    "  local result = {}\n  local n = #S\n  for i = 1, n, step do\n    local t = {}\n    for j = i, math.min(i + step - 1, n) do\n      t[#t + 1] = S[j]\n    end\n    result[#result + 1] = t\n  end\n  return result\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T+1] = {unpack(S, i, i+step-1)}\n    end\n    return T\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return T\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn T\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "\tlocal t = {}\n\tlocal n = #S\n\tfor i = 1, n, step do\n\t\tlocal e = math.min(i + step - 1, n)\n\t\tt[#t + 1] = {unpack(S, i, e)}\n\tend\n\treturn t\nend",
    "  local result = {}\n  local i = 1\n  while i <= #S do\n    table.insert(result, {unpack(S, i, math.min(i + step - 1, #S))})\n    i = i + step\n  end\n  return result\nend",
    "    local t = {}\n    for i = 1, #S, step do\n        t[#t + 1] = S:sub(i, i + step - 1)\n    end\n    return t\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return T\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn T\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T+1] = {unpack(S, i, i+step-1)}\n    end\n    return T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn T\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn T\nend",
    "    local t = {}\n    for i = 1, #S, step do\n        t[#t+1] = S:sub(i, i + step - 1)\n    end\n    return t\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        local t = {}\n        for j = i, math.min(i + step - 1, #S) do\n            table.insert(t, S[j])\n        end\n        table.insert(T, t)\n    end\n    return T\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T+1] = {unpack(S, i, i + step - 1)}\n    end\n    return T\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tlocal t = {}\n\t\tfor j = i, i + step - 1 do\n\t\t\tif S[j] then\n\t\t\t\ttable.insert(t, S[j])\n\t\t\tend\n\t\tend\n\t\ttable.insert(T, t)\n\tend\n\treturn T\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    local t = {}\n    for j = i, math.min(i + step - 1, #S) do\n      table.insert(t, S[j])\n    end\n    table.insert(T, t)\n  end\n  return T\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn result\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn result\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return T\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn T\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    T[#T+1] = {unpack(S, i, i+step-1)}\n  end\n  return T\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn T\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return T\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return T\nend",
    "  local t = {}\n  for i = 1, #S, step do\n    local s = {}\n    for j = i, i + step - 1 do\n      if S[j] then\n        table.insert(s, S[j])\n      end\n    end\n    table.insert(t, s)\n  end\n  return t\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn T\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local t = {}\n  for i = 1, #S, step do\n    t[#t + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return t\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T+1] = {unpack(S, i, i+step-1)}\n    end\n    return T\nend",
    "    local R = {}\n    for i = 1, #S, step do\n        R[#R+1] = {unpack(S, i, i+step-1)}\n    end\n    return R\nend",
    "\tlocal t = {}\n\tlocal n = #S\n\tfor i = 1, n, step do\n\t\tlocal e = math.min(i + step - 1, n)\n\t\tt[#t + 1] = {unpack(S, i, e)}\n\tend\n\treturn t\nend",
    "    local t = {}\n    for i = 1, #S, step do\n        t[#t+1] = S:sub(i,i+step-1)\n    end\n    return t\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "\tlocal t = {}\n\tfor i = 1, #S, step do\n\t\tt[#t+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn t\nend",
    "    local t = {}\n    for i = 1, #S, step do\n        t[#t+1] = S:sub(i, i + step - 1)\n    end\n    return t\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn result\nend",
    "    local t = {}\n    for i = 1, #S, step do\n        t[#t+1] = {unpack(S, i, i+step-1)}\n    end\n    return t\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    local t = {}\n    for j = i, i + step - 1 do\n      if S[j] then\n        table.insert(t, S[j])\n      end\n    end\n    table.insert(T, t)\n  end\n  return T\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tlocal t = {}\n\t\tfor j = i, i + step - 1 do\n\t\t\tt[#t + 1] = S[j]\n\t\tend\n\t\tT[#T + 1] = t\n\tend\n\treturn T\nend",
    "    local t = {}\n    for i = 1, #S, step do\n        t[#t+1] = S:sub(i, i + step - 1)\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #S, step do\n        t[#t + 1] = S:sub(i, i + step - 1)\n    end\n    return t\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    T[#T+1] = {unpack(S, i, i+step-1)}\n  end\n  return T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return T\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tlocal t = {}\n\t\tfor j = 1, step do\n\t\t\tt[j] = S[i + j - 1]\n\t\tend\n\t\tresult[#result + 1] = t\n\tend\n\treturn result\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return T\nend",
    "\tlocal T = {}\n\tlocal i = 1\n\twhile i <= #S do\n\t\tT[#T+1] = {unpack(S, i, i+step-1)}\n\t\ti = i + step\n\tend\n\treturn T\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    T[#T+1] = {unpack(S, i, i+step-1)}\n  end\n  return T\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn result\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn T\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return result\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return T\nend",
    "    local t = {}\n    for i = 1, #S, step do\n        t[#t+1] = {unpack(S, i, i+step-1)}\n    end\n    return t\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T+1] = {unpack(S, i, i+step-1)}\n    end\n    return T\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T+1] = {unpack(S, i, i+step-1)}\n    end\n    return T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "\tlocal t = {}\n\tfor i = 1, #S, step do\n\t\tt[#t+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn t\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    T[#T + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return T\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        local t = {}\n        for j = i, i + step - 1 do\n            t[#t + 1] = S[j]\n        end\n        T[#T + 1] = t\n    end\n    return T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    T[#T + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return T\nend",
    "\tlocal result = {}\n\tlocal i = 1\n\twhile i <= #S do\n\t\tlocal j = math.min(i + step - 1, #S)\n\t\ttable.insert(result, {unpack(S, i, j)})\n\t\ti = j + 1\n\tend\n\treturn result\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn T\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    T[#T + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local t = {}\n    for i = 1, #S, step do\n        t[#t+1] = {unpack(S, i, i+step-1)}\n    end\n    return t\nend",
    "    local T = {}\n    local i = 1\n    for j = 1, #S, step do\n        T[i] = {}\n        for k = 1, step do\n            T[i][k] = S[j + k - 1]\n        end\n        i = i + 1\n    end\n    return T\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    T[#T+1] = {unpack(S, i, i+step-1)}\n  end\n  return T\nend",
    "\tlocal t = {}\n\tlocal n = #S\n\tfor i = 1, n, step do\n\t\ttable.insert(t, {unpack(S, i, math.min(i + step - 1, n))})\n\tend\n\treturn t\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T+1] = {unpack(S, i, i+step-1)}\n    end\n    return T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "\tlocal T = {}\n\tlocal i = 1\n\tfor k,v in ipairs(S) do\n\t\tif not T[i] then T[i] = {} end\n\t\ttable.insert(T[i], v)\n\t\tif k % step == 0 then i = i + 1 end\n\tend\n\treturn T\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    T[#T + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return T\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tlocal t = {}\n\t\tfor j = 1, step do\n\t\t\tt[j] = S[i + j - 1]\n\t\tend\n\t\tT[#T + 1] = t\n\tend\n\treturn T\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return T\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return T\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn T\nend",
    "\tlocal t = {}\n\tfor i = 1, #S, step do\n\t\tt[#t+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn t\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn T\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T+1] = {unpack(S, i, i+step-1)}\n    end\n    return T\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T+1] = {unpack(S, i, i+step-1)}\n    end\n    return T\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn result\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return T\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T+1] = {unpack(S, i, i+step-1)}\n    end\n    return T\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn T\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn result\nend",
    "\tlocal t = {}\n\tfor i = 1, #S, step do\n\t\tt[#t+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn t\nend",
    "    local t = {}\n    for i = 1, #S, step do\n        t[#t+1] = S:sub(i, i + step - 1)\n    end\n    return t\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    T[#T+1] = {unpack(S, i, i+step-1)}\n  end\n  return T\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn T\nend",
    "    local t = {}\n    for i = 1, #S, step do\n        t[#t+1] = {unpack(S, i, i+step-1)}\n    end\n    return t\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T+1] = {unpack(S, i, i+step-1)}\n    end\n    return T\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return T\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T+1] = {unpack(S, i, i+step-1)}\n    end\n    return T\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tlocal t = {}\n\t\tfor j = i, i+step-1 do\n\t\t\tif S[j] then\n\t\t\t\ttable.insert(t, S[j])\n\t\t\tend\n\t\tend\n\t\ttable.insert(T, t)\n\tend\n\treturn T\nend",
    "    local result = {}\n    local i = 1\n    while i <= #S do\n        local j = i + step - 1\n        if j > #S then\n            j = #S\n        end\n        table.insert(result, {unpack(S, i, j)})\n        i = i + step\n    end\n    return result\nend",
    "\tlocal t = {}\n\tfor i = 1, #S, step do\n\t\tt[#t+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn t\nend",
    "\tlocal R = {}\n\tfor i = 1, #S, step do\n\t\tR[#R + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn R\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T+1] = {unpack(S, i, i+step-1)}\n    end\n    return T\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn T\nend",
    "  local result = {}\n  local i = 1\n  while i <= #S do\n    table.insert(result, S[i])\n    i = i + step\n  end\n  return result\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    local t = {}\n    for j = i, i + step - 1 do\n      t[#t + 1] = S[j]\n    end\n    T[#T + 1] = t\n  end\n  return T\nend",
    "\tlocal t = {}\n\tlocal n = #S\n\tfor i = 1, n, step do\n\t\tlocal e = math.min(i + step - 1, n)\n\t\tt[#t + 1] = {unpack(S, i, e)}\n\tend\n\treturn t\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn T\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    T[#T+1] = {unpack(S, i, i+step-1)}\n  end\n  return T\nend",
    "    local t = {}\n    for i = 1, #S, step do\n        t[#t + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return t\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T+1] = {unpack(S, i, i+step-1)}\n    end\n    return T\nend",
    "\tlocal result = {}\n\tlocal i = 1\n\twhile i <= #S do\n\t\ttable.insert(result, {table.unpack(S, i, math.min(i + step - 1, #S))})\n\t\ti = i + step\n\tend\n\treturn result\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    T[#T + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return T\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    T[#T+1] = {unpack(S, i, i+step-1)}\n  end\n  return T\nend"
  ]
}