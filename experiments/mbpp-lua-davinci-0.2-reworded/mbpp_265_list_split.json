{
  "name": "mbpp_265_list_split",
  "language": "lua",
  "prompt": "-- Write a function that takes in a table and an integer n and splits a table for every nth element, returning a table of the resulting tables.\nlocal function list_split(S, step)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = list_split\n    lu.assertEquals(candidate({'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'}, 3), {{'a', 'd', 'g', 'j', 'm'}, {'b', 'e', 'h', 'k', 'n'}, {'c', 'f', 'i', 'l'}})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, 3), {{1, 4, 7, 10, 13}, {2, 5, 8, 11, 14}, {3, 6, 9, 12}})\n    lu.assertEquals(candidate({'python', 'java', 'C', 'C++', 'DBMS', 'SQL'}, 2), {{'python', 'C', 'DBMS'}, {'java', 'C++', 'SQL'}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T+1] = {unpack(S, i, i+step-1)}\n    end\n    return T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T+1] = {unpack(S, i, i+step-1)}\n    end\n    return T\nend",
    "\tlocal t = {}\n\tfor i = 1, #S, step do\n\t\tlocal t2 = {}\n\t\tfor j = i, i + step - 1 do\n\t\t\tif S[j] then\n\t\t\t\ttable.insert(t2, S[j])\n\t\t\tend\n\t\tend\n\t\ttable.insert(t, t2)\n\tend\n\treturn t\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "\tlocal T = {}\n\tfor i = 1, #S, step do\n\t\tT[#T + 1] = {unpack(S, i, i + step - 1)}\n\tend\n\treturn T\nend",
    "\tlocal t = {}\n\tfor i = 1, #S, step do\n\t\tt[#t+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn t\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "  local T = {}\n  for i = 1, #S, step do\n    T[#T + 1] = {unpack(S, i, i + step - 1)}\n  end\n  return T\nend",
    "\tlocal result = {}\n\tfor i = 1, #S, step do\n\t\tresult[#result+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn result\nend",
    "\tlocal t = {}\n\tfor i = 1, #S, step do\n\t\tt[#t+1] = {unpack(S, i, i+step-1)}\n\tend\n\treturn t\nend",
    "    local T = {}\n    for i = 1, #S, step do\n        T[#T + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return T\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result + 1] = {unpack(S, i, i + step - 1)}\n    end\n    return result\nend",
    "    local t = {}\n    for i = 1, #S, step do\n        t[#t + 1] = S:sub(i, i + step - 1)\n    end\n    return t\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #S, step do\n        result[#result+1] = {unpack(S, i, i+step-1)}\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #S, step do\n    result[#result+1] = {unpack(S, i, i+step-1)}\n  end\n  return result\nend"
  ]
}