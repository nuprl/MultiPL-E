{
  "name": "mbpp_452_loss_amount",
  "language": "lua",
  "prompt": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    local loss = actual_cost - sale_amount\n    if loss > 0 then\n        return loss\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi5dqljt.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmphi5dqljt.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    local loss = actual_cost - sale_amount\n    if loss > 0 then\n        return loss\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi5dqljt.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmphi5dqljt.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    local loss = actual_cost - sale_amount\n    if loss > 0 then\n        return loss\n    end\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122640,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0fc18wl8.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp0fc18wl8.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    local loss = actual_cost - sale_amount\n    if loss > 0 then\n        return loss\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi5dqljt.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmphi5dqljt.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    local loss = actual_cost - sale_amount\n    if loss > 0 then\n        return loss\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi5dqljt.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmphi5dqljt.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    local loss = actual_cost - sale_amount\n    if loss > 0 then\n        return loss\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi5dqljt.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmphi5dqljt.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    local loss = actual_cost - sale_amount\n    if loss > 0 then\n        return loss\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi5dqljt.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmphi5dqljt.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if sale_amount < actual_cost then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122640,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp23ubqses.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp23ubqses.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    local loss = actual_cost - sale_amount\n    if loss > 0 then\n        return loss\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi5dqljt.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmphi5dqljt.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    local loss = actual_cost - sale_amount\n    if loss > 0 then\n        return loss\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi5dqljt.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmphi5dqljt.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    local loss = actual_cost - sale_amount\n    if loss > 0 then\n        return loss\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi5dqljt.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmphi5dqljt.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    local loss = actual_cost - sale_amount\n    if loss > 0 then\n        return loss\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi5dqljt.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmphi5dqljt.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    local loss = actual_cost - sale_amount\n    if loss > 0 then\n        return loss\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi5dqljt.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmphi5dqljt.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    local loss = actual_cost - sale_amount\n    if loss > 0 then\n        return loss\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi5dqljt.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmphi5dqljt.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    local loss = actual_cost - sale_amount\n    if loss > 0 then\n        return loss\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi5dqljt.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmphi5dqljt.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    local loss = actual_cost - sale_amount\n    if loss > 0 then\n        return loss\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi5dqljt.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmphi5dqljt.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif sale_amount < actual_cost then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122640,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbgvkkine.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpbgvkkine.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    local loss = actual_cost - sale_amount\n    if loss > 0 then\n        return loss\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi5dqljt.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmphi5dqljt.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    local loss = actual_cost - sale_amount\n    if loss > 0 then\n        return loss\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi5dqljt.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmphi5dqljt.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    local loss = actual_cost - sale_amount\n    if loss > 0 then\n        return loss\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi5dqljt.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmphi5dqljt.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    local loss = actual_cost - sale_amount\n    if loss > 0 then\n        return loss\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi5dqljt.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmphi5dqljt.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if sale_amount < actual_cost then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122640,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp23ubqses.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp23ubqses.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tlocal loss = actual_cost - sale_amount\n\tif loss > 0 then\n\t\treturn loss\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pk_3w94.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmp3pk_3w94.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  local loss = actual_cost - sale_amount\n  if loss > 0 then\n    return loss\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6lcg_ag.lua:14: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpf6lcg_ag.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3xmzno3.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpy3xmzno3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n\tif actual_cost > sale_amount then\n\t\treturn actual_cost - sale_amount\n\telse\n\t\treturn 0\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx13hp71.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpjx13hp71.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n  if actual_cost > sale_amount then\n    return actual_cost - sale_amount\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027791,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsa_ivjbs.lua:13: expected: 0, actual: 300\nstack traceback:\n\t/tmp/tmpsa_ivjbs.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}