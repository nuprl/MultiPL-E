{
  "name": "mbpp_759_is_decimal",
  "language": "lua",
  "prompt": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return string.match(num, '^[0-9]+%.[0-9][0-9]$')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpptwk3ag5.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpptwk3ag5.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  if num:match(\"^[0-9]+[.][0-9]{2}$\") then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7m0umnkg.lua:13: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7m0umnkg.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprocby337.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmprocby337.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    if type(num) ~= \"string\" then\n        return false\n    end\n    local dot_count = 0\n    for i = 1, #num do\n        local c = num:sub(i, i)\n        if c == \".\" then\n            dot_count = dot_count + 1\n            if dot_count > 1 then\n                return false\n            end\n        elseif not tonumber(c) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdaqspejq.lua:26: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdaqspejq.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local str = tostring(num)\n    local dot_index = string.find(str, '.')\n    if not dot_index then\n        return false\n    end\n    local decimal = string.sub(str, dot_index + 1)\n    if #decimal == 2 then\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxt4dwabf.lua:18: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxt4dwabf.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local num_pattern = \"^%d+%.%d%d$\"\n    return string.match(num, num_pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvl99jkp.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpvvl99jkp.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphabee3en.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmphabee3en.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+[.][0-9]{2}$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpag31zra_.lua:9: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpag31zra_.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  local pattern = \"^[0-9]+[.][0-9]{2}$\"\n  return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqiisg66n.lua:10: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpqiisg66n.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcv_5sx6m.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpcv_5sx6m.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return string.match(num, '^%d+%.%d%d$')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk08xpyaq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpk08xpyaq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8bbn_tg.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpw8bbn_tg.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, '^[0-9]+.[0-9]{2}$') ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdsas6g3h.lua:9: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdsas6g3h.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ilpo37p.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmp5ilpo37p.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local num = tonumber(num)\n    if num == nil then\n        return false\n    end\n    local int, fract = math.modf(num)\n    if fract == 0 then\n        return true\n    end\n    fract = math.abs(fract)\n    fract = fract * 100\n    local _, fract = math.modf(fract)\n    if fract == 0 then\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyx655m75.lua:23: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyx655m75.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprocby337.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmprocby337.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphabee3en.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmphabee3en.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n\tlocal num_str = tostring(num)\n\tlocal dot_pos = string.find(num_str, '.')\n\tif dot_pos then\n\t\tlocal decimal_part = string.sub(num_str, dot_pos + 1)\n\t\tif #decimal_part > 2 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9iveoyx.lua:17: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw9iveoyx.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = '^[0-9]+%.?[0-9]?[0-9]?$'\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bptures.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmp8bptures.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ilpo37p.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmp5ilpo37p.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  if type(num) ~= \"string\" then\n    return false\n  end\n  local i, j = string.find(num, \"^[%+%-]?%d+%.?%d*$\")\n  if i and j and i == 1 and j == #num then\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0d13lgsb.lua:18: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0d13lgsb.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaufcklna.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpaufcklna.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n\tlocal pattern = \"^[0-9]*[.]?[0-9]{0,2}$\"\n\treturn string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzav2njdp.lua:10: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpzav2njdp.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8bbn_tg.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpw8bbn_tg.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local num = tonumber(num)\n    if num then\n        return string.format(\"%.2f\", num) == num\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_zlkue_.lua:13: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0_zlkue_.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    if type(num) ~= \"string\" then\n        return false\n    end\n    local i, j = string.find(num, \"^[%d]+%.?[%d]?[%d]?$\")\n    return i ~= nil and j == #num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwib_o9kz.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpwib_o9kz.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcv_5sx6m.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpcv_5sx6m.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local num_str = tostring(num)\n    local dot_index = string.find(num_str, '.')\n    if dot_index then\n        local decimal = string.sub(num_str, dot_index + 1)\n        if #decimal > 2 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvprwhjt.lua:17: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbvprwhjt.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphabee3en.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmphabee3en.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  if not num then return false end\n  local n = tonumber(num)\n  if not n then return false end\n  return n == num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl728c8cv.lua:12: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl728c8cv.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphabee3en.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmphabee3en.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphabee3en.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmphabee3en.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return num:match(\"^%d+%.%d%d$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcv_5sx6m.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpcv_5sx6m.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n\tif not num then return false end\n\tlocal n = tonumber(num)\n\tif not n then return false end\n\treturn num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplju6kbo6.lua:12: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmplju6kbo6.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprocby337.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmprocby337.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphabee3en.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmphabee3en.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    if type(num) ~= \"string\" then\n        return false\n    end\n    local decimal_pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return ngx.re.match(num, decimal_pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb4dzya_i.lua:7: attempt to index a nil value (global 'ngx')\nstack traceback:\n\t/tmp/tmpb4dzya_i.lua:7: in local 'candidate'\n\t/tmp/tmpb4dzya_i.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return num:match(\"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe44xva3i.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpe44xva3i.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return num:match(\"^%d+%.%d%d$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8bbn_tg.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpw8bbn_tg.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphabee3en.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmphabee3en.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n\tif type(num) ~= \"string\" then\n\t\treturn false\n\tend\n\tlocal n = tonumber(num)\n\tif n == nil then\n\t\treturn false\n\tend\n\tlocal s = string.format(\"%.2f\", n)\n\treturn s == num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^-?%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57wb2l8r.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmp57wb2l8r.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  local _, _, int, dec = string.find(num, \"^(%d+)%.(%d+)$\")\n  if int and dec and string.len(dec) == 2 then\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return num:match(\"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe44xva3i.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpe44xva3i.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+[.][0-9]{2}$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvdxsujc.lua:9: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpdvdxsujc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local function is_decimal_helper(num, i)\n        if i == 3 then\n            return true\n        elseif i == 2 and num:sub(i, i) == '.' then\n            return true\n        elseif i == 1 and num:sub(i, i) == '-' then\n            return true\n        elseif num:sub(i, i) == '.' or num:sub(i, i) == '-' then\n            return false\n        elseif tonumber(num:sub(i, i)) then\n            return is_decimal_helper(num, i + 1)\n        else\n            return false\n        end\n    end\n    return is_decimal_helper(num, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9jqs33mv.lua:26: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9jqs33mv.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local num = tonumber(num)\n    if num == nil then\n        return false\n    end\n    local int, frac = math.modf(num)\n    if frac == 0 then\n        return true\n    end\n    local str = tostring(frac)\n    if #str <= 3 then\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo06574ow.lua:21: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo06574ow.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    if type(num) ~= \"string\" then\n        return false\n    end\n    local s, e = string.find(num, \"^%d+%.%d%d$\")\n    if s and e then\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local str = tostring(num)\n    local dot_index = string.find(str, '.')\n    if not dot_index then\n        return false\n    end\n    local decimal = string.sub(str, dot_index + 1)\n    if #decimal > 2 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9vw79on.lua:18: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpc9vw79on.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphabee3en.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmphabee3en.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprocby337.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmprocby337.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  if type(num) ~= \"string\" then\n    return false\n  end\n  local i, j = string.find(num, \"^[%+%-]?%d+%.?%d*$\")\n  if i == 1 and j == #num then\n    return true\n  end\n  local i, j = string.find(num, \"^[%+%-]?%d*%.?%d+$\")\n  if i == 1 and j == #num then\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11fk654y.lua:22: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp11fk654y.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  if not num then return false end\n  local n = tonumber(num)\n  if not n then return false end\n  return string.format(\"%.2f\", n) == num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^[0-9]+[.][0-9]{2}$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7uhf8qmb.lua:10: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp7uhf8qmb.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphabee3en.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmphabee3en.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, '^%d+%.%d%d$') ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+[.][0-9]{2}$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpag31zra_.lua:9: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpag31zra_.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^[0-9]*%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6t_pbkub.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmp6t_pbkub.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n\treturn string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_v8a8yt.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmp4_v8a8yt.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwib_o9kz.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpwib_o9kz.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local function is_decimal_helper(num, i)\n        if i == 0 then\n            return true\n        elseif string.sub(num, i, i) == \".\" then\n            return is_decimal_helper(num, i - 1)\n        elseif tonumber(string.sub(num, i, i)) == nil then\n            return false\n        else\n            return is_decimal_helper(num, i - 1)\n        end\n    end\n    return is_decimal_helper(num, #num)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0c4rrnm.lua:22: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpf0c4rrnm.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprocby337.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmprocby337.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprocby337.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmprocby337.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcv_5sx6m.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpcv_5sx6m.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local num_str = tostring(num)\n    local dot_index = string.find(num_str, \"%.\")\n    if not dot_index then\n        return false\n    end\n    local decimal_part = string.sub(num_str, dot_index + 1)\n    return #decimal_part == 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy448u0go.lua:16: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy448u0go.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local n = tonumber(num)\n    if n == nil then\n        return false\n    end\n    local s = tostring(n)\n    local i, j = s:find('%.')\n    if i == nil then\n        return true\n    end\n    return #s - j <= 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8bbn_tg.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpw8bbn_tg.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+[.][0-9]{2}$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvdxsujc.lua:9: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpdvdxsujc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8bbn_tg.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpw8bbn_tg.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphabee3en.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmphabee3en.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, '^%d+%.%d%d$')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4uoahw_.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmph4uoahw_.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprocby337.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmprocby337.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwib_o9kz.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpwib_o9kz.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    if not num then return false end\n    local n = tonumber(num)\n    if not n then return false end\n    return string.format(\"%.2f\", n) == num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local match = num:match(\"^[+-]?%d+%.?%d?%d?$\")\n    if match then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    if type(num) ~= \"string\" then\n        return false\n    end\n    local i, j = string.find(num, \"^%d+%.?%d*$\")\n    if i == 1 and j == #num then\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_l7c63n.lua:18: expected: false, actual: true\nstack traceback:\n\t/tmp/tmps_l7c63n.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    if not num then\n        return false\n    end\n    local n = tonumber(num)\n    if not n then\n        return false\n    end\n    local s = tostring(n)\n    local i, j = s:find('%.')\n    if not i then\n        return true\n    end\n    local decimal = s:sub(j + 1)\n    if #decimal > 2 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local num = tonumber(num)\n    if num == nil then\n        return false\n    end\n    local int, frac = math.modf(num)\n    if frac == 0 then\n        return true\n    end\n    local str = tostring(frac)\n    return string.len(str) == 3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp506pp25a.lua:18: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp506pp25a.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    if type(num) ~= \"string\" then\n        return false\n    end\n    local n = tonumber(num)\n    if not n then\n        return false\n    end\n    local s = tostring(n)\n    local i, j = s:find(\"%.\")\n    if not i then\n        return false\n    end\n    if #s - j > 2 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphabee3en.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmphabee3en.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    if type(num) ~= \"string\" then\n        return false\n    end\n    local i, j = string.find(num, \"^[%d]+%.?[%d]?[%d]?$\")\n    return i ~= nil and j == #num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return num:match(\"^[%d]+%.?[%d]?[%d]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwjcb7f4h.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpwjcb7f4h.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcv_5sx6m.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpcv_5sx6m.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcv_5sx6m.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpcv_5sx6m.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]{0,2}$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu33a1bg0.lua:9: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpu33a1bg0.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return num:match(\"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpex5r09ay.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpex5r09ay.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8bbn_tg.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpw8bbn_tg.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n\treturn num:match(\"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzbolmcrd.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpzbolmcrd.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    if num == nil then\n        return false\n    end\n    local num_str = tostring(num)\n    local dot_index = string.find(num_str, \"%.\")\n    if dot_index == nil then\n        return false\n    end\n    local dot_index_after = dot_index + 1\n    if dot_index_after > #num_str then\n        return false\n    end\n    local decimal_str = string.sub(num_str, dot_index_after)\n    if #decimal_str > 2 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8rsf_n3b.lua:26: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8rsf_n3b.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprocby337.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmprocby337.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n\treturn string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnal83ovc.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnal83ovc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprocby337.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmprocby337.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local function is_decimal_helper(num, count)\n        if count > 2 then\n            return false\n        elseif num == '' then\n            return true\n        elseif num:sub(1, 1) == '.' then\n            return is_decimal_helper(num:sub(2), count + 1)\n        elseif num:sub(1, 1) == '-' then\n            return is_decimal_helper(num:sub(2), count)\n        else\n            return is_decimal_helper(num:sub(2), count)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1ae5apby.lua:27: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local n = tonumber(num)\n    if n then\n        return n == math.floor(n)\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9uum148.lua:13: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd9uum148.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8bbn_tg.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpw8bbn_tg.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprocby337.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmprocby337.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaufcklna.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpaufcklna.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphabee3en.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmphabee3en.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    if type(num) ~= \"string\" then\n        return false\n    end\n    local i, j = string.find(num, \"^[%d]+%.?[%d]?[%d]?$\")\n    return i ~= nil and j == #num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return type(num) == \"string\" and num:match(\"^[+-]?%d+%.%d%d$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphabee3en.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmphabee3en.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprocby337.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmprocby337.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n\tif not num then return false end\n\tlocal n = tonumber(num)\n\tif not n then return false end\n\treturn string.format(\"%.2f\", n) == num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphabee3en.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmphabee3en.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcv_5sx6m.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpcv_5sx6m.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]{0,2}$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu33a1bg0.lua:9: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpu33a1bg0.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return num:match(\"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpex5r09ay.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpex5r09ay.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphabee3en.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmphabee3en.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcv_5sx6m.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpcv_5sx6m.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphabee3en.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmphabee3en.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8bbn_tg.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpw8bbn_tg.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  local pattern = \"^%d+%.%d%d$\"\n  return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgr83_0qt.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpgr83_0qt.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return string.match(num, \"^[0-9]+[.][0-9]{2}$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3y4iex_.lua:9: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpy3y4iex_.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  local pattern = \"^[0-9]+[.][0-9]{2}$\"\n  return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqiisg66n.lua:10: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpqiisg66n.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n  return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_3_kvzi.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpj_3_kvzi.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return num:match(\"^%d+%.%d%d$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphabee3en.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmphabee3en.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local num = tonumber(num)\n    if num == nil then\n        return false\n    end\n    local num_str = tostring(num)\n    local dot_index = string.find(num_str, \"%.\")\n    if dot_index == nil then\n        return true\n    else\n        return #num_str - dot_index == 3\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptndu7ctl.lua:19: expected: true, actual: false\nstack traceback:\n\t/tmp/tmptndu7ctl.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8bbn_tg.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpw8bbn_tg.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local num_str = tostring(num)\n    local dot_index = string.find(num_str, '.')\n    if dot_index == nil then\n        return true\n    end\n    local decimal_str = string.sub(num_str, dot_index + 1)\n    if #decimal_str > 2 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii4oecy7.lua:18: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpii4oecy7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  local num_str = tostring(num)\n  local dot_index = string.find(num_str, '%.')\n  if dot_index == nil then\n    return false\n  end\n  local decimal_part = string.sub(num_str, dot_index + 1)\n  if #decimal_part > 2 then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuqarunf3.lua:19: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuqarunf3.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcv_5sx6m.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpcv_5sx6m.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]{0,2}$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu33a1bg0.lua:9: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpu33a1bg0.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n  return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_3_kvzi.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpj_3_kvzi.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local str = tostring(num)\n    local dot_pos = string.find(str, \".\")\n    if dot_pos then\n        return #str - dot_pos == 3\n    else\n        return true\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfihceiok.lua:15: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfihceiok.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    if type(num) ~= \"string\" then\n        return false\n    end\n    local dot_index = string.find(num, \"%.\")\n    if not dot_index then\n        return false\n    end\n    local before_dot = string.sub(num, 1, dot_index - 1)\n    local after_dot = string.sub(num, dot_index + 1)\n    if #before_dot == 0 or #after_dot > 2 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnpkaco4_.lua:22: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnpkaco4_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  if type(num) ~= \"string\" then\n    return false\n  end\n  local i, j = string.find(num, \"^[%+%-]?%d+%.?%d*$\")\n  if i == 1 and j == #num then\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnl6rtied.lua:18: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnl6rtied.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    if type(num) ~= 'string' then\n        return false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyur6f27k.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n\treturn string.match(num, \"^[0-9]+%.[0-9][0-9]$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9n1fi2a.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpk9n1fi2a.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ilpo37p.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmp5ilpo37p.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  local s = tostring(num)\n  local i, j = s:find('%.')\n  if i then\n    return #s - j <= 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4t9k5jh3.lua:15: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4t9k5jh3.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphabee3en.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmphabee3en.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  if not num then return false end\n  if type(num) ~= 'string' then return false end\n  if not num:match('^[0-9]+%.?[0-9]*$') then return false end\n  local n = tonumber(num)\n  if not n then return false end\n  if n < 0 then return false end\n  if n > 100 then return false end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjwdmtau5.lua:16: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjwdmtau5.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphabee3en.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmphabee3en.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^[0-9]+.[0-9]{2}$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5x6ibqw.lua:10: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpu5x6ibqw.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcv_5sx6m.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpcv_5sx6m.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8bbn_tg.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpw8bbn_tg.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  local num = tonumber(num)\n  if num == nil then\n    return false\n  end\n  local num_str = tostring(num)\n  local dot_pos = string.find(num_str, \"%.\")\n  if dot_pos == nil then\n    return false\n  end\n  local decimal_part = string.sub(num_str, dot_pos + 1)\n  if #decimal_part ~= 2 then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^[0-9]+%.?[0-9]{0,2}$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1eztdsh.lua:10: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpf1eztdsh.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n\treturn string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_v8a8yt.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmp4_v8a8yt.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local n = tonumber(num)\n    if n == nil then\n        return false\n    end\n    local s = tostring(n)\n    if s:find(\"%.\") then\n        local p = s:sub(s:find(\"%.\") + 1)\n        if #p == 2 then\n            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  if not num then return false end\n  local n = tonumber(num)\n  if not n then return false end\n  return n == num and string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsxpk2piw.lua:12: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsxpk2piw.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaufcklna.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpaufcklna.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ilpo37p.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmp5ilpo37p.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    if num == nil then\n        return false\n    end\n    local str = tostring(num)\n    local dot_index = string.find(str, '.')\n    if dot_index == nil then\n        return false\n    end\n    local dot_count = 0\n    for i = 1, #str do\n        if string.sub(str, i, i) == '.' then\n            dot_count = dot_count + 1\n        end\n    end\n    if dot_count > 1 then\n        return false\n    end\n    local dot_index = string.find(str, '.')\n    if dot_index == #str then\n        return false\n    end\n    local dot_index = string.find(str, '.')\n    local decimal_part = string.sub(str, dot_index + 1)\n    if #decimal_part > 2 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzj9w0ere.lua:35: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzj9w0ere.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = '^[0-9]+%.?[0-9]{0,2}$'\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd7oylxxv.lua:10: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpd7oylxxv.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  if type(num) ~= 'string' then\n    return false\n  end\n  local i, j = string.find(num, '^%d+%.%d%d$')\n  return i ~= nil and i == 1 and j == string.len(num)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^[0-9]+%.?[0-9]{0,2}$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu33a1bg0.lua:9: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpu33a1bg0.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprocby337.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmprocby337.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local num = tonumber(num)\n    if num == nil then\n        return false\n    end\n    local str = tostring(num)\n    local dot = string.find(str, \"%.\")\n    if dot == nil then\n        return false\n    end\n    local len = string.len(str)\n    local precision = len - dot - 1\n    if precision == 2 then\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokpla_7g.lua:23: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpokpla_7g.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    if type(num) ~= \"string\" then\n        return false\n    end\n    local dot_count = 0\n    for i = 1, #num do\n        local c = num:sub(i, i)\n        if c == \".\" then\n            dot_count = dot_count + 1\n        elseif c < \"0\" or c > \"9\" then\n            return false\n        end\n    end\n    if dot_count > 1 then\n        return false\n    end\n    local dot_pos = num:find(\".\", 1, true)\n    if dot_pos then\n        local after_dot = #num - dot_pos\n        if after_dot > 2 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaufcklna.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpaufcklna.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfugnlkq.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpnfugnlkq.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local n = tonumber(num)\n    if n == nil then\n        return false\n    end\n    local s = tostring(n)\n    local i, j = s:find('%.')\n    if i == nil then\n        return false\n    end\n    local decimal = s:sub(j + 1)\n    if #decimal ~= 2 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local n = tonumber(num)\n    if n == nil then\n        return false\n    end\n    local s = tostring(n)\n    local i, j = string.find(s, \"%.\")\n    if i == nil then\n        return true\n    end\n    local len = string.len(s)\n    if len - j > 2 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n  return string.match(num, \"^%d+%.%d%d$\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcv_5sx6m.lua:9: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmpcv_5sx6m.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027735,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprocby337.lua:10: expected: true, actual: \"123.11\"\nstack traceback:\n\t/tmp/tmprocby337.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    local num = tonumber(num)\n    if num == nil then\n        return false\n    end\n    local str = string.format(\"%.2f\", num)\n    return str == num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122995,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zcajy56.lua:14: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0zcajy56.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}