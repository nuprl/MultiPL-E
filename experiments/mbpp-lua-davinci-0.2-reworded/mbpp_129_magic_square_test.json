{
  "name": "mbpp_129_magic_square_test",
  "language": "lua",
  "prompt": "-- Write a function to calculate whether the matrix is a magic square.\nlocal function magic_square_test(my_matrix)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = magic_square_test\n    lu.assertEquals(candidate({{7, 12, 1, 14}, {2, 13, 8, 11}, {16, 3, 10, 5}, {9, 6, 15, 4}}), true)\n    lu.assertEquals(candidate({{2, 7, 6}, {9, 5, 1}, {4, 3, 8}}), true)\n    lu.assertEquals(candidate({{2, 7, 6}, {9, 5, 1}, {4, 3, 7}}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local sum = 0\n    local magic_square = true\n    local row_sum = 0\n    local col_sum = 0\n    local diag_sum = 0\n    local diag_sum2 = 0\n    for i = 1, #my_matrix do\n        for j = 1, #my_matrix[i] do\n            sum = sum + my_matrix[i][j]\n        end\n    end\n    for i = 1, #my_matrix do\n        for j = 1, #my_matrix[i] do\n            row_sum = row_sum + my_matrix[i][j]\n        end\n        if row_sum ~= sum then\n            magic_square = false\n            break\n        end\n        row_sum = 0\n    end\n    for i = 1, #my_matrix do\n        for j = 1, #my_matrix[i] do\n            col_sum = col_sum + my_matrix[j][i]\n        end\n        if col_sum ~= sum then\n            magic_square = false\n            break\n        end\n        col_sum = 0\n    end\n    for i = 1, #my_matrix do\n        diag_sum = diag_sum + my_matrix[i][i]\n    end\n    if diag_sum ~= sum then\n        magic_square = false\n    end\n    for i = 1, #my_matrix do\n        diag_sum2 = diag_sum2 + my_matrix[i][#my_matrix - i + 1]\n    end\n    if diag_sum2 ~= sum then\n        magic_square = false\n    end\n    return magic_square\nend",
    "    local sum_rows = 0\n    local sum_cols = 0\n    local sum_diag = 0\n    local sum_anti_diag = 0\n    local sum_all = 0\n    local n = #my_matrix\n    for i = 1, n do\n        sum_rows = sum_rows + my_matrix[i][1]\n        sum_cols = sum_cols + my_matrix[1][i]\n        sum_diag = sum_diag + my_matrix[i][i]\n        sum_anti_diag = sum_anti_diag + my_matrix[i][n - i + 1]\n    end\n    sum_all = sum_rows * n\n    for i = 1, n do\n        for j = 1, n do\n            if sum_rows ~= sum_all or sum_cols ~= sum_all or sum_diag ~= sum_all or sum_anti_diag ~= sum_all then\n                return false\n            end\n        end\n    end\n    return true\nend",
    "  local sum = 0\n  local magic = true\n  local previous_sum = 0\n  for i = 1, #my_matrix do\n    sum = 0\n    for j = 1, #my_matrix[i] do\n      sum = sum + my_matrix[i][j]\n    end\n    if i == 1 then\n      previous_sum = sum\n    else\n      if sum ~= previous_sum then\n        magic = false\n      end\n    end\n  end\n  return magic\nend",
    "  local sum_diag_1 = 0\n  local sum_diag_2 = 0\n  local sum_row = 0\n  local sum_col = 0\n  local sum_row_prev = 0\n  local sum_col_prev = 0\n  local sum_diag_1_prev = 0\n  local sum_diag_2_prev = 0\n  local is_magic_square = true\n  local n = #my_matrix\n  for i = 1, n do\n    sum_row = 0\n    sum_col = 0\n    for j = 1, n do\n      sum_row = sum_row + my_matrix[i][j]\n      sum_col = sum_col + my_matrix[j][i]\n    end\n    if i == 1 then\n      sum_row_prev = sum_row\n      sum_col_prev = sum_col\n    else\n      if sum_row ~= sum_row_prev or sum_col ~= sum_col_prev then\n        is_magic_square = false\n        break\n      end\n    end\n    sum_diag_1 = sum_diag_1 + my_matrix[i][i]\n    sum_diag_2 = sum_diag_2 + my_matrix[i][n - i + 1]\n  end\n  if sum_diag_1 ~= sum_diag_1_prev or sum_diag_2 ~= sum_diag_2_prev then\n    is_magic_square = false\n  end\n  return is_magic_square\nend",
    "    local sum = 0\n    local magic_square = true\n    local row_sum = 0\n    local column_sum = 0\n    local diagonal_sum = 0\n    local reverse_diagonal_sum = 0\n    local row_index = 1\n    local column_index = 1\n    local diagonal_index = 1\n    local reverse_diagonal_index = 1\n    local row_length = #my_matrix\n    local column_length = #my_matrix[1]",
    "    local sum = 0\n    local magic_square = true\n    local n = #my_matrix\n    for i = 1, n do\n        sum = sum + my_matrix[i][1]\n    end\n    for i = 1, n do\n        local sum_row = 0\n        local sum_col = 0\n        for j = 1, n do\n            sum_row = sum_row + my_matrix[i][j]\n            sum_col = sum_col + my_matrix[j][i]\n        end\n        if sum_row ~= sum or sum_col ~= sum then\n            magic_square = false\n            break\n        end\n    end\n    local sum_diag1 = 0\n    local sum_diag2 = 0\n    for i = 1, n do\n        sum_diag1 = sum_diag1 + my_matrix[i][i]\n        sum_diag2 = sum_diag2 + my_matrix[i][n - i + 1]\n    end\n    if sum_diag1 ~= sum or sum_diag2 ~= sum then\n        magic_square = false\n    end\n    return magic_square\nend",
    "    local sum = 0\n    local magic_square = true\n    for i = 1, #my_matrix do\n        sum = sum + my_matrix[i][i]\n    end\n    for i = 1, #my_matrix do\n        local row_sum = 0\n        local col_sum = 0\n        for j = 1, #my_matrix do\n            row_sum = row_sum + my_matrix[i][j]\n            col_sum = col_sum + my_matrix[j][i]\n        end\n        if row_sum ~= sum or col_sum ~= sum then\n            magic_square = false\n            break\n        end\n    end\n    return magic_square\nend",
    "    local sum = 0\n    local row_sum = 0\n    local col_sum = 0\n    local diag_sum = 0\n    local diag_sum2 = 0\n    local n = #my_matrix\n    for i = 1, n do\n        row_sum = 0\n        col_sum = 0\n        for j = 1, n do\n            row_sum = row_sum + my_matrix[i][j]\n            col_sum = col_sum + my_matrix[j][i]\n        end\n        if sum == 0 then\n            sum = row_sum\n        elseif sum ~= row_sum then\n            return false\n        end\n        if sum ~= col_sum then\n            return false\n        end\n        diag_sum = diag_sum + my_matrix[i][i]\n        diag_sum2 = diag_sum2 + my_matrix[i][n - i + 1]\n    end\n    if sum ~= diag_sum or sum ~= diag_sum2 then\n        return false\n    end\n    return true\nend",
    "    -- TODO: Implement this function.\n    return false\nend",
    "    local sum = 0\n    local magic_square = true\n    for i = 1, #my_matrix do\n        sum = sum + my_matrix[i][i]\n    end\n    for i = 1, #my_matrix do\n        local row_sum = 0\n        local col_sum = 0\n        for j = 1, #my_matrix do\n            row_sum = row_sum + my_matrix[i][j]\n            col_sum = col_sum + my_matrix[j][i]\n        end\n        if row_sum ~= sum or col_sum ~= sum then\n            magic_square = false\n            break\n        end\n    end\n    return magic_square\nend",
    "    local n = #my_matrix\n    local sum = 0\n    local magic_square = true\n    for i = 1, n do\n        sum = sum + my_matrix[i][i]\n    end\n    for i = 1, n do\n        local row_sum = 0\n        local col_sum = 0\n        for j = 1, n do\n            row_sum = row_sum + my_matrix[i][j]\n            col_sum = col_sum + my_matrix[j][i]\n        end\n        if row_sum ~= sum or col_sum ~= sum then\n            magic_square = false\n            break\n        end\n    end\n    return magic_square\nend",
    "    local sum = 0\n    local magic_square = true\n    for i = 1, #my_matrix do\n        sum = sum + my_matrix[i][1]\n    end\n    for i = 1, #my_matrix do\n        local row_sum = 0\n        local col_sum = 0\n        for j = 1, #my_matrix do\n            row_sum = row_sum + my_matrix[i][j]\n            col_sum = col_sum + my_matrix[j][i]\n        end\n        if row_sum ~= sum or col_sum ~= sum then\n            magic_square = false\n            break\n        end\n    end\n    local diag_sum = 0\n    for i = 1, #my_matrix do\n        diag_sum = diag_sum + my_matrix[i][i]\n    end\n    if diag_sum ~= sum then\n        magic_square = false\n    end\n    diag_sum = 0\n    for i = 1, #my_matrix do\n        diag_sum = diag_sum + my_matrix[i][#my_matrix - i + 1]\n    end\n    if diag_sum ~= sum then\n        magic_square = false\n    end\n    return magic_square\nend",
    "    local sum = 0\n    for i = 1, #my_matrix do\n        sum = sum + my_matrix[i][1]\n    end\n    for i = 1, #my_matrix do\n        local row_sum = 0\n        local col_sum = 0\n        for j = 1, #my_matrix do\n            row_sum = row_sum + my_matrix[i][j]\n            col_sum = col_sum + my_matrix[j][i]\n        end\n        if row_sum ~= sum or col_sum ~= sum then\n            return false\n        end\n    end\n    local diag_sum = 0\n    for i = 1, #my_matrix do\n        diag_sum = diag_sum + my_matrix[i][i]\n    end\n    if diag_sum ~= sum then\n        return false\n    end\n    diag_sum = 0\n    for i = 1, #my_matrix do\n        diag_sum = diag_sum + my_matrix[i][#my_matrix - i + 1]\n    end\n    if diag_sum ~= sum then\n        return false\n    end\n    return true\nend",
    "    -- TODO: Implement this function.\n    local sum = 0\n    local sum2 = 0\n    local sum3 = 0\n    local sum4 = 0\n    for i = 1, #my_matrix do\n        for j = 1, #my_matrix[1] do\n            sum = sum + my_matrix[i][j]\n            sum2 = sum2 + my_matrix[j][i]\n            sum3 = sum3 + my_matrix[i][i]\n            sum4 = sum4 + my_matrix[i][#my_matrix[1] - i + 1]\n        end\n        if sum ~= sum2 or sum ~= sum3 or sum ~= sum4 then\n            return false\n        end\n        sum = 0\n        sum2 = 0\n        sum3 = 0\n        sum4 = 0\n    end\n    return true\nend",
    "    local sum = 0\n    local sum_diag_1 = 0\n    local sum_diag_2 = 0\n    local sum_row = 0\n    local sum_col = 0\n    local n = #my_matrix\n    for i = 1, n do\n        sum = sum + my_matrix[i][i]\n        sum_diag_1 = sum_diag_1 + my_matrix[i][n - i + 1]\n    end\n    if sum ~= sum_diag_1 then\n        return false\n    end\n    for i = 1, n do\n        sum_row = 0\n        sum_col = 0\n        for j = 1, n do\n            sum_row = sum_row + my_matrix[i][j]\n            sum_col = sum_col + my_matrix[j][i]\n        end\n        if sum ~= sum_row or sum ~= sum_col then\n            return false\n        end\n    end\n    return true\nend",
    "    --[[\n    A magic square is a square matrix of numbers where the sum of the\n    numbers in each row, column and diagonal is the same.\n    ]]--\n    local sum = 0\n    local sum_diag_1 = 0\n    local sum_diag_2 = 0\n    local sum_row = 0\n    local sum_col = 0\n    local magic_square = true\n    for i = 1, #my_matrix do\n        sum_row = 0\n        sum_col = 0\n        for j = 1, #my_matrix do\n            sum_row = sum_row + my_matrix[i][j]\n            sum_col = sum_col + my_matrix[j][i]\n        end\n        if sum == 0 then\n            sum = sum_row\n        elseif sum ~= sum_row or sum ~= sum_col then\n            magic_square = false\n            break\n        end\n    end\n    if magic_square then\n        for i = 1, #my_matrix do\n            sum_diag_1 = sum_diag_1 + my_matrix[i][i]\n            sum_diag_2 = sum_diag_2 + my_matrix[i][#my_matrix - i + 1]\n        end\n        if sum ~= sum_diag_1 or sum ~= sum_diag_2 then\n            magic_square = false\n        end\n    end\n    return magic_square\nend",
    "    local sum = 0\n    local sum_diag_1 = 0\n    local sum_diag_2 = 0\n    local sum_row = 0\n    local sum_col = 0\n    local n = #my_matrix\n    local m = #my_matrix[1]\n    local is_magic = true\n    for i = 1, n do\n        sum = sum + my_matrix[i][1]\n    end\n    for i = 1, n do\n        sum_diag_1 = sum_diag_1 + my_matrix[i][i]\n    end\n    for i = 1, n do\n        sum_diag_2 = sum_diag_2 + my_matrix[i][n - i + 1]\n    end\n    for i = 1, n do\n        sum_row = 0\n        for j = 1, m do\n            sum_row = sum_row + my_matrix[i][j]\n        end\n        if sum_row ~= sum then\n            is_magic = false\n            break\n        end\n    end\n    for i = 1, m do\n        sum_col = 0\n        for j = 1, n do\n            sum_col = sum_col + my_matrix[j][i]\n        end\n        if sum_col ~= sum then\n            is_magic = false\n            break\n        end\n    end\n    if sum_diag_1 ~= sum or sum_diag_2 ~= sum then\n        is_magic = false\n    end\n    return is_magic\nend",
    "    local sum = 0\n    local magic_square = true\n    local i = 1\n    while i <= #my_matrix do\n        sum = sum + my_matrix[i][1]\n        i = i + 1\n    end\n    i = 1\n    while i <= #my_matrix do\n        local j = 1\n        local temp_sum = 0\n        while j <= #my_matrix do\n            temp_sum = temp_sum + my_matrix[i][j]\n            j = j + 1\n        end\n        if temp_sum ~= sum then\n            magic_square = false\n        end\n        i = i + 1\n    end\n    i = 1\n    while i <= #my_matrix do\n        local j = 1\n        local temp_sum = 0\n        while j <= #my_matrix do\n            temp_sum = temp_sum + my_matrix[j][i]\n            j = j + 1\n        end\n        if temp_sum ~= sum then\n            magic_square = false\n        end\n        i = i + 1\n    end\n    local j = 1\n    local temp_sum = 0\n    while j <= #my_matrix do\n        temp_sum = temp_sum + my_matrix[j][j]\n        j = j + 1\n    end\n    if temp_sum ~= sum then\n        magic_square = false\n    end\n    j = 1\n    temp_sum = 0\n    while j <= #my_matrix do\n        temp_sum = temp_sum + my_matrix[j][#my_matrix - j + 1]\n        j = j + 1\n    end\n    if temp_sum ~= sum then\n        magic_square = false\n    end\n    return magic_square\nend",
    "\t-- check if the matrix is a square matrix\n\tif not is_square_matrix(my_matrix) then\n\t\treturn false\n\tend\n\t-- check if the matrix is a magic square\n\tlocal n = #my_matrix\n\tlocal magic_number = n * (n^2 + 1) / 2\n\tlocal row_sum = 0\n\tlocal col_sum = 0\n\tlocal diag_sum = 0\n\tlocal anti_diag_sum = 0\n\tfor i = 1, n do\n\t\trow_sum = 0\n\t\tcol_sum = 0\n\t\tfor j = 1, n do\n\t\t\trow_sum = row_sum + my_matrix[i][j]\n\t\t\tcol_sum = col_sum + my_matrix[j][i]\n\t\tend\n\t\tif row_sum ~= magic_number or col_sum ~= magic_number then\n\t\t\treturn false\n\t\tend\n\t\tdiag_sum = diag_sum + my_matrix[i][i]\n\t\tanti_diag_sum = anti_diag_sum + my_matrix[i][n - i + 1]\n\tend\n\tif diag_sum ~= magic_number or anti_diag_sum ~= magic_number then\n\t\treturn false\n\tend\n\treturn true\nend",
    "    -- TODO: Write this function.\n    -- Hint: Use the sum_of_row function you wrote above.\n    local sum = sum_of_row(my_matrix, 1)\n    for i = 1, #my_matrix do\n        if sum_of_row(my_matrix, i) ~= sum then\n            return false\n        end\n    end\n    for i = 1, #my_matrix do\n        if sum_of_column(my_matrix, i) ~= sum then\n            return false\n        end\n    end\n    if sum_of_diagonal(my_matrix, 1) ~= sum then\n        return false\n    end\n    if sum_of_diagonal(my_matrix, 2) ~= sum then\n        return false\n    end\n    return true\nend"
  ]
}