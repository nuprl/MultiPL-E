{
  "name": "mbpp_284_check_element",
  "language": "lua",
  "prompt": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_284_check_element.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n\tfor i, v in ipairs(list) do\n\t\tif v ~= element then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, value in ipairs(list) do\n    if value ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n\tfor _, v in ipairs(list) do\n\t\tif v ~= element then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i = 1, #list do\n        if list[i] ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, item in ipairs(list) do\n        if item ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, item in ipairs(list) do\n    if item ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i = 1, #list do\n        if list[i] ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i = 1, #list do\n        if list[i] ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, value in ipairs(list) do\n    if value ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i = 1, #list do\n        if list[i] ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, item in ipairs(list) do\n        if item ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i = 1, #list do\n        if list[i] ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i = 1, #list do\n        if list[i] ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, item in ipairs(list) do\n    if item ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsmy113eu.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i = 1, #list do\n        if list[i] ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in pairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n\tfor _, v in ipairs(list) do\n\t\tif v ~= element then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, item in ipairs(list) do\n    if item ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i = 1, #list do\n        if list[i] ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i = 1, #list do\n        if list[i] ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i = 1, #list do\n        if list[i] ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i = 1, #list do\n        if list[i] ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i = 1, #list do\n        if list[i] ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in pairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, item in ipairs(list) do\n    if item ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i = 1, #list do\n        if list[i] ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, value in ipairs(list) do\n        if value ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, item in ipairs(list) do\n        if item ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i = 1, #list do\n        if list[i] ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, value in ipairs(list) do\n        if value ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, value in ipairs(list) do\n        if value ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i = 1, #list do\n        if list[i] ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n\tfor _, v in ipairs(list) do\n\t\tif v ~= element then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in pairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i = 1, #list do\n        if list[i] ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, item in ipairs(list) do\n        if item ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for i = 1, #list do\n    if list[i] ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n\tfor i = 1, #list do\n\t\tif list[i] ~= element then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, item in ipairs(list) do\n        if item ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, value in ipairs(list) do\n    if value ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n  for _, v in ipairs(list) do\n    if v ~= element then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, item in ipairs(list) do\n        if item ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, v in ipairs(list) do\n        if v ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027698,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for i = 1, #list do\n        if list[i] ~= element then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123754,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}