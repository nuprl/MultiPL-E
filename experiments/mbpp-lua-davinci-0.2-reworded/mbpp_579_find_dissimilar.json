{
  "name": "mbpp_579_find_dissimilar",
  "language": "lua",
  "prompt": "-- Write a function to find the dissimilar elements in the given two tables.\nlocal function find_dissimilar(test_tup1, test_tup2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_dissimilar\n    lu.assertEquals(candidate({3, 4, 5, 6}, {5, 7, 4, 10}), {3, 6, 7, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, {7, 2, 3, 9}), {1, 4, 7, 9})\n    lu.assertEquals(candidate({21, 11, 25, 26}, {26, 34, 21, 36}), {34, 36, 11, 25})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local dissimilar = {}\n    for i = 1, #test_tup1 do\n        if test_tup1[i] ~= test_tup2[i] then\n            table.insert(dissimilar, i)\n        end\n    end\n    return dissimilar\nend",
    "    local dissimilar = {}\n    for k, v in pairs(test_tup1) do\n        if test_tup2[k] ~= v then\n            dissimilar[k] = v\n        end\n    end\n    return dissimilar\nend",
    "    local dissimilar = {}\n    for i, v in ipairs(test_tup1) do\n        if v ~= test_tup2[i] then\n            table.insert(dissimilar, i)\n        end\n    end\n    return dissimilar\nend",
    "    local dissimilar_tup = {}\n    for i = 1, #test_tup1 do\n        if test_tup1[i] ~= test_tup2[i] then\n            table.insert(dissimilar_tup, test_tup1[i])\n        end\n    end\n    return dissimilar_tup\nend",
    "    local dissimilar = {}\n    for i, v in ipairs(test_tup1) do\n        if v ~= test_tup2[i] then\n            table.insert(dissimilar, i)\n        end\n    end\n    return dissimilar\nend",
    "    local dissimilar_tup = {}\n    for i = 1, #test_tup1 do\n        if test_tup1[i] ~= test_tup2[i] then\n            dissimilar_tup[#dissimilar_tup + 1] = i\n        end\n    end\n    return dissimilar_tup\nend",
    "    local dissimilar = {}\n    for i, v in ipairs(test_tup1) do\n        if v ~= test_tup2[i] then\n            table.insert(dissimilar, i)\n        end\n    end\n    return dissimilar\nend",
    "    local dissimilar = {}\n    for i = 1, #test_tup1 do\n        if test_tup1[i] ~= test_tup2[i] then\n            table.insert(dissimilar, i)\n        end\n    end\n    return dissimilar\nend",
    "    local dissimilar = {}\n    for i = 1, #test_tup1 do\n        if test_tup1[i] ~= test_tup2[i] then\n            table.insert(dissimilar, i)\n        end\n    end\n    return dissimilar\nend",
    "    local tup1 = test_tup1\n    local tup2 = test_tup2\n    local dissimilar = {}\n    for i = 1, #tup1 do\n        if tup1[i] ~= tup2[i] then\n            table.insert(dissimilar, i)\n        end\n    end\n    return dissimilar\nend",
    "    local tup1 = test_tup1\n    local tup2 = test_tup2\n    local dissimilar = {}\n    for i = 1, #tup1 do\n        if tup1[i] ~= tup2[i] then\n            table.insert(dissimilar, i)\n        end\n    end\n    return dissimilar\nend",
    "    local diff = {}\n    for i = 1, #test_tup1 do\n        if test_tup1[i] ~= test_tup2[i] then\n            diff[#diff + 1] = i\n        end\n    end\n    return diff\nend",
    "    local dissimilar = {}\n    for i = 1, #test_tup1 do\n        if test_tup1[i] ~= test_tup2[i] then\n            table.insert(dissimilar, i)\n        end\n    end\n    return dissimilar\nend",
    "    local dissimilar = {}\n    for i, v in pairs(test_tup1) do\n        if test_tup2[i] ~= v then\n            dissimilar[i] = v\n        end\n    end\n    return dissimilar\nend",
    "    local dissimilar = {}\n    for i = 1, #test_tup1 do\n        if test_tup1[i] ~= test_tup2[i] then\n            table.insert(dissimilar, i)\n        end\n    end\n    return dissimilar\nend",
    "    local dissimilar_tup = {}\n    for i, v in ipairs(test_tup1) do\n        if v ~= test_tup2[i] then\n            table.insert(dissimilar_tup, v)\n        end\n    end\n    return dissimilar_tup\nend",
    "    local dissimilar = {}\n    for i = 1, #test_tup1 do\n        if test_tup1[i] ~= test_tup2[i] then\n            table.insert(dissimilar, i)\n        end\n    end\n    return dissimilar\nend",
    "    local dissimilar = {}\n    for i = 1, #test_tup1 do\n        if test_tup1[i] ~= test_tup2[i] then\n            dissimilar[#dissimilar + 1] = i\n        end\n    end\n    return dissimilar\nend",
    "    local dissimilar = {}\n    for i = 1, #test_tup1 do\n        if test_tup1[i] ~= test_tup2[i] then\n            table.insert(dissimilar, i)\n        end\n    end\n    return dissimilar\nend",
    "    local dissimilar_tup = {}\n    for i = 1, #test_tup1 do\n        if test_tup1[i] ~= test_tup2[i] then\n            table.insert(dissimilar_tup, i)\n        end\n    end\n    return dissimilar_tup\nend"
  ]
}