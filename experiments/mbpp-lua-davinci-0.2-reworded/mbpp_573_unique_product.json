{
  "name": "mbpp_573_unique_product",
  "language": "lua",
  "prompt": "-- Write a luathon function to calculate the product of the unique numbers in a given table.\nlocal function unique_product(list_data)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local product = 1\n    local unique_numbers = {}\n    for _, value in ipairs(list_data) do\n        if not unique_numbers[value] then\n            unique_numbers[value] = true\n            product = product * value\n        end\n    end\n    return product\nend",
    "    local unique_list = {}\n    local product = 1\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend",
    "    local product = 1\n    local unique = {}\n    for _, v in ipairs(list_data) do\n        if not unique[v] then\n            product = product * v\n            unique[v] = true\n        end\n    end\n    return product\nend",
    "  local product = 1\n  for i, v in ipairs(list_data) do\n    if i == 1 then\n      product = v\n    else\n      product = product * v\n    end\n  end\n  return product\nend",
    "    local product = 1\n    local unique_numbers = {}\n    for _, v in ipairs(list_data) do\n        if not unique_numbers[v] then\n            product = product * v\n            unique_numbers[v] = true\n        end\n    end\n    return product\nend",
    "    local unique_data = {}\n    local product = 1\n    for _, value in ipairs(list_data) do\n        if not unique_data[value] then\n            unique_data[value] = true\n            product = product * value\n        end\n    end\n    return product\nend",
    "    local product = 1\n    local unique_numbers = {}\n    for _, v in ipairs(list_data) do\n        if not unique_numbers[v] then\n            unique_numbers[v] = true\n            product = product * v\n        end\n    end\n    return product\nend",
    "    local product = 1\n    local unique_numbers = {}\n    for _, number in ipairs(list_data) do\n        if not unique_numbers[number] then\n            unique_numbers[number] = true\n            product = product * number\n        end\n    end\n    return product\nend",
    "  local product = 1\n  local unique_numbers = {}\n  for _, value in ipairs(list_data) do\n    if not unique_numbers[value] then\n      unique_numbers[value] = true\n      product = product * value\n    end\n  end\n  return product\nend",
    "    local product = 1\n    local unique_list = {}\n    for _, value in ipairs(list_data) do\n        if not unique_list[value] then\n            unique_list[value] = true\n            product = product * value\n        end\n    end\n    return product\nend",
    "  local product = 1\n  local unique_numbers = {}\n  for _, v in ipairs(list_data) do\n    if not unique_numbers[v] then\n      unique_numbers[v] = true\n      product = product * v\n    end\n  end\n  return product\nend",
    "  local unique_list = {}\n  local product = 1\n  for i, v in ipairs(list_data) do\n    if not unique_list[v] then\n      unique_list[v] = true\n      product = product * v\n    end\n  end\n  return product\nend",
    "  local product = 1\n  for k,v in pairs(list_data) do\n    if list_data[k] ~= list_data[k+1] then\n      product = product * v\n    end\n  end\n  return product\nend",
    "    local product = 1\n    local unique_numbers = {}\n    for _, number in ipairs(list_data) do\n        if not unique_numbers[number] then\n            unique_numbers[number] = true\n            product = product * number\n        end\n    end\n    return product\nend",
    "  local product = 1\n  for _, value in pairs(list_data) do\n    if value ~= nil then\n      product = product * value\n    end\n  end\n  return product\nend",
    "\tlocal product = 1\n\tlocal unique_list = {}\n\tfor _, v in ipairs(list_data) do\n\t\tif not unique_list[v] then\n\t\t\tunique_list[v] = true\n\t\t\tproduct = product * v\n\t\tend\n\tend\n\treturn product\nend",
    "    local product = 1\n    local unique_list = {}\n    for _, v in ipairs(list_data) do\n        if not unique_list[v] then\n            unique_list[v] = true\n            product = product * v\n        end\n    end\n    return product\nend",
    "    local unique_table = {}\n    local product = 1\n    for _, value in ipairs(list_data) do\n        if not unique_table[value] then\n            product = product * value\n            unique_table[value] = true\n        end\n    end\n    return product\nend",
    "    local product = 1\n    local unique_numbers = {}\n    for _, value in ipairs(list_data) do\n        if not unique_numbers[value] then\n            unique_numbers[value] = true\n            product = product * value\n        end\n    end\n    return product\nend",
    "    local product = 1\n    local unique_numbers = {}\n    for _, value in ipairs(list_data) do\n        if not unique_numbers[value] then\n            unique_numbers[value] = true\n            product = product * value\n        end\n    end\n    return product\nend"
  ]
}