{
  "name": "mbpp_585_expensive_items",
  "language": "lua",
  "prompt": "-- Write a function to find the n most expensive items in a given dataset.\nlocal function expensive_items(items, n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = expensive_items\n    lu.assertEquals(candidate({{['name'] = 'Item-1', ['price'] = 101.1}, {['name'] = 'Item-2', ['price'] = 555.22}}, 1), {{['name'] = 'Item-2', ['price'] = 555.22}})\n    lu.assertEquals(candidate({{['name'] = 'Item-1', ['price'] = 101.1}, {['name'] = 'Item-2', ['price'] = 555.22}, {['name'] = 'Item-3', ['price'] = 45.09}}, 2), {{['name'] = 'Item-2', ['price'] = 555.22}, {['name'] = 'Item-1', ['price'] = 101.1}})\n    lu.assertEquals(candidate({{['name'] = 'Item-1', ['price'] = 101.1}, {['name'] = 'Item-2', ['price'] = 555.22}, {['name'] = 'Item-3', ['price'] = 45.09}, {['name'] = 'Item-4', ['price'] = 22.75}}, 1), {{['name'] = 'Item-2', ['price'] = 555.22}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local sorted = {}\n    for _, item in pairs(items) do\n        sorted[#sorted + 1] = item\n    end\n    table.sort(sorted, function(a, b) return a.price > b.price end)\n    return sorted[1], sorted[2], sorted[3]\nend",
    "  local sorted_items = sort_items(items)\n  local expensive_items = {}\n  for i = 1, n do\n    table.insert(expensive_items, sorted_items[i])\n  end\n  return expensive_items\nend",
    "  local sorted_items = sort_by_price(items)\n  local most_expensive = {}\n  for i = 1, n do\n    most_expensive[i] = sorted_items[i]\n  end\n  return most_expensive\nend",
    "  local sorted = {}\n  for _, item in pairs(items) do\n    table.insert(sorted, item)\n  end\n  table.sort(sorted, function(a, b) return a.price > b.price end)\n  return sorted\nend",
    "    local sorted = {}\n    for _, item in pairs(items) do\n        table.insert(sorted, item)\n    end\n    table.sort(sorted, function(a, b) return a.price > b.price end)\n    return sorted\nend",
    "  local items_sorted = {}\n  for k, v in pairs(items) do\n    table.insert(items_sorted, {k, v})\n  end\n  table.sort(items_sorted, function(a, b) return a[2] > b[2] end)\n  return items_sorted\nend",
    "  local sorted = {}\n  for k, v in pairs(items) do\n    table.insert(sorted, {k, v})\n  end\n  table.sort(sorted, function(a, b) return a[2] > b[2] end)\n  local result = {}\n  for i = 1, n do\n    table.insert(result, sorted[i][1])\n  end\n  return result\nend",
    "  local sorted_items = sort_items(items)\n  local expensive_items = {}\n  for i = 1, n do\n    table.insert(expensive_items, sorted_items[i])\n  end\n  return expensive_items\nend",
    "  local sorted_items = {}\n  for i, item in ipairs(items) do\n    sorted_items[i] = item\n  end\n  table.sort(sorted_items, function(a, b) return a.price > b.price end)\n  local most_expensive = {}\n  for i = 1, n do\n    most_expensive[i] = sorted_items[i]\n  end\n  return most_expensive\nend",
    "    local sorted_items = {}\n    for k, v in pairs(items) do\n        table.insert(sorted_items, {name = k, price = v})\n    end\n    table.sort(sorted_items, function(a, b) return a.price > b.price end)\n    local most_expensive = {}\n    for i = 1, n do\n        table.insert(most_expensive, sorted_items[i])\n    end\n    return most_expensive\nend",
    "  local sorted = sort_by_price(items)\n  local result = {}\n  for i = 1, n do\n    table.insert(result, sorted[i])\n  end\n  return result\nend",
    "    local sorted = {}\n    for i, item in ipairs(items) do\n        local price = item.price\n        local name = item.name\n        local quantity = item.quantity\n        local total = price * quantity\n        table.insert(sorted, {name = name, price = price, quantity = quantity, total = total})\n    end\n    table.sort(sorted, function(a, b) return a.total > b.total end)\n    local result = {}\n    for i = 1, n do\n        table.insert(result, sorted[i])\n    end\n    return result\nend",
    "  local items_sorted = sort_by_price(items)\n  local items_expensive = {}\n  for i = 1, n do\n    items_expensive[i] = items_sorted[i]\n  end\n  return items_expensive\nend",
    "  local items_sorted = sort_by_price(items)\n  local items_expensive = {}\n  for i = 1, n do\n    table.insert(items_expensive, items_sorted[i])\n  end\n  return items_expensive\nend",
    "  local items_by_price = {}\n  for _, item in pairs(items) do\n    local price = item.price\n    if not items_by_price[price] then\n      items_by_price[price] = {}\n    end\n    table.insert(items_by_price[price], item)\n  end\n  local prices = {}\n  for price, _ in pairs(items_by_price) do\n    table.insert(prices, price)\n  end\n  table.sort(prices)\n  local most_expensive = {}\n  for i = #prices, #prices - n + 1, -1 do\n    local price = prices[i]\n    for _, item in pairs(items_by_price[price]) do\n      table.insert(most_expensive, item)\n    end\n  end\n  return most_expensive\nend",
    "  local sorted = {}\n  for _, item in pairs(items) do\n    sorted[#sorted + 1] = item\n  end\n  table.sort(sorted, function(a, b) return a.price > b.price end)\n  return sorted\nend",
    "  local sorted_items = {}\n  for _, item in ipairs(items) do\n    table.insert(sorted_items, item)\n  end\n  table.sort(sorted_items, function(a, b) return a.price > b.price end)\n  return sorted_items\nend",
    "  local sorted_items = sort_items(items)\n  local expensive_items = {}\n  for i = 1, n do\n    table.insert(expensive_items, sorted_items[i])\n  end\n  return expensive_items\nend",
    "  local sorted = {}\n  for i, item in pairs(items) do\n    table.insert(sorted, item)\n  end\n  table.sort(sorted, function(a, b) return a.price > b.price end)\n  return sorted\nend",
    "  local sorted = {}\n  for _, item in pairs(items) do\n    table.insert(sorted, item)\n  end\n  table.sort(sorted, function(a, b) return a.price > b.price end)\n  local result = {}\n  for i = 1, n do\n    table.insert(result, sorted[i])\n  end\n  return result\nend"
  ]
}