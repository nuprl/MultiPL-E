{
  "name": "mbpp_297_flatten_list",
  "language": "lua",
  "prompt": "-- Write a function to flatten a given nested table structure.\nlocal function flatten_list(list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = flatten_list\n    lu.assertEquals(candidate({0, 10, {20, 30}, 40, 50, {60, 70, 80}, {90, 100, 110, 120}}), {0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120})\n    lu.assertEquals(candidate({{10, 20}, {40}, {30, 56, 25}, {10, 20}, {33}, {40}}), {10, 20, 40, 30, 56, 25, 10, 20, 33, 40})\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}}), {1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local list2 = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            for _, v2 in ipairs(flatten_list(v)) do\n                table.insert(list2, v2)\n            end\n        else\n            table.insert(list2, v)\n        end\n    end\n    return list2\nend",
    "    local list2 = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            for _, v2 in ipairs(flatten_list(v)) do\n                table.insert(list2, v2)\n            end\n        else\n            table.insert(list2, v)\n        end\n    end\n    return list2\nend",
    "    local list2 = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            for _, v2 in ipairs(flatten_list(v)) do\n                table.insert(list2, v2)\n            end\n        else\n            table.insert(list2, v)\n        end\n    end\n    return list2\nend",
    "    local list2 = {}\n    for _, item in ipairs(list1) do\n        if type(item) == \"table\" then\n            for _, item2 in ipairs(flatten_list(item)) do\n                table.insert(list2, item2)\n            end\n        else\n            table.insert(list2, item)\n        end\n    end\n    return list2\nend",
    "    local list2 = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            for _, v2 in ipairs(flatten_list(v)) do\n                table.insert(list2, v2)\n            end\n        else\n            table.insert(list2, v)\n        end\n    end\n    return list2\nend",
    "    local list2 = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            for _, v2 in ipairs(flatten_list(v)) do\n                table.insert(list2, v2)\n            end\n        else\n            table.insert(list2, v)\n        end\n    end\n    return list2\nend",
    "  local list2 = {}\n  for i, v in ipairs(list1) do\n    if type(v) == \"table\" then\n      for j, w in ipairs(flatten_list(v)) do\n        table.insert(list2, w)\n      end\n    else\n      table.insert(list2, v)\n    end\n  end\n  return list2\nend",
    "    local list2 = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            for _, v2 in ipairs(flatten_list(v)) do\n                table.insert(list2, v2)\n            end\n        else\n            table.insert(list2, v)\n        end\n    end\n    return list2\nend",
    "    local list2 = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            for _, v2 in ipairs(flatten_list(v)) do\n                table.insert(list2, v2)\n            end\n        else\n            table.insert(list2, v)\n        end\n    end\n    return list2\nend",
    "\tlocal list2 = {}\n\tfor _, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tfor _, v2 in ipairs(flatten_list(v)) do\n\t\t\t\ttable.insert(list2, v2)\n\t\t\tend\n\t\telse\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlocal list2 = {}\n\tfor _, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tfor _, v2 in ipairs(flatten_list(v)) do\n\t\t\t\ttable.insert(list2, v2)\n\t\t\tend\n\t\telse\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "  local list2 = {}\n  for _, v in ipairs(list1) do\n    if type(v) == \"table\" then\n      for _, v2 in ipairs(flatten_list(v)) do\n        table.insert(list2, v2)\n      end\n    else\n      table.insert(list2, v)\n    end\n  end\n  return list2\nend",
    "    local list2 = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            for _, v2 in ipairs(flatten_list(v)) do\n                table.insert(list2, v2)\n            end\n        else\n            table.insert(list2, v)\n        end\n    end\n    return list2\nend",
    "    local list2 = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            for _, v2 in ipairs(flatten_list(v)) do\n                table.insert(list2, v2)\n            end\n        else\n            table.insert(list2, v)\n        end\n    end\n    return list2\nend",
    "    local list2 = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            for _, v2 in ipairs(flatten_list(v)) do\n                table.insert(list2, v2)\n            end\n        else\n            table.insert(list2, v)\n        end\n    end\n    return list2\nend",
    "    local list2 = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            for _, v2 in ipairs(flatten_list(v)) do\n                table.insert(list2, v2)\n            end\n        else\n            table.insert(list2, v)\n        end\n    end\n    return list2\nend",
    "  local list2 = {}\n  for _, v in ipairs(list1) do\n    if type(v) == 'table' then\n      for _, v2 in ipairs(flatten_list(v)) do\n        table.insert(list2, v2)\n      end\n    else\n      table.insert(list2, v)\n    end\n  end\n  return list2\nend",
    "    local result = {}\n    for _, v in ipairs(list1) do\n        if type(v) == 'table' then\n            for _, v1 in ipairs(flatten_list(v)) do\n                table.insert(result, v1)\n            end\n        else\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local list2 = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            for _, v2 in ipairs(flatten_list(v)) do\n                table.insert(list2, v2)\n            end\n        else\n            table.insert(list2, v)\n        end\n    end\n    return list2\nend",
    "    local list2 = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            for _, v2 in ipairs(flatten_list(v)) do\n                table.insert(list2, v2)\n            end\n        else\n            table.insert(list2, v)\n        end\n    end\n    return list2\nend"
  ]
}