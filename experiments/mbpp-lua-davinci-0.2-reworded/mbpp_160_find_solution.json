{
  "name": "mbpp_160_find_solution",
  "language": "lua",
  "prompt": "-- Write a function that returns integers x and y that satisfy ax + by = n as a table, or return None if no solution exists.\nlocal function find_solution(a, b, n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_solution\n    lu.assertEquals(candidate(2, 3, 7), {2, 1})\n    lu.assertEquals(candidate(4, 2, 7), None)\n    lu.assertEquals(candidate(1, 13, 17), {4, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local x = 0\n    local y = 0\n    while a * x <= n do\n        if (n - a * x) % b == 0 then\n            y = (n - a * x) / b\n            return {x, y}\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "    local x, y = 0, 0\n    while x <= n do\n        if (n - a * x) % b == 0 then\n            y = (n - a * x) / b\n            return {x, y}\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "    local x = 0\n    local y = 0\n    while x * a <= n do\n        if (n - x * a) % b == 0 then\n            y = (n - x * a) / b\n            return {x, y}\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "    local x = 0\n    while a * x <= n do\n        local y = (n - a * x) / b\n        if y == math.floor(y) then\n            return {x, y}\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "\tlocal x, y = 0, 0\n\tlocal d = gcd(a, b)\n\tif n % d ~= 0 then\n\t\treturn nil\n\tend\n\tlocal x0, y0 = find_solution(b % a, a, n % a)\n\tif x0 then\n\t\tx = y0 - (b // a) * x0\n\t\ty = x0\n\tend\n\treturn x, y\nend",
    "    local x, y = 0, 0\n    while a * x <= n do\n        if (n - a * x) % b == 0 then\n            y = (n - a * x) / b\n            return {x, y}\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "    local x = 0\n    local y = 0\n    local d = gcd(a, b)\n    if n % d == 0 then\n        local x0, y0 = find_solution(a / d, b / d, n / d)\n        x = x0\n        y = y0\n    else\n        return nil\n    end\n    return {x, y}\nend",
    "    local x = 0\n    local y = 0\n    while a * x <= n do\n        if (n - a * x) % b == 0 then\n            y = (n - a * x) / b\n            return {x, y}\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "    local x = 0\n    local y = 0\n    while a * x <= n do\n        if (n - a * x) % b == 0 then\n            y = (n - a * x) / b\n            return {x, y}\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "    local x = 0\n    local y = 0\n    while x * a <= n do\n        if (n - x * a) % b == 0 then\n            y = (n - x * a) / b\n            return {x, y}\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "    local x = 0\n    local y = 0\n    while a * x <= n do\n        if (n - a * x) % b == 0 then\n            y = (n - a * x) / b\n            return {x, y}\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "    local x, y = 0, 0\n    while a * x <= n do\n        if (n - a * x) % b == 0 then\n            y = (n - a * x) / b\n            return {x, y}\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "    local x, y = 0, 0\n    while a * x <= n do\n        if (n - a * x) % b == 0 then\n            y = (n - a * x) / b\n            return {x, y}\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "    local x, y = 0, 0\n    while a * x <= n do\n        if (n - a * x) % b == 0 then\n            y = (n - a * x) / b\n            return {x, y}\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "    local x = 0\n    local y = 0\n    local d = math.gcd(a, b)\n    if n % d ~= 0 then\n        return nil\n    end\n    local a1 = a / d\n    local b1 = b / d\n    local n1 = n / d\n    local x1, y1 = find_solution(b1, a1 % b1, n1)\n    if x1 ~= nil then\n        x = y1\n        y = x1 - math.floor(a1 / b1) * y1\n    end\n    return {x, y}\nend",
    "    local x = 0\n    local y = 0\n    local d = gcd(a, b)\n    if n % d == 0 then\n        local x0, y0 = find_solution(a / d, b / d, n / d)\n        x = x0\n        y = y0\n        return x, y\n    else\n        return nil\n    end\nend",
    "    local x = 0\n    local y = 0\n    while a * x <= n do\n        if (n - a * x) % b == 0 then\n            y = (n - a * x) / b\n            return {x, y}\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "    local x, y = 0, 0\n    while a * x <= n do\n        if (n - a * x) % b == 0 then\n            y = (n - a * x) / b\n            return {x, y}\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "    local x, y = 0, 0\n    while a * x <= n do\n        local r = n - a * x\n        if r % b == 0 then\n            return {x, r / b}\n        end\n        x = x + 1\n    end\n    return nil\nend",
    "    local x = 0\n    local y = 0\n    while x * a <= n do\n        if (n - x * a) % b == 0 then\n            y = (n - x * a) / b\n            return {x, y}\n        end\n        x = x + 1\n    end\n    return nil\nend"
  ]
}