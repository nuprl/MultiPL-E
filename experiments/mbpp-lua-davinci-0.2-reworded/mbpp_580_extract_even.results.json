{
  "name": "mbpp_580_extract_even",
  "language": "lua",
  "prompt": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"table\" then\n            result[i] = extract_even(test_tuple[i])\n        elseif test_tuple[i] % 2 == 0 then\n            result[i] = test_tuple[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpml26cl1h.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpml26cl1h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[i] = extract_even(v)\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5soadevc.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp5soadevc.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[i] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gy5b6im.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp0gy5b6im.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for k, v in pairs(test_tuple) do\n    if type(v) == 'table' then\n      result[k] = extract_even(v)\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[k] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcvsdbrvr.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpcvsdbrvr.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for i = 1, #test_tuple do\n    if type(test_tuple[i]) == \"table\" then\n      result[i] = extract_even(test_tuple[i])\n    elseif test_tuple[i] % 2 == 0 then\n      result[i] = test_tuple[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshh7rbs8.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpshh7rbs8.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5iobg5e.lua:15: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 6, 8}\nstack traceback:\n\t/tmp/tmpb5iobg5e.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0zsya3e.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmps0zsya3e.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local function is_even(x)\n    return x % 2 == 0\n  end\n  return test_tuple:filter(is_even)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9qi00quq.lua:6: attempt to call method 'filter' (a nil value)\nstack traceback:\n\t/tmp/tmp9qi00quq.lua:6: in function 'candidate'\n\t/tmp/tmp9qi00quq.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[#result + 1] = extract_even(v)\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local even_tuple = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      even_tuple[i] = extract_even(v)\n    elseif v % 2 == 0 then\n      even_tuple[i] = v\n    end\n  end\n  return even_tuple\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1v57b4k8.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp1v57b4k8.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0zsya3e.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmps0zsya3e.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for i = 1, #test_tuple do\n    if type(test_tuple[i]) == \"table\" then\n      result[i] = extract_even(test_tuple[i])\n    elseif type(test_tuple[i]) == \"number\" then\n      if test_tuple[i] % 2 == 0 then\n        result[i] = test_tuple[i]\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg11o8k22.lua:19: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpg11o8k22.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local even_tuple = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            even_tuple[#even_tuple + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            even_tuple[#even_tuple + 1] = v\n        end\n    end\n    return even_tuple\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        else\n            if v % 2 == 0 then\n                result[i] = v\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_ra8d4l.lua:19: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp7_ra8d4l.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == \"number\" and v % 2 == 0 then\n      result[#result + 1] = v\n    elseif type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local new_tuple = {}\n  for i,v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      new_tuple[i] = extract_even(v)\n    elseif type(v) == \"number\" and v % 2 == 0 then\n      new_tuple[i] = v\n    end\n  end\n  return new_tuple\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5ln1my8.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpw5ln1my8.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[i] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp37xw_o49.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp37xw_o49.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        else\n            if v % 2 == 0 then\n                result[#result + 1] = v\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        else\n            if v % 2 == 0 then\n                result[#result + 1] = v\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5iobg5e.lua:15: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 6, 8}\nstack traceback:\n\t/tmp/tmpb5iobg5e.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i,v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_gufufa.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp0_gufufa.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5iobg5e.lua:15: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 6, 8}\nstack traceback:\n\t/tmp/tmpb5iobg5e.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76mqqor7.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp76mqqor7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            result[#result + 1] = test_tuple[i]\n        elseif type(test_tuple[i]) == \"table\" then\n            result[#result + 1] = extract_even(test_tuple[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            table.insert(result, test_tuple[i])\n        elseif type(test_tuple[i]) == \"table\" then\n            table.insert(result, extract_even(test_tuple[i]))\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'number' and v % 2 == 0 then\n            table.insert(result, v)\n        elseif type(v) == 'table' then\n            local extracted = extract_even(v)\n            for _, v in ipairs(extracted) do\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmap_zgi.lua:20: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 6, 2, 4, 6, 8}\nstack traceback:\n\t/tmp/tmptmap_zgi.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"table\" then\n            result[i] = extract_even(test_tuple[i])\n        elseif test_tuple[i] % 2 == 0 then\n            result[i] = test_tuple[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpml26cl1h.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpml26cl1h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0zsya3e.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmps0zsya3e.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result+1] = extract_even(v)\n    elseif type(v) == \"number\" and v % 2 == 0 then\n      result[#result+1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == \"number\" and v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrf9_zib.lua:15: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 6, 8}\nstack traceback:\n\t/tmp/tmplrf9_zib.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[i] = extract_even(v)\n    elseif type(v) == \"number\" and v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb639m8kj.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpb639m8kj.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[i] = extract_even(v)\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5soadevc.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp5soadevc.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[#result + 1] = extract_even(v)\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        elseif type(v) == \"table\" then\n            local temp = extract_even(v)\n            for i, v in ipairs(temp) do\n                table.insert(result, v)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfy62wg4.lua:20: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 6, 2, 4, 6, 8}\nstack traceback:\n\t/tmp/tmprfy62wg4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for i = 1, #test_tuple do\n    if type(test_tuple[i]) == \"table\" then\n      result[i] = extract_even(test_tuple[i])\n    elseif type(test_tuple[i]) == \"number\" then\n      if test_tuple[i] % 2 == 0 then\n        result[i] = test_tuple[i]\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg11o8k22.lua:19: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpg11o8k22.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    elseif type(v) == \"number\" and v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == 'number' and v % 2 == 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdnu2yww.lua:15: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 6, 8}\nstack traceback:\n\t/tmp/tmpmdnu2yww.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[i] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp37xw_o49.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp37xw_o49.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        else\n            if v % 2 == 0 then\n                result[i] = v\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_ra8d4l.lua:19: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp7_ra8d4l.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, value in ipairs(test_tuple) do\n        if type(value) == \"number\" and value % 2 == 0 then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmnjfus8m.lua:15: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 6, 8}\nstack traceback:\n\t/tmp/tmpmnjfus8m.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        else\n            if v % 2 == 0 then\n                result[i] = v\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_ra8d4l.lua:19: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp7_ra8d4l.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0zsya3e.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmps0zsya3e.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76mqqor7.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp76mqqor7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[#result + 1] = extract_even(v)\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local even_tuple = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      even_tuple[i] = extract_even(v)\n    else\n      if v % 2 == 0 then\n        even_tuple[i] = v\n      end\n    end\n  end\n  return even_tuple\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamjvys_t.lua:19: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpamjvys_t.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            table.insert(result, test_tuple[i])\n        elseif type(test_tuple[i]) == \"table\" then\n            table.insert(result, extract_even(test_tuple[i]))\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in pairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"table\" then\n            result[i] = extract_even(test_tuple[i])\n        elseif test_tuple[i] % 2 == 0 then\n            result[i] = test_tuple[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpml26cl1h.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpml26cl1h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[i] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gy5b6im.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp0gy5b6im.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[#result + 1] = extract_even(v)\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"number\" and v % 2 == 0 then\n      table.insert(result, v)\n    elseif type(v) == \"table\" then\n      local extracted = extract_even(v)\n      for _, v in ipairs(extracted) do\n        table.insert(result, v)\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprjbpt_u.lua:20: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 6, 2, 4, 6, 8}\nstack traceback:\n\t/tmp/tmpprjbpt_u.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[i] = extract_even(v)\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5soadevc.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp5soadevc.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"table\" then\n            result[i] = extract_even(test_tuple[i])\n        elseif type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            result[i] = test_tuple[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfl0j_vyj.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpfl0j_vyj.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in pairs(test_tuple) do\n        if type(v) == \"number\" and v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg36y0gmq.lua:15: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 6, 8}\nstack traceback:\n\t/tmp/tmpg36y0gmq.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[#result + 1] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76mqqor7.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp76mqqor7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1ddur_7.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpd1ddur_7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        else\n            if v % 2 == 0 then\n                result[i] = v\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvldvqg8a.lua:19: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpvldvqg8a.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    elseif type(v) == \"number\" and v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    else\n      if v % 2 == 0 then\n        result[#result + 1] = v\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[i] = extract_even(v)\n    elseif type(v) == \"number\" and v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb639m8kj.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpb639m8kj.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for k, v in pairs(test_tuple) do\n    if type(v) == 'table' then\n      result[k] = extract_even(v)\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[k] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcvsdbrvr.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpcvsdbrvr.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        else\n            if v % 2 == 0 then\n                result[i] = v\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_ra8d4l.lua:19: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp7_ra8d4l.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76mqqor7.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp76mqqor7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[#result + 1] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            local sub_result = extract_even(v)\n            for _, v in ipairs(sub_result) do\n                table.insert(result, v)\n            end\n        elseif v % 2 == 0 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw149yfmh.lua:20: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 6, 2, 4, 6, 8}\nstack traceback:\n\t/tmp/tmpw149yfmh.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[#result + 1] = extract_even(v)\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        else\n            if v % 2 == 0 then\n                result[#result + 1] = v\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for i = 1, #test_tuple do\n    local v = test_tuple[i]\n    if type(v) == 'table' then\n      result[i] = extract_even(v)\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprn6klycr.lua:18: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmprn6klycr.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    elseif type(v) == \"number\" and v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    elseif type(v) == \"number\" and v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76mqqor7.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp76mqqor7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[#result + 1] = extract_even(v)\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == 'table' then\n            result[i] = extract_even(test_tuple[i])\n        elseif test_tuple[i] % 2 == 0 then\n            result[i] = test_tuple[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrv5rn28.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmprrv5rn28.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"table\" then\n            result[i] = extract_even(test_tuple[i])\n        elseif test_tuple[i] % 2 == 0 then\n            result[i] = test_tuple[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpml26cl1h.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpml26cl1h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[i] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gy5b6im.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp0gy5b6im.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        else\n            if v % 2 == 0 then\n                result[#result + 1] = v\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[i] = extract_even(v)\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5soadevc.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp5soadevc.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[#result+1] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[#result+1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0zsya3e.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmps0zsya3e.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == 'number' and v % 2 == 0 then\n      table.insert(result, v)\n    elseif type(v) == 'table' then\n      local sub_result = extract_even(v)\n      if #sub_result > 0 then\n        table.insert(result, sub_result)\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in pairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[#result + 1] = extract_even(v)\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1ddur_7.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpd1ddur_7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n\tlocal result = {}\n\tfor _, v in ipairs(test_tuple) do\n\t\tif type(v) == \"table\" then\n\t\t\tresult[#result + 1] = extract_even(v)\n\t\telseif v % 2 == 0 then\n\t\t\tresult[#result + 1] = v\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0zsya3e.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmps0zsya3e.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[#result + 1] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[i] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gy5b6im.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp0gy5b6im.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0zsya3e.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmps0zsya3e.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[i] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp37xw_o49.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp37xw_o49.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    elseif type(v) == \"number\" and v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    else\n      if v % 2 == 0 then\n        result[#result + 1] = v\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[#result + 1] = extract_even(v)\n    elseif type(v) == 'number' and v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76mqqor7.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp76mqqor7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        elseif type(v) == 'number' and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76mqqor7.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp76mqqor7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6u14vxm.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpl6u14vxm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for i, v in ipairs(test_tuple) do\n    if type(v) == 'table' then\n      result[i] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[i] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gy5b6im.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmp0gy5b6im.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[#result + 1] = extract_even(v)\n        elseif type(v) == \"number\" and v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for i = 1, #test_tuple do\n    local item = test_tuple[i]\n    if type(item) == \"table\" then\n      result[i] = extract_even(item)\n    elseif type(item) == \"number\" and item % 2 == 0 then\n      result[i] = item\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrj9wu34.lua:18: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpxrj9wu34.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0zsya3e.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmps0zsya3e.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local even_tuple = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            even_tuple[#even_tuple + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            even_tuple[#even_tuple + 1] = v\n        end\n    end\n    return even_tuple\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    elseif v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for _, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[#result + 1] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[#result + 1] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0zsya3e.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmps0zsya3e.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == 'table' then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1ddur_7.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpd1ddur_7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      result[#result + 1] = extract_even(v)\n    elseif type(v) == \"number\" and v % 2 == 0 then\n      result[#result + 1] = v\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i = 1, #test_tuple do\n        if type(test_tuple[i]) == \"table\" then\n            result[i] = extract_even(test_tuple[i])\n        elseif type(test_tuple[i]) == \"number\" and test_tuple[i] % 2 == 0 then\n            result[i] = test_tuple[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfl0j_vyj.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmpfl0j_vyj.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0zsya3e.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmps0zsya3e.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n  local result = {}\n  for _, v in ipairs(test_tuple) do\n    if type(v) == \"table\" then\n      local sub_result = extract_even(v)\n      if #sub_result > 0 then\n        table.insert(result, sub_result)\n      end\n    elseif v % 2 == 0 then\n      table.insert(result, v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123701,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    for i, v in ipairs(test_tuple) do\n        if type(v) == \"table\" then\n            result[i] = extract_even(v)\n        elseif v % 2 == 0 then\n            result[i] = v\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027762,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps0zsya3e.lua:17: expected: {4, {6, {2, 4}}, 6, 8}\nactual: {4, 3={2=6, 3={2, 4}}, 4=6, 5=8}\nstack traceback:\n\t/tmp/tmps0zsya3e.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}