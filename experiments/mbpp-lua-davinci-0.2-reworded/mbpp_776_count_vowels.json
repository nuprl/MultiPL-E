{
  "name": "mbpp_776_count_vowels",
  "language": "lua",
  "prompt": "-- Write a function to count those characters which have vowels as their neighbors in the given string.\nlocal function count_vowels(test_str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_vowels\n    lu.assertEquals(candidate('bestinstareels'), 7)\n    lu.assertEquals(candidate('partofthejourneyistheend'), 12)\n    lu.assertEquals(candidate('amazonprime'), 5)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {a = true, e = true, i = true, o = true, u = true}\n\tfor i = 1, #test_str do\n\t\tif vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 and test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u' then\n                count = count + 1\n            end\n            if i < #test_str and test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u' then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) and (is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1))) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str - 1 do\n\t\tif is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    if is_vowel(test_str:sub(i, i)) then\n      if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n        count = count + 1\n      end\n      if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i < #test_str then\n\t\t\t\tif is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\tif i > 1 then\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if (test_str:sub(i, i) == 'a' or test_str:sub(i, i) == 'e' or test_str:sub(i, i) == 'i' or test_str:sub(i, i) == 'o' or test_str:sub(i, i) == 'u') and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == \"a\" or char == \"e\" or char == \"i\" or char == \"o\" or char == \"u\" then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == \"a\" or test_str:sub(i - 1, i - 1) == \"e\" or test_str:sub(i - 1, i - 1) == \"i\" or test_str:sub(i - 1, i - 1) == \"o\" or test_str:sub(i - 1, i - 1) == \"u\") then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == \"a\" or test_str:sub(i + 1, i + 1) == \"e\" or test_str:sub(i + 1, i + 1) == \"i\" or test_str:sub(i + 1, i + 1) == \"o\" or test_str:sub(i + 1, i + 1) == \"u\") then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        local next_c = test_str:sub(i + 1, i + 1)\n        if next_c and (next_c == 'a' or next_c == 'e' or next_c == 'i' or next_c == 'o' or next_c == 'u') then\n            if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) and (is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1))) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and test_str:sub(i - 1, i - 1) == 'a' then\n                count = count + 1\n            end\n            if i < #test_str and test_str:sub(i + 1, i + 1) == 'a' then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str - 1 do\n\t\tif is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif i == 1 then\n\t\t\tif vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\telseif i == #test_str then\n\t\t\tif vowels[test_str:sub(i, i)] and vowels[test_str:sub(i - 1, i - 1)] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\telse\n\t\t\tif vowels[test_str:sub(i, i)] and vowels[test_str:sub(i - 1, i - 1)] and vowels[test_str:sub(i + 1, i + 1)] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str - 1 do\n        if test_str:sub(i, i) == 'a' or test_str:sub(i, i) == 'e' or test_str:sub(i, i) == 'i' or test_str:sub(i, i) == 'o' or test_str:sub(i, i) == 'u' then\n            if test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u' then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif vowels[test_str:sub(i, i)] then\n\t\t\tif vowels[test_str:sub(i - 1, i - 1)] or vowels[test_str:sub(i + 1, i + 1)] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 then\n                local prev = test_str:sub(i - 1, i - 1)\n                if prev == 'a' or prev == 'e' or prev == 'i' or prev == 'o' or prev == 'u' then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next = test_str:sub(i + 1, i + 1)\n                if next == 'a' or next == 'e' or next == 'i' or next == 'o' or next == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i == 1 then\n\t\t\t\tif is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telseif i == #test_str then\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i == 1 then\n\t\t\t\tif is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telseif i == #test_str then\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        local next_char = test_str:sub(i + 1, i + 1)\n        if is_vowel(char) and is_vowel(next_char) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 then\n                local prev_char = test_str:sub(i - 1, i - 1)\n                if prev_char == 'a' or prev_char == 'e' or prev_char == 'i' or prev_char == 'o' or prev_char == 'u' then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next_char = test_str:sub(i + 1, i + 1)\n                if next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 and i < #test_str then\n                local prev_char = test_str:sub(i - 1, i - 1)\n                local next_char = test_str:sub(i + 1, i + 1)\n                if prev_char == 'a' or prev_char == 'e' or prev_char == 'i' or prev_char == 'o' or prev_char == 'u' or\n                        next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if table.contains(vowels, char) then\n            if i > 1 and table.contains(vowels, test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and table.contains(vowels, test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if (vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)]) or\n            (vowels[test_str:sub(i, i)] and vowels[test_str:sub(i - 1, i - 1)]) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str - 1 do\n        if is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif vowels[test_str:sub(i, i)] and vowels[test_str:sub(i+1, i+1)] then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        local ch = test_str:sub(i, i)\n        if vowels[ch] then\n            if i > 1 and vowels[test_str:sub(i - 1, i - 1)] then\n                count = count + 1\n            end\n            if i < #test_str and vowels[test_str:sub(i + 1, i + 1)] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    if (test_str:sub(i, i) == 'a' or test_str:sub(i, i) == 'e' or test_str:sub(i, i) == 'i' or test_str:sub(i, i) == 'o' or test_str:sub(i, i) == 'u') and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    if is_vowel(test_str:sub(i, i)) then\n      if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n        count = count + 1\n      end\n      if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i == 1 then\n                if is_vowel(test_str:sub(i + 1, i + 1)) then\n                    count = count + 1\n                end\n            elseif i == #test_str then\n                if is_vowel(test_str:sub(i - 1, i - 1)) then\n                    count = count + 1\n                end\n            else\n                if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i < #test_str then\n\t\t\t\tif is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\tif i > 1 then\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tlocal char = test_str:sub(i,i)\n\t\tlocal prev = test_str:sub(i-1,i-1)\n\t\tlocal next = test_str:sub(i+1,i+1)\n\t\tif (prev and next and is_vowel(prev) and is_vowel(next)) or (prev and is_vowel(prev) and is_vowel(char)) or (next and is_vowel(next) and is_vowel(char)) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i,i)\n\t\tif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\t\t\tif i > 1 and (test_str:sub(i-1,i-1) == 'a' or test_str:sub(i-1,i-1) == 'e' or test_str:sub(i-1,i-1) == 'i' or test_str:sub(i-1,i-1) == 'o' or test_str:sub(i-1,i-1) == 'u') then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and (test_str:sub(i+1,i+1) == 'a' or test_str:sub(i+1,i+1) == 'e' or test_str:sub(i+1,i+1) == 'i' or test_str:sub(i+1,i+1) == 'o' or test_str:sub(i+1,i+1) == 'u') then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    if is_vowel(test_str:sub(i, i)) and (i == 1 or is_vowel(test_str:sub(i - 1, i - 1))) then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\t\t\tif i > 1 and (test_str:sub(i-1, i-1) == 'a' or test_str:sub(i-1, i-1) == 'e' or test_str:sub(i-1, i-1) == 'i' or test_str:sub(i-1, i-1) == 'o' or test_str:sub(i-1, i-1) == 'u') then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and (test_str:sub(i+1, i+1) == 'a' or test_str:sub(i+1, i+1) == 'e' or test_str:sub(i+1, i+1) == 'i' or test_str:sub(i+1, i+1) == 'o' or test_str:sub(i+1, i+1) == 'u') then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    if is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u' then\n                count = count + 1\n            end\n            if i < #test_str and test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u' then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i == 1 then\n\t\t\t\tif is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telseif i == #test_str then\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) and (i == 1 or is_vowel(test_str:sub(i - 1, i - 1))) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str - 1 do\n        if (table.index_of(vowels, test_str:sub(i, i)) ~= nil) and\n            (table.index_of(vowels, test_str:sub(i + 1, i + 1)) ~= nil) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif i > 1 and i < #test_str then\n\t\t\tif table.contains(vowels, test_str:sub(i, i)) then\n\t\t\t\tif table.contains(vowels, test_str:sub(i-1, i-1)) or table.contains(vowels, test_str:sub(i+1, i+1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"[aeiou]\") then\n            if i > 1 and test_str:sub(i - 1, i - 1):match(\"[aeiou]\") then\n                count = count + 1\n            end\n            if i < #test_str and test_str:sub(i + 1, i + 1):match(\"[aeiou]\") then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 and i < #test_str then\n                if test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u' then\n                    count = count + 1\n                end\n                if test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i == 1 then\n\t\t\t\tif is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telseif i == #test_str then\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if vowels[char] then\n            if i > 1 and vowels[test_str:sub(i - 1, i - 1)] then\n                count = count + 1\n            end\n            if i < #test_str and vowels[test_str:sub(i + 1, i + 1)] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {a = true, e = true, i = true, o = true, u = true}\n\tfor i = 1, #test_str do\n\t\tif vowels[test_str:sub(i, i)] then\n\t\t\tif vowels[test_str:sub(i - 1, i - 1)] or vowels[test_str:sub(i + 1, i + 1)] then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 then\n                local prev = test_str:sub(i - 1, i - 1)\n                if prev == 'a' or prev == 'e' or prev == 'i' or prev == 'o' or prev == 'u' then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next = test_str:sub(i + 1, i + 1)\n                if next == 'a' or next == 'e' or next == 'i' or next == 'o' or next == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    if is_vowel(test_str:sub(i, i)) then\n      if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n        count = count + 1\n      end\n      if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    local c = test_str:sub(i, i)\n    if is_vowel(c) then\n      if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n        count = count + 1\n      end\n      if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    if (test_str:sub(i, i) == \"a\" or test_str:sub(i, i) == \"e\" or test_str:sub(i, i) == \"i\" or test_str:sub(i, i) == \"o\" or test_str:sub(i, i) == \"u\") and (test_str:sub(i - 1, i - 1) == \"a\" or test_str:sub(i - 1, i - 1) == \"e\" or test_str:sub(i - 1, i - 1) == \"i\" or test_str:sub(i - 1, i - 1) == \"o\" or test_str:sub(i - 1, i - 1) == \"u\") then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 then\n                local prev_char = test_str:sub(i - 1, i - 1)\n                if prev_char == 'a' or prev_char == 'e' or prev_char == 'i' or prev_char == 'o' or prev_char == 'u' then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next_char = test_str:sub(i + 1, i + 1)\n                if next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    local char = test_str:sub(i, i)\n    if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n      if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n        count = count + 1\n      end\n      if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    local vowels = {a=true, e=true, i=true, o=true, u=true}\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        local next_c = test_str:sub(i+1, i+1)\n        if vowels[c] and vowels[next_c] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i, i)] then\n            if vowels[test_str:sub(i - 1, i - 1)] or vowels[test_str:sub(i + 1, i + 1)] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if (test_str:sub(i, i) == 'a' or test_str:sub(i, i) == 'e' or test_str:sub(i, i) == 'i' or test_str:sub(i, i) == 'o' or test_str:sub(i, i) == 'u') and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if (test_str:sub(i, i) == \"a\" or test_str:sub(i, i) == \"e\" or test_str:sub(i, i) == \"i\" or test_str:sub(i, i) == \"o\" or test_str:sub(i, i) == \"u\") and (test_str:sub(i - 1, i - 1) == \"a\" or test_str:sub(i - 1, i - 1) == \"e\" or test_str:sub(i - 1, i - 1) == \"i\" or test_str:sub(i - 1, i - 1) == \"o\" or test_str:sub(i - 1, i - 1) == \"u\") then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i == 1 then\n\t\t\t\tif is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telseif i == #test_str then\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if vowels[c] then\n            if vowels[test_str:sub(i - 1, i - 1)] or vowels[test_str:sub(i + 1, i + 1)] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i == 1 then\n\t\t\t\tif is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telseif i == #test_str then\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 then\n                local prev_char = test_str:sub(i - 1, i - 1)\n                if prev_char == 'a' or prev_char == 'e' or prev_char == 'i' or prev_char == 'o' or prev_char == 'u' then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next_char = test_str:sub(i + 1, i + 1)\n                if next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for i = 1, #test_str do\n    if i == 1 and vowels[test_str:sub(i, i)] then\n      count = count + 1\n    elseif i == #test_str and vowels[test_str:sub(i, i)] then\n      count = count + 1\n    elseif vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if test_str:sub(i, i) == vowels[1] or test_str:sub(i, i) == vowels[2] or test_str:sub(i, i) == vowels[3] or test_str:sub(i, i) == vowels[4] or test_str:sub(i, i) == vowels[5] then\n            if test_str:sub(i - 1, i - 1) == vowels[1] or test_str:sub(i - 1, i - 1) == vowels[2] or test_str:sub(i - 1, i - 1) == vowels[3] or test_str:sub(i - 1, i - 1) == vowels[4] or test_str:sub(i - 1, i - 1) == vowels[5] or test_str:sub(i + 1, i + 1) == vowels[1] or test_str:sub(i + 1, i + 1) == vowels[2] or test_str:sub(i + 1, i + 1) == vowels[3] or test_str:sub(i + 1, i + 1) == vowels[4] or test_str:sub(i + 1, i + 1) == vowels[5] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif test_str:sub(i, i) == \"a\" or test_str:sub(i, i) == \"e\" or test_str:sub(i, i) == \"i\" or test_str:sub(i, i) == \"o\" or test_str:sub(i, i) == \"u\" then\n\t\t\tif test_str:sub(i - 1, i - 1) == \"a\" or test_str:sub(i - 1, i - 1) == \"e\" or test_str:sub(i - 1, i - 1) == \"i\" or test_str:sub(i - 1, i - 1) == \"o\" or test_str:sub(i - 1, i - 1) == \"u\" then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif test_str:sub(i + 1, i + 1) == \"a\" or test_str:sub(i + 1, i + 1) == \"e\" or test_str:sub(i + 1, i + 1) == \"i\" or test_str:sub(i + 1, i + 1) == \"o\" or test_str:sub(i + 1, i + 1) == \"u\" then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i, i)] then\n            if vowels[test_str:sub(i - 1, i - 1)] or vowels[test_str:sub(i + 1, i + 1)] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 then\n                local prev_char = test_str:sub(i - 1, i - 1)\n                if prev_char == 'a' or prev_char == 'e' or prev_char == 'i' or prev_char == 'o' or prev_char == 'u' then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next_char = test_str:sub(i + 1, i + 1)\n                if next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        local next_char = test_str:sub(i + 1, i + 1)\n        if is_vowel(char) and is_vowel(next_char) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local count = 0\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i, i)] then\n            if vowels[test_str:sub(i - 1, i - 1)] or vowels[test_str:sub(i + 1, i + 1)] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {a = true, e = true, i = true, o = true, u = true}\n\tfor i = 1, #test_str do\n\t\tif vowels[test_str:sub(i, i)] and (vowels[test_str:sub(i - 1, i - 1)] or vowels[test_str:sub(i + 1, i + 1)]) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        local next_char = test_str:sub(i + 1, i + 1)\n        if is_vowel(char) and is_vowel(next_char) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    if is_vowel(test_str:sub(i, i)) then\n      if i == 1 then\n        if is_vowel(test_str:sub(i + 1, i + 1)) then\n          count = count + 1\n        end\n      elseif i == #test_str then\n        if is_vowel(test_str:sub(i - 1, i - 1)) then\n          count = count + 1\n        end\n      else\n        if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n          count = count + 1\n        end\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i) == 'a' or test_str:sub(i, i) == 'e' or test_str:sub(i, i) == 'i' or test_str:sub(i, i) == 'o' or test_str:sub(i, i) == 'u' then\n            if test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u' then\n                count = count + 1\n            end\n            if test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u' then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if table.contains(vowels, char) then\n            if i > 1 then\n                local prev_char = test_str:sub(i - 1, i - 1)\n                if table.contains(vowels, prev_char) then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next_char = test_str:sub(i + 1, i + 1)\n                if table.contains(vowels, next_char) then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for i = 1, #test_str do\n    if i > 1 and i < #test_str then\n      if table.contains(vowels, test_str:sub(i, i)) then\n        if table.contains(vowels, test_str:sub(i - 1, i - 1)) or table.contains(vowels, test_str:sub(i + 1, i + 1)) then\n          count = count + 1\n        end\n      end\n    end\n  end\n  return count\nend",
    "  local count = 0\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for i = 1, #test_str do\n    local char = test_str:sub(i, i)\n    if vowels[char] then\n      if i > 1 and vowels[test_str:sub(i - 1, i - 1)] then\n        count = count + 1\n      end\n      if i < #test_str and vowels[test_str:sub(i + 1, i + 1)] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif (test_str:sub(i, i) == \"a\" or test_str:sub(i, i) == \"e\" or test_str:sub(i, i) == \"i\" or test_str:sub(i, i) == \"o\" or test_str:sub(i, i) == \"u\") and (test_str:sub(i - 1, i - 1) == \"a\" or test_str:sub(i - 1, i - 1) == \"e\" or test_str:sub(i - 1, i - 1) == \"i\" or test_str:sub(i - 1, i - 1) == \"o\" or test_str:sub(i - 1, i - 1) == \"u\") then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        local next_char = test_str:sub(i + 1, i + 1)\n        if is_vowel(char) and is_vowel(next_char) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    local c = test_str:sub(i, i)\n    local c_prev = test_str:sub(i - 1, i - 1)\n    local c_next = test_str:sub(i + 1, i + 1)\n    if c:match(\"[aeiou]\") and (c_prev:match(\"[aeiou]\") or c_next:match(\"[aeiou]\")) then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, string.len(test_str) do\n        if (i == 1 and is_vowel(string.sub(test_str, i + 1, i + 1))) or\n            (i == string.len(test_str) and is_vowel(string.sub(test_str, i - 1, i - 1))) or\n            (is_vowel(string.sub(test_str, i - 1, i - 1)) and is_vowel(string.sub(test_str, i + 1, i + 1))) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tfor i = 1, #test_str do\n\t\tif (vowels[test_str:sub(i,i)] and vowels[test_str:sub(i+1,i+1)]) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tlocal char = test_str:sub(i,i)\n\t\tif char:match('[aeiou]') then\n\t\t\tif i > 1 then\n\t\t\t\tlocal prev_char = test_str:sub(i-1,i-1)\n\t\t\t\tif prev_char:match('[aeiou]') then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\tif i < #test_str then\n\t\t\t\tlocal next_char = test_str:sub(i+1,i+1)\n\t\t\t\tif next_char:match('[aeiou]') then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        local prev_char = test_str:sub(i - 1, i - 1)\n        local next_char = test_str:sub(i + 1, i + 1)\n        if table.contains(vowels, char) and (table.contains(vowels, prev_char) or table.contains(vowels, next_char)) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  for i = 1, #test_str do\n    local char = test_str:sub(i, i)\n    if vowels[char] then\n      if i > 1 and vowels[test_str:sub(i - 1, i - 1)] then\n        count = count + 1\n      end\n      if i < #test_str and vowels[test_str:sub(i + 1, i + 1)] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for i = 1, #test_str do\n    local char = test_str:sub(i, i)\n    if char == ' ' then\n      -- skip\n    elseif i == 1 then\n      if vowels[test_str:sub(i + 1, i + 1)] then\n        count = count + 1\n      end\n    elseif i == #test_str then\n      if vowels[test_str:sub(i - 1, i - 1)] then\n        count = count + 1\n      end\n    else\n      if vowels[test_str:sub(i - 1, i - 1)] or vowels[test_str:sub(i + 1, i + 1)] then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    if is_vowel(test_str:sub(i, i)) then\n      if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n        count = count + 1\n      end\n      if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    local c = test_str:sub(i, i)\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      if i > 1 and (test_str:sub(i-1, i-1) == 'a' or test_str:sub(i-1, i-1) == 'e' or test_str:sub(i-1, i-1) == 'i' or test_str:sub(i-1, i-1) == 'o' or test_str:sub(i-1, i-1) == 'u') then\n        count = count + 1\n      end\n      if i < #test_str and (test_str:sub(i+1, i+1) == 'a' or test_str:sub(i+1, i+1) == 'e' or test_str:sub(i+1, i+1) == 'i' or test_str:sub(i+1, i+1) == 'o' or test_str:sub(i+1, i+1) == 'u') then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            local prev = test_str:sub(i - 1, i - 1)\n            local next = test_str:sub(i + 1, i + 1)\n            if prev == 'a' or prev == 'e' or prev == 'i' or prev == 'o' or prev == 'u' or\n                next == 'a' or next == 'e' or next == 'i' or next == 'o' or next == 'u' then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal prev = ''\n\tlocal next = ''\n\tfor i = 1, #test_str do\n\t\tprev = test_str:sub(i - 1, i - 1)\n\t\tnext = test_str:sub(i + 1, i + 1)\n\t\tif (prev:find('[aeiou]') or next:find('[aeiou]')) and test_str:sub(i, i):find('[aeiou]') then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tlocal char = test_str:sub(i, i)\n\t\tlocal next_char = test_str:sub(i + 1, i + 1)\n\t\tif char:find(\"[aeiou]\") and next_char:find(\"[aeiou]\") then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    if is_vowel(test_str:sub(i, i)) then\n      if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n        count = count + 1\n      end\n      if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and test_str:sub(i - 1, i - 1) == 'a' then\n                count = count + 1\n            end\n            if i < #test_str and test_str:sub(i + 1, i + 1) == 'a' then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if table.indexof(vowels, char) then\n            if i > 1 and table.indexof(vowels, test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and table.indexof(vowels, test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i == 1 then\n\t\t\t\tif is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telseif i == #test_str then\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i,i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i-1,i-1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i+1,i+1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and test_str:sub(i - 1, i - 1) == 'a' then\n                count = count + 1\n            end\n            if i < #test_str and test_str:sub(i + 1, i + 1) == 'a' then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local vowel_count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == \"a\" or test_str:sub(i - 1, i - 1) == \"e\" or test_str:sub(i - 1, i - 1) == \"i\" or test_str:sub(i - 1, i - 1) == \"o\" or test_str:sub(i - 1, i - 1) == \"u\") then\n                vowel_count = vowel_count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == \"a\" or test_str:sub(i + 1, i + 1) == \"e\" or test_str:sub(i + 1, i + 1) == \"i\" or test_str:sub(i + 1, i + 1) == \"o\" or test_str:sub(i + 1, i + 1) == \"u\") then\n                vowel_count = vowel_count + 1\n            end\n        end\n    end\n    return vowel_count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if (i == 1 and table.contains(vowels, test_str:sub(i + 1, i + 1))) or\n            (i == #test_str and table.contains(vowels, test_str:sub(i - 1, i - 1))) or\n            (table.contains(vowels, test_str:sub(i - 1, i - 1)) and table.contains(vowels, test_str:sub(i + 1, i + 1))) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if vowels[char] then\n            if i > 1 and vowels[test_str:sub(i-1, i-1)] then\n                count = count + 1\n            end\n            if i < #test_str and vowels[test_str:sub(i+1, i+1)] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i == 1 then\n\t\t\t\tif is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telseif i == #test_str then\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if (test_str:sub(i, i) == 'a' or test_str:sub(i, i) == 'e' or test_str:sub(i, i) == 'i' or test_str:sub(i, i) == 'o' or test_str:sub(i, i) == 'u') and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    local char = test_str:sub(i, i)\n    if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n      if i > 1 then\n        local prev_char = test_str:sub(i - 1, i - 1)\n        if prev_char == 'a' or prev_char == 'e' or prev_char == 'i' or prev_char == 'o' or prev_char == 'u' then\n          count = count + 1\n        end\n      end\n      if i < #test_str then\n        local next_char = test_str:sub(i + 1, i + 1)\n        if next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n          count = count + 1\n        end\n      end\n    end\n  end\n  return count\nend",
    "  local count = 0\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for i = 1, #test_str do\n    local char = test_str:sub(i, i)\n    local prev_char = test_str:sub(i - 1, i - 1)\n    local next_char = test_str:sub(i + 1, i + 1)\n    for _, v in ipairs(vowels) do\n      if char == v then\n        if prev_char and prev_char:find(v) then\n          count = count + 1\n        end\n        if next_char and next_char:find(v) then\n          count = count + 1\n        end\n      end\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i == 1 then\n\t\t\t\tif is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telseif i == #test_str then\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal str_len = string.len(test_str)\n\tfor i = 1, str_len do\n\t\tlocal char = string.sub(test_str, i, i)\n\t\tif table.contains(vowels, char) then\n\t\t\tif i > 1 then\n\t\t\t\tlocal prev_char = string.sub(test_str, i - 1, i - 1)\n\t\t\t\tif table.contains(vowels, prev_char) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\tif i < str_len then\n\t\t\t\tlocal next_char = string.sub(test_str, i + 1, i + 1)\n\t\t\t\tif table.contains(vowels, next_char) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tlocal vowels = {a = true, e = true, i = true, o = true, u = true}\n\tfor i = 1, #test_str do\n\t\tif vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif (test_str:sub(i, i) == \"a\" or test_str:sub(i, i) == \"e\" or test_str:sub(i, i) == \"i\" or test_str:sub(i, i) == \"o\" or test_str:sub(i, i) == \"u\") and (test_str:sub(i + 1, i + 1) == \"a\" or test_str:sub(i + 1, i + 1) == \"e\" or test_str:sub(i + 1, i + 1) == \"i\" or test_str:sub(i + 1, i + 1) == \"o\" or test_str:sub(i + 1, i + 1) == \"u\") then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if table.contains(vowels, char) then\n            if i > 1 and table.contains(vowels, test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and table.contains(vowels, test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) and (is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1))) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif (i ~= #test_str) and (i ~= 1) then\n\t\t\tif (vowels[test_str:sub(i, i)] ~= nil) and (vowels[test_str:sub(i + 1, i + 1)] ~= nil) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if is_vowel(c) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if i > 1 and i < #test_str then\n            if is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        elseif i == 1 then\n            if is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        elseif i == #test_str then\n            if is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        local next_char = test_str:sub(i + 1, i + 1)\n        if char:match(\"[aeiou]\") and next_char:match(\"[aeiou]\") then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"[aeiou]\") then\n            if i > 1 and test_str:sub(i - 1, i - 1):match(\"[aeiou]\") then\n                count = count + 1\n            end\n            if i < #test_str and test_str:sub(i + 1, i + 1):match(\"[aeiou]\") then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str - 1 do\n        if is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\t\t\tif i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) and (is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1))) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i == 1 then\n\t\t\t\tif is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telseif i == #test_str then\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and test_str:sub(i - 1, i - 1) == 'a' then\n                count = count + 1\n            end\n            if i < #test_str and test_str:sub(i + 1, i + 1) == 'a' then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) then\n            if i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local ch = test_str:sub(i, i)\n        if ch == 'a' or ch == 'e' or ch == 'i' or ch == 'o' or ch == 'u' then\n            if i > 1 then\n                local prev_ch = test_str:sub(i - 1, i - 1)\n                if prev_ch == 'a' or prev_ch == 'e' or prev_ch == 'i' or prev_ch == 'o' or prev_ch == 'u' then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next_ch = test_str:sub(i + 1, i + 1)\n                if next_ch == 'a' or next_ch == 'e' or next_ch == 'i' or next_ch == 'o' or next_ch == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for i = 1, #test_str do\n    if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif (i > 1 and i < #test_str) then\n\t\t\tif (table.contains(vowels, string.lower(test_str[i])) and table.contains(vowels, string.lower(test_str[i-1]))) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal count = 0\n\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tfor i = 1, #test_str do\n\t\tif i > 1 and i < #test_str then\n\t\t\tfor j = 1, #vowels do\n\t\t\t\tif test_str:sub(i, i) == vowels[j] and (test_str:sub(i - 1, i - 1) == vowels[j] or test_str:sub(i + 1, i + 1) == vowels[j]) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    local char = test_str:sub(i, i)\n    if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n      if i > 1 then\n        local prev_char = test_str:sub(i - 1, i - 1)\n        if prev_char == 'a' or prev_char == 'e' or prev_char == 'i' or prev_char == 'o' or prev_char == 'u' then\n          count = count + 1\n        end\n      end\n      if i < #test_str then\n        local next_char = test_str:sub(i + 1, i + 1)\n        if next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n          count = count + 1\n        end\n      end\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    local c = test_str:sub(i, i)\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n        count = count + 1\n      end\n      if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local count = 0\n    for i = 1, #test_str do\n        if (i < #test_str) and (i > 1) then\n            for j = 1, #vowels do\n                if (test_str:sub(i, i) == vowels[j]) and ((test_str:sub(i - 1, i - 1) == vowels[j]) or (test_str:sub(i + 1, i + 1) == vowels[j])) then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n                count = count + 1\n            end\n            if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    local char = test_str:sub(i, i)\n    if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n      if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n        count = count + 1\n      end\n      if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if i < #test_str then\n            if table.contains(vowels, test_str:sub(i, i)) and table.contains(vowels, test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if table.indexof(vowels, char) then\n            if i > 1 and table.indexof(vowels, test_str:sub(i - 1, i - 1)) then\n                count = count + 1\n            end\n            if i < #test_str and table.indexof(vowels, test_str:sub(i + 1, i + 1)) then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if (test_str:sub(i, i) == 'a' or test_str:sub(i, i) == 'e' or test_str:sub(i, i) == 'i' or test_str:sub(i, i) == 'o' or test_str:sub(i, i) == 'u') and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i < #test_str then\n                local next_c = test_str:sub(i + 1, i + 1)\n                if next_c == 'a' or next_c == 'e' or next_c == 'i' or next_c == 'o' or next_c == 'u' then\n                    count = count + 1\n                end\n            end\n            if i > 1 then\n                local prev_c = test_str:sub(i - 1, i - 1)\n                if prev_c == 'a' or prev_c == 'e' or prev_c == 'i' or prev_c == 'o' or prev_c == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    local char = test_str:sub(i, i)\n    if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n      if i > 1 and (test_str:sub(i - 1, i - 1) == 'a' or test_str:sub(i - 1, i - 1) == 'e' or test_str:sub(i - 1, i - 1) == 'i' or test_str:sub(i - 1, i - 1) == 'o' or test_str:sub(i - 1, i - 1) == 'u') then\n        count = count + 1\n      end\n      if i < #test_str and (test_str:sub(i + 1, i + 1) == 'a' or test_str:sub(i + 1, i + 1) == 'e' or test_str:sub(i + 1, i + 1) == 'i' or test_str:sub(i + 1, i + 1) == 'o' or test_str:sub(i + 1, i + 1) == 'u') then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    if is_vowel(test_str:sub(i, i)) and (is_vowel(test_str:sub(i - 1, i - 1)) or is_vowel(test_str:sub(i + 1, i + 1))) then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 then\n                local prev_char = test_str:sub(i - 1, i - 1)\n                if prev_char == 'a' or prev_char == 'e' or prev_char == 'i' or prev_char == 'o' or prev_char == 'u' then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next_char = test_str:sub(i + 1, i + 1)\n                if next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #test_str do\n    local c = test_str:sub(i, i)\n    if c:match(\"[aeiou]\") then\n      if i > 1 and test_str:sub(i - 1, i - 1):match(\"[aeiou]\") then\n        count = count + 1\n      end\n      if i < #test_str and test_str:sub(i + 1, i + 1):match(\"[aeiou]\") then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            if i > 1 and test_str:sub(i - 1, i - 1) == 'a' then\n                count = count + 1\n            end\n            if i < #test_str and test_str:sub(i + 1, i + 1) == 'a' then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal count = 0\n\tfor i = 1, #test_str do\n\t\tif is_vowel(test_str:sub(i, i)) then\n\t\t\tif i > 1 and is_vowel(test_str:sub(i - 1, i - 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif i < #test_str and is_vowel(test_str:sub(i + 1, i + 1)) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local count = 0\n    for i = 1, #test_str do\n        if is_vowel(test_str:sub(i, i)) and is_vowel(test_str:sub(i + 1, i + 1)) then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if i > 1 then\n                local prev_char = test_str:sub(i - 1, i - 1)\n                if prev_char == 'a' or prev_char == 'e' or prev_char == 'i' or prev_char == 'o' or prev_char == 'u' then\n                    count = count + 1\n                end\n            end\n            if i < #test_str then\n                local next_char = test_str:sub(i + 1, i + 1)\n                if next_char == 'a' or next_char == 'e' or next_char == 'i' or next_char == 'o' or next_char == 'u' then\n                    count = count + 1\n                end\n            end\n        end\n    end\n    return count\nend",
    "  local count = 0\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  for i = 1, #test_str do\n    if i == 1 then\n      if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i + 1, i + 1)] then\n        count = count + 1\n      end\n    elseif i == #test_str then\n      if vowels[test_str:sub(i, i)] and vowels[test_str:sub(i - 1, i - 1)] then\n        count = count + 1\n      end\n    else\n      if vowels[test_str:sub(i, i)] and (vowels[test_str:sub(i - 1, i - 1)] or vowels[test_str:sub(i + 1, i + 1)]) then\n        count = count + 1\n      end\n    end\n  end\n  return count\nend"
  ]
}