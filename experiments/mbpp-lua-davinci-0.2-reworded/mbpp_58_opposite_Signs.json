{
  "name": "mbpp_58_opposite_Signs",
  "language": "lua",
  "prompt": "-- Write a luathon function to check whether the given two integers have opposite sign or not.\nlocal function opposite_Signs(x, y)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = opposite_Signs\n    lu.assertEquals(candidate(1, -2), true)\n    lu.assertEquals(candidate(3, 2), false)\n    lu.assertEquals(candidate(-10, -10), false)\n    lu.assertEquals(candidate(-2, 2), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    return (x ^ y) < 0\nend",
    "    return ((x ^ y) < 0)\nend",
    "    return ((x ^ y) < 0)\nend",
    "    return ((x ^ y) < 0)\nend",
    "    return ((x ^ y) < 0)\nend",
    "    return ((x ^ y) < 0)\nend",
    "\treturn ((x ^ y) < 0)\nend",
    "    return ((x ^ y) < 0)\nend",
    "    return ((x ^ y) < 0)\nend",
    "    return ((x < 0 and y > 0) or (x > 0 and y < 0))\nend",
    "    return ((x ^ y) < 0)\nend",
    "    return ((x ^ y) < 0)\nend",
    "    return (x ^ y) < 0\nend",
    "    return ((x ^ y) < 0)\nend",
    "    return ((x ^ y) < 0)\nend",
    "    return ((x ^ y) < 0)\nend",
    "    return ((x ^ y) < 0)\nend",
    "    return ((x ^ y) < 0)\nend",
    "    return ((x ^ y) < 0)\nend",
    "    return ((x ^ y) < 0)\nend"
  ]
}