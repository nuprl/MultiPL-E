{
  "name": "mbpp_554_Split",
  "language": "lua",
  "prompt": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i,v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i = 1, #list do\n    if list[i] % 2 == 0 then\n      even[#even + 1] = list[i]\n    else\n      odd[#odd + 1] = list[i]\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i,v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i,v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if (v % 2) == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i,v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      even[#even + 1] = v\n    else\n      odd[#odd + 1] = v\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i,v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i,v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i,v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\teven[#even + 1] = v\n\t\telse\n\t\t\todd[#odd + 1] = v\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i,v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i,v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i,v in ipairs(list) do\n\t\tif v % 2 == 1 then\n\t\t\ttable.insert(odd, v)\n\t\telse\n\t\t\ttable.insert(even, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i,v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i=1,#list do\n    if list[i] % 2 == 0 then\n      table.insert(even, list[i])\n    else\n      table.insert(odd, list[i])\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for k, v in pairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      even[#even + 1] = v\n    else\n      odd[#odd + 1] = v\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i,v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\teven[#even + 1] = v\n\t\telse\n\t\t\todd[#odd + 1] = v\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i,v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i,v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i,v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i,v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i,v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      even[#even + 1] = v\n    else\n      odd[#odd + 1] = v\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i,v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\teven[#even+1] = v\n\t\telse\n\t\t\todd[#odd+1] = v\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for _, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      even[#even + 1] = v\n    else\n      odd[#odd + 1] = v\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd, even = {}, {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\teven[#even + 1] = v\n\t\telse\n\t\t\todd[#odd + 1] = v\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      even[#even + 1] = v\n    else\n      odd[#odd + 1] = v\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i,v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i,v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5y4qnghe.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for _, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i,v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i,v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i,v in ipairs(list) do\n    if v % 2 == 0 then\n      even[#even + 1] = v\n    else\n      odd[#odd + 1] = v\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i,v in pairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i,v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i,v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor _, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i,v in ipairs(list) do\n\t\tif v%2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i = 1, #list do\n    if list[i] % 2 == 0 then\n      table.insert(even, list[i])\n    else\n      table.insert(odd, list[i])\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i,v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i,v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i,v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for _, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i,v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123059,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n  local odd = {}\n  local even = {}\n  for i, v in ipairs(list) do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n\tlocal odd = {}\n\tlocal even = {}\n\tfor i, v in ipairs(list) do\n\t\tif v % 2 == 0 then\n\t\t\ttable.insert(even, v)\n\t\telse\n\t\t\ttable.insert(odd, v)\n\t\tend\n\tend\n\treturn odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local odd = {}\n    local even = {}\n    for i, v in ipairs(list) do\n        if v % 2 == 0 then\n            table.insert(even, v)\n        else\n            table.insert(odd, v)\n        end\n    end\n    return odd, even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027860,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}