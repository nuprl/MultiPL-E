{
  "name": "mbpp_779_unique_sublists",
  "language": "lua",
  "prompt": "-- Write a function to count the number of tables within a table. The function should return a table, where every table is turned to a table, and the value of the table is the number of its occurrences.\nlocal function unique_sublists(list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_779_unique_sublists.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_sublists\n    lu.assertEquals(candidate({{1, 3}, {5, 7}, {1, 3}, {13, 15, 17}, {5, 7}, {9, 11}}), {[{1, 3}] = 2, [{5, 7}] = 2, [{13, 15, 17}] = 1, [{9, 11}] = 1})\n    lu.assertEquals(candidate({{'green', 'orange'}, {'black'}, {'green', 'orange'}, {'white'}}), {[{'green', 'orange'}] = 2, [{'black'}] = 1, [{'white'}] = 1})\n    lu.assertEquals(candidate({{1, 2}, {3, 4}, {4, 5}, {6, 7}}), {[{1, 2}] = 1, [{3, 4}] = 1, [{4, 5}] = 1, [{6, 7}] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local unique_sublists = {}\n    for i = 1, #list1 do\n        local sublist = list1[i]\n        local sublist_key = table.concat(sublist, \",\")\n        if unique_sublists[sublist_key] == nil then\n            unique_sublists[sublist_key] = 1\n        else\n            unique_sublists[sublist_key] = unique_sublists[sublist_key] + 1\n        end\n    end\n    return unique_sublists\nend",
    "\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tlocal sublist = list1[i]\n\t\tif type(sublist) == \"table\" then\n\t\t\tlocal sublist_string = table.concat(sublist, \",\")\n\t\t\tif result[sublist_string] == nil then\n\t\t\t\tresult[sublist_string] = 1\n\t\t\telse\n\t\t\t\tresult[sublist_string] = result[sublist_string] + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend",
    "    local unique_sublists = {}\n    for _, list2 in ipairs(list1) do\n        local unique_sublist = {}\n        for _, item in ipairs(list2) do\n            unique_sublist[item] = true\n        end\n        unique_sublists[#unique_sublists + 1] = unique_sublist\n    end\n    return unique_sublists\nend",
    "    local result = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local key = table.concat(v, \",\")\n            if result[key] then\n                result[key] = result[key] + 1\n            else\n                result[key] = 1\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        local sublist = list1[i]\n        local sublist_key = table.concat(sublist, \",\")\n        if result[sublist_key] == nil then\n            result[sublist_key] = 1\n        else\n            result[sublist_key] = result[sublist_key] + 1\n        end\n    end\n    return result\nend",
    "    local unique_sublists = {}\n    for i = 1, #list1 do\n        local sublist = list1[i]\n        local sublist_string = table.concat(sublist, \",\")\n        if not unique_sublists[sublist_string] then\n            unique_sublists[sublist_string] = 1\n        else\n            unique_sublists[sublist_string] = unique_sublists[sublist_string] + 1\n        end\n    end\n    return unique_sublists\nend",
    "    local unique = {}\n    for _, v in ipairs(list1) do\n        if not unique[v] then\n            unique[v] = true\n        end\n    end\n    return unique\nend",
    "    local list2 = {}\n    for _, v in ipairs(list1) do\n        if not list2[v] then\n            list2[v] = 1\n        else\n            list2[v] = list2[v] + 1\n        end\n    end\n    return list2\nend",
    "    local count = {}\n    for i, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local str = table.concat(v, \",\")\n            if count[str] == nil then\n                count[str] = 1\n            else\n                count[str] = count[str] + 1\n            end\n        end\n    end\n    return count\nend",
    "\tlocal unique_sublists = {}\n\tfor i, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal sublist = {}\n\t\t\tfor j, w in ipairs(v) do\n\t\t\t\tsublist[j] = w\n\t\t\tend\n\t\t\tlocal sublist_string = table.concat(sublist, \",\")\n\t\t\tif unique_sublists[sublist_string] == nil then\n\t\t\t\tunique_sublists[sublist_string] = 1\n\t\t\telse\n\t\t\t\tunique_sublists[sublist_string] = unique_sublists[sublist_string] + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn unique_sublists\nend",
    "  local result = {}\n  for _, v in ipairs(list1) do\n    if type(v) == \"table\" then\n      local sublist = unique_sublists(v)\n      for _, v2 in ipairs(sublist) do\n        if result[v2] then\n          result[v2] = result[v2] + 1\n        else\n          result[v2] = 1\n        end\n      end\n    else\n      if result[v] then\n        result[v] = result[v] + 1\n      else\n        result[v] = 1\n      end\n    end\n  end\n  return result\nend",
    "    local unique_sublists = {}\n    for _, sublist in pairs(list1) do\n        local sublist_string = table.concat(sublist, \",\")\n        if not unique_sublists[sublist_string] then\n            unique_sublists[sublist_string] = 1\n        else\n            unique_sublists[sublist_string] = unique_sublists[sublist_string] + 1\n        end\n    end\n    return unique_sublists\nend",
    "\tlocal unique_sublists = {}\n\tfor i = 1, #list1 do\n\t\tlocal sublist = list1[i]\n\t\tlocal sublist_string = table.concat(sublist, \",\")\n\t\tif unique_sublists[sublist_string] == nil then\n\t\t\tunique_sublists[sublist_string] = 1\n\t\telse\n\t\t\tunique_sublists[sublist_string] = unique_sublists[sublist_string] + 1\n\t\tend\n\tend\n\treturn unique_sublists\nend",
    "    local unique_sublists = {}\n    for _, sublist in ipairs(list1) do\n        local unique_sublist = {}\n        for _, value in ipairs(sublist) do\n            if not unique_sublist[value] then\n                unique_sublist[value] = true\n            end\n        end\n        unique_sublists[#unique_sublists + 1] = unique_sublist\n    end\n    return unique_sublists\nend",
    "\tlocal unique_sublists = {}\n\tfor _, sublist in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor _, unique_sublist in ipairs(unique_sublists) do\n\t\t\tif #sublist == #unique_sublist then\n\t\t\t\tlocal found_all = true\n\t\t\t\tfor i = 1, #sublist do\n\t\t\t\t\tif sublist[i] ~= unique_sublist[i] then\n\t\t\t\t\t\tfound_all = false\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tif found_all then\n\t\t\t\t\tfound = true\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(unique_sublists, sublist)\n\t\tend\n\tend\n\treturn unique_sublists\nend",
    "\tlocal unique_sublists = {}\n\tfor _, list2 in ipairs(list1) do\n\t\tlocal unique_sublist = {}\n\t\tfor _, item in ipairs(list2) do\n\t\t\tunique_sublist[item] = true\n\t\tend\n\t\tunique_sublists[#unique_sublists + 1] = unique_sublist\n\tend\n\treturn unique_sublists\nend",
    "\tlocal list2 = {}\n\tfor _, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal t = {}\n\t\t\tfor _, v2 in ipairs(v) do\n\t\t\t\tt[v2] = true\n\t\t\tend\n\t\t\ttable.insert(list2, t)\n\t\telse\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "    local unique_sublists = {}\n    for i = 1, #list1 do\n        local sublist = list1[i]\n        local sublist_string = table.concat(sublist, \",\")\n        if not unique_sublists[sublist_string] then\n            unique_sublists[sublist_string] = 1\n        else\n            unique_sublists[sublist_string] = unique_sublists[sublist_string] + 1\n        end\n    end\n    return unique_sublists\nend",
    "\tlocal list2 = {}\n\tfor i = 1, #list1 do\n\t\tlocal sublist = list1[i]\n\t\tlocal found = false\n\t\tfor j = 1, #list2 do\n\t\t\tif table.equals(sublist, list2[j][1]) then\n\t\t\t\tfound = true\n\t\t\t\tlist2[j][2] = list2[j][2] + 1\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, {sublist, 1})\n\t\tend\n\tend\n\treturn list2\nend",
    "    local unique_list = {}\n    for i, v in ipairs(list1) do\n        if not unique_list[v] then\n            unique_list[v] = 1\n        else\n            unique_list[v] = unique_list[v] + 1\n        end\n    end\n    return unique_list\nend"
  ]
}