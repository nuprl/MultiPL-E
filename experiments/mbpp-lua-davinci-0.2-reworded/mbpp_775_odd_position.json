{
  "name": "mbpp_775_odd_position",
  "language": "lua",
  "prompt": "-- Write a luathon function to check whether every odd index contains odd numbers of a given table.\nlocal function odd_position(nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_position\n    lu.assertEquals(candidate({2, 1, 4, 3, 6, 7, 6, 3}), true)\n    lu.assertEquals(candidate({4, 1, 2}), true)\n    lu.assertEquals(candidate({1, 2, 3}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    for i, v in ipairs(nums) do\n        if i % 2 == 1 and v % 2 == 0 then\n            return false\n        end\n    end\n    return true\nend",
    "    for i, v in ipairs(nums) do\n        if i % 2 == 1 and v % 2 == 0 then\n            return false\n        end\n    end\n    return true\nend",
    "    for i, v in ipairs(nums) do\n        if i % 2 == 1 and v % 2 == 0 then\n            return false\n        end\n    end\n    return true\nend",
    "  local result = true\n  for i, v in ipairs(nums) do\n    if i % 2 == 1 and v % 2 == 0 then\n      result = false\n      break\n    end\n  end\n  return result\nend",
    "  local result = true\n  for i = 1, #nums do\n    if i % 2 == 1 and nums[i] % 2 == 0 then\n      result = false\n      break\n    end\n  end\n  return result\nend",
    "    local result = true\n    for i, v in ipairs(nums) do\n        if i % 2 == 1 and v % 2 == 0 then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "  for i, v in ipairs(nums) do\n    if i % 2 == 1 and v % 2 == 0 then\n      return false\n    end\n  end\n  return true\nend",
    "  local odd_pos = true\n  for i = 1, #nums do\n    if i % 2 == 1 and nums[i] % 2 == 0 then\n      odd_pos = false\n    end\n  end\n  return odd_pos\nend",
    "  for i, v in ipairs(nums) do\n    if i % 2 == 1 and v % 2 == 0 then\n      return false\n    end\n  end\n  return true\nend",
    "  for i, v in ipairs(nums) do\n    if i % 2 == 1 and v % 2 == 0 then\n      return false\n    end\n  end\n  return true\nend",
    "  local odd_nums = {}\n  for i, v in ipairs(nums) do\n    if i % 2 == 1 then\n      odd_nums[#odd_nums + 1] = v\n    end\n  end\n  return odd_nums\nend",
    "  local odd_pos = {}\n  for i, v in ipairs(nums) do\n    if i % 2 == 1 then\n      odd_pos[i] = v\n    end\n  end\n  return odd_pos\nend",
    "    for i, v in ipairs(nums) do\n        if i % 2 == 1 and v % 2 == 0 then\n            return false\n        end\n    end\n    return true\nend",
    "  for i, num in ipairs(nums) do\n    if i % 2 == 1 and num % 2 == 0 then\n      return false\n    end\n  end\n  return true\nend",
    "  for i, num in ipairs(nums) do\n    if i % 2 == 1 and num % 2 == 0 then\n      return false\n    end\n  end\n  return true\nend",
    "  for i, v in ipairs(nums) do\n    if i % 2 == 1 and v % 2 == 0 then\n      return false\n    end\n  end\n  return true\nend",
    "  for i, v in ipairs(nums) do\n    if i % 2 == 1 and v % 2 == 0 then\n      return false\n    end\n  end\n  return true\nend",
    "  for i = 1, #nums do\n    if i % 2 == 1 and nums[i] % 2 == 0 then\n      return false\n    end\n  end\n  return true\nend",
    "  for i, v in ipairs(nums) do\n    if i % 2 == 1 and v % 2 == 0 then\n      return false\n    end\n  end\n  return true\nend",
    "    for i, v in ipairs(nums) do\n        if i % 2 == 1 and v % 2 == 0 then\n            return false\n        end\n    end\n    return true\nend"
  ]
}