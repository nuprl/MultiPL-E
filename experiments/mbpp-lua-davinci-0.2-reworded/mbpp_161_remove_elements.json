{
  "name": "mbpp_161_remove_elements",
  "language": "lua",
  "prompt": "-- Write a function to remove all elements from a given table present in another table.\nlocal function remove_elements(list1, list2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_elements\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {2, 4, 6, 8}), {1, 3, 5, 7, 9, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 3, 5, 7}), {2, 4, 6, 8, 9, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {5, 7}), {1, 2, 3, 4, 6, 8, 9, 10})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    for i = #list1, 1, -1 do\n        for j = 1, #list2 do\n            if list1[i] == list2[j] then\n                table.remove(list1, i)\n            end\n        end\n    end\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    local found = false\n    for j = 1, #list2 do\n      if list1[i] == list2[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      result[#result + 1] = list1[i]\n    end\n  end\n  return result\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    local elem = list1[i]\n    if not contains(list2, elem) then\n      result[#result + 1] = elem\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        local found = false\n        for j = 1, #list2 do\n            if list1[i] == list2[j] then\n                found = true\n                break\n            end\n        end\n        if not found then\n            result[#result + 1] = list1[i]\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, v in ipairs(list1) do\n        if not contains(list2, v) then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "\tfor i = 1, #list1 do\n\t\tfor j = 1, #list2 do\n\t\t\tif list1[i] == list2[j] then\n\t\t\t\ttable.remove(list1, i)\n\t\t\tend\n\t\tend\n\tend\nend",
    "\tfor i = 1, #list1 do\n\t\tfor j = 1, #list2 do\n\t\t\tif list1[i] == list2[j] then\n\t\t\t\ttable.remove(list1, i)\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn list1\nend",
    "  for i = #list1, 1, -1 do\n    for j = 1, #list2 do\n      if list1[i] == list2[j] then\n        table.remove(list1, i)\n      end\n    end\n  end\n  return list1\nend",
    "  local result = {}\n  for _, v in ipairs(list1) do\n    if not contains(list2, v) then\n      table.insert(result, v)\n    end\n  end\n  return result\nend",
    "  for i = #list1, 1, -1 do\n    for j = 1, #list2 do\n      if list1[i] == list2[j] then\n        table.remove(list1, i)\n      end\n    end\n  end\nend",
    "    local result = {}\n    for _, v in ipairs(list1) do\n        if not contains(list2, v) then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for _, v in ipairs(list1) do\n    if not contains(list2, v) then\n      table.insert(result, v)\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for _, v in ipairs(list1) do\n        if not contains(list2, v) then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        local found = false\n        for j = 1, #list2 do\n            if list1[i] == list2[j] then\n                found = true\n                break\n            end\n        end\n        if not found then\n            table.insert(result, list1[i])\n        end\n    end\n    return result\nend",
    "    for i = #list1, 1, -1 do\n        for j = 1, #list2 do\n            if list1[i] == list2[j] then\n                table.remove(list1, i)\n            end\n        end\n    end\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    local found = false\n    for j = 1, #list2 do\n      if list1[i] == list2[j] then\n        found = true\n        break\n      end\n    end\n    if not found then\n      result[#result + 1] = list1[i]\n    end\n  end\n  return result\nend",
    "    for i = #list1, 1, -1 do\n        for j = 1, #list2 do\n            if list1[i] == list2[j] then\n                table.remove(list1, i)\n            end\n        end\n    end\n    return list1\nend",
    "  local result = {}\n  for _, v in ipairs(list1) do\n    if not contains(list2, v) then\n      table.insert(result, v)\n    end\n  end\n  return result\nend",
    "\tlocal result = {}\n\tfor _, v in ipairs(list1) do\n\t\tif not table.contains(list2, v) then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\treturn result\nend",
    "    local result = {}\n    for _, v in ipairs(list1) do\n        if not contains(list2, v) then\n            table.insert(result, v)\n        end\n    end\n    return result\nend"
  ]
}