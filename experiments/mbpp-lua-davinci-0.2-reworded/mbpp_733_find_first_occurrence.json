{
  "name": "mbpp_733_find_first_occurrence",
  "language": "lua",
  "prompt": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend",
    "\tlocal l, r = 1, #A\n\twhile l <= r do\n\t\tlocal m = math.floor((l + r) / 2)\n\t\tif A[m] < x then\n\t\t\tl = m + 1\n\t\telseif A[m] > x then\n\t\t\tr = m - 1\n\t\telse\n\t\t\tif m == 1 or A[m - 1] < x then\n\t\t\t\treturn m\n\t\t\telse\n\t\t\t\tr = m - 1\n\t\t\tend\n\t\tend\n\tend\n\treturn -1\nend",
    "  local low = 1\n  local high = #A\n  local result = -1",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local left = 1\n  local right = #A\n  local result = -1\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      result = mid\n      right = mid - 1\n    end\n  end\n  return result\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return nil\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      local i = m\n      while i > 1 and A[i - 1] == x do\n        i = i - 1\n      end\n      return i\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      result = mid\n      high = mid - 1\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return result\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local lo, hi = 1, #A\n  while lo <= hi do\n    local mid = math.floor((lo + hi) / 2)\n    if A[mid] < x then\n      lo = mid + 1\n    elseif A[mid] > x then\n      hi = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        hi = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local low = 1\n  local high = #A\n  local result = -1",
    "  local lo = 1\n  local hi = #A\n  while lo <= hi do\n    local mid = math.floor((lo + hi) / 2)\n    if A[mid] < x then\n      lo = mid + 1\n    elseif A[mid] > x then\n      hi = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        hi = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend"
  ]
}