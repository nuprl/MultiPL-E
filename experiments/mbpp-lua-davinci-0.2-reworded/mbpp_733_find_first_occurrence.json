{
  "name": "mbpp_733_find_first_occurrence",
  "language": "lua",
  "prompt": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend",
    "\tlocal l, r = 1, #A\n\twhile l <= r do\n\t\tlocal m = math.floor((l + r) / 2)\n\t\tif A[m] < x then\n\t\t\tl = m + 1\n\t\telseif A[m] > x then\n\t\t\tr = m - 1\n\t\telse\n\t\t\tif m == 1 or A[m - 1] < x then\n\t\t\t\treturn m\n\t\t\telse\n\t\t\t\tr = m - 1\n\t\t\tend\n\t\tend\n\tend\n\treturn -1\nend",
    "  local low = 1\n  local high = #A\n  local result = -1",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local left = 1\n  local right = #A\n  local result = -1\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      result = mid\n      right = mid - 1\n    end\n  end\n  return result\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return nil\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      local i = m\n      while i > 1 and A[i - 1] == x do\n        i = i - 1\n      end\n      return i\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      result = mid\n      high = mid - 1\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return result\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local lo, hi = 1, #A\n  while lo <= hi do\n    local mid = math.floor((lo + hi) / 2)\n    if A[mid] < x then\n      lo = mid + 1\n    elseif A[mid] > x then\n      hi = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        hi = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local low = 1\n  local high = #A\n  local result = -1",
    "  local lo = 1\n  local hi = #A\n  while lo <= hi do\n    local mid = math.floor((lo + hi) / 2)\n    if A[mid] < x then\n      lo = mid + 1\n    elseif A[mid] > x then\n      hi = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        hi = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local low = 1\n  local high = #A\n  local result = -1",
    "    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then return mid end\n      high = mid - 1\n    end\n  end\n  return -1\nend",
    "    local low, high = 1, #A\n    local result = -1\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] == x then\n            result = mid\n            high = mid - 1\n        elseif A[mid] < x then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\n    return result\nend",
    "  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend",
    "    local l, r = 1, #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if A[m] < x then\n            l = m + 1\n        elseif A[m] > x then\n            r = m - 1\n        else\n            if m == 1 or A[m - 1] ~= x then\n                return m\n            else\n                r = m - 1\n            end\n        end\n    end\n    return -1\nend",
    "  local lo, hi = 1, #A\n  while lo <= hi do\n    local mid = math.floor((lo + hi) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        hi = mid - 1\n      end\n    elseif A[mid] < x then\n      lo = mid + 1\n    else\n      hi = mid - 1\n    end\n  end\n  return nil\nend",
    "    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l = 1\n  local r = #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = left + math.floor((right - left) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "    local l, r = 1, #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if A[m] < x then\n            l = m + 1\n        elseif A[m] > x then\n            r = m - 1\n        else\n            if m == 1 or A[m - 1] ~= x then\n                return m\n            else\n                r = m - 1\n            end\n        end\n    end\n    return -1\nend",
    "  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend",
    "  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      result = mid\n      high = mid - 1\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return result\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      result = mid\n      high = mid - 1\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return result\nend",
    "    local low = 1\n    local high = #A\n    local result = -1\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if x == A[mid] then\n            result = mid\n            high = mid - 1\n        elseif x < A[mid] then\n            high = mid - 1\n        else\n            low = mid + 1\n        end\n    end\n    return result\nend",
    "    local l, r = 1, #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if A[m] == x then\n            if m == 1 or A[m - 1] ~= x then\n                return m\n            else\n                r = m - 1\n            end\n        elseif A[m] < x then\n            l = m + 1\n        else\n            r = m - 1\n        end\n    end\n    return nil\nend",
    "    local left, right = 1, #A\n    while left <= right do\n        local mid = math.floor((left + right) / 2)\n        if A[mid] == x then\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                right = mid - 1\n            end\n        elseif A[mid] < x then\n            left = mid + 1\n        else\n            right = mid - 1\n        end\n    end\n    return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return nil\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "    local l, r = 1, #A\n    while l < r do\n        local m = math.floor((l + r) / 2)\n        if A[m] < x then\n            l = m + 1\n        else\n            r = m\n        end\n    end\n    return l\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend",
    "    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\n    return low\nend",
    "    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] == x then\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        elseif A[mid] < x then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\n    return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return nil\nend",
    "   local l, r = 1, #A\n   while l <= r do\n      local m = math.floor((l + r) / 2)\n      if A[m] < x then\n         l = m + 1\n      else\n         r = m - 1\n      end\n   end\n   if A[l] == x then\n      return l\n   else\n      return nil\n   end\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "    local l = 1\n    local r = #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if A[m] == x then\n            if m == 1 or A[m - 1] ~= x then\n                return m\n            else\n                r = m - 1\n            end\n        elseif A[m] < x then\n            l = m + 1\n        else\n            r = m - 1\n        end\n    end\n    return -1\nend",
    "    local l, r = 1, #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if A[m] < x then\n            l = m + 1\n        elseif A[m] > x then\n            r = m - 1\n        else\n            if m == 1 or A[m - 1] < x then\n                return m\n            else\n                r = m - 1\n            end\n        end\n    end\n    return -1\nend",
    "    local l, r = 1, #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if A[m] == x then\n            if m == 1 or A[m - 1] ~= x then\n                return m\n            else\n                r = m - 1\n            end\n        elseif A[m] < x then\n            l = m + 1\n        else\n            r = m - 1\n        end\n    end\n    return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  if A[l] == x then\n    return l\n  end\nend",
    "    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend",
    "  local low = 1\n  local high = #A\n  local result = -1",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "    local l, r = 1, #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if x < A[m] then\n            r = m - 1\n        elseif x > A[m] then\n            l = m + 1\n        else\n            if m == 1 or A[m - 1] ~= x then\n                return m\n            else\n                r = m - 1\n            end\n        end\n    end\n    return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend",
    "  local i = 1\n  local j = #A\n  while i <= j do\n    local m = math.floor((i + j) / 2)\n    if A[m] < x then\n      i = m + 1\n    elseif A[m] > x then\n      j = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        j = m - 1\n      end\n    end\n  end\n  return nil\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] < x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = low + math.floor((high - low) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      end\n      right = mid - 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "    local low = 1\n    local high = #A\n    local result = -1\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] == x then\n            result = mid\n            high = mid - 1\n        elseif A[mid] < x then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\n    return result\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend",
    "    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] == x then\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "\tlocal low = 1\n\tlocal high = #A\n\tlocal result = -1\n\twhile low <= high do\n\t\tlocal mid = math.floor((low + high) / 2)\n\t\tif x == A[mid] then\n\t\t\tresult = mid\n\t\t\thigh = mid - 1\n\t\telseif x < A[mid] then\n\t\t\thigh = mid - 1\n\t\telse\n\t\t\tlow = mid + 1\n\t\tend\n\tend\n\treturn result\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend",
    "  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend",
    "  local low = 1\n  local high = #A\n  local result = -1",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "    local low = 1\n    local high = #A\n    local result = -1\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] == x then\n            result = mid\n            high = mid - 1\n        elseif A[mid] < x then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\n    return result\nend",
    "    local left, right = 1, #A\n    while left <= right do\n        local mid = math.floor((left + right) / 2)\n        if A[mid] < x then\n            left = mid + 1\n        else\n            right = mid - 1\n        end\n    end\n    return left\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "    local l, r = 1, #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if A[m] == x then\n            if m == 1 or A[m - 1] ~= x then\n                return m\n            else\n                r = m - 1\n            end\n        elseif A[m] < x then\n            l = m + 1\n        else\n            r = m - 1\n        end\n    end\n    return nil\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      end\n      high = mid - 1\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return -1\nend",
    "\tlocal l, r = 1, #A\n\twhile l <= r do\n\t\tlocal m = math.floor((l + r) / 2)\n\t\tif A[m] < x then\n\t\t\tl = m + 1\n\t\telseif A[m] > x then\n\t\t\tr = m - 1\n\t\telse\n\t\t\tif m == 1 or A[m - 1] < x then\n\t\t\t\treturn m\n\t\t\telse\n\t\t\t\tr = m - 1\n\t\t\tend\n\t\tend\n\tend\n\treturn nil\nend",
    "    local low, high = 1, #A\n    local result = -1\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] == x then\n            result = mid\n            high = mid - 1\n        elseif A[mid] < x then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\n    return result\nend",
    "  local low, high = 1, #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  if A[left] == x then\n    return left\n  end\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  if A[left] == x then\n    return left\n  else\n    return -1\n  end\nend",
    "    local l, r = 1, #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if A[m] < x then\n            l = m + 1\n        else\n            r = m - 1\n        end\n    end\n    return l\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\n    return low\nend",
    "    local left, right = 1, #A\n    while left <= right do\n        local mid = math.floor((left + right) / 2)\n        if A[mid] == x then\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                right = mid - 1\n            end\n        elseif A[mid] < x then\n            left = mid + 1\n        else\n            right = mid - 1\n        end\n    end\n    return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  if A[l] == x then\n    return l\n  else\n    return nil\n  end\nend",
    "  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      -- A[mid] == x\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if x < A[mid] then\n      right = mid - 1\n    elseif x > A[mid] then\n      left = mid + 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend",
    "    local l, r = 1, #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if A[m] < x then\n            l = m + 1\n        else\n            r = m - 1\n        end\n    end\n    return l\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  if A[l] == x then\n    return l\n  end\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "\tlocal l, r = 1, #A\n\twhile l <= r do\n\t\tlocal m = math.floor((l + r) / 2)\n\t\tif A[m] < x then\n\t\t\tl = m + 1\n\t\telseif A[m] > x then\n\t\t\tr = m - 1\n\t\telse\n\t\t\tif m == 1 or A[m - 1] < x then\n\t\t\t\treturn m\n\t\t\telse\n\t\t\t\tr = m - 1\n\t\t\tend\n\t\tend\n\tend\n\treturn -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend",
    "\tlocal low = 1\n\tlocal high = #A\n\tlocal result = -1",
    "  local low, high = 1, #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      result = mid\n      high = mid - 1\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return result\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return nil\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "    local l, r = 1, #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if A[m] == x then\n            if m == 1 or A[m - 1] ~= x then\n                return m\n            else\n                r = m - 1\n            end\n        elseif A[m] > x then\n            r = m - 1\n        else\n            l = m + 1\n        end\n    end\n    return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend",
    "  local low = 1\n  local high = #A\n  local result = -1",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return nil\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return nil\nend",
    "    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  if A[l] == x then\n    return l\n  else\n    return -1\n  end\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l = 1\n  local r = #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] < x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return nil\nend",
    "\tlocal l, r = 1, #A\n\twhile l <= r do\n\t\tlocal m = math.floor((l + r) / 2)\n\t\tif A[m] < x then\n\t\t\tl = m + 1\n\t\telse\n\t\t\tr = m - 1\n\t\tend\n\tend\n\tif A[l] == x then\n\t\treturn l\n\telse\n\t\treturn -1\n\tend\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "    local low = 1\n    local high = #A\n    local result = -1\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] == x then\n            result = mid\n            high = mid - 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            low = mid + 1\n        end\n    end\n    return result\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "\tlocal low, high = 1, #A\n\twhile low <= high do\n\t\tlocal mid = math.floor((low + high) / 2)\n\t\tif A[mid] < x then\n\t\t\tlow = mid + 1\n\t\telseif A[mid] > x then\n\t\t\thigh = mid - 1\n\t\telse\n\t\t\tif mid == 1 or A[mid - 1] < x then\n\t\t\t\treturn mid\n\t\t\telse\n\t\t\t\thigh = mid - 1\n\t\t\tend\n\t\tend\n\tend\n\treturn -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend",
    "  local l = 1\n  local r = #A\n  local m = 0\n  while l <= r do\n    m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend",
    "    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] == x then\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            end\n            high = mid - 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            low = mid + 1\n        end\n    end\n    return -1\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "    local left, right = 1, #A\n    while left <= right do\n        local mid = math.floor((left + right) / 2)\n        if A[mid] < x then\n            left = mid + 1\n        else\n            right = mid - 1\n        end\n    end\n    return left\nend",
    "  local l = 1\n  local r = #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = left + math.floor((right - left) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend",
    "  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  if A[l] == x then\n    return l\n  else\n    return nil\n  end\nend",
    "  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend",
    "  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend",
    "    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend",
    "  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend"
  ]
}