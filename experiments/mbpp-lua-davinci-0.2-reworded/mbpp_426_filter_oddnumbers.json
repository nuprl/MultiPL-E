{
  "name": "mbpp_426_filter_oddnumbers",
  "language": "lua",
  "prompt": "-- Write a function to filter odd numbers.\nlocal function filter_oddnumbers(nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_oddnumbers\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), {1, 3, 5, 7, 9})\n    lu.assertEquals(candidate({10, 20, 45, 67, 84, 93}), {45, 67, 93})\n    lu.assertEquals(candidate({5, 7, 9, 8, 6, 4, 3}), {5, 7, 9, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local result = {}\n    for _, v in ipairs(nums) do\n        if v % 2 == 1 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i = 1, #nums do\n    if nums[i] % 2 ~= 0 then\n      result[#result + 1] = nums[i]\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i, num in ipairs(nums) do\n        if num % 2 == 1 then\n            result[#result + 1] = num\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i, v in ipairs(nums) do\n    if v % 2 == 1 then\n      table.insert(result, v)\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i, v in ipairs(nums) do\n        if v % 2 == 1 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i, v in ipairs(nums) do\n    if v % 2 == 1 then\n      table.insert(result, v)\n    end\n  end\n  return result\nend",
    "  local new_nums = {}\n  for _, num in ipairs(nums) do\n    if num % 2 == 1 then\n      table.insert(new_nums, num)\n    end\n  end\n  return new_nums\nend",
    "  local result = {}\n  for i, v in ipairs(nums) do\n    if v % 2 == 1 then\n      table.insert(result, v)\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i, v in ipairs(nums) do\n        if v % 2 == 1 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, num in ipairs(nums) do\n        if num % 2 == 1 then\n            table.insert(result, num)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(nums) do\n        if v % 2 == 1 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "  local odd_numbers = {}\n  for i, v in ipairs(nums) do\n    if v % 2 == 1 then\n      table.insert(odd_numbers, v)\n    end\n  end\n  return odd_numbers\nend",
    "    local result = {}\n    for i, v in ipairs(nums) do\n        if v % 2 == 1 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, num in ipairs(nums) do\n        if num % 2 == 1 then\n            table.insert(result, num)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, num in ipairs(nums) do\n        if num % 2 == 1 then\n            result[#result + 1] = num\n        end\n    end\n    return result\nend",
    "    local odd_numbers = {}\n    for i, num in ipairs(nums) do\n        if num % 2 == 1 then\n            odd_numbers[#odd_numbers + 1] = num\n        end\n    end\n    return odd_numbers\nend",
    "    local result = {}\n    for i, v in ipairs(nums) do\n        if v % 2 == 1 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(nums) do\n        if v % 2 == 1 then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "  local result = {}\n  for i, v in ipairs(nums) do\n    if v % 2 == 1 then\n      table.insert(result, v)\n    end\n  end\n  return result\nend",
    "    local result = {}\n    for i = 1, #nums do\n        if nums[i] % 2 == 1 then\n            result[#result + 1] = nums[i]\n        end\n    end\n    return result\nend"
  ]
}