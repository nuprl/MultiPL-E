{
  "name": "mbpp_479_first_Digit",
  "language": "lua",
  "prompt": "-- Write a luathon function to find the first digit of a given number.\nlocal function first_Digit(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_Digit\n    lu.assertEquals(candidate(123), 1)\n    lu.assertEquals(candidate(456), 4)\n    lu.assertEquals(candidate(12), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  while n > 9 do\n    n = n / 10\n  end\n  return n\nend",
    "\twhile n >= 10 do\n\t\tn = n / 10\n\tend\n\treturn n\nend",
    "    while n >= 10 do\n        n = n / 10\n    end\n    return n\nend",
    "    local digit = 0\n    while n > 0 do\n        digit = n % 10\n        n = math.floor(n / 10)\n    end\n    return digit\nend",
    "  while n > 9 do\n    n = n / 10\n  end\n  return n\nend",
    "  while n >= 10 do\n    n = n / 10\n  end\n  return n\nend",
    "\tlocal s = tostring(n)\n\treturn string.sub(s, 1, 1)\nend",
    "  local s = tostring(n)\n  return tonumber(s:sub(1,1))\nend",
    "\tlocal first_digit = 0\n\twhile n > 0 do\n\t\tfirst_digit = n % 10\n\t\tn = math.floor(n / 10)\n\tend\n\treturn first_digit\nend",
    "  while n >= 10 do\n    n = n / 10\n  end\n  return n\nend",
    "\tlocal s = tostring(n)\n\treturn tonumber(s:sub(1,1))\nend",
    "\tlocal s = tostring(n)\n\treturn tonumber(s:sub(1,1))\nend",
    "    while n >= 10 do\n        n = n / 10\n    end\n    return n\nend",
    "\tlocal s = tostring(n)\n\treturn tonumber(string.sub(s, 1, 1))\nend",
    "    while n > 9 do\n        n = n / 10\n    end\n    return n\nend",
    "    while n < -9 do\n        n = n / 10\n    end\n    return n % 10\nend",
    "\tlocal n = math.abs(n)\n\twhile n >= 10 do\n\t\tn = n / 10\n\tend\n\treturn n\nend",
    "    while n >= 10 do\n        n = n / 10\n    end\n    return n\nend",
    "\tlocal n = math.abs(n)\n\twhile n >= 10 do\n\t\tn = n / 10\n\tend\n\treturn n\nend",
    "  while n < -9 do n = n / 10 end\n  while n > 9 do n = n / 10 end\n  return n\nend"
  ]
}