{
  "name": "mbpp_749_sort_numeric_strings",
  "language": "lua",
  "prompt": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend",
    "    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend",
    "    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend",
    "  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend",
    "  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend",
    "    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend",
    "  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend",
    "  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend",
    "    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend",
    "    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend",
    "    table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend",
    "    table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend",
    "\ttable.sort(nums_str, function(a, b)\n\t\treturn tonumber(a) < tonumber(b)\n\tend)\nend",
    "    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend",
    "    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend",
    "  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend",
    "  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend",
    "    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend",
    "  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend",
    "    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend"
  ]
}