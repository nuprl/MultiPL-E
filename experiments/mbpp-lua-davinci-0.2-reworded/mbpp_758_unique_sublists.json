{
  "name": "mbpp_758_unique_sublists",
  "language": "lua",
  "prompt": "-- Write a function to count tables within a table. The function should return a table where every table is converted to a table and the value of such table is the number of its occurencies in the original table.\nlocal function unique_sublists(list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_758_unique_sublists.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_sublists\n    lu.assertEquals(candidate({{1, 3}, {5, 7}, {1, 3}, {13, 15, 17}, {5, 7}, {9, 11}}), {[{1, 3}] = 2, [{5, 7}] = 2, [{13, 15, 17}] = 1, [{9, 11}] = 1})\n    lu.assertEquals(candidate({{'green', 'orange'}, {'black'}, {'green', 'orange'}, {'white'}}), {[{'green', 'orange'}] = 2, [{'black'}] = 1, [{'white'}] = 1})\n    lu.assertEquals(candidate({{10, 20, 30, 40}, {60, 70, 50, 50}, {90, 100, 200}}), {[{10, 20, 30, 40}] = 1, [{60, 70, 50, 50}] = 1, [{90, 100, 200}] = 1})\n    lu.assertEquals(candidate({{'john'}}), {[{'john'}] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local unique_sublists = {}\n    for _, sublist in ipairs(list1) do\n        local sublist_str = table.concat(sublist, ',')\n        if not unique_sublists[sublist_str] then\n            unique_sublists[sublist_str] = 1\n        else\n            unique_sublists[sublist_str] = unique_sublists[sublist_str] + 1\n        end\n    end\n    return unique_sublists\nend",
    "\tlocal list2 = {}\n\tfor _, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor _, v2 in ipairs(list2) do\n\t\t\tif v == v2 then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "  local unique_sublists = {}\n  for i = 1, #list1 do\n    local sublist = list1[i]\n    local sublist_key = table.concat(sublist, \",\")\n    if unique_sublists[sublist_key] == nil then\n      unique_sublists[sublist_key] = 1\n    else\n      unique_sublists[sublist_key] = unique_sublists[sublist_key] + 1\n    end\n  end\n  return unique_sublists\nend",
    "    local unique_sublists = {}\n    for _, list2 in ipairs(list1) do\n        local found = false\n        for _, list3 in ipairs(unique_sublists) do\n            if #list2 == #list3 then\n                local equal = true\n                for i = 1, #list2 do\n                    if list2[i] ~= list3[i] then\n                        equal = false\n                        break\n                    end\n                end\n                if equal then\n                    found = true\n                    break\n                end\n            end\n        end\n        if not found then\n            table.insert(unique_sublists, list2)\n        end\n    end\n    return unique_sublists\nend",
    "    local unique_sublists = {}\n    for _, sublist in ipairs(list1) do\n        local sublist_str = table.concat(sublist, \",\")\n        if not unique_sublists[sublist_str] then\n            unique_sublists[sublist_str] = {sublist, 1}\n        else\n            unique_sublists[sublist_str][2] = unique_sublists[sublist_str][2] + 1\n        end\n    end\n    return unique_sublists\nend",
    "\tlocal list2 = {}\n\tfor i = 1, #list1 do\n\t\tlocal found = false\n\t\tfor j = 1, #list2 do\n\t\t\tif table.equal(list1[i], list2[j][1]) then\n\t\t\t\tlist2[j][2] = list2[j][2] + 1\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, {list1[i], 1})\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlocal result = {}\n\tfor _, list2 in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor _, list3 in ipairs(result) do\n\t\t\tif table.equals(list2, list3) then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(result, list2)\n\t\tend\n\tend\n\treturn result\nend",
    "    local unique_sublists = {}\n    for _, sublist in ipairs(list1) do\n        local sublist_str = table.concat(sublist, \",\")\n        if unique_sublists[sublist_str] == nil then\n            unique_sublists[sublist_str] = 1\n        else\n            unique_sublists[sublist_str] = unique_sublists[sublist_str] + 1\n        end\n    end\n    return unique_sublists\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        local sublist = list1[i]\n        local sublist_str = table.concat(sublist, \",\")\n        if result[sublist_str] == nil then\n            result[sublist_str] = 1\n        else\n            result[sublist_str] = result[sublist_str] + 1\n        end\n    end\n    return result\nend",
    "\tlocal list2 = {}\n\tfor i,v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor j,w in ipairs(list2) do\n\t\t\tif v == w then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "    local list2 = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local found = false\n            for _, v2 in ipairs(list2) do\n                if v2[1] == v then\n                    v2[2] = v2[2] + 1\n                    found = true\n                    break\n                end\n            end\n            if not found then\n                table.insert(list2, {v, 1})\n            end\n        end\n    end\n    return list2\nend",
    "    local unique_sublists = {}\n    for i, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local sublist = {}\n            for j, w in ipairs(v) do\n                sublist[j] = w\n            end\n            table.sort(sublist)\n            local sublist_key = table.concat(sublist, \",\")\n            if unique_sublists[sublist_key] == nil then\n                unique_sublists[sublist_key] = 1\n            else\n                unique_sublists[sublist_key] = unique_sublists[sublist_key] + 1\n            end\n        end\n    end\n    return unique_sublists\nend",
    "\tlocal result = {}\n\tfor _, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor _, v2 in ipairs(result) do\n\t\t\tif table.equals(v, v2) then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\treturn result\nend",
    "  local unique_sublists = {}\n  for _, sublist in ipairs(list1) do\n    local sublist_str = table.concat(sublist, \",\")\n    unique_sublists[sublist_str] = (unique_sublists[sublist_str] or 0) + 1\n  end\n  return unique_sublists\nend",
    "  local result = {}\n  for _, v in ipairs(list1) do\n    if type(v) == \"table\" then\n      local key = table.concat(v, \",\")\n      result[key] = (result[key] or 0) + 1\n    end\n  end\n  return result\nend",
    "    local unique_sublists = {}\n    for _, sublist in ipairs(list1) do\n        local sublist_string = table.concat(sublist, ',')\n        if not unique_sublists[sublist_string] then\n            unique_sublists[sublist_string] = 0\n        end\n        unique_sublists[sublist_string] = unique_sublists[sublist_string] + 1\n    end\n    return unique_sublists\nend",
    "\tlocal count = {}\n\tfor i, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal key = table.concat(v, \",\")\n\t\t\tif count[key] == nil then\n\t\t\t\tcount[key] = 0\n\t\t\tend\n\t\t\tcount[key] = count[key] + 1\n\t\tend\n\tend\n\tlocal result = {}\n\tfor k, v in pairs(count) do\n\t\tlocal key = {}\n\t\tfor i in string.gmatch(k, \"%d+\") do\n\t\t\ttable.insert(key, tonumber(i))\n\t\tend\n\t\tresult[key] = v\n\tend\n\treturn result\nend",
    "\tlocal result = {}\n\tfor _, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal key = table.concat(v, \",\")\n\t\t\tif result[key] == nil then\n\t\t\t\tresult[key] = 1\n\t\t\telse\n\t\t\t\tresult[key] = result[key] + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend",
    "\tlocal count = {}\n\tfor i, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal key = table.concat(v, \",\")\n\t\t\tif count[key] == nil then\n\t\t\t\tcount[key] = 1\n\t\t\telse\n\t\t\t\tcount[key] = count[key] + 1\n\t\t\tend\n\t\tend\n\tend\n\tlocal result = {}\n\tfor k, v in pairs(count) do\n\t\tlocal t = {}\n\t\tfor i in string.gmatch(k, \"%d+\") do\n\t\t\ttable.insert(t, tonumber(i))\n\t\tend\n\t\ttable.insert(result, t)\n\t\ttable.insert(result, v)\n\tend\n\treturn result\nend",
    "    local result = {}\n    for i, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local found = false\n            for j, w in ipairs(result) do\n                if table_equal(v, w[1]) then\n                    result[j][2] = result[j][2] + 1\n                    found = true\n                    break\n                end\n            end\n            if not found then\n                table.insert(result, {v, 1})\n            end\n        end\n    end\n    return result\nend",
    "\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tlocal sublist = list1[i]\n\t\tlocal found = false\n\t\tfor j = 1, #result do\n\t\t\tif table.equals(sublist, result[j][1]) then\n\t\t\t\tresult[j][2] = result[j][2] + 1\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(result, {sublist, 1})\n\t\tend\n\tend\n\treturn result\nend",
    "  local list2 = {}\n  for i, v in ipairs(list1) do\n    local found = false\n    for j, w in ipairs(list2) do\n      if v == w then\n        found = true\n        break\n      end\n    end\n    if not found then\n      table.insert(list2, v)\n    end\n  end\n  return list2\nend",
    "\tlocal list2 = {}\n\tfor i = 1, #list1 do\n\t\tlocal list3 = {}\n\t\tfor j = 1, #list1 do\n\t\t\tif list1[i] == list1[j] then\n\t\t\t\tlist3[#list3 + 1] = list1[j]\n\t\t\tend\n\t\tend\n\t\tlist2[#list2 + 1] = list3\n\tend\n\treturn list2\nend",
    "  local count = {}\n  for _, t in ipairs(list1) do\n    local key = table.concat(t, \",\")\n    count[key] = (count[key] or 0) + 1\n  end\n  local result = {}\n  for key, value in pairs(count) do\n    local t = {}\n    for v in string.gmatch(key, \"%d+\") do\n      t[#t + 1] = tonumber(v)\n    end\n    result[#result + 1] = {t, value}\n  end\n  return result\nend",
    "    local unique_sublists = {}\n    for i = 1, #list1 do\n        local sublist = list1[i]\n        if not unique_sublists[sublist] then\n            unique_sublists[sublist] = 1\n        else\n            unique_sublists[sublist] = unique_sublists[sublist] + 1\n        end\n    end\n    return unique_sublists\nend",
    "  local result = {}\n  for i = 1, #list1 do\n    local sublist = list1[i]\n    local sublist_key = table.concat(sublist, \",\")\n    if result[sublist_key] == nil then\n      result[sublist_key] = 1\n    else\n      result[sublist_key] = result[sublist_key] + 1\n    end\n  end\n  return result\nend",
    "  local count = {}\n  for _, v in ipairs(list1) do\n    if type(v) == \"table\" then\n      local key = table.concat(v, \",\")\n      count[key] = (count[key] or 0) + 1\n    end\n  end\n  local result = {}\n  for k, v in pairs(count) do\n    local list = {}\n    for w in string.gmatch(k, \"%S+\") do\n      table.insert(list, tonumber(w))\n    end\n    result[list] = v\n  end\n  return result\nend",
    "    local list2 = {}\n    for i, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local found = false\n            for j, w in ipairs(list2) do\n                if table.equal(v, w) then\n                    found = true\n                    break\n                end\n            end\n            if not found then\n                table.insert(list2, v)\n            end\n        end\n    end\n    return list2\nend",
    "    local unique_sublists = {}\n    for _, list2 in ipairs(list1) do\n        local found = false\n        for _, list3 in ipairs(unique_sublists) do\n            if #list2 == #list3 then\n                local equal = true\n                for i = 1, #list2 do\n                    if list2[i] ~= list3[i] then\n                        equal = false\n                        break\n                    end\n                end\n                if equal then\n                    found = true\n                    break\n                end\n            end\n        end\n        if not found then\n            table.insert(unique_sublists, list2)\n        end\n    end\n    return unique_sublists\nend",
    "  local unique_sublists = {}\n  for _, sublist in ipairs(list1) do\n    local sublist_key = table.concat(sublist, \",\")\n    if unique_sublists[sublist_key] == nil then\n      unique_sublists[sublist_key] = 1\n    else\n      unique_sublists[sublist_key] = unique_sublists[sublist_key] + 1\n    end\n  end\n  return unique_sublists\nend",
    "\tlocal result = {}\n\tfor _, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal key = table.concat(v, \",\")\n\t\t\tresult[key] = (result[key] or 0) + 1\n\t\tend\n\tend\n\treturn result\nend",
    "\tlocal count = {}\n\tfor i, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal sublist = {}\n\t\t\tfor j, w in ipairs(v) do\n\t\t\t\tsublist[j] = w\n\t\t\tend\n\t\t\tlocal sublist_str = table.concat(sublist, \",\")\n\t\t\tif count[sublist_str] == nil then\n\t\t\t\tcount[sublist_str] = 1\n\t\t\telse\n\t\t\t\tcount[sublist_str] = count[sublist_str] + 1\n\t\t\tend\n\t\tend\n\tend\n\tlocal result = {}\n\tfor k, v in pairs(count) do\n\t\tlocal sublist = {}\n\t\tfor w in string.gmatch(k, \"[^,]+\") do\n\t\t\ttable.insert(sublist, tonumber(w))\n\t\tend\n\t\ttable.insert(result, {sublist, v})\n\tend\n\treturn result\nend",
    "\tlocal unique_sublists = {}\n\tfor _, sublist in ipairs(list1) do\n\t\tlocal sublist_key = table.concat(sublist, \",\")\n\t\tif unique_sublists[sublist_key] then\n\t\t\tunique_sublists[sublist_key] = unique_sublists[sublist_key] + 1\n\t\telse\n\t\t\tunique_sublists[sublist_key] = 1\n\t\tend\n\tend\n\treturn unique_sublists\nend",
    "  local unique_sublists = {}\n  for _, sublist in ipairs(list1) do\n    local sublist_string = table.concat(sublist, \"\")\n    if not unique_sublists[sublist_string] then\n      unique_sublists[sublist_string] = 1\n    else\n      unique_sublists[sublist_string] = unique_sublists[sublist_string] + 1\n    end\n  end\n  return unique_sublists\nend",
    "  local unique_sublists = {}\n  for i = 1, #list1 do\n    local sublist = list1[i]\n    if not unique_sublists[sublist] then\n      unique_sublists[sublist] = 0\n    end\n    unique_sublists[sublist] = unique_sublists[sublist] + 1\n  end\n  return unique_sublists\nend",
    "    local unique_list = {}\n    for i, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local found = false\n            for j, w in ipairs(unique_list) do\n                if table.equal(v, w) then\n                    unique_list[j][2] = unique_list[j][2] + 1\n                    found = true\n                    break\n                end\n            end\n            if not found then\n                table.insert(unique_list, {v, 1})\n            end\n        end\n    end\n    return unique_list\nend",
    "    local unique_list = {}\n    for i,v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local found = false\n            for j,u in ipairs(unique_list) do\n                if table.equal(v, u) then\n                    unique_list[j][2] = unique_list[j][2] + 1\n                    found = true\n                    break\n                end\n            end\n            if not found then\n                table.insert(unique_list, {v, 1})\n            end\n        end\n    end\n    return unique_list\nend",
    "  local list2 = {}\n  for i,v in ipairs(list1) do\n    if type(v) == \"table\" then\n      local v_str = table.concat(v, \",\")\n      if list2[v_str] == nil then\n        list2[v_str] = 1\n      else\n        list2[v_str] = list2[v_str] + 1\n      end\n    end\n  end\n  return list2\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        local found = false\n        for j = 1, #list2 do\n            if table.compare(list1[i], list2[j][1]) then\n                list2[j][2] = list2[j][2] + 1\n                found = true\n            end\n        end\n        if not found then\n            list2[#list2 + 1] = {list1[i], 1}\n        end\n    end\n    return list2\nend",
    "  local count = {}\n  for _, v in ipairs(list1) do\n    if type(v) == \"table\" then\n      local key = table.concat(v, \",\")\n      count[key] = (count[key] or 0) + 1\n    end\n  end\n  local result = {}\n  for k, v in pairs(count) do\n    local t = {}\n    for w in string.gmatch(k, \"%d+\") do\n      table.insert(t, tonumber(w))\n    end\n    result[t] = v\n  end\n  return result\nend",
    "    local unique_sublists = {}\n    for _, sublist in ipairs(list1) do\n        local sublist_str = table.concat(sublist, \",\")\n        if unique_sublists[sublist_str] == nil then\n            unique_sublists[sublist_str] = 1\n        else\n            unique_sublists[sublist_str] = unique_sublists[sublist_str] + 1\n        end\n    end\n    return unique_sublists\nend",
    "    local result = {}\n    for _, v in ipairs(list1) do\n        local found = false\n        for _, v2 in ipairs(result) do\n            if table.equal(v, v2[1]) then\n                v2[2] = v2[2] + 1\n                found = true\n                break\n            end\n        end\n        if not found then\n            table.insert(result, {v, 1})\n        end\n    end\n    return result\nend",
    "    local count = {}\n    for _, v in ipairs(list1) do\n        if not count[v] then\n            count[v] = 1\n        else\n            count[v] = count[v] + 1\n        end\n    end\n    return count\nend",
    "  local unique_sublists = {}\n  for _, sublist in ipairs(list1) do\n    local sublist_key = table.concat(sublist, ',')\n    if unique_sublists[sublist_key] == nil then\n      unique_sublists[sublist_key] = 1\n    else\n      unique_sublists[sublist_key] = unique_sublists[sublist_key] + 1\n    end\n  end\n  return unique_sublists\nend",
    "\tlocal unique = {}\n\tfor _, list2 in ipairs(list1) do\n\t\tlocal key = table.concat(list2, \",\")\n\t\tunique[key] = (unique[key] or 0) + 1\n\tend\n\treturn unique\nend",
    "    local unique_sublists = {}\n    for _, sublist in ipairs(list1) do\n        local sublist_str = table.concat(sublist, \",\")\n        if not unique_sublists[sublist_str] then\n            unique_sublists[sublist_str] = 1\n        else\n            unique_sublists[sublist_str] = unique_sublists[sublist_str] + 1\n        end\n    end\n    return unique_sublists\nend",
    "\tlocal unique_sublists = {}\n\tfor _, sublist in ipairs(list1) do\n\t\tlocal sublist_string = table.concat(sublist, \",\")\n\t\tif unique_sublists[sublist_string] == nil then\n\t\t\tunique_sublists[sublist_string] = 1\n\t\telse\n\t\t\tunique_sublists[sublist_string] = unique_sublists[sublist_string] + 1\n\t\tend\n\tend\n\treturn unique_sublists\nend",
    "\tlocal unique_sublists = {}\n\tlocal sublists = {}\n\tfor i,v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal sublist = {}\n\t\t\tfor j,w in ipairs(v) do\n\t\t\t\tsublist[j] = w\n\t\t\tend\n\t\t\ttable.sort(sublist)\n\t\t\tlocal sublist_string = table.concat(sublist, \",\")\n\t\t\tif not sublists[sublist_string] then\n\t\t\t\tsublists[sublist_string] = 1\n\t\t\telse\n\t\t\t\tsublists[sublist_string] = sublists[sublist_string] + 1\n\t\t\tend\n\t\tend\n\tend\n\tfor sublist_string,count in pairs(sublists) do\n\t\tlocal sublist = {}\n\t\tfor w in string.gmatch(sublist_string, \"([^,]+)\") do\n\t\t\ttable.insert(sublist, tonumber(w))\n\t\tend\n\t\ttable.insert(unique_sublists, {sublist, count})\n\tend\n\treturn unique_sublists\nend",
    "    local unique_sublists = {}\n    for i = 1, #list1 do\n        local sublist = list1[i]\n        if unique_sublists[sublist] == nil then\n            unique_sublists[sublist] = 1\n        else\n            unique_sublists[sublist] = unique_sublists[sublist] + 1\n        end\n    end\n    return unique_sublists\nend",
    "\tlocal list2 = {}\n\tfor i, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor j, w in ipairs(list2) do\n\t\t\tif v == w then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "    local count = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local key = table.concat(v, \",\")\n            count[key] = (count[key] or 0) + 1\n        end\n    end\n    return count\nend",
    "    local list2 = {}\n    for i, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local found = false\n            for j, w in ipairs(list2) do\n                if table.equals(v, w) then\n                    found = true\n                    break\n                end\n            end\n            if not found then\n                table.insert(list2, v)\n            end\n        end\n    end\n    return list2\nend",
    "  local unique_sublists = {}\n  for i = 1, #list1 do\n    local sublist = list1[i]\n    local sublist_str = table.concat(sublist, \" \")\n    if not unique_sublists[sublist_str] then\n      unique_sublists[sublist_str] = {sublist, 1}\n    else\n      unique_sublists[sublist_str][2] = unique_sublists[sublist_str][2] + 1\n    end\n  end\n  return unique_sublists\nend",
    "    local list2 = {}\n    for i, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local v2 = table.concat(v, \",\")\n            if list2[v2] then\n                list2[v2] = list2[v2] + 1\n            else\n                list2[v2] = 1\n            end\n        end\n    end\n    return list2\nend",
    "\tlocal list2 = {}\n\tfor i, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor j, w in ipairs(list2) do\n\t\t\tif v == w then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tlocal sublist = list1[i]\n\t\tif type(sublist) == \"table\" then\n\t\t\tlocal sublist_key = table.concat(sublist, \",\")\n\t\t\tif result[sublist_key] then\n\t\t\t\tresult[sublist_key] = result[sublist_key] + 1\n\t\t\telse\n\t\t\t\tresult[sublist_key] = 1\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend",
    "\tlocal count = {}\n\tfor i = 1, #list1 do\n\t\tlocal list2 = list1[i]\n\t\tlocal key = table.concat(list2, \"\")\n\t\tif count[key] then\n\t\t\tcount[key] = count[key] + 1\n\t\telse\n\t\t\tcount[key] = 1\n\t\tend\n\tend\n\tlocal result = {}\n\tfor key, value in pairs(count) do\n\t\tlocal list2 = {}\n\t\tfor i = 1, #key do\n\t\t\tlist2[i] = key:sub(i, i)\n\t\tend\n\t\tresult[list2] = value\n\tend\n\treturn result\nend",
    "  local list2 = {}\n  for i, v in ipairs(list1) do\n    local count = 0\n    for j, w in ipairs(list1) do\n      if v == w then\n        count = count + 1\n      end\n    end\n    list2[i] = {v, count}\n  end\n  return list2\nend",
    "\tlocal result = {}\n\tfor _, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal key = table.concat(v, \",\")\n\t\t\tif result[key] == nil then\n\t\t\t\tresult[key] = 1\n\t\t\telse\n\t\t\t\tresult[key] = result[key] + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend",
    "\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tlocal list2 = list1[i]\n\t\tlocal found = false\n\t\tfor j = 1, #result do\n\t\t\tlocal list3 = result[j]\n\t\t\tif #list2 == #list3 then\n\t\t\t\tlocal equal = true\n\t\t\t\tfor k = 1, #list2 do\n\t\t\t\t\tif list2[k] ~= list3[k] then\n\t\t\t\t\t\tequal = false\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tif equal then\n\t\t\t\t\tfound = true\n\t\t\t\t\tresult[j][#result[j] + 1] = list2\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\tresult[#result + 1] = {list2}\n\t\tend\n\tend\n\treturn result\nend",
    "\tlocal list2 = {}\n\tfor i, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor j, w in ipairs(list2) do\n\t\t\tif v == w then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "  local unique_sublists = {}\n  for i, v in ipairs(list1) do\n    if type(v) == \"table\" then\n      local sublist = {}\n      for j, w in ipairs(v) do\n        sublist[j] = w\n      end\n      if not unique_sublists[sublist] then\n        unique_sublists[sublist] = 1\n      else\n        unique_sublists[sublist] = unique_sublists[sublist] + 1\n      end\n    end\n  end\n  return unique_sublists\nend",
    "    local count = {}\n    for _, v in ipairs(list1) do\n        local key = table.concat(v, \",\")\n        if count[key] == nil then\n            count[key] = 1\n        else\n            count[key] = count[key] + 1\n        end\n    end\n    local result = {}\n    for k, v in pairs(count) do\n        local t = {}\n        for w in string.gmatch(k, \"([^,]+)\") do\n            table.insert(t, tonumber(w))\n        end\n        table.insert(result, t)\n        table.insert(result, v)\n    end\n    return result\nend",
    "\tlocal count = {}\n\tfor _, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal key = table.concat(v, \",\")\n\t\t\tif count[key] then\n\t\t\t\tcount[key] = count[key] + 1\n\t\t\telse\n\t\t\t\tcount[key] = 1\n\t\t\tend\n\t\tend\n\tend\n\tlocal result = {}\n\tfor k, v in pairs(count) do\n\t\tlocal t = {}\n\t\tfor i in k:gmatch(\"[^,]+\") do\n\t\t\ttable.insert(t, tonumber(i))\n\t\tend\n\t\ttable.insert(result, t)\n\t\ttable.insert(result, v)\n\tend\n\treturn result\nend",
    "\tlocal list2 = {}\n\tfor i,v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor j,w in ipairs(list2) do\n\t\t\tif v == w then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "  local result = {}\n  for _, sublist in ipairs(list1) do\n    local found = false\n    for _, sublist2 in ipairs(result) do\n      if #sublist == #sublist2 then\n        found = true\n        for i = 1, #sublist do\n          if sublist[i] ~= sublist2[i] then\n            found = false\n            break\n          end\n        end\n        if found then\n          sublist2.count = sublist2.count + 1\n          break\n        end\n      end\n    end\n    if not found then\n      local new_sublist = {}\n      for i = 1, #sublist do\n        new_sublist[i] = sublist[i]\n      end\n      new_sublist.count = 1\n      table.insert(result, new_sublist)\n    end\n  end\n  return result\nend",
    "\tlocal unique_sublists = {}\n\tfor _, sublist in ipairs(list1) do\n\t\tlocal sublist_string = table.concat(sublist, \",\")\n\t\tif unique_sublists[sublist_string] == nil then\n\t\t\tunique_sublists[sublist_string] = 1\n\t\telse\n\t\t\tunique_sublists[sublist_string] = unique_sublists[sublist_string] + 1\n\t\tend\n\tend\n\treturn unique_sublists\nend",
    "    local unique_sublists = {}\n    for i = 1, #list1 do\n        local sublist = list1[i]\n        local sublist_key = table.concat(sublist, ',')\n        if unique_sublists[sublist_key] == nil then\n            unique_sublists[sublist_key] = {sublist, 1}\n        else\n            unique_sublists[sublist_key][2] = unique_sublists[sublist_key][2] + 1\n        end\n    end\n    return unique_sublists\nend",
    "\tlocal unique_list = {}\n\tfor i,v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal found = false\n\t\t\tfor j,u in ipairs(unique_list) do\n\t\t\t\tif table.equal(v,u) then\n\t\t\t\t\tfound = true\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif not found then\n\t\t\t\ttable.insert(unique_list,v)\n\t\t\tend\n\t\tend\n\tend\n\treturn unique_list\nend",
    "\tlocal list2 = {}\n\tfor i = 1, #list1 do\n\t\tlocal list3 = {}\n\t\tfor j = 1, #list1 do\n\t\t\tif list1[i] == list1[j] then\n\t\t\t\ttable.insert(list3, list1[j])\n\t\t\tend\n\t\tend\n\t\ttable.insert(list2, list3)\n\tend\n\treturn list2\nend",
    "  local list2 = {}\n  for i = 1, #list1 do\n    local found = false\n    for j = 1, #list2 do\n      if table.equal(list1[i], list2[j][1]) then\n        list2[j][2] = list2[j][2] + 1\n        found = true\n        break\n      end\n    end\n    if not found then\n      table.insert(list2, {list1[i], 1})\n    end\n  end\n  return list2\nend",
    "\tlocal list2 = {}\n\tfor i = 1, #list1 do\n\t\tlocal list3 = {}\n\t\tfor j = 1, #list1 do\n\t\t\tif list1[i] == list1[j] then\n\t\t\t\ttable.insert(list3, list1[j])\n\t\t\tend\n\t\tend\n\t\tif #list3 > 1 then\n\t\t\ttable.insert(list2, list3)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlocal count = {}\n\tfor i, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal key = table.concat(v, \",\")\n\t\t\tif count[key] == nil then\n\t\t\t\tcount[key] = 1\n\t\t\telse\n\t\t\t\tcount[key] = count[key] + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
    "    local unique_sublists = {}\n    for i = 1, #list1 do\n        local sublist = list1[i]\n        if type(sublist) == \"table\" then\n            local sublist_key = table.concat(sublist, \",\")\n            if unique_sublists[sublist_key] == nil then\n                unique_sublists[sublist_key] = 1\n            else\n                unique_sublists[sublist_key] = unique_sublists[sublist_key] + 1\n            end\n        end\n    end\n    return unique_sublists\nend",
    "\tlocal count = {}\n\tfor _, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal key = table.concat(v, \",\")\n\t\t\tcount[key] = (count[key] or 0) + 1\n\t\tend\n\tend\n\treturn count\nend",
    "    local unique_sublists = {}\n    for _, sublist in ipairs(list1) do\n        local sublist_string = table.concat(sublist)\n        if unique_sublists[sublist_string] == nil then\n            unique_sublists[sublist_string] = 1\n        else\n            unique_sublists[sublist_string] = unique_sublists[sublist_string] + 1\n        end\n    end\n    return unique_sublists\nend",
    "  local unique = {}\n  for i, v in ipairs(list1) do\n    local found = false\n    for j, u in ipairs(unique) do\n      if table.equal(v, u) then\n        found = true\n        break\n      end\n    end\n    if not found then\n      table.insert(unique, v)\n    end\n  end\n  return unique\nend",
    "    local result = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local found = false\n            for _, v2 in ipairs(result) do\n                if table.equals(v, v2[1]) then\n                    v2[2] = v2[2] + 1\n                    found = true\n                    break\n                end\n            end\n            if not found then\n                table.insert(result, {v, 1})\n            end\n        end\n    end\n    return result\nend",
    "\tlocal count = {}\n\tfor i = 1, #list1 do\n\t\tlocal sublist = list1[i]\n\t\tlocal sublist_str = table.concat(sublist, \",\")\n\t\tif count[sublist_str] == nil then\n\t\t\tcount[sublist_str] = 1\n\t\telse\n\t\t\tcount[sublist_str] = count[sublist_str] + 1\n\t\tend\n\tend\n\tlocal result = {}\n\tfor k, v in pairs(count) do\n\t\tlocal sublist = {}\n\t\tfor s in k:gmatch(\"([^,]+)\") do\n\t\t\ttable.insert(sublist, tonumber(s))\n\t\tend\n\t\tresult[table.concat(sublist, \",\")] = v\n\tend\n\treturn result\nend",
    "    local unique_sublists = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            if unique_sublists[v] == nil then\n                unique_sublists[v] = 1\n            else\n                unique_sublists[v] = unique_sublists[v] + 1\n            end\n        end\n    end\n    return unique_sublists\nend",
    "    local unique_sublists = {}\n    for _, sublist in ipairs(list1) do\n        local sublist_key = table.concat(sublist, \",\")\n        if not unique_sublists[sublist_key] then\n            unique_sublists[sublist_key] = sublist\n        end\n    end\n    return unique_sublists\nend",
    "\tlocal list2 = {}\n\tfor i,v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor j,w in ipairs(list2) do\n\t\t\tif v == w then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tlocal sublist = list1[i]\n\t\tlocal found = false\n\t\tfor j = 1, #result do\n\t\t\tif sublist == result[j][1] then\n\t\t\t\tfound = true\n\t\t\t\tresult[j][2] = result[j][2] + 1\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\tresult[#result + 1] = {sublist, 1}\n\t\tend\n\tend\n\treturn result\nend",
    "  local unique_tables = {}\n  for i = 1, #list1 do\n    local table_to_check = list1[i]\n    local is_unique = true\n    for j = 1, #unique_tables do\n      if table_to_check == unique_tables[j][1] then\n        unique_tables[j][2] = unique_tables[j][2] + 1\n        is_unique = false\n        break\n      end\n    end\n    if is_unique then\n      table.insert(unique_tables, {table_to_check, 1})\n    end\n  end\n  return unique_tables\nend",
    "  local result = {}\n  for i, v in ipairs(list1) do\n    local found = false\n    for j, w in ipairs(result) do\n      if table.equals(v, w[1]) then\n        found = true\n        w[2] = w[2] + 1\n      end\n    end\n    if not found then\n      table.insert(result, {v, 1})\n    end\n  end\n  return result\nend",
    "\tlocal list2 = {}\n\tfor i = 1, #list1 do\n\t\tlocal found = false\n\t\tfor j = 1, #list2 do\n\t\t\tif table.equals(list1[i], list2[j][1]) then\n\t\t\t\tlist2[j][2] = list2[j][2] + 1\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, {list1[i], 1})\n\t\tend\n\tend\n\treturn list2\nend",
    "    local unique_sublists = {}\n    for i, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local sublist = table.concat(v, \",\")\n            if unique_sublists[sublist] then\n                unique_sublists[sublist] = unique_sublists[sublist] + 1\n            else\n                unique_sublists[sublist] = 1\n            end\n        end\n    end\n    return unique_sublists\nend",
    "\tlocal result = {}\n\tfor _, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor _, v2 in ipairs(result) do\n\t\t\tif table.equals(v, v2) then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\treturn result\nend",
    "    local list2 = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local key = table.concat(v, \",\")\n            if not list2[key] then\n                list2[key] = v\n            end\n        end\n    end\n    return list2\nend",
    "  local count = {}\n  for _, v in ipairs(list1) do\n    count[v] = (count[v] or 0) + 1\n  end\n  return count\nend",
    "    local result = {}\n    for i, v in ipairs(list1) do\n        local found = false\n        for j, w in ipairs(result) do\n            if table.equal(v, w) then\n                found = true\n                break\n            end\n        end\n        if not found then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "\tlocal count = {}\n\tfor _, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal key = table.concat(v, \",\")\n\t\t\tcount[key] = (count[key] or 0) + 1\n\t\tend\n\tend\n\tlocal result = {}\n\tfor k, v in pairs(count) do\n\t\tlocal t = {}\n\t\tfor w in string.gmatch(k, \"%d+\") do\n\t\t\ttable.insert(t, tonumber(w))\n\t\tend\n\t\tresult[t] = v\n\tend\n\treturn result\nend",
    "\tlocal result = {}\n\tfor _, v in ipairs(list1) do\n\t\tlocal key = table.concat(v, \",\")\n\t\tresult[key] = (result[key] or 0) + 1\n\tend\n\treturn result\nend",
    "  local unique_sublists = {}\n  for i, v in ipairs(list1) do\n    local found = false\n    for j, u in ipairs(unique_sublists) do\n      if table.equals(v, u[1]) then\n        found = true\n        u[2] = u[2] + 1\n        break\n      end\n    end\n    if not found then\n      table.insert(unique_sublists, {v, 1})\n    end\n  end\n  return unique_sublists\nend",
    "\tlocal result = {}\n\tfor _, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal found = false\n\t\t\tfor _, v2 in ipairs(result) do\n\t\t\t\tif table_equal(v, v2[1]) then\n\t\t\t\t\tv2[2] = v2[2] + 1\n\t\t\t\t\tfound = true\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif not found then\n\t\t\t\ttable.insert(result, {v, 1})\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend",
    "\tlocal count = {}\n\tfor i, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor j, k in ipairs(count) do\n\t\t\tif k[1] == v then\n\t\t\t\tk[2] = k[2] + 1\n\t\t\t\tfound = true\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(count, {v, 1})\n\t\tend\n\tend\n\treturn count\nend",
    "  local result = {}\n  for i,v in ipairs(list1) do\n    local found = false\n    for j,w in ipairs(result) do\n      if v == w[1] then\n        found = true\n        w[2] = w[2] + 1\n      end\n    end\n    if not found then\n      result[#result+1] = {v,1}\n    end\n  end\n  return result\nend",
    "    local unique_sublists = {}\n    for i = 1, #list1 do\n        local sublist = list1[i]\n        local sublist_string = table.concat(sublist, \",\")\n        if unique_sublists[sublist_string] == nil then\n            unique_sublists[sublist_string] = 1\n        else\n            unique_sublists[sublist_string] = unique_sublists[sublist_string] + 1\n        end\n    end\n    return unique_sublists\nend",
    "\tlocal list2 = {}\n\tfor i, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor j, w in ipairs(list2) do\n\t\t\tif v == w then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlocal list2 = {}\n\tfor _, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor _, v2 in ipairs(list2) do\n\t\t\tif v == v2 then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlocal list2 = {}\n\tfor i = 1, #list1 do\n\t\tlocal found = false\n\t\tfor j = 1, #list2 do\n\t\t\tif table.equals(list1[i], list2[j][1]) then\n\t\t\t\tfound = true\n\t\t\t\tlist2[j][2] = list2[j][2] + 1\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, {list1[i], 1})\n\t\tend\n\tend\n\treturn list2\nend",
    "    local count = {}\n    for _, list2 in ipairs(list1) do\n        local key = table.concat(list2, \",\")\n        count[key] = (count[key] or 0) + 1\n    end\n    local result = {}\n    for key, value in pairs(count) do\n        local list2 = {}\n        for number in key:gmatch(\"[^,]+\") do\n            list2[#list2 + 1] = tonumber(number)\n        end\n        result[#result + 1] = {list2, value}\n    end\n    return result\nend",
    "    local unique_sublists = {}\n    for i = 1, #list1 do\n        local sublist = list1[i]\n        local sublist_string = table.concat(sublist, \",\")\n        if unique_sublists[sublist_string] == nil then\n            unique_sublists[sublist_string] = 0\n        end\n        unique_sublists[sublist_string] = unique_sublists[sublist_string] + 1\n    end\n    return unique_sublists\nend",
    "\tlocal unique_sublists = {}\n\tfor _, sublist in ipairs(list1) do\n\t\tif type(sublist) == \"table\" then\n\t\t\tlocal sublist_string = table.concat(sublist, \",\")\n\t\t\tif unique_sublists[sublist_string] then\n\t\t\t\tunique_sublists[sublist_string] = unique_sublists[sublist_string] + 1\n\t\t\telse\n\t\t\t\tunique_sublists[sublist_string] = 1\n\t\t\tend\n\t\tend\n\tend\n\treturn unique_sublists\nend",
    "  local list2 = {}\n  for _, v in ipairs(list1) do\n    if type(v) == \"table\" then\n      local found = false\n      for _, v2 in ipairs(list2) do\n        if table.equal(v, v2) then\n          found = true\n          break\n        end\n      end\n      if not found then\n        table.insert(list2, v)\n      end\n    end\n  end\n  return list2\nend",
    "    local unique_sublists = {}\n    for i = 1, #list1 do\n        local sublist = list1[i]\n        if unique_sublists[sublist] == nil then\n            unique_sublists[sublist] = 1\n        else\n            unique_sublists[sublist] = unique_sublists[sublist] + 1\n        end\n    end\n    return unique_sublists\nend",
    "\tlocal list2 = {}\n\tfor i, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor j, w in ipairs(list2) do\n\t\t\tif v == w then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "  local unique_sublists = {}\n  for _,v in ipairs(list1) do\n    if type(v) == \"table\" then\n      local v_str = table.concat(v, \",\")\n      if unique_sublists[v_str] then\n        unique_sublists[v_str] = unique_sublists[v_str] + 1\n      else\n        unique_sublists[v_str] = 1\n      end\n    end\n  end\n  return unique_sublists\nend",
    "    local unique_sublists = {}\n    for _, list2 in ipairs(list1) do\n        local key = table.concat(list2, \",\")\n        unique_sublists[key] = (unique_sublists[key] or 0) + 1\n    end\n    return unique_sublists\nend",
    "\tlocal unique_sublists = {}\n\tfor i, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal found = false\n\t\t\tfor j, w in ipairs(unique_sublists) do\n\t\t\t\tif table.equals(v, w[1]) then\n\t\t\t\t\tw[2] = w[2] + 1\n\t\t\t\t\tfound = true\n\t\t\t\tend\n\t\t\tend\n\t\t\tif not found then\n\t\t\t\ttable.insert(unique_sublists, {v, 1})\n\t\t\tend\n\t\tend\n\tend\n\treturn unique_sublists\nend",
    "    local list2 = {}\n    for i, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local found = false\n            for j, w in ipairs(list2) do\n                if table_equal(v, w) then\n                    found = true\n                    break\n                end\n            end\n            if not found then\n                table.insert(list2, v)\n            end\n        end\n    end\n    return list2\nend",
    "    local unique_sublists = {}\n    for i = 1, #list1 do\n        local sublist = list1[i]\n        local sublist_str = table.concat(sublist, \",\")\n        if unique_sublists[sublist_str] == nil then\n            unique_sublists[sublist_str] = 1\n        else\n            unique_sublists[sublist_str] = unique_sublists[sublist_str] + 1\n        end\n    end\n    return unique_sublists\nend",
    "    local list2 = {}\n    for i, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local found = false\n            for j, w in ipairs(list2) do\n                if table.equal(v, w) then\n                    found = true\n                    break\n                end\n            end\n            if not found then\n                table.insert(list2, v)\n            end\n        end\n    end\n    return list2\nend",
    "\tlocal result = {}\n\tfor i=1,#list1 do\n\t\tlocal list2 = list1[i]\n\t\tlocal list2_str = table.concat(list2)\n\t\tif result[list2_str] == nil then\n\t\t\tresult[list2_str] = 1\n\t\telse\n\t\t\tresult[list2_str] = result[list2_str] + 1\n\t\tend\n\tend\n\treturn result\nend",
    "\tlocal list2 = {}\n\tfor i,v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor j,w in ipairs(list2) do\n\t\t\tif v == w then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "    local list2 = {}\n    for _, v in ipairs(list1) do\n        if not list2[v] then\n            list2[v] = 1\n        else\n            list2[v] = list2[v] + 1\n        end\n    end\n    return list2\nend",
    "    local list2 = {}\n    for i, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local key = table.concat(v, \",\")\n            if list2[key] == nil then\n                list2[key] = 1\n            else\n                list2[key] = list2[key] + 1\n            end\n        end\n    end\n    return list2\nend",
    "\tlocal list2 = {}\n\tfor i, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor j, w in ipairs(list2) do\n\t\t\tif v == w then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlocal result = {}\n\tfor _, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor _, v2 in ipairs(result) do\n\t\t\tif v == v2[1] then\n\t\t\t\tfound = true\n\t\t\t\tv2[2] = v2[2] + 1\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(result, {v, 1})\n\t\tend\n\tend\n\treturn result\nend",
    "\tlocal unique_sublists = {}\n\tfor _, sublist in ipairs(list1) do\n\t\tlocal sublist_key = table.concat(sublist, \",\")\n\t\tif not unique_sublists[sublist_key] then\n\t\t\tunique_sublists[sublist_key] = sublist\n\t\tend\n\tend\n\treturn unique_sublists\nend",
    "\tlocal list2 = {}\n\tfor i,v in ipairs(list1) do\n\t\tlocal count = 0\n\t\tfor j,w in ipairs(list1) do\n\t\t\tif v == w then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\tlist2[i] = {v, count}\n\tend\n\treturn list2\nend",
    "\tlocal list2 = {}\n\tfor i, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor j, w in ipairs(list2) do\n\t\t\tif table.equal(v, w) then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "    local result = {}\n    for _, v in ipairs(list1) do\n        local found = false\n        for _, v2 in ipairs(result) do\n            if v == v2 then\n                found = true\n                break\n            end\n        end\n        if not found then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "\tlocal list2 = {}\n\tfor i,v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal found = false\n\t\t\tfor j,w in ipairs(list2) do\n\t\t\t\tif table.equal(v, w) then\n\t\t\t\t\tfound = true\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif not found then\n\t\t\t\ttable.insert(list2, v)\n\t\t\tend\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlocal result = {}\n\tfor _, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor _, v2 in ipairs(result) do\n\t\t\tif v == v2[1] then\n\t\t\t\tv2[2] = v2[2] + 1\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(result, {v, 1})\n\t\tend\n\tend\n\treturn result\nend",
    "    local list2 = {}\n    for i, v in ipairs(list1) do\n        local found = false\n        for j, w in ipairs(list2) do\n            if v == w then\n                found = true\n                break\n            end\n        end\n        if not found then\n            table.insert(list2, v)\n        end\n    end\n    return list2\nend",
    "    local unique = {}\n    for i = 1, #list1 do\n        local found = false\n        for j = 1, #unique do\n            if list1[i] == unique[j] then\n                found = true\n                break\n            end\n        end\n        if not found then\n            unique[#unique + 1] = list1[i]\n        end\n    end\n    return unique\nend",
    "  local unique_sublists = {}\n  for _, sublist in ipairs(list1) do\n    local sublist_string = table.concat(sublist, \",\")\n    if unique_sublists[sublist_string] == nil then\n      unique_sublists[sublist_string] = 1\n    else\n      unique_sublists[sublist_string] = unique_sublists[sublist_string] + 1\n    end\n  end\n  return unique_sublists\nend",
    "    local count = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local key = table.concat(v, \",\")\n            count[key] = (count[key] or 0) + 1\n        end\n    end\n    local result = {}\n    for k, v in pairs(count) do\n        local sublist = {}\n        for x in string.gmatch(k, \"%d+\") do\n            table.insert(sublist, tonumber(x))\n        end\n        result[sublist] = v\n    end\n    return result\nend",
    "  local unique_sublists = {}\n  for _, sublist in ipairs(list1) do\n    local sublist_string = table.concat(sublist, \"\")\n    if unique_sublists[sublist_string] == nil then\n      unique_sublists[sublist_string] = 1\n    else\n      unique_sublists[sublist_string] = unique_sublists[sublist_string] + 1\n    end\n  end\n  return unique_sublists\nend",
    "    local unique_sublists = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local sublist = table.concat(v, \",\")\n            if not unique_sublists[sublist] then\n                unique_sublists[sublist] = 1\n            else\n                unique_sublists[sublist] = unique_sublists[sublist] + 1\n            end\n        end\n    end\n    return unique_sublists\nend",
    "    local unique_sublists = {}\n    for _, sublist in ipairs(list1) do\n        local sublist_string = table.concat(sublist, \",\")\n        if unique_sublists[sublist_string] == nil then\n            unique_sublists[sublist_string] = 1\n        else\n            unique_sublists[sublist_string] = unique_sublists[sublist_string] + 1\n        end\n    end\n    return unique_sublists\nend",
    "\tlocal unique_sublists = {}\n\tfor _, sublist in ipairs(list1) do\n\t\tlocal unique_sublist = {}\n\t\tfor _, value in ipairs(sublist) do\n\t\t\tunique_sublist[value] = true\n\t\tend\n\t\tunique_sublists[unique_sublist] = (unique_sublists[unique_sublist] or 0) + 1\n\tend\n\treturn unique_sublists\nend",
    "    local unique_list = {}\n    for i = 1, #list1 do\n        local list2 = list1[i]\n        local unique_list2 = {}\n        for j = 1, #list2 do\n            local value = list2[j]\n            unique_list2[value] = (unique_list2[value] or 0) + 1\n        end\n        unique_list[i] = unique_list2\n    end\n    return unique_list\nend",
    "    local unique_sublists = {}\n    for _, sublist in ipairs(list1) do\n        if not unique_sublists[sublist] then\n            unique_sublists[sublist] = 1\n        else\n            unique_sublists[sublist] = unique_sublists[sublist] + 1\n        end\n    end\n    return unique_sublists\nend",
    "\tlocal function count_table(list2)\n\t\tlocal count = 0\n\t\tfor i = 1, #list1 do\n\t\t\tif list1[i] == list2 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\treturn count\n\tend\n\tlocal function unique_sublists_rec(list)\n\t\tlocal new_list = {}\n\t\tfor i = 1, #list do\n\t\t\tif type(list[i]) == \"table\" then\n\t\t\t\tnew_list[i] = unique_sublists_rec(list[i])\n\t\t\telse\n\t\t\t\tnew_list[i] = count_table(list[i])\n\t\t\tend\n\t\tend\n\t\treturn new_list\n\tend\n\treturn unique_sublists_rec(list1)\nend",
    "    local list2 = {}\n    for i, v in ipairs(list1) do\n        local found = false\n        for j, w in ipairs(list2) do\n            if v == w then\n                found = true\n                break\n            end\n        end\n        if not found then\n            list2[#list2 + 1] = v\n        end\n    end\n    return list2\nend",
    "    local unique_sublists = {}\n    for _, sublist in ipairs(list1) do\n        local unique_sublist = {}\n        for _, element in ipairs(sublist) do\n            unique_sublist[element] = true\n        end\n        unique_sublists[#unique_sublists + 1] = unique_sublist\n    end\n    return unique_sublists\nend",
    "\tlocal unique_sublists = {}\n\tfor i = 1, #list1 do\n\t\tlocal sublist = list1[i]\n\t\tif unique_sublists[sublist] == nil then\n\t\t\tunique_sublists[sublist] = 1\n\t\telse\n\t\t\tunique_sublists[sublist] = unique_sublists[sublist] + 1\n\t\tend\n\tend\n\treturn unique_sublists\nend",
    "    local unique = {}\n    for _, list2 in ipairs(list1) do\n        local found = false\n        for _, list3 in ipairs(unique) do\n            if #list2 == #list3 then\n                local equal = true\n                for i = 1, #list2 do\n                    if list2[i] ~= list3[i] then\n                        equal = false\n                        break\n                    end\n                end\n                if equal then\n                    found = true\n                    break\n                end\n            end\n        end\n        if not found then\n            table.insert(unique, list2)\n        end\n    end\n    return unique\nend",
    "    local unique = {}\n    for _, list2 in ipairs(list1) do\n        local key = table.concat(list2, \",\")\n        unique[key] = (unique[key] or 0) + 1\n    end\n    return unique\nend",
    "\tlocal count = {}\n\tfor i, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal sublist = {}\n\t\t\tfor j, w in ipairs(v) do\n\t\t\t\tsublist[j] = w\n\t\t\tend\n\t\t\ttable.sort(sublist)\n\t\t\tlocal sublist_str = table.concat(sublist, \",\")\n\t\t\tif count[sublist_str] == nil then\n\t\t\t\tcount[sublist_str] = 1\n\t\t\telse\n\t\t\t\tcount[sublist_str] = count[sublist_str] + 1\n\t\t\tend\n\t\tend\n\tend\n\tlocal result = {}\n\tfor k, v in pairs(count) do\n\t\tlocal sublist = {}\n\t\tfor w in string.gmatch(k, \"%d+\") do\n\t\t\ttable.insert(sublist, tonumber(w))\n\t\tend\n\t\tresult[k] = v\n\tend\n\treturn result\nend",
    "  local list2 = {}\n  for _, v in ipairs(list1) do\n    if type(v) == \"table\" then\n      local t = {}\n      for _, v2 in ipairs(v) do\n        t[v2] = true\n      end\n      list2[t] = (list2[t] or 0) + 1\n    end\n  end\n  return list2\nend",
    "\tlocal list2 = {}\n\tfor _, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor _, v2 in ipairs(list2) do\n\t\t\tif v == v2 then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tlocal sublist = list1[i]\n\t\tif type(sublist) == \"table\" then\n\t\t\tlocal found = false\n\t\t\tfor j = 1, #result do\n\t\t\t\tif table_equals(result[j][1], sublist) then\n\t\t\t\t\tresult[j][2] = result[j][2] + 1\n\t\t\t\t\tfound = true\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif not found then\n\t\t\t\ttable.insert(result, {sublist, 1})\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend",
    "\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tlocal sublist = list1[i]\n\t\tlocal sublist_str = table.concat(sublist, \",\")\n\t\tif not result[sublist_str] then\n\t\t\tresult[sublist_str] = {sublist, 1}\n\t\telse\n\t\t\tresult[sublist_str][2] = result[sublist_str][2] + 1\n\t\tend\n\tend\n\treturn result\nend",
    "    local unique_sublists = {}\n    for _, sublist in ipairs(list1) do\n        local sublist_string = table.concat(sublist, \",\")\n        unique_sublists[sublist_string] = (unique_sublists[sublist_string] or 0) + 1\n    end\n    return unique_sublists\nend",
    "    local list2 = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local key = table.concat(v, \",\")\n            if list2[key] then\n                list2[key] = list2[key] + 1\n            else\n                list2[key] = 1\n            end\n        end\n    end\n    return list2\nend",
    "    local list2 = {}\n    for i, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local found = false\n            for j, w in ipairs(list2) do\n                if table.equal(v, w) then\n                    found = true\n                    break\n                end\n            end\n            if not found then\n                table.insert(list2, v)\n            end\n        end\n    end\n    return list2\nend",
    "\tlocal count = {}\n\tfor _, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal t = table.concat(v, \",\")\n\t\t\tif count[t] then\n\t\t\t\tcount[t] = count[t] + 1\n\t\t\telse\n\t\t\t\tcount[t] = 1\n\t\t\tend\n\t\tend\n\tend\n\tlocal result = {}\n\tfor k, v in pairs(count) do\n\t\tlocal t = {}\n\t\tfor w in string.gmatch(k, \"%d+\") do\n\t\t\ttable.insert(t, tonumber(w))\n\t\tend\n\t\ttable.insert(result, t)\n\t\ttable.insert(result, v)\n\tend\n\treturn result\nend",
    "\tlocal count = {}\n\tfor _, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal key = table.concat(v, \",\")\n\t\t\tcount[key] = (count[key] or 0) + 1\n\t\tend\n\tend\n\tlocal result = {}\n\tfor key, value in pairs(count) do\n\t\tlocal t = {}\n\t\tfor i in string.gmatch(key, \"%d+\") do\n\t\t\ttable.insert(t, tonumber(i))\n\t\tend\n\t\ttable.insert(result, {t, value})\n\tend\n\treturn result\nend",
    "\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tlocal found = false\n\t\tfor j = 1, #result do\n\t\t\tif table_equal(list1[i], result[j][1]) then\n\t\t\t\tresult[j][2] = result[j][2] + 1\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\tresult[#result + 1] = {list1[i], 1}\n\t\tend\n\tend\n\treturn result\nend",
    "    local list2 = {}\n    for i, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local found = false\n            for j, w in ipairs(list2) do\n                if table.equal(v, w) then\n                    found = true\n                    break\n                end\n            end\n            if not found then\n                table.insert(list2, v)\n            end\n        end\n    end\n    return list2\nend",
    "\tlocal list2 = {}\n\tfor i = 1, #list1 do\n\t\tlocal list3 = {}\n\t\tfor j = 1, #list1[i] do\n\t\t\tlist3[j] = list1[i][j]\n\t\tend\n\t\ttable.sort(list3)\n\t\tlocal list4 = {}\n\t\tfor j = 1, #list3 do\n\t\t\tlist4[j] = list3[j]\n\t\tend\n\t\ttable.insert(list2, list4)\n\tend\n\tlocal list3 = {}\n\tfor i = 1, #list2 do\n\t\tlocal list4 = {}\n\t\tfor j = 1, #list2[i] do\n\t\t\tlist4[j] = list2[i][j]\n\t\tend\n\t\ttable.sort(list4)\n\t\tlocal list5 = {}\n\t\tfor j = 1, #list4 do\n\t\t\tlist5[j] = list4[j]\n\t\tend\n\t\ttable.insert(list3, list5)\n\tend\n\tlocal list4 = {}\n\tfor i = 1, #list3 do\n\t\tlocal list5 = {}\n\t\tfor j = 1, #list3[i] do\n\t\t\tlist5[j] = list3[i][j]\n\t\tend\n\t\ttable.sort(list5)\n\t\tlocal list6 = {}\n\t\tfor j = 1, #list5 do\n\t\t\tlist6[j] = list5[j]\n\t\tend\n\t\ttable.insert(list4, list6)\n\tend\n\tlocal list5 = {}\n\tfor i = 1, #list4 do\n\t\tlocal list6 = {}\n\t\tfor j = 1, #list4[i] do\n\t\t\tlist6[j] = list4[i][j]\n\t\tend\n\t\ttable.sort(list6)\n\t\tlocal list7 = {}\n\t\tfor j = 1, #list6 do\n\t\t\tlist7[j] = list6[j]\n\t\tend\n\t\ttable.insert(list5, list7)\n\tend\n\tlocal list",
    "\tlocal list2 = {}\n\tfor i, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor j, w in ipairs(list2) do\n\t\t\tif v == w then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlocal list2 = {}\n\tfor i,v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor j,w in ipairs(list2) do\n\t\t\tif v == w then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "  local unique_sublists = {}\n  for i = 1, #list1 do\n    local sublist = list1[i]\n    if type(sublist) == \"table\" then\n      local sublist_str = table.concat(sublist, \",\")\n      if unique_sublists[sublist_str] == nil then\n        unique_sublists[sublist_str] = 1\n      else\n        unique_sublists[sublist_str] = unique_sublists[sublist_str] + 1\n      end\n    end\n  end\n  return unique_sublists\nend",
    "\tlocal result = {}\n\tfor i = 1, #list1 do\n\t\tlocal sublist = list1[i]\n\t\tlocal found = false\n\t\tfor j = 1, #result do\n\t\t\tif table.equal(sublist, result[j][1]) then\n\t\t\t\tresult[j][2] = result[j][2] + 1\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(result, {sublist, 1})\n\t\tend\n\tend\n\treturn result\nend",
    "\tlocal list2 = {}\n\tfor i,v in ipairs(list1) do\n\t\tlocal count = 0\n\t\tfor j,w in ipairs(list1) do\n\t\t\tif v == w then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\tlist2[i] = {v, count}\n\tend\n\treturn list2\nend",
    "    local count = {}\n    for i = 1, #list1 do\n        local list2 = list1[i]\n        if not count[list2] then\n            count[list2] = 0\n        end\n        count[list2] = count[list2] + 1\n    end\n    return count\nend",
    "  local list2 = {}\n  for _,v in ipairs(list1) do\n    local found = false\n    for _,v2 in ipairs(list2) do\n      if table.equal(v, v2) then\n        found = true\n        break\n      end\n    end\n    if not found then\n      table.insert(list2, v)\n    end\n  end\n  return list2\nend",
    "    local result = {}\n    for i, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local found = false\n            for j, w in ipairs(result) do\n                if table.equal(v, w[1]) then\n                    found = true\n                    w[2] = w[2] + 1\n                    break\n                end\n            end\n            if not found then\n                table.insert(result, {v, 1})\n            end\n        end\n    end\n    return result\nend",
    "\tlocal list2 = {}\n\tfor i = 1, #list1 do\n\t\tlocal found = false\n\t\tfor j = 1, #list2 do\n\t\t\tif table_equal(list1[i], list2[j][1]) then\n\t\t\t\tlist2[j][2] = list2[j][2] + 1\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\tlist2[#list2 + 1] = {list1[i], 1}\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlocal count = {}\n\tfor _, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal key = table.concat(v, \",\")\n\t\t\tif count[key] == nil then\n\t\t\t\tcount[key] = 1\n\t\t\telse\n\t\t\t\tcount[key] = count[key] + 1\n\t\t\tend\n\t\tend\n\tend\n\tlocal result = {}\n\tfor k, v in pairs(count) do\n\t\tlocal t = {}\n\t\tfor w in string.gmatch(k, \"%S+\") do\n\t\t\ttable.insert(t, tonumber(w))\n\t\tend\n\t\ttable.insert(result, {t, v})\n\tend\n\treturn result\nend",
    "\tlocal unique_sublists = {}\n\tfor _, sublist in ipairs(list1) do\n\t\tif type(sublist) == \"table\" then\n\t\t\tlocal sublist_string = table.concat(sublist, \",\")\n\t\t\tif not unique_sublists[sublist_string] then\n\t\t\t\tunique_sublists[sublist_string] = 0\n\t\t\tend\n\t\t\tunique_sublists[sublist_string] = unique_sublists[sublist_string] + 1\n\t\tend\n\tend\n\treturn unique_sublists\nend",
    "\tlocal list2 = {}\n\tfor i, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor j, w in ipairs(list2) do\n\t\t\tif v == w then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "    local list2 = {}\n    for i, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local found = false\n            for j, w in ipairs(list2) do\n                if table.equal(v, w) then\n                    found = true\n                    break\n                end\n            end\n            if not found then\n                table.insert(list2, v)\n            end\n        end\n    end\n    return list2\nend",
    "\tlocal list2 = {}\n\tfor i, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal found = false\n\t\t\tfor j, w in ipairs(list2) do\n\t\t\t\tif table.equal(v, w) then\n\t\t\t\t\tfound = true\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif not found then\n\t\t\t\ttable.insert(list2, v)\n\t\t\tend\n\t\tend\n\tend\n\treturn list2\nend",
    "    local unique = {}\n    for _, list2 in ipairs(list1) do\n        local key = table.concat(list2, \",\")\n        unique[key] = (unique[key] or 0) + 1\n    end\n    return unique\nend",
    "\tlocal list2 = {}\n\tfor i, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor j, w in ipairs(list2) do\n\t\t\tif v == w then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "    local res = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local key = table.concat(v, \",\")\n            res[key] = (res[key] or 0) + 1\n        end\n    end\n    return res\nend",
    "    local count = {}\n    for i = 1, #list1 do\n        local list2 = list1[i]\n        local list2_str = table.concat(list2, ',')\n        if count[list2_str] then\n            count[list2_str] = count[list2_str] + 1\n        else\n            count[list2_str] = 1\n        end\n    end\n    local result = {}\n    for list2_str, count in pairs(count) do\n        local list2 = {}\n        for i in list2_str:gmatch('([^,]+)') do\n            list2[#list2 + 1] = tonumber(i)\n        end\n        result[#result + 1] = {list2, count}\n    end\n    return result\nend",
    "    local unique_sublists = {}\n    for _, sublist in ipairs(list1) do\n        if not unique_sublists[sublist] then\n            unique_sublists[sublist] = 1\n        else\n            unique_sublists[sublist] = unique_sublists[sublist] + 1\n        end\n    end\n    return unique_sublists\nend",
    "    local unique_sublists = {}\n    for _, sublist in ipairs(list1) do\n        local sublist_string = table.concat(sublist, \",\")\n        unique_sublists[sublist_string] = (unique_sublists[sublist_string] or 0) + 1\n    end\n    return unique_sublists\nend",
    "    local unique = {}\n    for i = 1, #list1 do\n        local list2 = list1[i]\n        local key = table.concat(list2, \",\")\n        if unique[key] == nil then\n            unique[key] = 1\n        else\n            unique[key] = unique[key] + 1\n        end\n    end\n    return unique\nend",
    "    local result = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local sublist = {}\n            for _, v2 in ipairs(v) do\n                sublist[v2] = true\n            end\n            local sublist_str = table.concat(table.keys(sublist), \",\")\n            if not result[sublist_str] then\n                result[sublist_str] = 0\n            end\n            result[sublist_str] = result[sublist_str] + 1\n        end\n    end\n    return result\nend",
    "    local list2 = {}\n    for i = 1, #list1 do\n        local found = false\n        for j = 1, #list2 do\n            if table.compare(list1[i], list2[j][1]) then\n                list2[j][2] = list2[j][2] + 1\n                found = true\n                break\n            end\n        end\n        if not found then\n            table.insert(list2, {list1[i], 1})\n        end\n    end\n    return list2\nend",
    "\tlocal list2 = {}\n\tfor _, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal key = table.concat(v, \",\")\n\t\t\tif list2[key] then\n\t\t\t\tlist2[key] = list2[key] + 1\n\t\t\telse\n\t\t\t\tlist2[key] = 1\n\t\t\tend\n\t\tend\n\tend\n\treturn list2\nend",
    "    local unique_sublists = {}\n    for _, sublist in ipairs(list1) do\n        local sublist_string = table.concat(sublist, \",\")\n        if unique_sublists[sublist_string] == nil then\n            unique_sublists[sublist_string] = 1\n        else\n            unique_sublists[sublist_string] = unique_sublists[sublist_string] + 1\n        end\n    end\n    return unique_sublists\nend",
    "    local unique = {}\n    for _, v in ipairs(list1) do\n        local found = false\n        for _, u in ipairs(unique) do\n            if table.equals(v, u) then\n                found = true\n                break\n            end\n        end\n        if not found then\n            table.insert(unique, v)\n        end\n    end\n    return unique\nend",
    "\tlocal count = {}\n\tfor i = 1, #list1 do\n\t\tlocal sublist = list1[i]\n\t\tif count[sublist] == nil then\n\t\t\tcount[sublist] = 1\n\t\telse\n\t\t\tcount[sublist] = count[sublist] + 1\n\t\tend\n\tend\n\treturn count\nend",
    "\tlocal result = {}\n\tfor _, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor _, v2 in ipairs(result) do\n\t\t\tif v == v2[1] then\n\t\t\t\tv2[2] = v2[2] + 1\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(result, {v, 1})\n\t\tend\n\tend\n\treturn result\nend",
    "\tlocal list2 = {}\n\tfor i = 1, #list1 do\n\t\tlocal list = list1[i]\n\t\tlocal list_key = table.concat(list, \",\")\n\t\tif not list2[list_key] then\n\t\t\tlist2[list_key] = 1\n\t\telse\n\t\t\tlist2[list_key] = list2[list_key] + 1\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlocal list2 = {}\n\tfor i, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor j, w in ipairs(list2) do\n\t\t\tif v == w then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "    local unique = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local key = table.concat(v, \",\")\n            if unique[key] == nil then\n                unique[key] = 1\n            else\n                unique[key] = unique[key] + 1\n            end\n        end\n    end\n    return unique\nend",
    "    local unique_sublists = {}\n    for i = 1, #list1 do\n        local sublist = list1[i]\n        if unique_sublists[sublist] == nil then\n            unique_sublists[sublist] = 1\n        else\n            unique_sublists[sublist] = unique_sublists[sublist] + 1\n        end\n    end\n    return unique_sublists\nend",
    "\tlocal list2 = {}\n\tfor _, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal key = table.concat(v, \",\")\n\t\t\tif list2[key] then\n\t\t\t\tlist2[key] = list2[key] + 1\n\t\t\telse\n\t\t\t\tlist2[key] = 1\n\t\t\tend\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlocal result = {}\n\tfor i,v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal found = false\n\t\t\tfor j,w in ipairs(result) do\n\t\t\t\tif table.equal(v, w[1]) then\n\t\t\t\t\tw[2] = w[2] + 1\n\t\t\t\t\tfound = true\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif not found then\n\t\t\t\ttable.insert(result, {v, 1})\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend",
    "    local unique = {}\n    for _, list2 in ipairs(list1) do\n        local key = table.concat(list2, ',')\n        if unique[key] == nil then\n            unique[key] = 1\n        else\n            unique[key] = unique[key] + 1\n        end\n    end\n    return unique\nend",
    "    local unique_sublists = {}\n    for _, sublist in ipairs(list1) do\n        local sublist_string = table.concat(sublist, \",\")\n        if unique_sublists[sublist_string] == nil then\n            unique_sublists[sublist_string] = 1\n        else\n            unique_sublists[sublist_string] = unique_sublists[sublist_string] + 1\n        end\n    end\n    return unique_sublists\nend",
    "\tlocal list2 = {}\n\tfor i, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor j, w in ipairs(list2) do\n\t\t\tif v == w then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "  local unique_sublists = {}\n  for _, sublist in ipairs(list1) do\n    local sublist_key = table.concat(sublist, \",\")\n    if unique_sublists[sublist_key] == nil then\n      unique_sublists[sublist_key] = 1\n    else\n      unique_sublists[sublist_key] = unique_sublists[sublist_key] + 1\n    end\n  end\n  return unique_sublists\nend",
    "  local list2 = {}\n  for i, v in ipairs(list1) do\n    if type(v) == \"table\" then\n      local found = false\n      for j, w in ipairs(list2) do\n        if type(w) == \"table\" and table.equal(v, w) then\n          found = true\n          break\n        end\n      end\n      if not found then\n        table.insert(list2, v)\n      end\n    end\n  end\n  return list2\nend",
    "    local count = {}\n    for i, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local key = table.concat(v, \",\")\n            count[key] = (count[key] or 0) + 1\n        end\n    end\n    local result = {}\n    for k, v in pairs(count) do\n        local sublist = {}\n        for w in string.gmatch(k, \"%S+\") do\n            table.insert(sublist, tonumber(w))\n        end\n        result[sublist] = v\n    end\n    return result\nend",
    "\tlocal list2 = {}\n\tfor i, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor j, w in ipairs(list2) do\n\t\t\tif v == w then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "    local count = {}\n    for i, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local key = table.concat(v, \",\")\n            if count[key] == nil then\n                count[key] = 1\n            else\n                count[key] = count[key] + 1\n            end\n        end\n    end\n    return count\nend",
    "    local res = {}\n    for i = 1, #list1 do\n        local sublist = list1[i]\n        local found = false\n        for j = 1, #res do\n            if table.equals(sublist, res[j][1]) then\n                res[j][2] = res[j][2] + 1\n                found = true\n                break\n            end\n        end\n        if not found then\n            table.insert(res, {sublist, 1})\n        end\n    end\n    return res\nend",
    "\tlocal count = {}\n\tfor _, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal str = table.concat(v, \",\")\n\t\t\tcount[str] = (count[str] or 0) + 1\n\t\tend\n\tend\n\tlocal result = {}\n\tfor k, v in pairs(count) do\n\t\tlocal t = {}\n\t\tfor w in string.gmatch(k, \"%S+\") do\n\t\t\ttable.insert(t, w)\n\t\tend\n\t\tresult[t] = v\n\tend\n\treturn result\nend",
    "\tlocal unique = {}\n\tfor _, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal found = false\n\t\t\tfor _, v2 in ipairs(unique) do\n\t\t\t\tif table.equal(v, v2) then\n\t\t\t\t\tfound = true\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tif not found then\n\t\t\t\ttable.insert(unique, v)\n\t\t\tend\n\t\tend\n\tend\n\treturn unique\nend",
    "  local list2 = {}\n  for _, v in ipairs(list1) do\n    local found = false\n    for _, v2 in ipairs(list2) do\n      if table.equal(v, v2) then\n        found = true\n        break\n      end\n    end\n    if not found then\n      table.insert(list2, v)\n    end\n  end\n  return list2\nend"
  ]
}