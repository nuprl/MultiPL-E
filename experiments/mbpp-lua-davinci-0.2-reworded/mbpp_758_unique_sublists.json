{
  "name": "mbpp_758_unique_sublists",
  "language": "lua",
  "prompt": "-- Write a function to count tables within a table. The function should return a table where every table is converted to a table and the value of such table is the number of its occurencies in the original table.\nlocal function unique_sublists(list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_758_unique_sublists.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_sublists\n    lu.assertEquals(candidate({{1, 3}, {5, 7}, {1, 3}, {13, 15, 17}, {5, 7}, {9, 11}}), {[{1, 3}] = 2, [{5, 7}] = 2, [{13, 15, 17}] = 1, [{9, 11}] = 1})\n    lu.assertEquals(candidate({{'green', 'orange'}, {'black'}, {'green', 'orange'}, {'white'}}), {[{'green', 'orange'}] = 2, [{'black'}] = 1, [{'white'}] = 1})\n    lu.assertEquals(candidate({{10, 20, 30, 40}, {60, 70, 50, 50}, {90, 100, 200}}), {[{10, 20, 30, 40}] = 1, [{60, 70, 50, 50}] = 1, [{90, 100, 200}] = 1})\n    lu.assertEquals(candidate({{'john'}}), {[{'john'}] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local unique_sublists = {}\n    for _, sublist in ipairs(list1) do\n        local sublist_str = table.concat(sublist, ',')\n        if not unique_sublists[sublist_str] then\n            unique_sublists[sublist_str] = 1\n        else\n            unique_sublists[sublist_str] = unique_sublists[sublist_str] + 1\n        end\n    end\n    return unique_sublists\nend",
    "\tlocal list2 = {}\n\tfor _, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor _, v2 in ipairs(list2) do\n\t\t\tif v == v2 then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "  local unique_sublists = {}\n  for i = 1, #list1 do\n    local sublist = list1[i]\n    local sublist_key = table.concat(sublist, \",\")\n    if unique_sublists[sublist_key] == nil then\n      unique_sublists[sublist_key] = 1\n    else\n      unique_sublists[sublist_key] = unique_sublists[sublist_key] + 1\n    end\n  end\n  return unique_sublists\nend",
    "    local unique_sublists = {}\n    for _, list2 in ipairs(list1) do\n        local found = false\n        for _, list3 in ipairs(unique_sublists) do\n            if #list2 == #list3 then\n                local equal = true\n                for i = 1, #list2 do\n                    if list2[i] ~= list3[i] then\n                        equal = false\n                        break\n                    end\n                end\n                if equal then\n                    found = true\n                    break\n                end\n            end\n        end\n        if not found then\n            table.insert(unique_sublists, list2)\n        end\n    end\n    return unique_sublists\nend",
    "    local unique_sublists = {}\n    for _, sublist in ipairs(list1) do\n        local sublist_str = table.concat(sublist, \",\")\n        if not unique_sublists[sublist_str] then\n            unique_sublists[sublist_str] = {sublist, 1}\n        else\n            unique_sublists[sublist_str][2] = unique_sublists[sublist_str][2] + 1\n        end\n    end\n    return unique_sublists\nend",
    "\tlocal list2 = {}\n\tfor i = 1, #list1 do\n\t\tlocal found = false\n\t\tfor j = 1, #list2 do\n\t\t\tif table.equal(list1[i], list2[j][1]) then\n\t\t\t\tlist2[j][2] = list2[j][2] + 1\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, {list1[i], 1})\n\t\tend\n\tend\n\treturn list2\nend",
    "\tlocal result = {}\n\tfor _, list2 in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor _, list3 in ipairs(result) do\n\t\t\tif table.equals(list2, list3) then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(result, list2)\n\t\tend\n\tend\n\treturn result\nend",
    "    local unique_sublists = {}\n    for _, sublist in ipairs(list1) do\n        local sublist_str = table.concat(sublist, \",\")\n        if unique_sublists[sublist_str] == nil then\n            unique_sublists[sublist_str] = 1\n        else\n            unique_sublists[sublist_str] = unique_sublists[sublist_str] + 1\n        end\n    end\n    return unique_sublists\nend",
    "    local result = {}\n    for i = 1, #list1 do\n        local sublist = list1[i]\n        local sublist_str = table.concat(sublist, \",\")\n        if result[sublist_str] == nil then\n            result[sublist_str] = 1\n        else\n            result[sublist_str] = result[sublist_str] + 1\n        end\n    end\n    return result\nend",
    "\tlocal list2 = {}\n\tfor i,v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor j,w in ipairs(list2) do\n\t\t\tif v == w then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(list2, v)\n\t\tend\n\tend\n\treturn list2\nend",
    "    local list2 = {}\n    for _, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local found = false\n            for _, v2 in ipairs(list2) do\n                if v2[1] == v then\n                    v2[2] = v2[2] + 1\n                    found = true\n                    break\n                end\n            end\n            if not found then\n                table.insert(list2, {v, 1})\n            end\n        end\n    end\n    return list2\nend",
    "    local unique_sublists = {}\n    for i, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local sublist = {}\n            for j, w in ipairs(v) do\n                sublist[j] = w\n            end\n            table.sort(sublist)\n            local sublist_key = table.concat(sublist, \",\")\n            if unique_sublists[sublist_key] == nil then\n                unique_sublists[sublist_key] = 1\n            else\n                unique_sublists[sublist_key] = unique_sublists[sublist_key] + 1\n            end\n        end\n    end\n    return unique_sublists\nend",
    "\tlocal result = {}\n\tfor _, v in ipairs(list1) do\n\t\tlocal found = false\n\t\tfor _, v2 in ipairs(result) do\n\t\t\tif table.equals(v, v2) then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not found then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\treturn result\nend",
    "  local unique_sublists = {}\n  for _, sublist in ipairs(list1) do\n    local sublist_str = table.concat(sublist, \",\")\n    unique_sublists[sublist_str] = (unique_sublists[sublist_str] or 0) + 1\n  end\n  return unique_sublists\nend",
    "  local result = {}\n  for _, v in ipairs(list1) do\n    if type(v) == \"table\" then\n      local key = table.concat(v, \",\")\n      result[key] = (result[key] or 0) + 1\n    end\n  end\n  return result\nend",
    "    local unique_sublists = {}\n    for _, sublist in ipairs(list1) do\n        local sublist_string = table.concat(sublist, ',')\n        if not unique_sublists[sublist_string] then\n            unique_sublists[sublist_string] = 0\n        end\n        unique_sublists[sublist_string] = unique_sublists[sublist_string] + 1\n    end\n    return unique_sublists\nend",
    "\tlocal count = {}\n\tfor i, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal key = table.concat(v, \",\")\n\t\t\tif count[key] == nil then\n\t\t\t\tcount[key] = 0\n\t\t\tend\n\t\t\tcount[key] = count[key] + 1\n\t\tend\n\tend\n\tlocal result = {}\n\tfor k, v in pairs(count) do\n\t\tlocal key = {}\n\t\tfor i in string.gmatch(k, \"%d+\") do\n\t\t\ttable.insert(key, tonumber(i))\n\t\tend\n\t\tresult[key] = v\n\tend\n\treturn result\nend",
    "\tlocal result = {}\n\tfor _, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal key = table.concat(v, \",\")\n\t\t\tif result[key] == nil then\n\t\t\t\tresult[key] = 1\n\t\t\telse\n\t\t\t\tresult[key] = result[key] + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend",
    "\tlocal count = {}\n\tfor i, v in ipairs(list1) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal key = table.concat(v, \",\")\n\t\t\tif count[key] == nil then\n\t\t\t\tcount[key] = 1\n\t\t\telse\n\t\t\t\tcount[key] = count[key] + 1\n\t\t\tend\n\t\tend\n\tend\n\tlocal result = {}\n\tfor k, v in pairs(count) do\n\t\tlocal t = {}\n\t\tfor i in string.gmatch(k, \"%d+\") do\n\t\t\ttable.insert(t, tonumber(i))\n\t\tend\n\t\ttable.insert(result, t)\n\t\ttable.insert(result, v)\n\tend\n\treturn result\nend",
    "    local result = {}\n    for i, v in ipairs(list1) do\n        if type(v) == \"table\" then\n            local found = false\n            for j, w in ipairs(result) do\n                if table_equal(v, w[1]) then\n                    result[j][2] = result[j][2] + 1\n                    found = true\n                    break\n                end\n            end\n            if not found then\n                table.insert(result, {v, 1})\n            end\n        end\n    end\n    return result\nend"
  ]
}