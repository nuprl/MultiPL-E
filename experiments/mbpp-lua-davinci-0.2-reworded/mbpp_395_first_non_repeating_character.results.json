{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "lua",
  "prompt": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local chars = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if chars[char] then\n            chars[char] = chars[char] + 1\n        else\n            chars[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if chars[char] == 1 then\n            return char\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_count = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] then\n      char_count[char] = char_count[char] + 1\n    else\n      char_count[char] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        count[str1:sub(i,i)] = (count[str1:sub(i,i)] or 0) + 1\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i,i)] == 1 then\n            return str1:sub(i,i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local chars = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if not chars[c] then\n            chars[c] = 1\n        else\n            chars[c] = chars[c] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if chars[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_count = {}\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if char_count[c] == nil then\n      char_count[c] = 1\n    else\n      char_count[c] = char_count[c] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if char_count[c] == 1 then\n      return c\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_count = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i,i)\n    if char_count[char] then\n      char_count[char] = char_count[char] + 1\n    else\n      char_count[char] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i,i)\n    if char_count[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local str2 = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if not str2[c] then\n            str2[c] = 1\n        else\n            str2[c] = str2[c] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if str2[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local chars = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if chars[c] then\n            chars[c] = chars[c] + 1\n        else\n            chars[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if chars[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_count = {}\n  local index = {}\n  local i = 1\n  for c in str1:gmatch\".\" do\n    if char_count[c] == nil then\n      char_count[c] = 1\n      index[c] = i\n    else\n      char_count[c] = char_count[c] + 1\n    end\n    i = i + 1\n  end\n  local min_index = math.huge\n  local result\n  for c, count in pairs(char_count) do\n    if count == 1 and index[c] < min_index then\n      min_index = index[c]\n      result = c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local chars = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if not chars[c] then\n            chars[c] = {count = 1, index = i}\n        else\n            chars[c].count = chars[c].count + 1\n        end\n    end\n    local result = nil\n    for k, v in pairs(chars) do\n        if v.count == 1 and (not result or v.index < result.index) then\n            result = v\n        end\n    end\n    return result and str1:sub(result.index, result.index) or nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local chars = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if not chars[c] then\n            chars[c] = 1\n        else\n            chars[c] = chars[c] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if chars[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] then\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        else\n            char_count[str1:sub(i, i)] = 1\n        end\n    end\n    for k, v in pairs(char_count) do\n        if v == 1 then\n            return k\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local chars = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if not chars[char] then\n            chars[char] = 1\n        else\n            chars[char] = chars[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if chars[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local str_table = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if str_table[char] then\n      str_table[char] = str_table[char] + 1\n    else\n      str_table[char] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if str_table[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local chars = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if not chars[char] then\n      chars[char] = 1\n    else\n      chars[char] = chars[char] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if chars[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n\tlocal char_count = {}\n\tlocal first_char = nil\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif char_count[char] == nil then\n\t\t\tchar_count[char] = 1\n\t\telse\n\t\t\tchar_count[char] = char_count[char] + 1\n\t\tend\n\tend\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif char_count[char] == 1 then\n\t\t\tfirst_char = char\n\t\t\tbreak\n\t\tend\n\tend\n\treturn first_char\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local str2 = {}\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if not str2[c] then\n      str2[c] = 1\n    else\n      str2[c] = str2[c] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if str2[c] == 1 then\n      return c\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i,i)] == nil then\n            count[str1:sub(i,i)] = 1\n        else\n            count[str1:sub(i,i)] = count[str1:sub(i,i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i,i)] == 1 then\n            return str1:sub(i,i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_f1_kygt.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i,i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i,i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] then\n            count[char] = count[char] + 1\n        else\n            count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] then\n            count[c] = count[c] + 1\n        else\n            count[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local count = {}\n  for i = 1, #str1 do\n    if count[str1:sub(i, i)] then\n      count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n    else\n      count[str1:sub(i, i)] = 1\n    end\n  end\n  for i = 1, #str1 do\n    if count[str1:sub(i, i)] == 1 then\n      return str1:sub(i, i)\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, string.len(str1) do\n        if count[string.sub(str1, i, i)] == nil then\n            count[string.sub(str1, i, i)] = 1\n        else\n            count[string.sub(str1, i, i)] = count[string.sub(str1, i, i)] + 1\n        end\n    end\n    for i = 1, string.len(str1) do\n        if count[string.sub(str1, i, i)] == 1 then\n            return string.sub(str1, i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_f1_kygt.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] then\n            count[c] = count[c] + 1\n        else\n            count[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i,i)\n        if count[c] then\n            count[c] = count[c] + 1\n        else\n            count[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i,i)\n        if count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] then\n            count[char] = count[char] + 1\n        else\n            count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local letters = {}\n  local count = 0\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if letters[char] == nil then\n      letters[char] = 1\n    else\n      letters[char] = letters[char] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if letters[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n\tlocal chars = {}\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif chars[char] then\n\t\t\tchars[char] = chars[char] + 1\n\t\telse\n\t\t\tchars[char] = 1\n\t\tend\n\tend\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif chars[char] == 1 then\n\t\t\treturn char\n\t\tend\n\tend\n\treturn nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_count = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] then\n      char_count[char] = char_count[char] + 1\n    else\n      char_count[char] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] then\n            count[c] = count[c] + 1\n        else\n            count[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_count = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i,i)\n    if char_count[char] then\n      char_count[char] = char_count[char] + 1\n    else\n      char_count[char] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i,i)\n    if char_count[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    local index = {}\n    local result = {}\n    local i = 1\n    local j = 1\n    local k = 1\n    while i <= #str1 do\n        if count[str1:sub(i, i)] == nil then\n            count[str1:sub(i, i)] = 1\n            index[str1:sub(i, i)] = i\n        else\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        end\n        i = i + 1\n    end\n    for key, value in pairs(count) do\n        if value == 1 then\n            result[j] = key\n            j = j + 1\n        end\n    end\n    local min = index[result[1]]\n    local min_index = 1\n    while k < #result do\n        if index[result[k]] < min then\n            min = index[result[k]]\n            min_index = k\n        end\n        k = k + 1\n    end\n    return result[min_index]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_count = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i,i)\n    if char_count[char] then\n      char_count[char] = char_count[char] + 1\n    else\n      char_count[char] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i,i)\n    if char_count[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local chars = {}\n  local first_non_repeating_character = nil\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if chars[char] == nil then\n      chars[char] = 1\n    else\n      chars[char] = chars[char] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if chars[char] == 1 then\n      first_non_repeating_character = char\n      break\n    end\n  end\n  return first_non_repeating_character\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count_table = {}\n    for i = 1, #str1 do\n        if count_table[str1:sub(i, i)] == nil then\n            count_table[str1:sub(i, i)] = 1\n        else\n            count_table[str1:sub(i, i)] = count_table[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if count_table[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n\tlocal char_count = {}\n\tfor i = 1, #str1 do\n\t\tlocal c = str1:sub(i, i)\n\t\tif char_count[c] then\n\t\t\tchar_count[c] = char_count[c] + 1\n\t\telse\n\t\t\tchar_count[c] = 1\n\t\tend\n\tend\n\tfor i = 1, #str1 do\n\t\tlocal c = str1:sub(i, i)\n\t\tif char_count[c] == 1 then\n\t\t\treturn c\n\t\tend\n\tend\n\treturn nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n\tlocal str2 = str1:lower()\n\tlocal count = {}\n\tfor i = 1, #str2 do\n\t\tlocal c = str2:sub(i, i)\n\t\tif count[c] then\n\t\t\tcount[c] = count[c] + 1\n\t\telse\n\t\t\tcount[c] = 1\n\t\tend\n\tend\n\tfor i = 1, #str2 do\n\t\tlocal c = str2:sub(i, i)\n\t\tif count[c] == 1 then\n\t\t\treturn str1:sub(i, i)\n\t\tend\n\tend\n\treturn nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_count = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] then\n      char_count[char] = char_count[char] + 1\n    else\n      char_count[char] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local chars = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if chars[char] then\n            chars[char] = chars[char] + 1\n        else\n            chars[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if chars[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == nil then\n            count[c] = 1\n        else\n            count[c] = count[c] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local count = {}\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if count[c] then\n      count[c] = count[c] + 1\n    else\n      count[c] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if count[c] == 1 then\n      return c\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local count = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if count[char] then\n      count[char] = count[char] + 1\n    else\n      count[char] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if count[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local chars = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if not chars[char] then\n            chars[char] = 1\n        else\n            chars[char] = chars[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if chars[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local count = {}\n  for i = 1, #str1 do\n    count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n  end\n  for i = 1, #str1 do\n    if count[str1:sub(i, i)] == 1 then\n      return str1:sub(i, i)\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local chars = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if not chars[char] then\n      chars[char] = 1\n    else\n      chars[char] = chars[char] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if chars[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_count = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] then\n      char_count[char] = char_count[char] + 1\n    else\n      char_count[char] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n\tlocal char_count = {}\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif char_count[char] then\n\t\t\tchar_count[char] = char_count[char] + 1\n\t\telse\n\t\t\tchar_count[char] = 1\n\t\tend\n\tend\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif char_count[char] == 1 then\n\t\t\treturn char\n\t\tend\n\tend\n\treturn nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] then\n            count[char] = count[char] + 1\n        else\n            count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local counts = {}\n    for i = 1, #str1 do\n        if counts[str1:sub(i, i)] then\n            counts[str1:sub(i, i)] = counts[str1:sub(i, i)] + 1\n        else\n            counts[str1:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #str1 do\n        if counts[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local chars = {}\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if chars[c] then\n      chars[c] = chars[c] + 1\n    else\n      chars[c] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if chars[c] == 1 then\n      return c\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local letters = {}\n  local result = nil\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if letters[char] then\n      letters[char] = letters[char] + 1\n    else\n      letters[char] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if letters[char] == 1 then\n      result = char\n      break\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local chars = {}\n  local result = ''\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if not chars[char] then\n      chars[char] = 1\n    else\n      chars[char] = chars[char] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if chars[char] == 1 then\n      result = char\n      break\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwe1yn9pl.lua:26: expected: nil, actual: \"\"\nstack traceback:\n\t/tmp/tmpwe1yn9pl.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_count = {}\n  for i = 1, #str1 do\n    if char_count[str1:sub(i, i)] == nil then\n      char_count[str1:sub(i, i)] = 1\n    else\n      char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n    end\n  end\n  for i = 1, #str1 do\n    if char_count[str1:sub(i, i)] == 1 then\n      return str1:sub(i, i)\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    local first_non_repeating_char = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7au7tpg1.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == nil then\n            count[str1:sub(i, i)] = 1\n        else\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local str = str1:lower()\n    local len = str:len()\n    local count = {}\n    for i = 1, len do\n        local c = str:sub(i, i)\n        if count[c] == nil then\n            count[c] = 1\n        else\n            count[c] = count[c] + 1\n        end\n    end\n    for i = 1, len do\n        local c = str:sub(i, i)\n        if count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local len = #str1\n    local char_count = {}\n    for i = 1, len do\n        local c = str1:sub(i, i)\n        if char_count[c] then\n            char_count[c] = char_count[c] + 1\n        else\n            char_count[c] = 1\n        end\n    end\n    for i = 1, len do\n        local c = str1:sub(i, i)\n        if char_count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local str_table = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if not str_table[char] then\n      str_table[char] = 1\n    else\n      str_table[char] = str_table[char] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if str_table[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local count = {}\n  for i = 1, #str1 do\n    if count[str1:sub(i, i)] then\n      count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n    else\n      count[str1:sub(i, i)] = 1\n    end\n  end\n  for i = 1, #str1 do\n    if count[str1:sub(i, i)] == 1 then\n      return str1:sub(i, i)\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    local result = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] == nil then\n            count[char] = 1\n        else\n            count[char] = count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local count = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if count[char] then\n      count[char] = count[char] + 1\n    else\n      count[char] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if count[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local chars = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if chars[c] then\n            chars[c] = chars[c] + 1\n        else\n            chars[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if chars[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_count = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] == nil then\n      char_count[char] = 1\n    else\n      char_count[char] = char_count[char] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_count = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] == nil then\n      char_count[char] = 1\n    else\n      char_count[char] = char_count[char] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local chars = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if not chars[char] then\n      chars[char] = 1\n    else\n      chars[char] = chars[char] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if chars[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_table = {}\n  local first_char = nil\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_table[char] == nil then\n      char_table[char] = 1\n    else\n      char_table[char] = char_table[char] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_table[char] == 1 then\n      first_char = char\n      break\n    end\n  end\n  return first_char\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_count = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] then\n      char_count[char] = char_count[char] + 1\n    else\n      char_count[char] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local str_table = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if str_table[char] == nil then\n      str_table[char] = 1\n    else\n      str_table[char] = str_table[char] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if str_table[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local count = {}\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    count[c] = (count[c] or 0) + 1\n  end\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if count[c] == 1 then\n      return c\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_count = {}\n  for i = 1, #str1 do\n    if char_count[str1:sub(i, i)] then\n      char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n    else\n      char_count[str1:sub(i, i)] = 1\n    end\n  end\n  for i = 1, #str1 do\n    if char_count[str1:sub(i, i)] == 1 then\n      return str1:sub(i, i)\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        count[str1:sub(i, i)] = (count[str1:sub(i, i)] or 0) + 1\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local count = {}\n  for i = 1, #str1 do\n    if count[str1:sub(i, i)] then\n      count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n    else\n      count[str1:sub(i, i)] = 1\n    end\n  end\n  for i = 1, #str1 do\n    if count[str1:sub(i, i)] == 1 then\n      return str1:sub(i, i)\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n\tlocal char_count = {}\n\tlocal first_char = ''\n\tfor i = 1, #str1 do\n\t\tlocal c = str1:sub(i, i)\n\t\tif not char_count[c] then\n\t\t\tchar_count[c] = 1\n\t\telse\n\t\t\tchar_count[c] = char_count[c] + 1\n\t\tend\n\tend\n\tfor i = 1, #str1 do\n\t\tlocal c = str1:sub(i, i)\n\t\tif char_count[c] == 1 then\n\t\t\tfirst_char = c\n\t\t\tbreak\n\t\tend\n\tend\n\treturn first_char\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgi687pt1.lua:26: expected: nil, actual: \"\"\nstack traceback:\n\t/tmp/tmpgi687pt1.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] then\n            count[c] = count[c] + 1\n        else\n            count[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] then\n            count[c] = count[c] + 1\n        else\n            count[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_count = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] then\n      char_count[char] = char_count[char] + 1\n    else\n      char_count[char] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n\tlocal str_table = {}\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif str_table[char] == nil then\n\t\t\tstr_table[char] = 1\n\t\telse\n\t\t\tstr_table[char] = str_table[char] + 1\n\t\tend\n\tend\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif str_table[char] == 1 then\n\t\t\treturn char\n\t\tend\n\tend\n\treturn nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n\tlocal char_table = {}\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif char_table[char] then\n\t\t\tchar_table[char] = char_table[char] + 1\n\t\telse\n\t\t\tchar_table[char] = 1\n\t\tend\n\tend\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif char_table[char] == 1 then\n\t\t\treturn char\n\t\tend\n\tend\n\treturn nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local count = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if count[char] then\n      count[char] = count[char] + 1\n    else\n      count[char] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if count[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local chars = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if chars[char] == nil then\n      chars[char] = 1\n    else\n      chars[char] = chars[char] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if chars[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local chars = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if chars[char] then\n      chars[char] = chars[char] + 1\n    else\n      chars[char] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if chars[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] then\n            count[char] = count[char] + 1\n        else\n            count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local chars = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if chars[c] then\n            chars[c] = chars[c] + 1\n        else\n            chars[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if chars[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local chars = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if chars[c] then\n            chars[c] = chars[c] + 1\n        else\n            chars[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if chars[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_count = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if not char_count[char] then\n      char_count[char] = 1\n    else\n      char_count[char] = char_count[char] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] then\n            count[c] = count[c] + 1\n        else\n            count[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_count = {}\n  local first_non_repeating_char = nil\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] == nil then\n      char_count[char] = 1\n    else\n      char_count[char] = char_count[char] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] == 1 then\n      first_non_repeating_char = char\n      break\n    end\n  end\n  return first_non_repeating_char\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] then\n            count[char] = count[char] + 1\n        else\n            count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "lua: /tmp/tmpg1is2upl.lua:20: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local str1 = str1:lower()\n    local str2 = str1:reverse()\n    local str3 = str1:gsub(\"%s+\", \"\")\n    local str4 = str3:gsub(\"%W+\", \"\")\n    local str5 = str4:gsub(\"%d+\", \"\")\n    local str6 = str5:gsub(\"%p+\", \"\")\n    local str7 = str6:gsub(\"%c+\", \"\")\n    local str8 = str7:gsub(\"%a+\", \"\")\n    local str9 = str8:gsub(\"%l+\", \"\")\n    local str10 = str9:gsub(\"%u+\", \"\")\n    local str11 = str10:gsub(\"%w+\", \"\")\n    local str12 = str11:gsub(\"%x+\", \"\")\n    local str13 = str12:gsub(\"%z+\", \"\")\n    local str14 = str13:gsub(\"%A+\", \"\")\n    local str15 = str14:gsub(\"%L+\", \"\")\n    local str16 = str15:gsub(\"%U+\", \"\")\n    local str17 = str16:gsub(\"%W+\", \"\")\n    local str18 = str17:gsub(\"%X+\", \"\")\n    local str19 = str18:gsub(\"%Z+\", \"\")\n    local str20 = str19:gsub(\"%+\", \"\")\n    local str21 = str20:gsub(\"%-\", \"\")\n    local str22 = str21:gsub(\"%*\", \"\")\n    local str23 = str22:gsub(\"%/\", \"\")\n    local str24 = str23:gsub(\"%^\", \"\")\n    local str25 = str24:gsub(\"%%\", \"\")\n    local str26 = str25:gsub(\"%#\", \"\")\n    local str27 = str26:gsub(\"%[\", \"\")\n    local str28 = str27:gsub(\"%]\", \"\")\n    local str29 = str28:gsub(\"%{\", \"\")\n    local str30 = str29:gsub(\"%}\", \"\")\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcavalsbi.lua:42: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local str_table = {}\n    for i = 1, #str1 do\n        if not str_table[str1:sub(i, i)] then\n            str_table[str1:sub(i, i)] = 1\n        else\n            str_table[str1:sub(i, i)] = str_table[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if str_table[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] then\n            count[c] = count[c] + 1\n        else\n            count[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local chars = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if not chars[char] then\n            chars[char] = 0\n        end\n        chars[char] = chars[char] + 1\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if chars[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n   local chars = {}\n   for i = 1, #str1 do\n      local char = str1:sub(i, i)\n      if chars[char] then\n         chars[char] = chars[char] + 1\n      else\n         chars[char] = 1\n      end\n   end\n   for i = 1, #str1 do\n      local char = str1:sub(i, i)\n      if chars[char] == 1 then\n         return char\n      end\n   end\n   return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] then\n            count[c] = count[c] + 1\n        else\n            count[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local chars = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if chars[c] then\n            chars[c] = chars[c] + 1\n        else\n            chars[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if chars[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local t = {}\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if t[c] then\n      t[c] = t[c] + 1\n    else\n      t[c] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if t[c] == 1 then\n      return c\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "lua: /tmp/tmpylj402nn.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] then\n            count[c] = count[c] + 1\n        else\n            count[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local letters = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if letters[char] then\n      letters[char] = letters[char] + 1\n    else\n      letters[char] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if letters[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] then\n            count[char] = count[char] + 1\n        else\n            count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local chars = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if not chars[char] then\n            chars[char] = 1\n        else\n            chars[char] = chars[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if chars[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] then\n            count[char] = count[char] + 1\n        else\n            count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local str2 = string.lower(str1)\n    local count = {}\n    for i = 1, #str2 do\n        if count[str2:sub(i, i)] then\n            count[str2:sub(i, i)] = count[str2:sub(i, i)] + 1\n        else\n            count[str2:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #str2 do\n        if count[str2:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_count = {}\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if char_count[c] == nil then\n      char_count[c] = 1\n    else\n      char_count[c] = char_count[c] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if char_count[c] == 1 then\n      return c\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local str2 = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if str2[c] then\n            str2[c] = str2[c] + 1\n        else\n            str2[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if str2[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    for i = 1, #str1 do\n        if str1:find(str1:sub(i, i), i + 1) == nil then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3uohp9t.lua:14: expected: nil, actual: \"a\"\nstack traceback:\n\t/tmp/tmpy3uohp9t.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local count = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if count[char] then\n      count[char] = count[char] + 1\n    else\n      count[char] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if count[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] then\n            count[c] = count[c] + 1\n        else\n            count[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local str2 = {}\n    local str3 = {}\n    for i = 1, #str1 do\n        if str2[str1:sub(i,i)] == nil then\n            str2[str1:sub(i,i)] = 1\n            table.insert(str3, str1:sub(i,i))\n        else\n            str2[str1:sub(i,i)] = str2[str1:sub(i,i)] + 1\n        end\n    end\n    for i = 1, #str3 do\n        if str2[str3[i]] == 1 then\n            return str3[i]\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n\tlocal count = {}\n\tlocal index = {}\n\tlocal result = {}\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif count[char] then\n\t\t\tcount[char] = count[char] + 1\n\t\telse\n\t\t\tcount[char] = 1\n\t\tend\n\t\tindex[char] = i\n\tend\n\tfor char, cnt in pairs(count) do\n\t\tif cnt == 1 then\n\t\t\ttable.insert(result, {char, index[char]})\n\t\tend\n\tend\n\ttable.sort(result, function(a, b) return a[2] < b[2] end)\n\treturn result[1][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7woe0epd.lua:21: attempt to index a nil value (field 'integer index')\nstack traceback:\n\t/tmp/tmp7woe0epd.lua:21: in local 'candidate'\n\t/tmp/tmp7woe0epd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local chars = {}\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if chars[c] then\n      chars[c] = chars[c] + 1\n    else\n      chars[c] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if chars[c] == 1 then\n      return c\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == nil then\n            count[str1:sub(i, i)] = 1\n        else\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_f1_kygt.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local str2 = {}\n  for i = 1, #str1 do\n    if str2[str1:sub(i, i)] == nil then\n      str2[str1:sub(i, i)] = 1\n    else\n      str2[str1:sub(i, i)] = str2[str1:sub(i, i)] + 1\n    end\n  end\n  for i = 1, #str1 do\n    if str2[str1:sub(i, i)] == 1 then\n      return str1:sub(i, i)\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] then\n            count[c] = count[c] + 1\n        else\n            count[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    local first_non_repeating_character = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5qsa5_og.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        count[c] = (count[c] or 0) + 1\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local chars = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if chars[char] then\n            chars[char] = chars[char] + 1\n        else\n            chars[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if chars[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n\tlocal str2 = {}\n\tlocal str3 = {}\n\tlocal str4 = {}\n\tlocal str5 = {}\n\tlocal str6 = {}\n\tlocal str7 = {}\n\tlocal str8 = {}\n\tlocal str9 = {}\n\tlocal str10 = {}\n\tlocal str11 = {}\n\tlocal str12 = {}\n\tlocal str13 = {}\n\tlocal str14 = {}\n\tlocal str15 = {}\n\tlocal str16 = {}\n\tlocal str17 = {}\n\tlocal str18 = {}\n\tlocal str19 = {}\n\tlocal str20 = {}\n\tlocal str21 = {}\n\tlocal str22 = {}\n\tlocal str23 = {}\n\tlocal str24 = {}\n\tlocal str25 = {}\n\tlocal str26 = {}\n\tlocal str27 = {}\n\tlocal str28 = {}\n\tlocal str29 = {}\n\tlocal str30 = {}\n\tlocal str31 = {}\n\tlocal str32 = {}\n\tlocal str33 = {}\n\tlocal str34 = {}\n\tlocal str35 = {}\n\tlocal str36 = {}\n\tlocal str37 = {}\n\tlocal str38 = {}\n\tlocal str39 = {}\n\tlocal str40 = {}\n\tlocal str41 = {}\n\tlocal str42 = {}\n\tlocal str43 = {}\n\tlocal str44 = {}\n\tlocal str45 = {}\n\tlocal str46 = {}\n\tlocal str47 = {}\n\tlocal str48 = {}\n\tlocal str49 = {}\n\tlocal str50 = {}\n\tlocal str51 = {}\n\tlocal str52 = {}\n\tlocal str53 = {}\n\tlocal str54 = {}\n\tlocal str55 = {}\n\tlocal str56 = {}\n\tlocal str57 = {}\n\tlocal str58 = {}\n\tlocal str59 = {}\n\tlocal str60 = {}\n\tlocal str61 = {}\n\tlocal str62 = {}\n\tlocal str63 = {}\n\tlocal str64 = {}\n\tlocal str65 = {}\n\tlocal str66 = {}\n\tlocal str67 = {}\n\tlocal str68 = {}\n\tlocal str69 = {}\n\tlocal str70 = {}\n\tlocal str71 = {}\n\tlocal str72 = {}\n\tlocal str73 = {}\n\tlocal str74 = {}\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "lua: /tmp/tmpg6j64rw_.lua:86: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local chars = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if not chars[char] then\n            chars[char] = 1\n        else\n            chars[char] = chars[char] + 1\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "lua: /tmp/tmp2mht4j5s.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n\tlocal char_count = {}\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif char_count[char] then\n\t\t\tchar_count[char] = char_count[char] + 1\n\t\telse\n\t\t\tchar_count[char] = 1\n\t\tend\n\tend\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif char_count[char] == 1 then\n\t\t\treturn char\n\t\tend\n\tend\n\treturn nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local chars = {}\n    local result = ''\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if chars[c] then\n            chars[c] = chars[c] + 1\n        else\n            chars[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if chars[c] == 1 then\n            result = c\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzvg6j66o.lua:26: expected: nil, actual: \"\"\nstack traceback:\n\t/tmp/tmpzvg6j66o.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local str2 = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if not str2[char] then\n      str2[char] = 1\n    else\n      str2[char] = str2[char] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if str2[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == nil then\n            count[str1:sub(i, i)] = 1\n        else\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_count = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] == nil then\n      char_count[char] = 1\n    else\n      char_count[char] = char_count[char] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if char_count[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == nil then\n            char_count[str1:sub(i, i)] = 1\n        else\n            char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n        end\n    end\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n\tlocal char_count = {}\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif char_count[char] then\n\t\t\tchar_count[char] = char_count[char] + 1\n\t\telse\n\t\t\tchar_count[char] = 1\n\t\tend\n\tend\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif char_count[char] == 1 then\n\t\t\treturn char\n\t\tend\n\tend\n\treturn nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local chars = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if chars[char] then\n            chars[char] = chars[char] + 1\n        else\n            chars[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if chars[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i,i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i,i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local chars = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if chars[char] then\n            chars[char] = chars[char] + 1\n        else\n            chars[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if chars[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_count = {}\n  for i = 1, #str1 do\n    if char_count[str1:sub(i, i)] then\n      char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n    else\n      char_count[str1:sub(i, i)] = 1\n    end\n  end\n  for k, v in pairs(char_count) do\n    if v == 1 then\n      return k\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyhah4f6.lua:23: expected: \"a\"\nactual: \"b\"\nstack traceback:\n\t/tmp/tmpsyhah4f6.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local count = {}\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if count[c] then\n      count[c] = count[c] + 1\n    else\n      count[c] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if count[c] == 1 then\n      return c\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] then\n            count[c] = count[c] + 1\n        else\n            count[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] then\n            count[c] = count[c] + 1\n        else\n            count[c] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n\tlocal char_table = {}\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tlocal char = string.sub(str1, i, i)\n\t\tif char_table[char] == nil then\n\t\t\tchar_table[char] = 1\n\t\telse\n\t\t\tchar_table[char] = char_table[char] + 1\n\t\tend\n\tend\n\tfor i = 1, #str1 do\n\t\tlocal char = string.sub(str1, i, i)\n\t\tif char_table[char] == 1 then\n\t\t\treturn char\n\t\tend\n\tend\n\treturn nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i,i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3z2hdpzl.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local chars = {}\n  local result = nil\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if not chars[char] then\n      chars[char] = 1\n    else\n      chars[char] = chars[char] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if chars[char] == 1 then\n      result = char\n      break\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local count = {}\n  for i = 1, #str1 do\n    if count[str1:sub(i, i)] then\n      count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n    else\n      count[str1:sub(i, i)] = 1\n    end\n  end\n  for i = 1, #str1 do\n    if count[str1:sub(i, i)] == 1 then\n      return str1:sub(i, i)\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n\tlocal char_count = {}\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif char_count[char] then\n\t\t\tchar_count[char] = char_count[char] + 1\n\t\telse\n\t\t\tchar_count[char] = 1\n\t\tend\n\tend\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif char_count[char] == 1 then\n\t\t\treturn char\n\t\tend\n\tend\n\treturn nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == nil then\n            count[c] = 1\n        else\n            count[c] = count[c] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if count[c] == 1 then\n            return c\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        count[char] = (count[char] or 0) + 1\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local count = {}\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] then\n            count[str1:sub(i, i)] = count[str1:sub(i, i)] + 1\n        else\n            count[str1:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #str1 do\n        if count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local chars = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if chars[char] then\n            chars[char] = chars[char] + 1\n        else\n            chars[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if chars[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            char_count[char] = char_count[char] + 1\n        else\n            char_count[char] = 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == nil then\n            char_count[char] = 1\n        else\n            char_count[char] = char_count[char] + 1\n        end\n    end\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] == 1 then\n            return char\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n\tlocal count = {}\n\tlocal result = {}\n\tfor i = 1, #str1 do\n\t\tlocal c = str1:sub(i, i)\n\t\tif count[c] then\n\t\t\tcount[c] = count[c] + 1\n\t\telse\n\t\t\tcount[c] = 1\n\t\tend\n\tend\n\tfor i = 1, #str1 do\n\t\tlocal c = str1:sub(i, i)\n\t\tif count[c] == 1 then\n\t\t\treturn c\n\t\tend\n\tend\n\treturn nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local char_count = {}\n  for i = 1, #str1 do\n    if char_count[str1:sub(i, i)] == nil then\n      char_count[str1:sub(i, i)] = 1\n    else\n      char_count[str1:sub(i, i)] = char_count[str1:sub(i, i)] + 1\n    end\n  end\n  for i = 1, #str1 do\n    if char_count[str1:sub(i, i)] == 1 then\n      return str1:sub(i, i)\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local str = str1:lower()\n    local count = {}\n    for i = 1, #str do\n        if count[str:sub(i, i)] then\n            count[str:sub(i, i)] = count[str:sub(i, i)] + 1\n        else\n            count[str:sub(i, i)] = 1\n        end\n    end\n    for i = 1, #str do\n        if count[str:sub(i, i)] == 1 then\n            return str:sub(i, i)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local chars = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if chars[char] then\n      chars[char] = chars[char] + 1\n    else\n      chars[char] = 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if chars[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n  local chars = {}\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if not chars[char] then\n      chars[char] = 1\n    else\n      chars[char] = chars[char] + 1\n    end\n  end\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if chars[char] == 1 then\n      return char\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123311,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}