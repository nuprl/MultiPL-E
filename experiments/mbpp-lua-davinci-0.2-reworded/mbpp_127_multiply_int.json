{
  "name": "mbpp_127_multiply_int",
  "language": "lua",
  "prompt": "-- Write a function to multiply two integers.\nlocal function multiply_int(x, y)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply_int\n    lu.assertEquals(candidate(10, 20), 200)\n    lu.assertEquals(candidate(5, 10), 50)\n    lu.assertEquals(candidate(4, 8), 32)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    return x * y\nend",
    "    local result = 0\n    local x_neg = false\n    local y_neg = false\n    if x < 0 then\n        x_neg = true\n        x = -x\n    end\n    if y < 0 then\n        y_neg = true\n        y = -y\n    end\n    for i = 1, y do\n        result = result + x\n    end\n    if x_neg ~= y_neg then\n        result = -result\n    end\n    return result\nend",
    "  local result = 0\n  for i = 1, y do\n    result = result + x\n  end\n  return result\nend",
    "    return x * y\nend",
    "    if y == 0 then\n        return 0\n    elseif y == 1 then\n        return x\n    elseif y < 0 then\n        return -multiply_int(x, -y)\n    else\n        return x + multiply_int(x, y - 1)\n    end\nend",
    "    if x == 0 or y == 0 then\n        return 0\n    elseif x < 0 and y < 0 then\n        return multiply_int(-x, -y)\n    elseif x < 0 then\n        return -multiply_int(-x, y)\n    elseif y < 0 then\n        return -multiply_int(x, -y)\n    elseif y == 1 then\n        return x\n    elseif y % 2 == 0 then\n        return multiply_int(x + x, y / 2)\n    else\n        return x + multiply_int(x + x, (y - 1) / 2)\n    end\nend",
    "  local result = 0\n  for i = 1, y do\n    result = result + x\n  end\n  return result\nend",
    "  if y == 0 then\n    return 0\n  elseif y > 0 then\n    return x + multiply_int(x, y - 1)\n  else\n    return -multiply_int(x, -y)\n  end\nend",
    "    return x * y\nend",
    "    if y == 0 then\n        return 0\n    elseif y < 0 then\n        return -(x + multiply_int(x, -y - 1))\n    else\n        return x + multiply_int(x, y - 1)\n    end\nend",
    "    local result = 0\n    for i = 1, y do\n        result = result + x\n    end\n    return result\nend",
    "    local result = 0\n    for i = 1, y do\n        result = result + x\n    end\n    return result\nend",
    "    return x * y\nend",
    "    if y == 0 then\n        return 0\n    elseif y > 0 then\n        return x + multiply_int(x, y - 1)\n    else\n        return -x + multiply_int(x, y + 1)\n    end\nend",
    "  local result = 0\n  for i = 1, y do\n    result = result + x\n  end\n  return result\nend",
    "  if x == 0 or y == 0 then\n    return 0\n  end",
    "    if y == 0 then\n        return 0\n    elseif y > 0 then\n        return x + multiply_int(x, y - 1)\n    else\n        return -multiply_int(x, -y)\n    end\nend",
    "  local result = 0\n  for i = 1, y do\n    result = result + x\n  end\n  return result\nend",
    "    local result = 0\n    for i = 1, y do\n        result = result + x\n    end\n    return result\nend",
    "    if x == 0 or y == 0 then\n        return 0\n    end"
  ]
}