{
  "name": "mbpp_622_get_median",
  "language": "lua",
  "prompt": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  if n == 0 then return -1 end\n  if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n  if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end",
    "    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend",
    "  local m1, m2 = -1, -1\n  local i, j = 1, 1\n  for count = 0, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend",
    "    local i, j = 1, 1\n    local m1, m2 = -1, -1\n    for count = 0, n, 1 do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend",
    "    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = get_median(arr1, n)\n    local m2 = get_median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        else\n            return get_median(arr1 + n / 2, arr2, n - n / 2)\n        end\n    else\n        if n % 2 == 0 then\n            return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n        else\n            return get_median(arr2 + n / 2, arr1, n - n / 2)\n        end\n    end\nend",
    "    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    local count = 0\n    while count <= n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n        count = count + 1\n    end\n    return (m1 + m2) / 2\nend",
    "  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  local m1, m2 = 0, 0\n  local i, j = 0, 0\n  for count = 0, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend",
    "    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end",
    "  local median1 = 0\n  local median2 = 0\n  local i = 0\n  local j = 0\n  local count = 0",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend",
    "    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1",
    "  local m1 = -1\n  local m2 = -1\n  local i = 1\n  local j = 1\n  for count = 1, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend",
    "  local m1, m2 = 0, 0\n  local i, j = 0, 0\n  for count = 0, n do\n    if i == n then\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elseif j == n then\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end",
    "  local m1 = -1\n  local m2 = -1\n  local i = 1\n  local j = 1\n  for count = 1, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend",
    "    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        else\n            return get_median(arr1 + n / 2, arr2, n - n / 2)\n        end\n    else\n        if n % 2 == 0 then\n            return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n        else\n            return get_median(arr2 + n / 2, arr1, n - n / 2)\n        end\n    end\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend",
    "    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    for count = 0, n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend",
    "    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    for count = 0, n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend",
    "  local i = 1\n  local j = 1\n  local m1 = -1\n  local m2 = -1\n  local count = 0\n  while count < n + 1 do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n    count = count + 1\n  end\n  return (m1 + m2) / 2\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend",
    "    if n == 0 then return -1 end\n    if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n    if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  local m1 = -1\n  local m2 = -1\n  local i = 0\n  local j = 0\n  for count = 0, n do\n    if i == n then\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elseif j == n then\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "    local i, j, k = 0, 0, 0\n    local m1, m2 = 0, 0",
    "    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend",
    "    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend",
    "    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend",
    "  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend",
    "  if n == 0 then return -1 end\n  if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n  if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then return -1 end\n  if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n  if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "    if n <= 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end",
    "    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        else\n            return get_median(arr1 + n / 2, arr2, n - n / 2)\n        end\n    else\n        if n % 2 == 0 then\n            return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n        else\n            return get_median(arr2 + n / 2, arr1, n - n / 2)\n        end\n    end\nend",
    "  local median = 0\n  local i = 0\n  local j = 0\n  local count = 0\n  local m1 = 0\n  local m2 = 0\n  while count <= n do\n    if i == n then\n      m1 = m2\n      m2 = arr2[0]\n    elseif j == n then\n      m1 = m2\n      m2 = arr1[0]\n    elseif arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n    count = count + 1\n  end\n  median = (m1 + m2) / 2\n  return median\nend",
    "  local i = 1\n  local j = 1\n  local m1 = -1\n  local m2 = -1",
    "    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "    local i, j, m1, m2 = 0, 0, -1, -1\n    for count = 0, n do\n        if i == n then\n            m2 = m1\n            m1 = arr2[0]\n            break\n        elseif j == n then\n            m2 = m1\n            m1 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m2 = m1\n            m1 = arr1[i]\n            i = i + 1\n        else\n            m2 = m1\n            m1 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend",
    "    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = get_median_single(arr1, n)\n  local m2 = get_median_single(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr1, arr2 + n / 2 - 1, n - n / 2 + 1)\n    else\n      return get_median(arr1, arr2 + n / 2, n - n / 2)\n    end\n  end\nend",
    "  if n <= 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)",
    "    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    local count = 0\n    while count < n + 1 do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n        count = count + 1\n    end\n    return (m1 + m2) / 2\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end",
    "    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1",
    "  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = get_median(arr1, n)\n  local m2 = get_median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr1, arr2 + n / 2 - 1, n - n / 2 + 1)\n    else\n      return get_median(arr1, arr2 + n / 2, n - n / 2)\n    end\n  end\nend",
    "    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1",
    "    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1",
    "    local i, j = 0, 0\n    local m1, m2 = -1, -1",
    "  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end",
    "    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        end\n        return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n    if n % 2 == 0 then\n        return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    end\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\nend",
    "    local m1 = -1\n    local m2 = -1\n    local i = 0\n    local j = 0\n    for count = 0, n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + math.floor(n / 2) - 1, arr2, math.floor(n / 2) + 1)\n    else\n      return get_median(arr1 + math.floor(n / 2), arr2, math.floor(n / 2) + 1)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + math.floor(n / 2) - 1, arr1, math.floor(n / 2) + 1)\n    else\n      return get_median(arr2 + math.floor(n / 2), arr1, math.floor(n / 2) + 1)\n    end\n  end\nend",
    "    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend",
    "    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    for count = 0, n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend",
    "    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        end\n        return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n    if n % 2 == 0 then\n        return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    end\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\nend",
    "    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = get_median_single(arr1, n)\n    local m2 = get_median_single(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        else\n            return get_median(arr1 + n / 2, arr2, n - n / 2)\n        end\n    else\n        if n % 2 == 0 then\n            return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n        else\n            return get_median(arr2 + n / 2, arr1, n - n / 2)\n        end\n    end\nend",
    "  if n <= 0 then return 0 end\n  if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n  if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end",
    "    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        end\n        return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n    if n % 2 == 0 then\n        return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    end\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\nend",
    "    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end",
    "    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        end\n        return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n    if n % 2 == 0 then\n        return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    end\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\nend",
    "    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        else\n            return get_median(arr1 + n / 2, arr2, n - n / 2)\n        end\n    else\n        if n % 2 == 0 then\n            return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n        else\n            return get_median(arr2 + n / 2, arr1, n - n / 2)\n        end\n    end\nend",
    "    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend",
    "    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end",
    "    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end",
    "  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = get_median(arr1, n)\n  local m2 = get_median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr1, arr2 + n / 2 - 1, n - n / 2 + 1)\n    else\n      return get_median(arr1, arr2 + n / 2, n - n / 2)\n    end\n  end\nend",
    "  if n == 0 then return -1 end\n  if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n  if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend",
    "  if n == 0 then\n    return -1\n  elseif n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  elseif n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 0, n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n        elseif arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend",
    "  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        else\n            return get_median(arr1 + n / 2, arr2, n - n / 2)\n        end\n    else\n        if n % 2 == 0 then\n            return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n        else\n            return get_median(arr2 + n / 2, arr1, n - n / 2)\n        end\n    end\nend",
    "    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    local count = 0\n    while count < n + 1 do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n        count = count + 1\n    end\n    return (m1 + m2) / 2\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        else\n            return get_median(arr1 + n / 2, arr2, n - n / 2)\n        end\n    else\n        if n % 2 == 0 then\n            return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n        else\n            return get_median(arr2 + n / 2, arr1, n - n / 2)\n        end\n    end\nend",
    "    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend",
    "  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  local i, j, m1, m2 = 0, 0, 0, 0\n  for k = 0, n do\n    if i == n then\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elseif j == n then\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  local m1, m2 = 0, 0\n  local i, j = 0, 0\n  for count = 0, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend",
    "  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "    local i, j, m1, m2, min_index, max_index = 0, 0, 0, 0, 0, 0\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    while i <= n do\n        if i == n then\n            m1 = m2\n            m2 = math.max(arr1[i], arr2[j])\n            break\n        end\n        if j == n then\n            m1 = m2\n            m2 = math.max(arr1[i], arr2[j])\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            min_index = i\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            min_index = j\n            j = j + 1\n        end\n    end\n    if (n % 2) == 0 then\n        return (m1 + m2) / 2\n    else\n        return m2\n    end\nend",
    "  if n == 0 then\n    return -1\n  end",
    "  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end",
    "    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    for count = 0, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend",
    "  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend",
    "    local i, j, m1, m2, min_index, max_index\n    if n <= 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            min_index = n / 2 - 1\n            max_index = n / 2\n        else\n            min_index = n / 2\n            max_index = n / 2\n        end\n        return get_median(arr1[min_index + 1], arr2[max_index], min_index)\n    end\n    if n % 2 == 0 then\n        min_index = n / 2 - 1\n        max_index = n / 2\n    else\n        min_index = n / 2\n        max_index = n / 2\n    end\n    return get_median(arr2[min_index + 1], arr1[max_index], min_index)\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n <= 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    end",
    "  if n == 0 then return -1 end\n  if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n  if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = get_median(arr1, n)\n  local m2 = get_median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend",
    "  local i = 0\n  local j = 0\n  local m1 = -1\n  local m2 = -1",
    "  local i, j = 1, 1\n  local m1, m2 = -1, -1\n  for count = 1, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  local i = 1\n  local j = 1\n  local m1 = -1\n  local m2 = -1",
    "    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end",
    "  local i = 1\n  local j = 1\n  local m1 = -1\n  local m2 = -1",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end",
    "    if n <= 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end",
    "    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend",
    "    local i = 1\n    local j = 1\n    local count = 0\n    local m1 = -1\n    local m2 = -1",
    "  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end",
    "    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend",
    "  if n == 0 then\n    return -1\n  elseif n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  elseif n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then return -1 end\n  if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n  if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then return m1 end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + math.floor(n / 2) - 1, arr2, math.floor(n / 2) + 1)\n    else\n      return get_median(arr1 + math.floor(n / 2), arr2, math.floor(n / 2) + 1)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + math.floor(n / 2) - 1, arr1, math.floor(n / 2) + 1)\n    else\n      return get_median(arr2 + math.floor(n / 2), arr1, math.floor(n / 2) + 1)\n    end\n  end\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  local i = 0\n  local j = 0\n  local m1 = -1\n  local m2 = -1",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend",
    "  local m1 = -1\n  local m2 = -1\n  local i = 1\n  local j = 1\n  for count = 1, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend",
    "    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    local count = 0",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "    local i, j = 1, 1\n    local m1, m2 = -1, -1\n    for count = 0, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "    if n == 0 then return -1 end\n    if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n    if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = get_median(arr1, n)\n  local m2 = get_median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr1, arr2 + n / 2 - 1, n - n / 2 + 1)\n  else\n    return get_median(arr1, arr2 + n / 2, n - n / 2)\n  end\nend",
    "  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend",
    "    local i = 1\n    local j = 1\n    local count = 0\n    local m1 = -1\n    local m2 = -1\n    while count < n + 1 do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n        count = count + 1\n    end\n    return (m1 + m2) / 2\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    local count = 0\n    while count <= n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n        count = count + 1\n    end\n    return (m1 + m2) / 2\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend",
    "    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        else\n            return get_median(arr1 + n / 2, arr2, n - n / 2)\n        end\n    else\n        if n % 2 == 0 then\n            return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n        else\n            return get_median(arr2 + n / 2, arr1, n - n / 2)\n        end\n    end\nend",
    "    local i, j = 1, 1\n    local m1, m2 = -1, -1",
    "    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    for count = 0, n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n <= 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend",
    "  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end",
    "    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    local count = 0\n    while count <= n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n        count = count + 1\n    end\n    return (m1 + m2) / 2\nend",
    "  local m1, m2 = 0, 0\n  local i, j = 1, 1\n  for cnt = 1, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend",
    "    if n == 0 then return -1 end\n    if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n    if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end",
    "  local i, j = 1, 1\n  local m1, m2 = -1, -1\n  for count = 0, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend",
    "    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr1, arr2 + n / 2 - 1, n - n / 2 + 1)\n    else\n      return get_median(arr1, arr2 + n / 2, n - n / 2)\n    end\n  end\nend",
    "    local i = 1\n    local j = 1\n    local count = 0\n    local m1 = 0\n    local m2 = 0",
    "    local i, j, m1, m2 = 0, 0, -1, -1\n    for count = 0, n do\n        if i == n then\n            m2 = m1\n            m1 = arr2[0]\n            break\n        elseif j == n then\n            m2 = m1\n            m1 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m2 = m1\n            m1 = arr1[i]\n            i = i + 1\n        else\n            m2 = m1\n            m1 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end",
    "  local m1 = -1\n  local m2 = -1\n  local i = 1\n  local j = 1\n  for count = 1, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend",
    "  local i = 1\n  local j = 1\n  local m1 = -1\n  local m2 = -1\n  for count = 1, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend",
    "    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    local count = 0\n    while count < n + 1 do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n        count = count + 1\n    end\n    return (m1 + m2) / 2\nend"
  ]
}