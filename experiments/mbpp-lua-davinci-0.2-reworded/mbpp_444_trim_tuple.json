{
  "name": "mbpp_444_trim_tuple",
  "language": "lua",
  "prompt": "-- Write a function to trim each table by k in the given table table.\nlocal function trim_tuple(test_list, K)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = trim_tuple\n    lu.assertEquals(candidate({{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 2), '[(2,), (9,), (2,), (2,)]')\n    lu.assertEquals(candidate({{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 1), '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]')\n    lu.assertEquals(candidate({{7, 8, 4, 9}, {11, 8, 12, 4}, {4, 1, 7, 8}, {3, 6, 9, 7}}, 1), '[(8, 4), (8, 12), (1, 7), (6, 9)]')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local new_list = {}\n    for i = 1, #test_list do\n        new_list[i] = trim_table(test_list[i], K)\n    end\n    return new_list\nend",
    "    local test_list_trimmed = {}\n    for i = 1, #test_list do\n        local test_tuple = test_list[i]\n        local test_tuple_trimmed = {}\n        for j = 1, #test_tuple do\n            local test_table = test_tuple[j]\n            local test_table_trimmed = {}\n            for k = 1, #test_table do\n                if k <= K then\n                    table.insert(test_table_trimmed, test_table[k])\n                end\n            end\n            table.insert(test_tuple_trimmed, test_table_trimmed)\n        end\n        table.insert(test_list_trimmed, test_tuple_trimmed)\n    end\n    return test_list_trimmed\nend",
    "    local new_list = {}\n    for i = 1, #test_list do\n        local new_tuple = {}\n        for j = 1, #test_list[i] do\n            local new_table = {}\n            for k = 1, #test_list[i][j] do\n                if k <= K then\n                    table.insert(new_table, test_list[i][j][k])\n                end\n            end\n            table.insert(new_tuple, new_table)\n        end\n        table.insert(new_list, new_tuple)\n    end\n    return new_list\nend",
    "    local new_list = {}\n    for i = 1, #test_list do\n        local new_tuple = {}\n        for j = 1, #test_list[i] do\n            new_tuple[j] = test_list[i][j]:sub(1, K)\n        end\n        new_list[i] = new_tuple\n    end\n    return new_list\nend",
    "    local new_list = {}\n    for i = 1, #test_list do\n        local new_tuple = {}\n        for j = 1, #test_list[i] do\n            new_tuple[j] = test_list[i][j]:sub(1, K)\n        end\n        new_list[i] = new_tuple\n    end\n    return new_list\nend",
    "    local new_list = {}\n    for i = 1, #test_list do\n        local new_tuple = {}\n        for j = 1, #test_list[i] do\n            new_tuple[j] = test_list[i][j]:sub(1, K)\n        end\n        new_list[i] = new_tuple\n    end\n    return new_list\nend",
    "    local new_list = {}\n    for i = 1, #test_list do\n        local new_tuple = {}\n        for j = 1, #test_list[i] do\n            local new_table = {}\n            for k = 1, #test_list[i][j] do\n                if k > K then\n                    break\n                end\n                table.insert(new_table, test_list[i][j][k])\n            end\n            table.insert(new_tuple, new_table)\n        end\n        table.insert(new_list, new_tuple)\n    end\n    return new_list\nend",
    "    local new_list = {}\n    for i, tuple in ipairs(test_list) do\n        local new_tuple = {}\n        for j, value in ipairs(tuple) do\n            if j > K then\n                break\n            end\n            new_tuple[j] = value\n        end\n        new_list[i] = new_tuple\n    end\n    return new_list\nend",
    "    local new_list = {}\n    for i = 1, #test_list do\n        local new_tuple = {}\n        for j = 1, #test_list[i] do\n            local new_table = {}\n            for k = 1, K do\n                table.insert(new_table, test_list[i][j][k])\n            end\n            table.insert(new_tuple, new_table)\n        end\n        table.insert(new_list, new_tuple)\n    end\n    return new_list\nend",
    "\tlocal new_list = {}\n\tfor i = 1, #test_list do\n\t\tlocal new_tuple = {}\n\t\tfor j = 1, #test_list[i] do\n\t\t\tlocal new_table = {}\n\t\t\tfor k = 1, #test_list[i][j] do\n\t\t\t\tif k > K then\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\ttable.insert(new_table, test_list[i][j][k])\n\t\t\tend\n\t\t\ttable.insert(new_tuple, new_table)\n\t\tend\n\t\ttable.insert(new_list, new_tuple)\n\tend\n\treturn new_list\nend",
    "    local new_list = {}\n    for i = 1, #test_list do\n        local new_tuple = {}\n        for j = 1, #test_list[i] do\n            if j <= K then\n                table.insert(new_tuple, test_list[i][j])\n            end\n        end\n        table.insert(new_list, new_tuple)\n    end\n    return new_list\nend",
    "    local new_list = {}\n    for i = 1, #test_list do\n        local new_tuple = {}\n        for j = 1, #test_list[i] do\n            new_tuple[j] = test_list[i][j]:sub(1, K)\n        end\n        new_list[i] = new_tuple\n    end\n    return new_list\nend",
    "    local new_list = {}\n    for i = 1, #test_list do\n        local new_tuple = {}\n        for j = 1, #test_list[i] do\n            local new_table = {}\n            for k = 1, #test_list[i][j] do\n                if k <= K then\n                    table.insert(new_table, test_list[i][j][k])\n                end\n            end\n            table.insert(new_tuple, new_table)\n        end\n        table.insert(new_list, new_tuple)\n    end\n    return new_list\nend",
    "    local new_list = {}\n    for i, v in ipairs(test_list) do\n        local new_tuple = {}\n        for j, w in ipairs(v) do\n            if j <= K then\n                table.insert(new_tuple, w)\n            end\n        end\n        table.insert(new_list, new_tuple)\n    end\n    return new_list\nend",
    "    local new_list = {}\n    for i = 1, #test_list do\n        local new_tuple = {}\n        for j = 1, #test_list[i] do\n            new_tuple[j] = test_list[i][j][{{1, K}}]\n        end\n        new_list[i] = new_tuple\n    end\n    return new_list\nend",
    "    local new_list = {}\n    for i = 1, #test_list do\n        new_list[i] = trim_table(test_list[i], K)\n    end\n    return new_list\nend",
    "    local result = {}\n    for i = 1, #test_list do\n        local tuple = test_list[i]\n        local trimmed_tuple = {}\n        for j = 1, #tuple do\n            local trimmed_table = trim_table(tuple[j], K)\n            table.insert(trimmed_tuple, trimmed_table)\n        end\n        table.insert(result, trimmed_tuple)\n    end\n    return result\nend",
    "    local new_list = {}\n    for i = 1, #test_list do\n        local new_tuple = {}\n        for j = 1, #test_list[i] do\n            local new_table = {}\n            for k = 1, K do\n                table.insert(new_table, test_list[i][j][k])\n            end\n            table.insert(new_tuple, new_table)\n        end\n        table.insert(new_list, new_tuple)\n    end\n    return new_list\nend",
    "\tlocal new_list = {}\n\tfor i = 1, #test_list do\n\t\tlocal new_tuple = {}\n\t\tfor j = 1, #test_list[i] do\n\t\t\tlocal new_table = {}\n\t\t\tfor k = 1, #test_list[i][j] do\n\t\t\t\tif k <= K then\n\t\t\t\t\ttable.insert(new_table, test_list[i][j][k])\n\t\t\t\tend\n\t\t\tend\n\t\t\ttable.insert(new_tuple, new_table)\n\t\tend\n\t\ttable.insert(new_list, new_tuple)\n\tend\n\treturn new_list\nend",
    "    local new_list = {}\n    for i = 1, #test_list do\n        local new_tuple = {}\n        for j = 1, #test_list[i] do\n            new_tuple[j] = test_list[i][j]:sub(1, K)\n        end\n        new_list[i] = new_tuple\n    end\n    return new_list\nend"
  ]
}