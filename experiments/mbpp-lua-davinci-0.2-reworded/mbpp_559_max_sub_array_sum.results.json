{
  "name": "mbpp_559_max_sub_array_sum",
  "language": "lua",
  "prompt": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7a3a5dy7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  local start = 1\n  local end_ = 1\n  local s = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbmxzw3ya.lua:17: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = a[1]\n    local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr9zyggod.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = a[1]\n    local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr9zyggod.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\n\tfor i = 1, size do\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0 then\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = a[1]\n    local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr9zyggod.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  local start = 1\n  local end_ = 1\n  local s = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbmxzw3ya.lua:17: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7a3a5dy7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = a[1]\n    local curr_max = a[1]\n    for i = 2, size do\n        curr_max = math.max(a[i], curr_max + a[i])\n        max_so_far = math.max(max_so_far, curr_max)\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = a[1]\n  local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "lua: /tmp/tmpay65hfz7.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7a3a5dy7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjcnxrjoj.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = a[1]\n  local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "lua: /tmp/tmpay65hfz7.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7a3a5dy7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7a3a5dy7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = a[1]\n    local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr9zyggod.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    local start = 1\n    local end_ = 1\n    local s = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "lua: /tmp/tmpc4_i172l.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i=1,size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7a3a5dy7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = a[1]\n    local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr9zyggod.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\n\tlocal start = 1\n\tlocal end_ = 1\n\tlocal s = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "lua: /tmp/tmpg3i4ozsz.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\n\tfor i = 1, size do\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0 then\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = a[1]\n    local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr9zyggod.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i=1,size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7a3a5dy7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\n\tfor i = 1, size do\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0 then\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\n\tfor i = 1, size do\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0 then\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7a3a5dy7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\n\tfor i = 1, size do\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0 then\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = a[1]\n  local curr_max = a[1]\n  for i = 2, size do\n    curr_max = math.max(a[i], curr_max + a[i])\n    max_so_far = math.max(max_so_far, curr_max)\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    local start = 0\n    local end_ = 0\n    local s = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n            s = i + 1\n        elseif max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n            start = s\n            end_ = i\n        end\n    end\n    return max_so_far, start, end_\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  local start = 1\n  local end_ = 1\n  local s = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbmxzw3ya.lua:17: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7a3a5dy7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    local start = 1\n    local end_ = 1\n    local s = 1\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n            s = i + 1\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n            start = s\n            end_ = i\n        end\n    end\n    return max_so_far, start, end_\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = a[1]\n  local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "lua: /tmp/tmpay65hfz7.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = a[1]\n  local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "lua: /tmp/tmpay65hfz7.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = a[1]\n    local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr9zyggod.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    local start = 1\n    local end_ = 1\n    local s = 1\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n            s = i + 1\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n            start = s\n            end_ = i\n        end\n    end\n    return max_so_far, start, end_\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = a[1]\n  local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "lua: /tmp/tmpay65hfz7.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = a[1]\n    local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr9zyggod.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i=1,size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n   local max_so_far = 0\n   local max_ending_here = 0\n   for i = 1, size do\n      max_ending_here = max_ending_here + a[i]\n      if max_ending_here < 0 then\n         max_ending_here = 0\n      end\n      if max_so_far < max_ending_here then\n         max_so_far = max_ending_here\n      end\n   end\n   return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjcnxrjoj.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\n\tfor i = 1, size do\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0 then\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7a3a5dy7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjcnxrjoj.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = a[1]\n  local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "lua: /tmp/tmpay65hfz7.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = a[1]\n    local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr9zyggod.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  local start = 1\n  local end_ = 1\n  local s = 1\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n      s = i + 1\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n      start = s\n      end_ = i\n    end\n  end\n  return max_so_far, start, end_\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  local start = 1\n  local end_ = 1\n  local s = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbmxzw3ya.lua:17: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7a3a5dy7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7a3a5dy7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = a[1]\n    local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr9zyggod.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7a3a5dy7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjcnxrjoj.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = a[1]\n    local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr9zyggod.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\n\tfor i = 1, size do\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0 then\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\n\tfor i = 1, size do\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0 then\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7a3a5dy7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  local start = 0\n  local end_ = 0\n  local s = 1\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n      s = i + 1\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n      start = s\n      end_ = i\n    end\n  end\n  return max_so_far, start, end_\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\n\tfor i = 1, size do\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0 then\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7a3a5dy7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    local start = 1\n    local end_ = 1\n    local s = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "lua: /tmp/tmpc4_i172l.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i=1,size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n   local max_so_far = 0\n   local max_ending_here = 0\n   local start = 1\n   local end_ = 1\n   local s = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkn5dq4ut.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    local start = 0\n    local end_ = 0\n    local s = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_vbgvhij.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = a[1]\n    local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr9zyggod.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\n\tfor i = 1, size do\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0 then\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\n\tfor i = 1, size do\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0 then\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = a[1]\n  local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "lua: /tmp/tmpay65hfz7.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = a[1]\n    local curr_max = a[1]\n    for i = 2, size do\n        curr_max = math.max(a[i], curr_max + a[i])\n        max_so_far = math.max(max_so_far, curr_max)\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7a3a5dy7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = a[1]\n    local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr9zyggod.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\n\tfor i = 1, size do\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0 then\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    local start = 1\n    local end_ = 1\n    local s = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "lua: /tmp/tmpc4_i172l.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = a[1]\n    local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr9zyggod.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = a[1]\n    local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr9zyggod.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7a3a5dy7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\n\tfor i = 1, size do\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0 then\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    local start = 1\n    local end_ = 1\n    local s = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "lua: /tmp/tmpc4_i172l.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = a[1]\n    local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr9zyggod.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n   local max_so_far = 0\n   local max_ending_here = 0\n   for i=1,size do\n      max_ending_here = max_ending_here + a[i]\n      if max_ending_here < 0 then\n         max_ending_here = 0\n      end\n      if max_so_far < max_ending_here then\n         max_so_far = max_ending_here\n      end\n   end\n   return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = a[1]\n  local curr_max = a[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "lua: /tmp/tmpay65hfz7.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, size do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\n\tfor i = 1, size do\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0 then\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\n\tfor i = 1, size do\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0 then\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    local start = 1\n    local end_ = 1\n    local s = 1\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n            s = i + 1\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n            start = s\n            end_ = i\n        end\n    end\n    return max_so_far, start, end_\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    local max_so_far = 0\n    local max_ending_here = 0\n    for i = 1, size do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n  local max_so_far = 0\n  local max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "",
      "stderr": "lua: /tmp/tmpljl3e0y7.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjcnxrjoj.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}