{
  "name": "mbpp_597_find_kth",
  "language": "lua",
  "prompt": "-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local i = 1\n  local j = 1\n  local kth = 0\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      kth = arr1[i]\n      i = i + 1\n    else\n      kth = arr2[j]\n      j = j + 1\n    end\n    k = k - 1\n    if k == 0 then\n      return kth\n    end\n  end\n  while i <= #arr1 do\n    kth = arr1[i]\n    i = i + 1\n    k = k - 1\n    if k == 0 then\n      return kth\n    end\n  end\n  while j <= #arr2 do\n    kth = arr2[j]\n    j = j + 1\n    k = k - 1\n    if k == 0 then\n      return kth\n    end\n  end\nend",
    "  if k > #arr1 + #arr2 then return nil end\n  if #arr1 == 0 then return arr2[k] end\n  if #arr2 == 0 then return arr1[k] end\n  if k == 1 then return math.min(arr1[1], arr2[1]) end\n  local i = math.min(#arr1, math.floor(k / 2))\n  local j = math.min(#arr2, math.floor(k / 2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  end\nend",
    "    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local mid1 = math.min(#arr1, k / 2)\n    local mid2 = math.min(#arr2, k / 2)\n    if arr1[mid1] < arr2[mid2] then\n        return find_kth(arr1, arr2, k - mid1)\n    else\n        return find_kth(arr1, arr2, k - mid2)\n    end\nend",
    "  if not arr1 or not arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local m = math.min(#arr1, math.floor(k / 2))\n  local n = math.min(#arr2, math.floor(k / 2))\n  if arr1[m] < arr2[n] then\n    return find_kth(arr1, arr2, k - m)\n  else\n    return find_kth(arr1, arr2, k - n)\n  end\nend",
    "    if k <= 0 or k > #arr1 + #arr2 then\n        return nil\n    end",
    "    local i, j = 1, 1\n    while true do\n        if i > #arr1 then return arr2[j + k - 1] end\n        if j > #arr2 then return arr1[i + k - 1] end\n        if k == 1 then return math.min(arr1[i], arr2[j]) end\n        local half = math.floor(k / 2)\n        local new_i = math.min(i + half, #arr1)\n        local new_j = math.min(j + half, #arr2)\n        if arr1[new_i] <= arr2[new_j] then\n            i = new_i + 1\n            k = k - (new_i - i + 1)\n        else\n            j = new_j + 1\n            k = k - (new_j - j + 1)\n        end\n    end\nend",
    "    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local mid1 = math.min(#arr1, k / 2)\n    local mid2 = math.min(#arr2, k / 2)\n    if arr1[mid1] > arr2[mid2] then\n        return find_kth(arr1, arr2.slice(mid2 + 1), k - mid2)\n    else\n        return find_kth(arr1.slice(mid1 + 1), arr2, k - mid1)\n    end\nend",
    "    local i = 1\n    local j = 1\n    local kth = 0\n    while i <= #arr1 and j <= #arr2 do\n        if arr1[i] < arr2[j] then\n            kth = arr1[i]\n            i = i + 1\n        else\n            kth = arr2[j]\n            j = j + 1\n        end\n        k = k - 1\n        if k == 0 then\n            return kth\n        end\n    end\n    while i <= #arr1 do\n        kth = arr1[i]\n        i = i + 1\n        k = k - 1\n        if k == 0 then\n            return kth\n        end\n    end\n    while j <= #arr2 do\n        kth = arr2[j]\n        j = j + 1\n        k = k - 1\n        if k == 0 then\n            return kth\n        end\n    end\nend",
    "    if k > #arr1 + #arr2 then\n        return nil\n    end",
    "  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  local mid1 = math.floor(#arr1 / 2)\n  local mid2 = math.floor(#arr2 / 2)\n  if mid1 + mid2 < k then\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1, arr2:sub(mid2 + 1), k - mid2)\n    else\n      return find_kth(arr1:sub(mid1 + 1), arr2, k - mid1)\n    end\n  else\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1:sub(1, mid1), arr2, k)\n    else\n      return find_kth(arr1, arr2:sub(1, mid2), k)\n    end\n  end\nend",
    "  local i = 1\n  local j = 1\n  local kth = nil\n  while i <= #arr1 and j <= #arr2 do\n    if arr1[i] < arr2[j] then\n      if i + j == k then\n        kth = arr1[i]\n        break\n      end\n      i = i + 1\n    else\n      if i + j == k then\n        kth = arr2[j]\n        break\n      end\n      j = j + 1\n    end\n  end\n  if kth == nil then\n    if i <= #arr1 then\n      kth = arr1[k - j]\n    else\n      kth = arr2[k - i]\n    end\n  end\n  return kth\nend",
    "    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(#arr1, math.floor(k/2))\n    local j = math.min(#arr2, math.floor(k/2))\n    if arr1[i] < arr2[j] then\n        return find_kth(arr1, arr2, k-i)\n    else\n        return find_kth(arr1, arr2, k-j)\n    end\nend",
    "    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    if #arr1 == 0 then\n        return arr2[k]\n    end\n    if #arr2 == 0 then\n        return arr1[k]\n    end\n    local i = math.min(#arr1, math.floor(k / 2))\n    local j = math.min(#arr2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2[j + 1], k - j)\n    else\n        return find_kth(arr1[i + 1], arr2, k - i)\n    end\nend",
    "  local m = #arr1\n  local n = #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(k / 2, m)\n  local j = k - i\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1:sub(i + 1), arr2, k - i)\n  elseif arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2:sub(j + 1), k - j)\n  else\n    return arr1[i]\n  end\nend",
    "  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local mid1 = math.min(math.floor(k/2), #arr1)\n  local mid2 = math.min(math.floor(k/2), #arr2)\n  if arr1[mid1] < arr2[mid2] then\n    return find_kth(arr1, arr2, k - mid1)\n  else\n    return find_kth(arr1, arr2, k - mid2)\n  end\nend",
    "  if k > #arr1 + #arr2 then\n    return nil\n  end\n  if #arr1 == 0 then\n    return arr2[k]\n  end\n  if #arr2 == 0 then\n    return arr1[k]\n  end\n  local mid1 = math.floor(#arr1 / 2)\n  local mid2 = math.floor(#arr2 / 2)\n  if mid1 + mid2 < k then\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1, arr2:sub(mid2 + 1), k - mid2 - 1)\n    else\n      return find_kth(arr1:sub(mid1 + 1), arr2, k - mid1 - 1)\n    end\n  else\n    if arr1[mid1] > arr2[mid2] then\n      return find_kth(arr1:sub(1, mid1), arr2, k)\n    else\n      return find_kth(arr1, arr2:sub(1, mid2), k)\n    end\n  end\nend",
    "    local len1 = #arr1\n    local len2 = #arr2\n    if len1 == 0 then\n        return arr2[k]\n    end\n    if len2 == 0 then\n        return arr1[k]\n    end\n    if k == 1 then\n        return math.min(arr1[1], arr2[1])\n    end\n    local i = math.min(len1, math.floor(k / 2))\n    local j = math.min(len2, math.floor(k / 2))\n    if arr1[i] > arr2[j] then\n        return find_kth(arr1, arr2.slice(j + 1), k - j)\n    else\n        return find_kth(arr1.slice(i + 1), arr2, k - i)\n    end\nend",
    "  local m = #arr1\n  local n = #arr2\n  if m > n then\n    return find_kth(arr2, arr1, k)\n  end\n  if m == 0 then\n    return arr2[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(m, k / 2)\n  local j = math.min(n, k / 2)\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, {unpack(arr2, j + 1)}, k - j)\n  else\n    return find_kth({unpack(arr1, i + 1)}, arr2, k - i)\n  end\nend",
    "  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  elseif len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  local i = math.min(len1, math.floor(k/2))\n  local j = math.min(len2, math.floor(k/2))\n  if arr1[i] > arr2[j] then\n    return find_kth(arr1, arr2[j+1], k-j)\n  else\n    return find_kth(arr1[i+1], arr2, k-i)\n  end\nend",
    "  local len1 = #arr1\n  local len2 = #arr2\n  if len1 == 0 then\n    return arr2[k]\n  end\n  if len2 == 0 then\n    return arr1[k]\n  end\n  if k == 1 then\n    return math.min(arr1[1], arr2[1])\n  end\n  if k > len1 + len2 then\n    return nil\n  end\n  local i = math.min(k / 2, len1)\n  local j = math.min(k / 2, len2)\n  if arr1[i] < arr2[j] then\n    return find_kth(arr1, arr2, k - i)\n  else\n    return find_kth(arr1, arr2, k - j)\n  end\nend"
  ]
}