{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "lua",
  "prompt": "-- Write a function to find the largest sum of a contiguous table in the modified table which is formed by repeating the given table k times.\nlocal function max_sub_array_sum_repeated(a, n, k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum_repeated\n    lu.assertEquals(candidate({10, 20, -30, -1}, 4, 3), 30)\n    lu.assertEquals(candidate({-1, 10, 20}, 3, 2), 59)\n    lu.assertEquals(candidate({-1, -2, -3}, 3, 3), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    local max_wrap = 0\n    local curr_wrap = 0\n    for i = 1, n do\n        curr_wrap = curr_wrap + a[i]\n        if curr_wrap < 0 then\n            curr_wrap = 0\n        end\n        if max_wrap < curr_wrap then\n            max_wrap = curr_wrap\n        end\n    end\n    return max(max_so_far, sum * (k - 2) + max_wrap)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local i = 0\n    local j = 0\n    local start = 0\n    local end_ = 0\n    local s = 0",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local min_element = a[1]\n  local min_ending_here = 0\n  local min_so_far = 0\n  local sum = 0",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element * k\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    local max_wrap = 0\n    local curr_wrap = 0\n    for i = 1, n do\n        curr_wrap = curr_wrap + a[i]\n        if curr_wrap < 0 then\n            curr_wrap = 0\n        end\n        if max_wrap < curr_wrap then\n            max_wrap = curr_wrap\n        end\n    end\n    return math.max(max_so_far, sum * (k - 2) + max_wrap)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local i = 0\n  local j = 0\n  local start = 0\n  local end_ = 0\n  local s = 0",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local max_index = 1\n  local min_element = a[1]\n  local min_index = 1\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n    if a[i] > max_element then\n      max_element = a[i]\n      max_index = i\n    end\n    if a[i] < min_element then\n      min_element = a[i]\n      min_index = i\n    end\n  end\n  if sum > 0 then\n    return sum * k\n  end\n  if max_element < 0 then\n    return max_element\n  end\n  max_so_far = a[1]\n  max_ending_here = a[1]\n  for i = 2, n do\n    max_ending_here = math.max(a[i], max_ending_here + a[i])\n    max_so_far = math.max(max_so_far, max_ending_here)\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n  return math.max(max_so_far, max_wrap)\nend",
    "\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\n\tlocal max_element = a[1]\n\tlocal start = 1\n\tlocal end_ = 1\n\tlocal s = 1\n\tfor i = 1, n do\n\t\tmax_element = math.max(max_element, a[i])\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0 then\n\t\t\tmax_ending_here = 0\n\t\t\ts = i + 1\n\t\telseif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\t\tstart = s\n\t\t\tend_ = i\n\t\tend\n\tend\n\tif max_element < 0 then\n\t\treturn max_element\n\tend\n\tlocal curr_sum = 0\n\tlocal curr_start = 1\n\tlocal curr_end = 1\n\tlocal max_sum = 0\n\tlocal max_start = 1\n\tlocal max_end = 1\n\tfor i = 1, n * k do\n\t\tcurr_sum = curr_sum + a[((i - 1) % n) + 1]\n\t\tcurr_end = ((i - 1) % n) + 1\n\t\tif curr_sum < 0 then\n\t\t\tcurr_sum = 0\n\t\t\tcurr_start = i + 1\n\t\telseif max_sum < curr_sum then\n\t\t\tmax_sum = curr_sum\n\t\t\tmax_start = curr_start\n\t\t\tmax_end = curr_end\n\t\tend\n\tend\n\tif max_sum > max_so_far then\n\t\tstart = ((max_start - 1) % n) + 1\n\t\tend_ = max_end\n\tend\n\treturn max_so_far, start, end_\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local start = 1\n    local end_ = 1\n    local s = 1\n    for i = 1, n do\n        max_element = math.max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n            s = i + 1\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n            start = s\n            end_ = i\n        end\n    end\n    if max_so_far == 0 then\n        max_so_far = max_element\n    end\n    return max_so_far * k - (k - 1) * (sum(a, n) - max_so_far)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element < 0 then\n    return max_element * k\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local max_suffix = 0\n  local max_prefix = 0\n  for i = 1, n do\n    max_suffix = max_suffix + a[i]\n    if max_suffix < 0 then\n      max_suffix = 0\n    end\n  end\n  for i = n, 1, -1 do\n    max_prefix = max_prefix + a[i]\n    if max_prefix < 0 then\n      max_prefix = 0\n    end\n  end\n  local max_wrap_sum = max_suffix + max_prefix\n  if max_wrap_sum > max_so_far then\n    max_so_far = max_wrap_sum\n  end\n  return max_so_far * k - max_wrap\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local i = 0\n  while i < n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    i = i + 1\n  end\n  if max_so_far == 0 then\n    return max_element * k\n  end\n  local sum = 0\n  i = 0\n  while i < n do\n    sum = sum + a[i]\n    i = i + 1\n  end\n  local max_wrap = 0\n  local i = 0\n  local curr_sum = 0\n  while i < n do\n    curr_sum = curr_sum + a[i]\n    if curr_sum > max_wrap then\n      max_wrap = curr_sum\n    end\n    i = i + 1\n  end\n  local max_wrap_sum = sum * k - max_wrap\n  return math.max(max_so_far, max_wrap_sum)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element\n    end\n    local max_wrap = 0\n    for i = 1, n do\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    end\n    local max_ending_here = 0\n    for i = 1, n do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    max_wrap = max_wrap + max_ending_here\n    if k == 1 then\n        return max_so_far\n    end\n    return math.max(max_so_far, max_wrap)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local min_element = a[1]\n  local min_so_far = 0\n  local max_sum = 0\n  local min_sum = 0\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n    if max_element < a[i] then\n      max_element = a[i]\n    end\n    if min_element > a[i] then\n      min_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    min_so_far = min_so_far + a[i]\n    if min_so_far > 0 then\n      min_so_far = 0\n    end\n    if min_sum > min_so_far then\n      min_sum = min_so_far\n    end\n  end\n  if k == 1 then\n    return max_so_far\n  end\n  if sum > 0 then\n    max_sum = max_so_far + (k - 2) * sum\n  else\n    max_sum = max_so_far\n  end\n  if sum == min_sum then\n    return max_element\n  end\n  min_sum = min_sum * k\n  return math.max(max_sum, min_sum)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local start = 0\n    local end_ = 0\n    local s = 0\n    local i = 0\n    while i < n do\n        max_ending_here = max_ending_here + a[i]\n        if max_element < a[i] then\n            max_element = a[i]\n        end\n        if max_ending_here < 0 then\n            max_ending_here = 0\n            s = i + 1\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n            start = s\n            end_ = i\n        end\n        i = i + 1\n    end\n    if max_so_far == 0 then\n        max_so_far = max_element\n    end\n    return max_so_far * k - sum(a, start, end_)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element < 0 then\n    return max_element * k\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local max_ending_here = 0\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  max_wrap = max_wrap + max_ending_here\n  if max_wrap > max_so_far then\n    return max_wrap\n  end\n  return max_so_far + (k - 2) * max_wrap\nend",
    "  local max_sum = 0\n  local max_ending_here = 0\n  local min_ending_here = 0\n  local max_so_far = 0\n  local min_so_far = 0\n  local i = 1\n  while i <= n do\n    max_ending_here = max_ending_here + a[i]\n    min_ending_here = min_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if min_ending_here > 0 then\n      min_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    if min_so_far > min_ending_here then\n      min_so_far = min_ending_here\n    end\n    i = i + 1\n  end\n  local min_sum = min_so_far * k\n  local max_sum = max_so_far\n  local total_sum = 0\n  i = 1\n  while i <= n do\n    total_sum = total_sum + a[i]\n    i = i + 1\n  end\n  if total_sum < 0 then\n    max_sum = max_so_far\n  else\n    max_sum = max_so_far + (total_sum * (k - 2))\n  end\n  return max(max_sum, min_sum)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local i = 0\n  local j = 0\n  local max_i = 0\n  local max_j = 0\n  local max_sum = 0\n  local sum = 0\n  local start = 0\n  local end_ = 0\n  local max_start = 0\n  local max_end = 0\n  local max_start_index = 0\n  local max_end_index = 0\n  local max_sum_index = 0\n  local sum_index = 0\n  local max_sum_index_ = 0\n  local sum_index_ = 0\n  local max_start_index_ = 0\n  local max_end_index_ = 0\n  local max_start_ = 0\n  local max_end_ = 0\n  local max_sum_ = 0\n  local sum_ = 0\n  local start_ = 0\n  local end__ = 0\n  local max_start_index__ = 0\n  local max_end_index__ = 0\n  local max_sum_index__ = 0\n  local sum_index__ = 0\n  local max_sum_index___ = 0\n  local sum_index___ = 0\n  local max_start_index___ = 0\n  local max_end_index___ = 0\n  local max_start___ = 0\n  local max_end___ = 0\n  local max_sum___ = 0\n  local sum___ = 0\n  local start___ = 0\n  local end___ = 0\n  local max_start_index___ = 0\n  local max_end_index___ = 0\n  local max_sum_index___ = 0\n  local sum_index___ = 0\n  local max_sum_index____ = 0\n  local sum_index____ = 0\n  local max_start_index____ = 0\n  local max_end_index____ = 0\n  local max_start____ = 0\n  local max_end____ = 0\n  local max_sum____ = 0\n  local sum____ = 0\n  local start____ = 0\n  local end____ = 0\n  local max_start_index____ = 0\n  local max_end_",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local sum = 0",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element\n    end\n    local max_wrap = 0\n    for i = 1, n do\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    end\n    local max_ending_here = 0\n    for i = 1, n do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    max_so_far = max_so_far + max_wrap * (k - 2)\n    return max_so_far\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element * k\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    local max_wrap = 0\n    local curr_wrap = 0\n    for i = 1, n do\n        curr_wrap = curr_wrap + a[i]\n        if curr_wrap < 0 then\n            curr_wrap = 0\n        end\n        if max_wrap < curr_wrap then\n            max_wrap = curr_wrap\n        end\n    end\n    return max(max_so_far, max_wrap + sum * (k - 2))\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = max_so_far + sum * (k - 2)\n  local max_wrap = 0\n  local i = 1\n  local j = 1\n  while j < n do\n    while a[j] < 0 and i <= j do\n      max_wrap = max_wrap + a[j]\n      j = j + 1\n    end\n    if j == n then\n      break\n    end\n    while a[i] < 0 and i < j do\n      max_wrap = max_wrap - a[i]\n      i = i + 1\n    end\n    if i == j then\n      j = j + 1\n    end\n  end\n  return math.max(max_so_far, max_wrap)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = 0\n    local curr_sum = 0\n    local max_sum = 0\n    local start = 0\n    local end_ = 0\n    local s = 0",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element\n    end\n    local max_wrap = 0\n    for i = 1, n do\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    end\n    local max_ending_here = 0\n    for i = 1, n do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    max_so_far = max_so_far + max_wrap * (k - 2)\n    return max_so_far\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local start = 0\n  local end_ = 0\n  local s = 0",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local max_index = 1\n  local min_element = a[1]\n  local min_index = 1\n  local sum = 0\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n      max_index = i\n    end\n    if a[i] < min_element then\n      min_element = a[i]\n      min_index = i\n    end\n    sum = sum + a[i]\n  end\n  if sum > 0 then\n    return sum * k\n  end\n  if max_element < 0 then\n    return max_element\n  end\n  local max_sum = 0\n  local min_sum = 0\n  for i = 1, n do\n    if i ~= max_index then\n      max_sum = max_sum + a[i]\n    end\n    if i ~= min_index then\n      min_sum = min_sum + a[i]\n    end\n  end\n  return math.max(max_element * k, max_sum + max_element * (k - 2) + min_sum)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local start = 0\n    local end_ = 0\n    local s = 0",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_k_times = 0\n  local max_k_times_index = 0\n  local max_k_times_ending_here = 0\n  local max_k_times_ending_here_index = 0\n  local max_k_times_so_far = 0\n  local max_k_times_so_far_index = 0\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    max_k_times_ending_here = max_k_times_ending_here + a[i]\n    if max_k_times_ending_here < 0 then\n      max_k_times_ending_here = 0\n      max_k_times_ending_here_index = i\n    end\n    if max_k_times_so_far < max_k_times_ending_here then\n      max_k_times_so_far = max_k_times_ending_here\n      max_k_times_so_far_index = max_k_times_ending_here_index\n    end\n  end\n  max_k_times = max_k_times_so_far * k\n  max_k_times_index = max_k_times_so_far_index\n  local min_so_far = 0\n  local min_ending_here = 0\n  local min_k_times = 0\n  local min_k_times_index = 0\n  local min_k_times_ending_here = 0\n  local min_k_times_ending_here_index = 0\n  local min_k_times_so_far = 0\n  local min_k_times_so_far_index = 0\n  for i = 1, n do\n    min_ending_here = min_ending_here + a[i]\n    if min_ending_here > 0 then\n     ",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local min_element = a[1]\n  local min_so_far = 0\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    if a[i] < min_element then\n      min_element = a[i]\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  min_so_far = min_element\n  for i = 1, n do\n    if a[i] > 0 then\n      min_so_far = min_so_far + a[i]\n    end\n  end\n  if min_so_far > 0 then\n    return max_so_far + (k - 2) * sum + min_so_far\n  end\n  return max_so_far + (k - 2) * sum\nend",
    "  local max_sum = 0\n  local max_ending_here = 0\n  local min_ending_here = 0\n  local min_sum = 0\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_sum < max_ending_here then\n      max_sum = max_ending_here\n    end\n    min_ending_here = min_ending_here + a[i]\n    if min_ending_here > 0 then\n      min_ending_here = 0\n    end\n    if min_sum > min_ending_here then\n      min_sum = min_ending_here\n    end\n  end\n  if sum > 0 then\n    return max(max_sum, sum * (k - 2) + max_sum)\n  else\n    return max(max_sum, sum * (k - 2) + max_sum - min_sum)\n  end\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element < 0 then\n    return max_element\n  end\n  local max_sum = sum * k\n  local curr_prefix_sum = 0\n  local curr_suffix_sum = 0\n  for i = 1, n do\n    curr_prefix_sum = curr_prefix_sum + a[i]\n    max_ending_here = math.max(max_ending_here + a[i], 0)\n    max_so_far = math.max(max_so_far, max_ending_here)\n  end\n  for i = n, 1, -1 do\n    curr_suffix_sum = curr_suffix_sum + a[i]\n    max_ending_here = math.max(max_ending_here + a[i], 0)\n    max_so_far = math.max(max_so_far, max_ending_here)\n  end\n  max_sum = math.max(max_sum, curr_prefix_sum + (sum * (k - 2)) + curr_suffix_sum)\n  return max_sum\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element <= 0 then\n    return max_element * k\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local max_ending_here = 0\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  max_wrap = max_wrap + max_ending_here\n  if max_wrap > max_so_far then\n    max_so_far = max_wrap\n  end\n  return max_so_far * k\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element\n    end\n    local max_wrap = 0\n    for i = 1, n do\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    end\n    local max_ending_here = 0\n    for i = 1, n do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    max_so_far = max_so_far + max_wrap * (k - 2)\n    return max_so_far\nend",
    "    local max_sum = 0\n    local sum = 0\n    local max_ending_here = 0\n    local max_so_far = 0\n    local max_ending_here_repeated = 0\n    local max_so_far_repeated = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n        max_ending_here_repeated = max_ending_here_repeated + a[i]\n        if max_ending_here_repeated < 0 then\n            max_ending_here_repeated = 0\n        end\n        if max_so_far_repeated < max_ending_here_repeated then\n            max_so_far_repeated = max_ending_here_repeated\n        end\n        sum = sum + a[i]\n    end\n    if sum > 0 then\n        max_sum = max_so_far_repeated + (k - 2) * sum\n    else\n        max_sum = max_so_far_repeated\n    end\n    if max_sum == 0 then\n        max_sum = max_element\n    end\n    return max_sum\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element * k\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  local max_wrap = sum - max_so_far\n  return math.max(max_so_far, max_wrap * k)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = max_so_far + sum * (k - 2)\n  local max_wrap = 0\n  local i = 1\n  local j = 1\n  local curr_sum = 0\n  while i <= n do\n    while j <= n and curr_sum + a[j] < 0 do\n      curr_sum = curr_sum + a[j]\n      j = j + 1\n    end\n    if curr_sum + a[j] > max_wrap then\n      max_wrap = curr_sum + a[j]\n    end\n    curr_sum = curr_sum + a[j] - a[i]\n    i = i + 1\n    j = j + 1\n  end\n  return math.max(max_so_far, max_wrap)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local min_element = a[1]\n  local min_so_far = 0\n  local max_sum = 0\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n    max_element = math.max(max_element, a[i])\n    min_element = math.min(min_element, a[i])\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    min_so_far = min_so_far + a[i]\n    if min_so_far > 0 then\n      min_so_far = 0\n    end\n  end\n  if k == 1 then\n    return max_so_far\n  end\n  if max_element < 0 then\n    return max_element * k\n  end\n  if min_element > 0 then\n    return sum * k\n  end\n  max_sum = max_so_far\n  for i = 1, n do\n    sum = sum - a[i]\n    max_sum = math.max(max_sum, sum + max_so_far)\n  end\n  return max_sum\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local sum = 0\n  for i = 1, n do\n    if a[i] > max_element then max_element = a[i] end\n    sum = sum + a[i]\n  end\n  if max_element < 0 then return max_element end\n  if sum > 0 then\n    max_so_far = sum * k\n    max_ending_here = sum\n  end\n  local curr_val = 0\n  for i = 1, n do\n    curr_val = curr_val + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = a[i]\n    else\n      max_ending_here = max_ending_here + a[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  for i = 1, n * (k - 2) do\n    if curr_val > 0 then\n      max_ending_here = max_ending_here + curr_val\n      curr_val = curr_val + curr_val\n      if max_so_far < max_ending_here then\n        max_so_far = max_ending_here\n      end\n    else\n      break\n    end\n  end\n  return max_so_far\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element * k\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    local max_wrap = 0\n    local curr_wrap = 0\n    for i = 1, n do\n        curr_wrap = curr_wrap + a[i]\n        if curr_wrap < 0 then\n            curr_wrap = 0\n        end\n        if max_wrap < curr_wrap then\n            max_wrap = curr_wrap\n        end\n    end\n    return math.max(max_so_far, sum * k - max_wrap)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    local max_wrap = 0\n    local max_wrap_ending_here = 0\n    for i = 1, n do\n        max_wrap_ending_here = max_wrap_ending_here + a[i]\n        if max_wrap_ending_here < 0 then\n            max_wrap_ending_here = 0\n        end\n        if max_wrap < max_wrap_ending_here then\n            max_wrap = max_wrap_ending_here\n        end\n    end\n    max_wrap = sum + max_wrap\n    if k == 1 then\n        return max_so_far\n    end\n    return math.max(max_so_far, max_wrap * (k - 2) + max_so_far)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element * k\n    end\n    local max_wrap = 0\n    local curr_wrap = 0\n    for i = 1, n do\n        curr_wrap = curr_wrap + a[i]\n        if curr_wrap < 0 then\n            curr_wrap = 0\n        end\n        if max_wrap < curr_wrap then\n            max_wrap = curr_wrap\n        end\n    end\n    return math.max(max_so_far, max_wrap + (k - 2) * max_wrap + max_so_far)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local min_element = a[1]\n  local min_ending_here = 0\n  local min_so_far = 0\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n    max_ending_here = max_ending_here + a[i]\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    min_ending_here = min_ending_here + a[i]\n    if min_so_far > min_ending_here then\n      min_so_far = min_ending_here\n    end\n    if min_ending_here > 0 then\n      min_ending_here = 0\n    end\n    if max_element < a[i] then\n      max_element = a[i]\n    end\n    if min_element > a[i] then\n      min_element = a[i]\n    end\n  end\n  if k == 1 then\n    return max_so_far\n  end\n  if max_element < 0 then\n    return max_element * k\n  end\n  if min_element > 0 then\n    return sum * k\n  end\n  local max_sum = max_so_far\n  local min_sum = min_so_far\n  for i = 2, k do\n    if max_sum < sum + max_so_far then\n      max_sum = sum + max_so_far\n    end\n    if min_sum > sum + min_so_far then\n      min_sum = sum + min_so_far\n    end\n    max_so_far = max_so_far + sum\n    min_so_far = min_so_far + sum\n  end\n  return max_sum\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local curr_max = 0\n  local curr_min = 0\n  for i = 1, n do\n    curr_max = curr_max + a[i]\n    if curr_max < 0 then\n      curr_max = 0\n    end\n    if max_so_far < curr_max then\n      max_so_far = curr_max\n    end\n    curr_min = curr_min + a[i]\n    if curr_min > 0 then\n      curr_min = 0\n    end\n  end\n  max_wrap = max_wrap + curr_min\n  if k == 2 then\n    return math.max(max_so_far, max_wrap)\n  end\n  return math.max(max_so_far, max_wrap + (k - 2) * max_wrap)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = max_so_far + sum * (k - 2)\n  local max_wrap = 0\n  local i = 1\n  local j = 1\n  while j < n do\n    while a[i] < 0 and i < n do\n      i = i + 1\n    end\n    j = i\n    while a[j] >= 0 and j < n do\n      j = j + 1\n    end\n    if j == n then\n      break\n    end\n    local sum = 0\n    for k = i, j - 1 do\n      sum = sum + a[k]\n    end\n    max_wrap = math.max(max_wrap, sum)\n  end\n  return math.max(max_so_far, max_wrap)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element * k\n    end\n    local max_wrap = 0\n    local curr_wrap = 0\n    for i = 1, n do\n        curr_wrap = curr_wrap + a[i]\n        if curr_wrap < 0 then\n            curr_wrap = 0\n        end\n        if max_wrap < curr_wrap then\n            max_wrap = curr_wrap\n        end\n    end\n    return math.max(max_so_far, max_wrap + (k - 2) * max_wrap)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element * k\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    local max_wrap = 0\n    local curr_wrap = 0\n    for i = 1, n do\n        curr_wrap = curr_wrap + a[i]\n        if curr_wrap < 0 then\n            curr_wrap = 0\n        end\n        if max_wrap < curr_wrap then\n            max_wrap = curr_wrap\n        end\n    end\n    max_wrap = sum + max_wrap\n    return math.max(max_so_far, max_wrap * (k - 1))\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element < 0 then\n    return max_element * k\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local max_ending_here = 0\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  max_wrap = max_wrap + max_ending_here\n  if max_wrap > max_so_far then\n    max_so_far = max_wrap\n  end\n  return max_so_far\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element * k\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    local max_wrap = 0\n    local curr_wrap = 0\n    for i = 1, n do\n        curr_wrap = curr_wrap + a[i]\n        if curr_wrap < 0 then\n            curr_wrap = 0\n        end\n        if max_wrap < curr_wrap then\n            max_wrap = curr_wrap\n        end\n    end\n    return max(max_so_far, max_wrap + sum * (k - 2))\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        max_element = math.max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element * k\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    max_so_far = max_so_far + sum * (k - 2)\n    local max_wrap = 0\n    local i = 1\n    for i = 1, n do\n        max_wrap = max_wrap + a[i]\n        if max_wrap < 0 then\n            max_wrap = 0\n        end\n        if max_so_far < max_wrap then\n            max_so_far = max_wrap\n        end\n    end\n    return max_so_far\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local start = 1\n  local end_ = 1\n  local s = 1",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element <= 0 then\n    return max_element * k\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local max_ending_here = 0\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  max_wrap = max_wrap + max_ending_here\n  if max_wrap > max_so_far then\n    return max_wrap * k\n  end\n  return max_so_far * k\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element < 0 then\n    return max_element * k\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local max_ending_here = 0\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  max_wrap = max_wrap + max_ending_here\n  if max_wrap > max_so_far then\n    max_so_far = max_wrap\n  end\n  return max_so_far\nend",
    "  local max_sum = 0\n  local max_ending_here = 0\n  local max_so_far = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local min_sum = 0\n  local min_ending_here = 0\n  local min_so_far = 0\n  for i = 1, n do\n    min_ending_here = min_ending_here + a[i]\n    if min_ending_here > 0 then\n      min_ending_here = 0\n    end\n    if min_so_far > min_ending_here then\n      min_so_far = min_ending_here\n    end\n  end\n  local total_sum = 0\n  for i = 1, n do\n    total_sum = total_sum + a[i]\n  end\n  if k == 1 then\n    return max_so_far\n  end\n  max_sum = max_so_far\n  for i = 2, k do\n    max_sum = max(max_sum, total_sum - min_so_far)\n  end\n  return max_sum\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local max_index = 1\n  local min_element = a[1]\n  local min_index = 1\n  local sum = 0\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n      max_index = i\n    end\n    if a[i] < min_element then\n      min_element = a[i]\n      min_index = i\n    end\n    sum = sum + a[i]\n  end\n  if k == 1 then\n    return max_sub_array_sum(a, n)\n  end\n  if max_element <= 0 then\n    return max_element * k\n  end\n  if min_element >= 0 then\n    return sum * k\n  end\n  local max_sum = max_sub_array_sum(a, n)\n  local min_sum = min_sub_array_sum(a, n)\n  local max_wrap = sum - min_sum\n  if k == 2 then\n    return math.max(max_sum, max_wrap)\n  end\n  return math.max(max_sum, max_wrap + (k - 2) * sum)\nend",
    "  local max_ending_here = 0\n  local max_so_far = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element < 0 then return max_element * k end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then max_ending_here = 0 end\n    if max_so_far < max_ending_here then max_so_far = max_ending_here end\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then max_ending_here = 0 end\n    if max_so_far < max_ending_here then max_so_far = max_ending_here end\n  end\n  return math.max(max_so_far, max_wrap * (k - 2))\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    max_so_far = max_so_far + sum * (k - 2)\n    local max_wrap = 0\n    local i = 1\n    for i = 1, n do\n        max_wrap = max_wrap + a[i]\n        if max_wrap < 0 then\n            max_wrap = 0\n        end\n        if max_so_far < max_wrap then\n            max_so_far = max_wrap\n        end\n    end\n    return max_so_far\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_so_far\n  end\n  local max_sum = max_so_far\n  local curr_max = max_so_far\n  for i = 2, k do\n    curr_max = curr_max + max_so_far\n    max_sum = math.max(max_sum, curr_max)\n  end\n  return max_sum\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local max_index = 1\n    local min_element = a[1]\n    local min_index = 1\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n        if a[i] > max_element then\n            max_element = a[i]\n            max_index = i\n        end\n        if a[i] < min_element then\n            min_element = a[i]\n            min_index = i\n        end\n    end\n    if max_element < 0 then\n        return max_element * k\n    end\n    if min_element >= 0 then\n        return sum * k\n    end\n    local max_sum = 0\n    local min_sum = 0\n    local curr_val = 0\n    for i = 1, n do\n        curr_val = curr_val + a[i]\n        max_ending_here = math.max(curr_val, 0)\n        max_so_far = math.max(max_so_far, max_ending_here)\n        curr_val = curr_val - a[i]\n        curr_val = curr_val - a[i]\n        min_sum = math.min(min_sum, curr_val)\n        curr_val = curr_val + a[i]\n    end\n    max_sum = max_so_far\n    local result = max_sum + (sum - min_sum) * (k - 2)\n    return math.max(result, max_sum)\nend",
    "  local max_sum = 0\n  local curr_sum = 0\n  local max_ending_here = 0\n  local max_so_far = 0\n  local max_ending_here_k = 0\n  local max_so_far_k = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  for i = 1, n do\n    curr_sum = curr_sum + a[i]\n  end\n  max_sum = curr_sum\n  max_ending_here_k = curr_sum\n  for i = 2, k do\n    if max_ending_here_k < 0 then\n      max_ending_here_k = 0\n    end\n    max_ending_here_k = max_ending_here_k + curr_sum\n    if max_so_far_k < max_ending_here_k then\n      max_so_far_k = max_ending_here_k\n    end\n  end\n  return max(max_so_far, max_so_far_k)\nend",
    "  local max_sum = 0\n  local max_ending_here = 0\n  local min_ending_here = 0\n  local max_so_far = 0\n  local min_so_far = 0\n  local i = 0\n  while i < n do\n    max_ending_here = max_ending_here + a[i]\n    min_ending_here = min_ending_here + a[i]\n    if max_ending_here > max_so_far then\n      max_so_far = max_ending_here\n    end\n    if min_ending_here < min_so_far then\n      min_so_far = min_ending_here\n    end\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if min_ending_here > 0 then\n      min_ending_here = 0\n    end\n    i = i + 1\n  end\n  local max_wrap = 0\n  local min_wrap = 0\n  i = 0\n  while i < n do\n    max_wrap = max_wrap + a[i]\n    min_wrap = min_wrap + a[i]\n    i = i + 1\n  end\n  if k == 1 then\n    return max_so_far\n  end\n  max_wrap = max_wrap - min_wrap\n  return max(max_so_far, max_wrap)\nend",
    "  local max_sum = 0\n  local curr_sum = 0\n  local max_ending_here = 0\n  local min_ending_here = 0\n  local min_so_far = 0\n  local max_so_far = 0\n  local i = 0\n  local j = 0\n  local n = n or #a\n  local k = k or 1\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    min_ending_here = min_ending_here + a[i]\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if min_so_far > min_ending_here then\n      min_so_far = min_ending_here\n    end\n    if min_ending_here > 0 then\n      min_ending_here = 0\n    end\n  end\n  if k == 1 then\n    return max_so_far\n  end\n  local circular_sum = 0\n  for i = 1, n do\n    circular_sum = circular_sum + a[i]\n  end\n  max_sum = max_so_far\n  if circular_sum > 0 then\n    max_sum = max_sum + (k - 2) * circular_sum\n  end\n  max_sum = max_sum + max_sub_array_sum_repeated(a, n, 1)\n  return max_sum\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local start = 1\n    local end_ = 1\n    local s = 1",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local start = 1\n  local end_ = 1\n  local s = 1",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        max_element = math.max(max_element, a[i])\n    end\n    if max_element < 0 then\n        return max_element * k\n    end\n    for i = 1, n do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    local max_wrap = 0\n    for i = 1, n do\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    end\n    local max_suffix = 0\n    local max_prefix = 0\n    for i = 1, n do\n        max_suffix = max_suffix + a[i]\n        if max_suffix < 0 then\n            max_suffix = 0\n        end\n    end\n    for i = n, 1, -1 do\n        max_prefix = max_prefix + a[i]\n        if max_prefix < 0 then\n            max_prefix = 0\n        end\n    end\n    local max_wrap_sum = max_wrap + max_suffix + max_prefix\n    return math.max(max_wrap_sum, max_so_far) * k\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = max_so_far + sum * (k - 2)\n  local max_wrap = 0\n  local i = 1\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    if max_wrap < 0 then\n      max_wrap = 0\n    end\n    if max_so_far < max_wrap then\n      max_so_far = max_wrap\n    end\n  end\n  max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    if max_wrap < 0 then\n      max_wrap = 0\n    end\n  end\n  if max_wrap > 0 then\n    max_so_far = max_so_far + max_wrap * (k - 2)\n  end\n  return max_so_far\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = max_so_far + sum * (k - 2)\n  local max_wrap = 0\n  local i = 1\n  local j = 1\n  local curr_sum = 0\n  while j <= n do\n    while curr_sum > 0 and i < j do\n      curr_sum = curr_sum - a[i]\n      i = i + 1\n    end\n    curr_sum = curr_sum + a[j]\n    if curr_sum > max_wrap then\n      max_wrap = curr_sum\n    end\n    j = j + 1\n  end\n  return math.max(max_so_far, max_wrap)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local min_element = a[1]\n  local min_so_far = 0\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    if a[i] < min_element then\n      min_element = a[i]\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local max_wrap = sum - min_element\n  if k == 2 then\n    return max(max_so_far, max_wrap)\n  end\n  min_so_far = 0\n  local min_ending_here = 0\n  for i = 1, n do\n    min_ending_here = min_ending_here + a[i]\n    if min_ending_here > 0 then\n      min_ending_here = 0\n    end\n    if min_so_far > min_ending_here then\n      min_so_far = min_ending_here\n    end\n  end\n  local min_wrap = sum - max_element\n  local ans = max(max_so_far, max_wrap)\n  ans = max(ans, min_wrap * (k - 2))\n  ans = max(ans, min_wrap + max_so_far)\n  return ans\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = max_so_far + sum * (k - 2)\n  local max_wrap = 0\n  local i = 1\n  local j = 1\n  local curr_sum = 0\n  while j <= n do\n    while curr_sum < 0 and i < j do\n      curr_sum = curr_sum - a[i]\n      i = i + 1\n    end\n    curr_sum = curr_sum + a[j]\n    if max_wrap < curr_sum then\n      max_wrap = curr_sum\n    end\n    j = j + 1\n  end\n  return math.max(max_so_far, max_wrap)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local start = 0\n  local end_ = 0\n  local s = 0",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element * k\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    local max_wrap = 0\n    local curr_wrap = 0\n    for i = 1, n do\n        curr_wrap = curr_wrap + a[i]\n        if curr_wrap < 0 then\n            curr_wrap = 0\n        end\n        if max_wrap < curr_wrap then\n            max_wrap = curr_wrap\n        end\n    end\n    return math.max(max_so_far, max_wrap + sum * (k - 2))\nend",
    "  local max_ending_here = 0\n  local max_so_far = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local max_ending_here = 0\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  max_wrap = max_wrap + max_so_far\n  if k == 1 then\n    return max_so_far\n  end\n  return math.max(max_wrap, max_so_far)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        max_element = math.max(max_element, a[i])\n    end\n    if max_element < 0 then\n        return max_element * k\n    end\n    for i = 1, n do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    local max_wrap = 0\n    for i = 1, n do\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    end\n    for i = 1, n do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    max_wrap = max_wrap + max_so_far\n    if k == 1 then\n        return max_so_far\n    end\n    return math.max(max_wrap, max_so_far)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element * k\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  local max_wrap = 0\n  local curr_wrap = 0\n  for i = 1, n do\n    curr_wrap = curr_wrap + a[i]\n    if curr_wrap < 0 then\n      curr_wrap = 0\n    end\n    if max_wrap < curr_wrap then\n      max_wrap = curr_wrap\n    end\n  end\n  return math.max(max_so_far, sum * k - max_wrap)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element * k\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    local max_wrap = 0\n    local curr_wrap = 0\n    for i = 1, n do\n        curr_wrap = curr_wrap + a[i]\n        if curr_wrap < 0 then\n            curr_wrap = 0\n        end\n        if max_wrap < curr_wrap then\n            max_wrap = curr_wrap\n        end\n    end\n    return math.max(max_so_far, sum * k - max_wrap)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = max_so_far + sum * (k - 2)\n  local curr_max = 0\n  local curr_min = 0\n  local max_sum = 0\n  local min_sum = 0\n  for i = 1, n do\n    curr_max = math.max(curr_max + a[i], curr_min + a[i])\n    curr_min = math.min(curr_max - a[i], curr_min + a[i])\n    max_sum = math.max(curr_max, max_sum)\n    min_sum = math.min(curr_min, min_sum)\n  end\n  return math.max(max_so_far, max_sum + sum * (k - 2))\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local curr_sum = 0\n  local min_sum = 0\n  local result = 0",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element < 0 then\n    return max_element * k\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local max_ending_here = 0\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  max_wrap = max_wrap + max_ending_here\n  if max_wrap > max_so_far then\n    max_so_far = max_wrap\n  end\n  return max_so_far * k\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = max_so_far + sum * (k - 2)\n  local max_wrap = 0\n  local i = 1\n  local j = 1\n  local curr_sum = 0\n  while i <= n do\n    while j <= n and curr_sum + a[j] <= 0 do\n      curr_sum = curr_sum + a[j]\n      j = j + 1\n    end\n    if curr_sum + a[j] > 0 then\n      curr_sum = curr_sum + a[j]\n    end\n    if max_wrap < curr_sum then\n      max_wrap = curr_sum\n    end\n    curr_sum = curr_sum - a[i]\n    i = i + 1\n  end\n  return math.max(max_so_far, max_wrap)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local i = 0\n  local start = 0\n  local end_ = 0\n  local s = 0",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local start = 1\n  local end_ = 1\n  local s = 1",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = max_so_far + sum * (k - 2)\n  local max_wrap = 0\n  local i = 1\n  local j = 1\n  local curr_sum = 0\n  while j <= n do\n    while curr_sum < 0 and i < j do\n      curr_sum = curr_sum - a[i]\n      i = i + 1\n    end\n    curr_sum = curr_sum + a[j]\n    if max_wrap < curr_sum then\n      max_wrap = curr_sum\n    end\n    j = j + 1\n  end\n  return math.max(max_so_far, max_wrap)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element < 0 then\n    return max_element\n  end\n  local max_sum = sum * k\n  local curr_prefix_sum = 0\n  local curr_suffix_sum = 0\n  for i = 1, n do\n    curr_prefix_sum = curr_prefix_sum + a[i]\n    max_so_far = math.max(max_so_far, curr_prefix_sum)\n    curr_suffix_sum = curr_suffix_sum + a[i]\n    max_ending_here = math.max(0, max_ending_here + a[i])\n  end\n  local max_prefix_sum = curr_prefix_sum\n  local max_suffix_sum = curr_suffix_sum\n  for i = 2, k do\n    curr_prefix_sum = curr_prefix_sum + max_prefix_sum\n    curr_suffix_sum = curr_suffix_sum + max_suffix_sum\n    max_so_far = math.max(max_so_far, curr_prefix_sum)\n    max_so_far = math.max(max_so_far, curr_suffix_sum)\n    max_so_far = math.max(max_so_far, max_suffix_sum + max_ending_here)\n  end\n  return max_so_far\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element * k\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    local max_wrap = 0\n    local curr_wrap = 0\n    for i = 1, n do\n        curr_wrap = curr_wrap + a[i]\n        if curr_wrap < 0 then\n            curr_wrap = 0\n        end\n        if max_wrap < curr_wrap then\n            max_wrap = curr_wrap\n        end\n    end\n    return max(max_so_far, max_wrap + sum * (k - 2))\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local start = 1\n    local end_ = 1\n    local s = 1",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element\n    end\n    local max_wrap = 0\n    for i = 1, n do\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    end\n    local max_ending_here = 0\n    for i = 1, n do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    max_wrap = max_wrap + max_ending_here\n    if k == 1 then\n        return max_so_far\n    end\n    return max(max_so_far, max_wrap)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local i = 0\n  while i < n do\n    max_element = math.max(max_element, a[i])\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    i = i + 1\n  end\n  if max_so_far == 0 then\n    return max_element * k\n  end\n  local sum = 0\n  i = 0\n  while i < n do\n    sum = sum + a[i]\n    i = i + 1\n  end\n  local max_wrap = sum * k\n  local max_wrap_so_far = 0\n  local max_wrap_ending_here = 0\n  i = 0\n  while i < n do\n    max_wrap_ending_here = max_wrap_ending_here + a[i]\n    if max_wrap_ending_here < 0 then\n      max_wrap_ending_here = 0\n    end\n    if max_wrap_so_far < max_wrap_ending_here then\n      max_wrap_so_far = max_wrap_ending_here\n    end\n    i = i + 1\n  end\n  return math.max(max_wrap - max_wrap_so_far, max_so_far)\nend",
    "  local max_sum = 0\n  local max_ending_here = 0\n  local max_so_far = 0\n  local max_element = a[1]\n  local min_element = a[1]\n  local min_ending_here = 0\n  local min_so_far = 0\n  local sum = 0\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    if a[i] < min_element then\n      min_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    min_ending_here = min_ending_here + a[i]\n    if min_ending_here > 0 then\n      min_ending_here = 0\n    end\n    if min_so_far > min_ending_here then\n      min_so_far = min_ending_here\n    end\n    sum = sum + a[i]\n  end\n  if k == 1 then\n    return max_so_far\n  end\n  if sum > 0 then\n    max_sum = max_so_far + sum * (k - 2)\n  else\n    max_sum = max_so_far\n  end\n  local max_suffix_sum = 0\n  local max_prefix_sum = 0\n  for i = 1, n do\n    max_suffix_sum = max_suffix_sum + a[i]\n    if max_suffix_sum < 0 then\n      max_suffix_sum = 0\n    end\n    if max_sum < max_suffix_sum then\n      max_sum = max_suffix_sum\n    end\n  end\n  for i = n, 1, -1 do\n    max_prefix_sum = max_prefix_sum + a[i]\n    if max_prefix_sum < 0 then\n      max_prefix_sum = 0\n   ",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local max_index = 1\n  local min_element = a[1]\n  local min_index = 1\n  local sum = 0\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n      max_index = i\n    end\n    if a[i] < min_element then\n      min_element = a[i]\n      min_index = i\n    end\n    sum = sum + a[i]\n  end\n  if sum > 0 then\n    return sum * k\n  end\n  if max_element < 0 then\n    return max_element\n  end\n  local max_wrap = 0\n  local curr_wrap = 0\n  for i = 1, n do\n    curr_wrap = curr_wrap + a[i]\n    if curr_wrap < 0 then\n      curr_wrap = 0\n    end\n    if curr_wrap > max_wrap then\n      max_wrap = curr_wrap\n    end\n  end\n  return math.max(max_wrap + (sum - a[min_index]), max_element)\nend",
    "  local max_sum = 0\n  local max_sum_so_far = 0\n  local max_sum_ending_here = 0\n  local min_sum_ending_here = 0\n  local min_sum_so_far = 0\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  for i = 1, n do\n    max_sum_ending_here = max_sum_ending_here + a[i]\n    if max_sum_so_far < max_sum_ending_here then\n      max_sum_so_far = max_sum_ending_here\n    end\n    if max_sum_ending_here < 0 then\n      max_sum_ending_here = 0\n    end\n    min_sum_ending_here = min_sum_ending_here + a[i]\n    if min_sum_so_far > min_sum_ending_here then\n      min_sum_so_far = min_sum_ending_here\n    end\n    if min_sum_ending_here > 0 then\n      min_sum_ending_here = 0\n    end\n  end\n  if k == 1 then\n    max_sum = max_sum_so_far\n  else\n    max_sum = math.max(max_sum_so_far, sum - min_sum_so_far)\n  end\n  return max_sum\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local i = 0\n  while i < n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    i = i + 1\n  end\n  if max_so_far == 0 then\n    return max_element * k\n  end\n  local sum = 0\n  i = 0\n  while i < n do\n    sum = sum + a[i]\n    i = i + 1\n  end\n  local max_wrap = 0\n  local i = 0\n  local curr_sum = 0\n  while i < n do\n    curr_sum = curr_sum + a[i]\n    if curr_sum > max_wrap then\n      max_wrap = curr_sum\n    end\n    i = i + 1\n  end\n  max_wrap = max_wrap + sum * (k - 2)\n  if max_wrap > max_so_far then\n    return max_wrap\n  end\n  return max_so_far\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local max_index = 1\n    local min_element = a[1]\n    local min_index = 1\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n        if a[i] > max_element then\n            max_element = a[i]\n            max_index = i\n        end\n        if a[i] < min_element then\n            min_element = a[i]\n            min_index = i\n        end\n    end\n    if max_element <= 0 then\n        return max_element * k\n    end\n    if min_element >= 0 then\n        return sum * k\n    end\n    for i = 1, n do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    local circular_sum = sum - a[min_index]\n    return math.max(max_so_far, circular_sum)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element <= 0 then\n    return max_element * k\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local max_suffix = 0\n  local max_prefix = 0\n  for i = 1, n do\n    max_suffix = max_suffix + a[i]\n    if max_suffix < 0 then\n      max_suffix = 0\n    end\n  end\n  for i = n, 1, -1 do\n    max_prefix = max_prefix + a[i]\n    if max_prefix < 0 then\n      max_prefix = 0\n    end\n  end\n  local max_wrap_sum = max_suffix + max_prefix\n  return math.max(max_so_far, max_wrap_sum + max_so_far)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = max_so_far + sum * (k - 2)\n  local max_wrap = 0\n  local i = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    if max_wrap < 0 then\n      max_wrap = 0\n    end\n    if max_so_far < max_wrap then\n      max_so_far = max_wrap\n    end\n  end\n  return max_so_far\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local i = 0\n  local start = 0\n  local end_ = 0\n  local s = 0\n  local max_sum = 0",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local max_index = 1\n  local min_element = a[1]\n  local min_index = 1\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n      max_index = i\n    end\n    if a[i] < min_element then\n      min_element = a[i]\n      min_index = i\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element * k\n  end\n  local wrap_sum = 0\n  for i = min_index, max_index do\n    wrap_sum = wrap_sum + a[i]\n  end\n  return max(max_so_far, wrap_sum + (k - 2) * max_ending_here)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local start = 0\n  local end_ = 0\n  local s = 0\n  local i = 0\n  local max_sum = 0\n  local max_start = 0\n  local max_end = 0\n  local curr_sum = 0\n  local curr_start = 0\n  local curr_end = 0\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n  end\n  if max_element < 0 then\n    return max_element\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n      start = s\n      end_ = i\n    end\n    if max_ending_here < 0 then\n      max_ending_here = 0\n      s = i + 1\n    end\n  end\n  max_sum = max_so_far\n  max_start = start\n  max_end = end_\n  for i = 1, k - 1 do\n    curr_sum = 0\n    curr_start = 0\n    for j = 1, n do\n      curr_sum = curr_sum + a[j]\n      if curr_sum > max_sum then\n        max_sum = curr_sum\n        max_start = curr_start\n        max_end = j\n      end\n      if curr_sum < 0 then\n        curr_sum = 0\n        curr_start = j + 1\n      end\n    end\n  end\n  return max_sum\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    local max_wrap = 0\n    local min_wrap = 0\n    local curr_wrap = 0\n    for i = 1, n do\n        curr_wrap = curr_wrap + a[i]\n        if curr_wrap > max_wrap then\n            max_wrap = curr_wrap\n        end\n        if curr_wrap < min_wrap then\n            min_wrap = curr_wrap\n        end\n    end\n    local max_wrap_sum = sum - min_wrap\n    if k == 1 then\n        return max_so_far\n    end\n    return math.max(max_so_far, max_wrap_sum + (k - 2) * sum)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then max_element = a[i] end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then max_ending_here = 0 end\n    if max_so_far < max_ending_here then max_so_far = max_ending_here end\n  end\n  if max_so_far == 0 then return max_element end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local max_ending_here = 0\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then max_ending_here = 0 end\n    if max_so_far < max_ending_here then max_so_far = max_ending_here end\n  end\n  max_so_far = max_so_far + max_wrap * (k - 2)\n  return max_so_far\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local start = 1\n    local end_ = 1\n    local s = 1",
    "  local max_sum = 0\n  local max_ending_here = 0\n  local max_so_far = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    max_so_far = max_element\n  end\n  max_sum = max_so_far * k\n  local curr_prefix_sum = 0\n  local curr_suffix_sum = 0\n  local max_prefix_sum = 0\n  local max_suffix_sum = 0\n  for i = 1, n do\n    curr_prefix_sum = curr_prefix_sum + a[i]\n    max_prefix_sum = math.max(max_prefix_sum, curr_prefix_sum)\n  end\n  for i = n, 1, -1 do\n    curr_suffix_sum = curr_suffix_sum + a[i]\n    max_suffix_sum = math.max(max_suffix_sum, curr_suffix_sum)\n  end\n  local total_sum = 0\n  for i = 1, n do\n    total_sum = total_sum + a[i]\n  end\n  max_sum = math.max(max_sum, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum)\n  return max_sum\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local max_sum = max_so_far\n  local curr_val = 0\n  for i = 1, n do\n    curr_val = curr_val + a[i]\n    a[i] = -a[i]\n  end\n  local min_so_far = 0\n  local min_ending_here = 0\n  for i = 1, n do\n    min_ending_here = min_ending_here + a[i]\n    if min_ending_here > 0 then\n      min_ending_here = 0\n    end\n    if min_so_far > min_ending_here then\n      min_so_far = min_ending_here\n    end\n  end\n  max_sum = max_sum + curr_val + min_so_far\n  max_sum = max_sum * k\n  max_sum = max_sum - min_so_far\n  return max_sum\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element * k\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    local max_wrap = 0\n    local curr_wrap = 0\n    for i = 1, n do\n        curr_wrap = curr_wrap + a[i]\n        if curr_wrap < 0 then\n            curr_wrap = 0\n        end\n        if max_wrap < curr_wrap then\n            max_wrap = curr_wrap\n        end\n    end\n    return max(max_so_far, max_wrap + sum * (k - 2))\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local max_index = 1\n  local min_element = a[1]\n  local min_index = 1\n  local sum = 0\n  local i = 0\n  local j = 0\n  local max_sum = 0\n  local min_sum = 0\n  local max_sum_index = 0\n  local min_sum_index = 0\n  local max_sum_so_far = 0\n  local max_sum_ending_here = 0\n  local min_sum_so_far = 0\n  local min_sum_ending_here = 0\n  local max_sum_index_so_far = 0\n  local max_sum_index_ending_here = 0\n  local min_sum_index_so_far = 0\n  local min_sum_index_ending_here = 0\n  local max_sum_index_ending_here_start = 0\n  local min_sum_index_ending_here_start = 0\n  local max_sum_index_ending_here_end = 0\n  local min_sum_index_ending_here_end = 0\n  local max_sum_index_so_far_start = 0\n  local min_sum_index_so_far_start = 0\n  local max_sum_index_so_far_end = 0\n  local min_sum_index_so_far_end = 0\n  local max_sum_index_ending_here_start_index = 0\n  local min_sum_index_ending_here_start_index = 0\n  local max_sum_index_ending_here_end_index = 0\n  local min_sum_index_ending_here_end_index = 0\n  local max_sum_index_so_far_start_index = 0\n  local min_sum_index_so_far_start_index = 0\n  local max_sum_index_so_far_end_index = 0\n  local min_sum_index_so_far_end_index = 0\n  local max_sum_index_ending_here_start_index_start = 0\n  local min",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local min_element = a[1]\n  local min_so_far = 0\n  local sum = 0",
    "\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\n\tlocal max_element = a[1]\n\tfor i = 1, n do\n\t\tmax_element = math.max(max_element, a[i])\n\tend\n\tif max_element <= 0 then\n\t\treturn max_element * k\n\tend\n\tlocal curr_val = 0\n\tlocal max_val = 0\n\tfor i = 1, n do\n\t\tcurr_val = curr_val + a[i]\n\t\tmax_val = math.max(max_val, curr_val)\n\t\tif curr_val < 0 then\n\t\t\tcurr_val = 0\n\t\tend\n\tend\n\tlocal max_wrap = 0\n\tfor i = 1, n do\n\t\tmax_wrap = max_wrap + a[i]\n\t\ta[i] = -a[i]\n\tend\n\tcurr_val = 0\n\tfor i = 1, n do\n\t\tcurr_val = curr_val + a[i]\n\t\tmax_wrap = math.max(max_wrap, curr_val)\n\t\tif curr_val < 0 then\n\t\t\tcurr_val = 0\n\t\tend\n\tend\n\tmax_wrap = max_wrap + max_val\n\tif k == 1 then\n\t\treturn math.max(max_wrap, max_val)\n\tend\n\tif max_wrap > 0 then\n\t\treturn math.max(max_wrap, max_val + (k - 2) * max_val)\n\telse\n\t\treturn math.max(max_wrap, max_val)\n\tend\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local max_index = 1\n    local min_element = a[1]\n    local min_index = 1\n    local max_index_so_far = 1\n    local min_index_so_far = 1\n    local max_index_ending_here = 1\n    local min_index_ending_here = 1\n    local max_index_ending_here_sum = 0\n    local min_index_ending_here_sum = 0\n    local max_index_so_far_sum = 0\n    local min_index_so_far_sum = 0\n    local max_index_so_far_sum_k = 0\n    local min_index_so_far_sum_k = 0\n    local max_index_ending_here_sum_k = 0\n    local min_index_ending_here_sum_k = 0\n    local max_index_so_far_sum_k_index = 1\n    local min_index_so_far_sum_k_index = 1\n    local max_index_ending_here_sum_k_index = 1\n    local min_index_ending_here_sum_k_index = 1\n    local max_index_so_far_sum_k_index_ending_here = 1\n    local min_index_so_far_sum_k_index_ending_here = 1\n    local max_index_so_far_sum_k_index_so_far = 1\n    local min_index_so_far_sum_k_index_so_far = 1\n    local max_index_so_far_sum_k_index_so_far_sum = 0\n    local min_index_so_far_sum_k_index_so_far_sum = 0\n    local max_index_so_far_sum_k_index_so_far_sum_k = 0\n    local min_index_so_far_sum_k_index_so_far_sum_k = 0\n    local max_index_so_far_sum_k_index_so_far_sum_k_index",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local min_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    if a[i] < min_element then\n      min_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    max_so_far = max_element\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local max_ending_here = 0\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  max_so_far = max_so_far + max_wrap * (k - 2)\n  if k == 1 then\n    return max_so_far\n  end\n  return max(max_so_far, max_wrap)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = 0\n    for i = 1, n do\n        max_element = math.max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    max_so_far = max_so_far + sum * (k - 2)\n    local max_wrap = 0\n    local i = 1\n    for i = 1, n do\n        max_wrap = max_wrap + a[i]\n        if max_wrap < 0 then\n            max_wrap = 0\n        end\n        if max_so_far < max_wrap then\n            max_so_far = max_wrap\n        end\n    end\n    max_wrap = 0\n    for i = n, 1, -1 do\n        max_wrap = max_wrap + a[i]\n        if max_wrap < 0 then\n            max_wrap = 0\n        end\n        if max_so_far < max_wrap then\n            max_so_far = max_wrap\n        end\n    end\n    return max_so_far\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element < 0 then\n    return max_element * k\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local max_suffix = 0\n  local min_suffix = 0\n  for i = n, 1, -1 do\n    max_suffix = max_suffix + a[i]\n    if max_suffix > min_suffix then\n      min_suffix = max_suffix\n    end\n  end\n  local max_prefix = 0\n  local min_prefix = 0\n  for i = 1, n do\n    max_prefix = max_prefix + a[i]\n    if max_prefix < min_prefix then\n      min_prefix = max_prefix\n    end\n  end\n  local max_wrap_sum = max_wrap + min_prefix + min_suffix\n  if max_wrap_sum > max_so_far then\n    max_so_far = max_wrap_sum\n  end\n  return max_so_far * k\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element < 0 then\n    return max_element * k\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n  end\n  max_wrap = max_wrap * (k - 2)\n  return math.max(max_so_far, max_wrap + max_so_far)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local curr_sum = 0\n    local min_sum = 0\n    local result = 0",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local curr_sum = 0\n  local min_sum = 0\n  local result = 0\n  for i = 1, n do\n    curr_sum = curr_sum + a[i]\n    max_ending_here = max_ending_here + a[i]\n    if max_element < a[i] then\n      max_element = a[i]\n    end\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    if curr_sum < min_sum then\n      min_sum = curr_sum\n    end\n  end\n  if max_element < 0 then\n    return max_element\n  end\n  result = max_so_far\n  if k > 2 then\n    result = max_so_far + min_sum * (k - 2)\n  end\n  curr_sum = curr_sum * k\n  if curr_sum > result then\n    result = curr_sum\n  end\n  return result\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = max_so_far + sum * (k - 2)\n  local max_wrap = 0\n  local i = 1\n  local j = 1\n  local curr_sum = 0\n  while i <= n do\n    while j <= n and curr_sum + a[j] >= 0 do\n      curr_sum = curr_sum + a[j]\n      j = j + 1\n    end\n    if max_wrap < curr_sum then\n      max_wrap = curr_sum\n    end\n    curr_sum = curr_sum - a[i]\n    i = i + 1\n  end\n  return math.max(max_so_far, max_wrap)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local min_element = a[1]\n  local sum = 0",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local max_wrap_so_far = 0\n  local max_wrap_ending_here = 0\n  for i = 1, n do\n    max_wrap_ending_here = max_wrap_ending_here + a[i]\n    if max_wrap_ending_here < 0 then\n      max_wrap_ending_here = 0\n    end\n    if max_wrap_so_far < max_wrap_ending_here then\n      max_wrap_so_far = max_wrap_ending_here\n    end\n  end\n  local max_wrap_sum = max_wrap + max_wrap_so_far\n  return math.max(max_so_far, max_wrap_sum)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local max_index = 0\n  local min_element = a[1]\n  local min_index = 0\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n    if a[i] > max_element then\n      max_element = a[i]\n      max_index = i\n    end\n    if a[i] < min_element then\n      min_element = a[i]\n      min_index = i\n    end\n  end\n  if sum > 0 then\n    return sum * k\n  end\n  if max_element < 0 then\n    return max_element\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element * k\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    local max_wrap = 0\n    local curr_wrap = 0\n    for i = 1, n do\n        curr_wrap = curr_wrap + a[i]\n        if curr_wrap < 0 then\n            curr_wrap = 0\n        end\n        if max_wrap < curr_wrap then\n            max_wrap = curr_wrap\n        end\n    end\n    local total_sum = sum * k\n    return math.max(max_so_far, total_sum - max_wrap)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = max_so_far + sum * (k - 2)\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    if max_wrap < 0 then\n      max_wrap = 0\n    end\n    if max_so_far < max_wrap then\n      max_so_far = max_wrap\n    end\n  end\n  return max_so_far\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local min_element = a[1]\n  local min_so_far = 0\n  local sum = 0",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        max_element = math.max(max_element, a[i])\n    end\n    if max_element < 0 then\n        return max_element * k\n    end\n    for i = 1, n do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    local max_wrap = 0\n    for i = 1, n do\n        max_wrap = max_wrap + a[i]\n    end\n    max_wrap = max_wrap * (k - 2)\n    return math.max(max_so_far, max_wrap + max_so_far)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = max_so_far + sum * (k - 2)\n  local max_wrap = 0\n  local i = 1\n  local j = 1\n  local curr_sum = 0\n  while j <= n do\n    curr_sum = curr_sum + a[j]\n    while curr_sum > max_so_far and i < j do\n      curr_sum = curr_sum - a[i]\n      i = i + 1\n    end\n    if curr_sum > max_wrap then\n      max_wrap = curr_sum\n    end\n    j = j + 1\n  end\n  return max_wrap\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local curr_sum = 0\n  local min_sum = 0\n  local result = 0",
    "\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\n\tlocal max_element = a[1]",
    "  local max_so_far, max_ending_here = 0, 0\n  local max_subarray_sum = 0\n  local start, finish, s = 0, 0, 0",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local curr_sum = 0\n    local min_sum = 0\n    local max_sum = 0\n    local result = 0",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element * k\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    local max_wrap = sum - max_ending_here\n    return math.max(max_so_far, max_wrap * (k - 1) + max_so_far)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element <= 0 then\n    return max_element * k\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local max_ending_here = 0\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  max_wrap = max_wrap + max_ending_here\n  if max_wrap > max_so_far then\n    max_so_far = max_wrap\n  end\n  return max_so_far * k\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local sum = 0\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    sum = sum + a[i]\n  end\n  if max_element < 0 then\n    return max_element\n  end\n  local max_sum = sum * k\n  local curr_max = 0\n  local prev_max = 0\n  for i = 1, n do\n    curr_max = math.max(a[i], curr_max + a[i])\n    max_so_far = math.max(max_so_far, curr_max)\n  end\n  for i = 1, n do\n    prev_max = math.max(a[i], prev_max + a[i])\n    max_ending_here = math.max(max_ending_here, prev_max)\n  end\n  max_ending_here = max_ending_here * (k - 2)\n  return math.max(max_sum, max_ending_here + max_so_far)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local sum = 0\n  local start = 0\n  local end_ = 0\n  local s = 0",
    "  local max_sum = 0\n  local cur_sum = 0\n  for i = 1, n do\n    cur_sum = cur_sum + a[i]\n    if cur_sum < 0 then\n      cur_sum = 0\n    end\n    if max_sum < cur_sum then\n      max_sum = cur_sum\n    end\n  end\n  if max_sum == 0 then\n    return max_sum\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local cur_sum = 0\n  for i = 1, n do\n    cur_sum = cur_sum + a[i]\n    if cur_sum < 0 then\n      cur_sum = 0\n    end\n    if max_sum < cur_sum then\n      max_sum = cur_sum\n    end\n  end\n  max_wrap = max_wrap + cur_sum\n  if k == 1 then\n    return max_sum\n  end\n  return math.max(max_sum, max_wrap)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local start = 1\n    local end_ = 1\n    local s = 1\n    for i = 1, n do\n        max_element = math.max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n            s = i + 1\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n            start = s\n            end_ = i\n        end\n    end\n    if max_so_far == 0 then\n        max_so_far = max_element\n    end\n    return max_so_far * k - sum(a, start - 1, end_)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element < 0 then\n    return max_element * k\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local max_suffix_sum = 0\n  local min_prefix_sum = 0\n  for i = 1, n do\n    max_suffix_sum = max_suffix_sum + a[i]\n    if max_suffix_sum > max_wrap then\n      max_suffix_sum = max_wrap\n    end\n    if max_suffix_sum < min_prefix_sum then\n      min_prefix_sum = max_suffix_sum\n    end\n  end\n  local max_wrap_sum = max_wrap - min_prefix_sum\n  return math.max(max_so_far, max_wrap_sum)\nend",
    "  local max_sum = 0\n  local max_ending_here = 0\n  local max_so_far = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element < 0 then\n    return max_element * k\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  max_sum = max_so_far * k\n  local curr_val = 0\n  for i = 1, n do\n    curr_val = curr_val + a[i]\n  end\n  local max_wrap = curr_val\n  for i = 1, n do\n    curr_val = curr_val - (a[i] * k)\n    max_wrap = math.max(max_wrap, curr_val)\n  end\n  return math.max(max_sum, max_wrap)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = max_so_far + sum * (k - 2)\n  return max_so_far\nend",
    "  local max_sum = 0\n  local curr_sum = 0\n  local i = 0\n  local j = 0\n  local max_i = 0\n  local max_j = 0\n  local max_start = 0\n  local max_end = 0\n  local start = 0\n  local end_ = 0\n  local sum = 0\n  for i = 0, n - 1 do\n    sum = sum + a[i]\n  end\n  max_sum = sum\n  max_start = 0\n  max_end = n - 1\n  for i = 1, k - 1 do\n    for j = 0, n - 1 do\n      curr_sum = curr_sum + a[j]\n      if curr_sum < 0 then\n        curr_sum = 0\n        start = j + 1\n      elseif curr_sum > max_sum then\n        max_sum = curr_sum\n        max_start = start\n        max_end = j\n      end\n    end\n    if max_end ~= n - 1 then\n      max_i = max_end + 1\n    else\n      max_i = 0\n    end\n    if max_start ~= 0 then\n      max_j = max_start - 1\n    else\n      max_j = n - 1\n    end\n    local sum = 0\n    for j = max_i, n - 1 do\n      sum = sum + a[j]\n    end\n    for j = 0, max_j do\n      sum = sum + a[j]\n    end\n    if sum > max_sum then\n      max_sum = sum\n      max_start = max_i\n      max_end = max_j\n    end\n    start = max_i\n    curr_sum = 0\n  end\n  return max_sum\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local max_index = 1\n    local min_element = a[1]\n    local min_index = 1\n    local sum = 0\n    local i = 1\n    while i <= n do\n        if a[i] > max_element then\n            max_element = a[i]\n            max_index = i\n        end\n        if a[i] < min_element then\n            min_element = a[i]\n            min_index = i\n        end\n        sum = sum + a[i]\n        i = i + 1\n    end\n    if k == 1 then\n        return max_sub_array_sum(a, n)\n    end\n    if max_element <= 0 then\n        return max_element * k\n    end\n    if min_element >= 0 then\n        return sum * k\n    end\n    local max_left_sum = 0\n    local max_right_sum = 0\n    local left_sum = 0\n    local right_sum = 0\n    local i = 1\n    while i < max_index do\n        left_sum = left_sum + a[i]\n        if left_sum > max_left_sum then\n            max_left_sum = left_sum\n        end\n        i = i + 1\n    end\n    local i = n\n    while i > min_index do\n        right_sum = right_sum + a[i]\n        if right_sum > max_right_sum then\n            max_right_sum = right_sum\n        end\n        i = i - 1\n    end\n    local max_sub_array_sum_repeated_left = max_sub_array_sum_repeated(a, max_index - 1, k)\n    local max_sub_array_sum_repeated_right = max_sub_array_sum_repeated(a, n - min_index, k)\n    return math.max(max_sub_array_sum_repeated_left, max_sub_array_sum_repeated_right, max_left_sum + max_right_sum + (",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local max_element_index = 1\n  local start_index = 1\n  local end_index = 1\n  local s = 0\n  local i = 1\n  while i <= n do\n    max_ending_here = max_ending_here + a[i]\n    if max_element < a[i] then\n      max_element = a[i]\n      max_element_index = i\n    end\n    if max_ending_here < 0 then\n      max_ending_here = 0\n      s = i + 1\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n      start_index = s\n      end_index = i\n    end\n    i = i + 1\n  end\n  if max_so_far == 0 then\n    max_so_far = max_element\n    start_index = max_element_index\n    end_index = max_element_index\n  end\n  return max_so_far * k - sum(a, start_index, end_index)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  local max_wrap = 0\n  local curr_wrap = 0\n  for i = 1, n do\n    curr_wrap = curr_wrap + a[i]\n    if curr_wrap < 0 then\n      curr_wrap = 0\n    end\n    if max_wrap < curr_wrap then\n      max_wrap = curr_wrap\n    end\n  end\n  local max_wrap_sum = max_wrap + sum * (k - 2)\n  return math.max(max_so_far, max_wrap_sum)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element * k\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  local max_wrap = sum + max_sub_array_sum_repeated(a, n, 1)\n  return math.max(max_wrap, max_so_far)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local min_element = a[1]\n  local min_ending_here = 0\n  local min_so_far = 0\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    min_ending_here = min_ending_here + a[i]\n    if min_ending_here > 0 then\n      min_ending_here = 0\n    end\n    if min_so_far > min_ending_here then\n      min_so_far = min_ending_here\n    end\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    if a[i] < min_element then\n      min_element = a[i]\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local max_wrap = sum - min_so_far\n  if k == 1 then\n    return max_so_far\n  end\n  return max(max_so_far, max_wrap)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local max_index = 1\n  local min_element = a[1]\n  local min_index = 1\n  local sum = 0\n  local i = 1\n  while i <= n do\n    sum = sum + a[i]\n    if a[i] > max_element then\n      max_element = a[i]\n      max_index = i\n    end\n    if a[i] < min_element then\n      min_element = a[i]\n      min_index = i\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    i = i + 1\n  end\n  if max_so_far == 0 then\n    max_so_far = max_element\n  end\n  local max_wrap = sum - min_element\n  if k == 1 then\n    return max_so_far\n  end\n  if max_wrap > 0 then\n    return math.max(max_wrap, max_so_far + (k - 2) * sum + max_wrap)\n  end\n  return max_so_far\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = max_so_far + sum * (k - 2)\n  local max_wrap = 0\n  local i = 1\n  local curr_sum = 0\n  while i <= n do\n    if curr_sum + a[i] > 0 then\n      curr_sum = curr_sum + a[i]\n    else\n      curr_sum = 0\n    end\n    if curr_sum > max_wrap then\n      max_wrap = curr_sum\n    end\n    i = i + 1\n  end\n  return math.max(max_so_far, max_wrap)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local min_element = a[1]\n  local min_ending_here = 0\n  local max_wrap_sum = 0\n  local i = 0",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element * k\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = math.max(max_so_far, sum * k)\n  local curr_prefix = 0\n  local curr_suffix = 0\n  local max_prefix = 0\n  local max_suffix = 0\n  for i = 1, n do\n    curr_prefix = curr_prefix + a[i]\n    max_prefix = math.max(max_prefix, curr_prefix)\n  end\n  for i = n, 1, -1 do\n    curr_suffix = curr_suffix + a[i]\n    max_suffix = math.max(max_suffix, curr_suffix)\n  end\n  return math.max(max_so_far, max_prefix + max_suffix + (k - 2) * sum)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local start = 1\n  local end_ = 1\n  local s = 1",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local min_element = a[1]",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local start = 1\n  local end_ = 1\n  local s = 1",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local max_index = 1\n  local min_element = a[1]\n  local min_index = 1\n  local sum = 0\n  local i = 1\n  while i <= n do\n    if a[i] > max_element then\n      max_element = a[i]\n      max_index = i\n    end\n    if a[i] < min_element then\n      min_element = a[i]\n      min_index = i\n    end\n    sum = sum + a[i]\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    i = i + 1\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local circular_sum = sum - min_element\n  local circular_max = max_sub_array_sum(a, n)\n  if circular_sum > max_so_far then\n    max_so_far = circular_sum\n  end\n  if circular_max > max_so_far then\n    max_so_far = circular_max\n  end\n  return max_so_far * k - sum + min_element\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element * k\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    local max_wrap = 0\n    local curr_wrap = 0\n    for i = 1, n do\n        curr_wrap = curr_wrap + a[i]\n        if curr_wrap < 0 then\n            curr_wrap = 0\n        end\n        if max_wrap < curr_wrap then\n            max_wrap = curr_wrap\n        end\n    end\n    return math.max(max_so_far, sum * (k - 2) + max_wrap)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local max_ending_here = 0\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  max_wrap = max_wrap + max_so_far\n  if k == 1 then\n    return max_so_far\n  end\n  return max(max_wrap, max_so_far)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local max_index = 1\n  local min_element = a[1]\n  local min_index = 1\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n    if a[i] > max_element then\n      max_element = a[i]\n      max_index = i\n    end\n    if a[i] < min_element then\n      min_element = a[i]\n      min_index = i\n    end\n  end\n  if max_element < 0 then\n    return max_element * k\n  end\n  local max_sum = sum * k\n  local curr_val = 0\n  for i = 1, n do\n    curr_val = curr_val + i * a[i]\n  end\n  local max_val = curr_val\n  for i = 1, n do\n    curr_val = curr_val - sum\n    curr_val = curr_val + a[i] * n\n    if curr_val > max_val then\n      max_val = curr_val\n    end\n  end\n  return math.max(max_val, max_sum)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local max_index = 0\n  local min_element = a[1]\n  local min_index = 0\n  local sum = 0\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n      max_index = i\n    end\n    if a[i] < min_element then\n      min_element = a[i]\n      min_index = i\n    end\n    sum = sum + a[i]\n  end\n  if max_element < 0 then\n    return max_element * k\n  end\n  if min_element >= 0 then\n    return sum * k\n  end\n  local max_wrap = 0\n  local min_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    if max_wrap < 0 then\n      max_wrap = 0\n    end\n    if max_wrap > max_so_far then\n      max_so_far = max_wrap\n    end\n    min_wrap = min_wrap + a[i]\n    if min_wrap > 0 then\n      min_wrap = 0\n    end\n    if min_wrap < min_element then\n      min_element = min_wrap\n    end\n  end\n  local max_non_wrap = 0\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_ending_here > max_so_far then\n      max_so_far = max_ending_here\n    end\n  end\n  return math.max(max_so_far, sum * k - min_element, max_wrap + (sum - min_wrap) * (k - 2))\nend",
    "\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\n\tlocal max_element = a[1]\n\tlocal i = 0\n\tlocal j = 0\n\tlocal k = k or 1\n\tlocal n = n or #a\n\tfor i = 1, n do\n\t\tif a[i] > max_element then\n\t\t\tmax_element = a[i]\n\t\tend\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0 then\n\t\t\tmax_ending_here = 0\n\t\t\tj = i + 1\n\t\tend\n\t\tif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tif max_element < 0 then\n\t\treturn max_element\n\tend\n\tif max_so_far == 0 then\n\t\treturn max_element\n\tend\n\tlocal max_wrap = 0\n\tfor i = 1, n do\n\t\tmax_wrap = max_wrap + a[i]\n\t\ta[i] = -a[i]\n\tend\n\tlocal max_ending_here = 0\n\tfor i = j, n do\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0 then\n\t\t\tmax_ending_here = 0\n\t\tend\n\t\tif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\tmax_so_far = max_so_far + max_wrap * (k - 2)\n\treturn max_so_far\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local max_index = 1\n  local min_element = a[1]\n  local min_index = 1\n  local sum = 0",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local i = 0\n  local start = 0\n  local end_ = 0\n  local s = 0",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = max_so_far + sum * (k - 2)\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    if max_wrap < 0 then\n      max_wrap = 0\n    end\n    if max_so_far < max_wrap then\n      max_so_far = max_wrap\n    end\n  end\n  return max_so_far\nend",
    "  local max_sum = 0\n  local max_ending_here = 0\n  local min_ending_here = 0\n  local max_so_far = 0\n  local min_so_far = 0\n  local i = 0\n  while i < n do\n    max_ending_here = max_ending_here + a[i]\n    min_ending_here = min_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if min_ending_here > 0 then\n      min_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    if min_so_far > min_ending_here then\n      min_so_far = min_ending_here\n    end\n    i = i + 1\n  end\n  local min_sum = min_so_far * k\n  local max_sum = max_so_far\n  local total_sum = 0\n  i = 0\n  while i < n do\n    total_sum = total_sum + a[i]\n    i = i + 1\n  end\n  if total_sum < 0 then\n    max_sum = math.max(max_sum, total_sum * k)\n  else\n    max_sum = math.max(max_sum, total_sum * (k - 2) + max_so_far)\n  end\n  return max_sum\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        max_element = math.max(max_element, a[i])\n    end\n    if max_element <= 0 then\n        return max_element * k\n    end\n    for i = 1, n do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    local max_wrap = 0\n    for i = 1, n do\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    end\n    max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n    if max_wrap > max_so_far then\n        max_so_far = max_wrap\n    end\n    return max_so_far * k\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  local max_wrap = sum * k - max_sub_array_sum(a, n)\n  return math.max(max_so_far, max_wrap)\nend",
    "  local max_so_far = -math.huge\n  local max_ending_here = 0\n  local max_element = -math.huge\n  local sum = 0\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    sum = sum + a[i]\n  end\n  if max_element < 0 then\n    return max_element * k\n  end\n  for i = 1, n * 2 do\n    max_ending_here = max_ending_here + a[i % n + 1]\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n  end\n  return max_so_far + (k - 2) * sum\nend",
    "   local max_so_far = 0\n   local max_ending_here = 0\n   local max_element = a[1]\n   for i = 1, n do\n      if a[i] > max_element then\n         max_element = a[i]\n      end\n      max_ending_here = max_ending_here + a[i]\n      if max_ending_here < 0 then\n         max_ending_here = 0\n      end\n      if max_so_far < max_ending_here then\n         max_so_far = max_ending_here\n      end\n   end\n   if max_so_far == 0 then\n      return max_element\n   end\n   local sum = 0\n   for i = 1, n do\n      sum = sum + a[i]\n   end\n   max_so_far = max_so_far + sum * (k - 2)\n   local max_wrap = 0\n   local i = 1\n   for i = 1, n do\n      max_wrap = max_wrap + a[i]\n      if max_wrap < 0 then\n         max_wrap = 0\n      end\n      if max_so_far < max_wrap then\n         max_so_far = max_wrap\n      end\n   end\n   max_wrap = 0\n   for i = 1, n do\n      max_wrap = max_wrap + a[i]\n      if max_wrap < 0 then\n         max_wrap = 0\n      end\n      if max_so_far < max_wrap then\n         max_so_far = max_wrap\n      end\n   end\n   return max_so_far\nend",
    "  local max_sum = 0\n  local max_ending_here = 0\n  local min_ending_here = 0\n  local all_sum = 0\n  for i = 1, n do\n    all_sum = all_sum + a[i]\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_sum < max_ending_here then\n      max_sum = max_ending_here\n    end\n    min_ending_here = min_ending_here + a[i]\n    if min_ending_here > 0 then\n      min_ending_here = 0\n    end\n  end\n  if k == 1 then\n    return max_sum\n  end\n  local max_wrap = all_sum - min_ending_here\n  if k == 2 then\n    return max(max_sum, max_wrap)\n  end\n  return max(max_sum, max_wrap + (k - 2) * all_sum)\nend",
    "   local max_so_far = 0\n   local max_ending_here = 0\n   local max_element = a[1]\n   for i = 1, n do\n      if a[i] > max_element then\n         max_element = a[i]\n      end\n      max_ending_here = max_ending_here + a[i]\n      if max_ending_here < 0 then\n         max_ending_here = 0\n      end\n      if max_so_far < max_ending_here then\n         max_so_far = max_ending_here\n      end\n   end\n   if max_so_far == 0 then\n      return max_element\n   end\n   local sum = 0\n   for i = 1, n do\n      sum = sum + a[i]\n   end\n   local max_wrap = sum * k\n   local max_wrap_so_far = 0\n   local max_wrap_ending_here = 0\n   for i = 1, n do\n      max_wrap_ending_here = max_wrap_ending_here + a[i]\n      if max_wrap_ending_here < 0 then\n         max_wrap_ending_here = 0\n      end\n      if max_wrap_so_far < max_wrap_ending_here then\n         max_wrap_so_far = max_wrap_ending_here\n      end\n   end\n   return math.max(max_so_far, max_wrap - max_wrap_so_far)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local max_sum_of_all_subarrays = 0\n  local max_sum_of_all_subarrays_ending_at_i = 0\n  local max_sum_of_all_subarrays_starting_at_i = 0\n  local max_sum_of_all_subarrays_starting_and_ending_at_i = 0\n  local max_sum_of_all_subarrays_starting_and_ending_at_i_mod_k = 0\n  local max_sum_of_all_subarrays_ending_at_i_mod_k = 0\n  local max_sum_of_all_subarrays_starting_at_i_mod_k = 0\n  local max_sum_of_all_subarrays_mod_k = 0",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local start = 1\n    local end_ = 1\n    local s = 1\n    for i = 1, n do\n        max_element = math.max(max_element, a[i])\n    end\n    if max_element < 0 then\n        return max_element * k\n    end\n    for i = 1, n * 2 do\n        max_ending_here = max_ending_here + a[i % n + 1]\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n            start = s\n            end_ = i % n + 1\n        end\n        if max_ending_here < 0 then\n            max_ending_here = 0\n            s = i % n + 1\n        end\n    end\n    return max_so_far\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local start = 0\n  local end_ = 0\n  local s = 0",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = max_so_far + sum * (k - 2)\n  local max_wrap = 0\n  local i = 1\n  local j = 1\n  local curr_sum = 0\n  for i = 1, n do\n    curr_sum = curr_sum + a[i]\n    if curr_sum < 0 then\n      curr_sum = 0\n      j = i + 1\n    end\n    if max_wrap < curr_sum then\n      max_wrap = curr_sum\n    end\n  end\n  return math.max(max_so_far, max_wrap + sum * (k - 2))\nend",
    "    local sum = 0\n    local max_sum = math.mininteger\n    local max_ending_here = 0\n    local max_so_far = math.mininteger\n    local start = 1\n    local end_ = 1\n    local s = 1\n    for i = 1, n * k do\n        max_ending_here = max_ending_here + a[i % n + 1]\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n            start = s\n            end_ = i\n        end\n        if max_ending_here < 0 then\n            max_ending_here = 0\n            s = i + 1\n        end\n    end\n    return max_so_far, start, end_\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  local max_sum = sum * k\n  local curr_prefix = 0\n  local curr_suffix = 0\n  local max_prefix = 0\n  local max_suffix = 0\n  for i = 1, n do\n    curr_prefix = curr_prefix + a[i]\n    if curr_prefix < 0 then\n      curr_prefix = 0\n    end\n    if max_prefix < curr_prefix then\n      max_prefix = curr_prefix\n    end\n    curr_suffix = curr_suffix + a[n - i + 1]\n    if curr_suffix < 0 then\n      curr_suffix = 0\n    end\n    if max_suffix < curr_suffix then\n      max_suffix = curr_suffix\n    end\n  end\n  return math.max(max_so_far, max_sum - max_prefix, max_sum - max_suffix)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        max_element = math.max(max_element, a[i])\n        max_ending_here = math.max(a[i], max_ending_here + a[i])\n        max_so_far = math.max(max_so_far, max_ending_here)\n    end\n    if max_so_far == 0 then\n        return max_element\n    end\n    local max_wrap = 0\n    for i = 1, n do\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    end\n    local max_ending_here = 0\n    for i = 1, n do\n        max_ending_here = math.max(a[i], max_ending_here + a[i])\n        max_so_far = math.max(max_so_far, max_ending_here)\n    end\n    max_so_far = math.max(max_so_far, max_wrap * (k - 2) + max_so_far)\n    return max_so_far\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element\n    end\n    local max_wrap = 0\n    for i = 1, n do\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    end\n    local max_ending_here = 0\n    for i = 1, n do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    max_so_far = max_so_far + max_wrap * (k - 2)\n    return max_so_far\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local start = 1\n  local end_ = 1\n  local s = 1\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element < 0 then\n    return max_element\n  end\n  max_ending_here = a[1]\n  for i = 2, n do\n    max_ending_here = math.max(a[i], max_ending_here + a[i])\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n      start = s\n      end_ = i\n    end\n    if max_ending_here < 0 then\n      max_ending_here = 0\n      s = i + 1\n    end\n  end\n  local max_wrap = 0\n  local temp = 0\n  for i = 1, n do\n    temp = temp + a[i]\n    max_wrap = math.max(temp, max_wrap)\n    if temp < 0 then\n      temp = 0\n    end\n  end\n  max_wrap = max_wrap * k\n  if max_wrap > max_so_far then\n    return max_wrap\n  end\n  local max_double_wrap = 0\n  for i = 1, n do\n    max_double_wrap = max_double_wrap + a[i]\n  end\n  max_double_wrap = max_double_wrap * 2\n  return math.max(max_so_far, max_double_wrap)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  local max_wrap = 0\n  local curr_wrap = 0\n  for i = 1, n do\n    curr_wrap = curr_wrap + a[i]\n    if curr_wrap < 0 then\n      curr_wrap = 0\n    end\n    if max_wrap < curr_wrap then\n      max_wrap = curr_wrap\n    end\n  end\n  return max(max_so_far, sum * (k - 2) + max_wrap)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local start = 1\n    local end_ = 1\n    local s = 1",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element < 0 then\n    return max_element * k\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n  end\n  max_wrap = max_wrap * (k - 2)\n  return math.max(max_so_far, max_wrap + max_so_far)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local start = 1\n    local end_ = 1\n    local s = 1\n    local max_sum = 0\n    local max_start = 1\n    local max_end = 1\n    for i = 1, n * k do\n        max_ending_here = max_ending_here + a[i % n + 1]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n            s = i + 1\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n            start = s\n            end_ = i\n        end\n        if max_element < a[i % n + 1] then\n            max_element = a[i % n + 1]\n        end\n    end\n    if max_so_far == 0 then\n        max_sum = max_element\n        max_start = 1\n        max_end = 1\n    else\n        local index = (end_ + 1) % n + 1\n        local curr_sum = max_so_far\n        local curr_start = start\n        local curr_end = end_\n        while index ~= start do\n            curr_sum = curr_sum - a[index]\n            curr_start = curr_start + 1\n            if max_sum < curr_sum then\n                max_sum = curr_sum\n                max_start = curr_start\n                max_end = curr_end\n            end\n            index = index % n + 1\n        end\n    end\n    return max_sum, max_start, max_end\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local start = 1\n    local end_ = 1\n    local s = 1\n    local i = 1\n    while i <= n do\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n            start = s\n            end_ = i\n        end\n        if max_ending_here < 0 then\n            max_ending_here = 0\n            s = i + 1\n        end\n        if max_element < a[i] then\n            max_element = a[i]\n        end\n        i = i + 1\n    end\n    if max_so_far == 0 then\n        max_so_far = max_element\n    end\n    return max_so_far * k\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local min_element = a[1]\n  local min_so_far = 0\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    if a[i] < min_element then\n      min_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    min_so_far = min_so_far + a[i]\n    if min_so_far > 0 then\n      min_so_far = 0\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local max_wrap = sum - min_so_far\n  if k == 1 then\n    return max_so_far\n  end\n  return math.max(max_wrap, max_so_far + (k - 2) * sum)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_so_far\n  end\n  local max_sum = 0\n  local curr_val = 0\n  for i = 1, n do\n    curr_val = curr_val + a[i]\n    max_sum = max_sum + a[i]\n  end\n  local max_val = curr_val\n  for i = 2, k do\n    curr_val = curr_val + max_sum\n    if curr_val > max_val then\n      max_val = curr_val\n    end\n  end\n  return max_val\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local min_element = a[1]\n    local min_so_far = 0\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n        max_ending_here = max_ending_here + a[i]\n        if max_element < a[i] then\n            max_element = a[i]\n        end\n        if min_element > a[i] then\n            min_element = a[i]\n        end\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n        if min_so_far > min_ending_here then\n            min_so_far = min_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        max_so_far = max_element\n    end\n    if min_so_far == 0 then\n        min_so_far = min_element\n    end\n    local circular_sum = sum * k\n    local non_circular_sum = sum - min_so_far\n    local max_circular_sum = circular_sum - min_so_far\n    if max_circular_sum > max_so_far then\n        return max_circular_sum\n    else\n        return max_so_far\n    end\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local max_ending_here = 0\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  max_so_far = max_so_far + max_wrap * (k - 2)\n  return max_so_far\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local start = 1\n  local end_ = 1\n  local s = 1",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local i = 0\n    local j = 0\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n            j = i + 1\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element * k\n    end\n    local curr_sum = 0\n    local min_sum = 0\n    for i = j, n do\n        curr_sum = curr_sum + a[i]\n    end\n    min_sum = curr_sum\n    for i = 1, n do\n        curr_sum = curr_sum - a[i] + a[(i + n - 1) % n + 1]\n        if curr_sum < min_sum then\n            min_sum = curr_sum\n        end\n    end\n    return max(max_so_far, max_so_far + (k - 2) * curr_sum + min_sum)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    local max_wrap = sum * k - max_so_far\n    return math.max(max_so_far, max_wrap)\nend",
    "  local max_sum = 0\n  local curr_sum = 0\n  for i = 1, n do\n    curr_sum = curr_sum + a[i]\n    if curr_sum < 0 then\n      curr_sum = 0\n    end\n    if max_sum < curr_sum then\n      max_sum = curr_sum\n    end\n  end\n  if max_sum == 0 then\n    return max_sum\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local curr_sum = 0\n  for i = 1, n do\n    curr_sum = curr_sum + a[i]\n    if curr_sum < 0 then\n      curr_sum = 0\n    end\n    if max_sum < curr_sum then\n      max_sum = curr_sum\n    end\n  end\n  max_wrap = max_wrap + curr_sum\n  return math.max(max_sum, max_wrap * (k - 2))\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = max_so_far + sum * (k - 2)\n  local max_wrap = 0\n  local i = 1\n  local j = 1\n  local curr_sum = 0\n  while j <= n do\n    curr_sum = curr_sum + a[j]\n    if curr_sum < 0 then\n      i = j + 1\n      curr_sum = 0\n    elseif curr_sum > max_wrap then\n      max_wrap = curr_sum\n    end\n    j = j + 1\n  end\n  return math.max(max_so_far, max_wrap)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local start = 1\n    local end_ = 1\n    local s = 1",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local max_index = 1\n    local min_element = a[1]\n    local min_index = 1\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n        if a[i] > max_element then\n            max_element = a[i]\n            max_index = i\n        end\n        if a[i] < min_element then\n            min_element = a[i]\n            min_index = i\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_element < 0 then\n        return max_element * k\n    end\n    local circular_sum = sum - a[min_index]\n    local max_circular_sum = circular_sum * k + sum * (k - 1)\n    return math.max(max_so_far, max_circular_sum)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local max_index = 1\n    local start_index = 1\n    local end_index = 1\n    local s = 0",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element\n    end\n    local max_wrap = 0\n    for i = 1, n do\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    end\n    local max_ending_here = 0\n    for i = 1, n do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    max_so_far = max_so_far + max_wrap * (k - 2)\n    return max_so_far\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element * k\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  local max_wrap = sum - max_so_far\n  return max(max_so_far, max_wrap * (k - 1) + max_so_far)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = max_so_far + sum * (k - 2)\n  local max_wrap = 0\n  local i = 1\n  local j = 1\n  local curr_sum = 0\n  while j <= n do\n    curr_sum = curr_sum + a[j]\n    if curr_sum < 0 then\n      i = j + 1\n      curr_sum = 0\n    end\n    if max_wrap < curr_sum then\n      max_wrap = curr_sum\n    end\n    j = j + 1\n  end\n  return math.max(max_so_far, max_wrap)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element * k\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    local max_wrap = 0\n    local curr_wrap = 0\n    for i = 1, n do\n        curr_wrap = curr_wrap + a[i]\n        if curr_wrap < 0 then\n            curr_wrap = 0\n        end\n        if max_wrap < curr_wrap then\n            max_wrap = curr_wrap\n        end\n    end\n    local result = max_wrap + sum * (k - 2) + max_so_far\n    return result\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local min_element = a[1]\n  local min_so_far = 0\n  local sum = 0",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local start = 0\n    local end_ = 0\n    local s = 0",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    local max_wrap = 0\n    local max_wrap_ending_here = 0\n    for i = 1, n do\n        max_wrap_ending_here = max_wrap_ending_here + a[i]\n        if max_wrap_ending_here < 0 then\n            max_wrap_ending_here = 0\n        end\n        if max_wrap < max_wrap_ending_here then\n            max_wrap = max_wrap_ending_here\n        end\n    end\n    max_wrap = max_wrap + sum * (k - 2)\n    return math.max(max_so_far, max_wrap)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local min_element = a[1]\n  local min_ending_here = 0\n  local sum = 0"
  ]
}