{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "lua",
  "prompt": "-- Write a function to find the largest sum of a contiguous table in the modified table which is formed by repeating the given table k times.\nlocal function max_sub_array_sum_repeated(a, n, k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum_repeated\n    lu.assertEquals(candidate({10, 20, -30, -1}, 4, 3), 30)\n    lu.assertEquals(candidate({-1, 10, 20}, 3, 2), 59)\n    lu.assertEquals(candidate({-1, -2, -3}, 3, 3), -1)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    local max_wrap = 0\n    local curr_wrap = 0\n    for i = 1, n do\n        curr_wrap = curr_wrap + a[i]\n        if curr_wrap < 0 then\n            curr_wrap = 0\n        end\n        if max_wrap < curr_wrap then\n            max_wrap = curr_wrap\n        end\n    end\n    return max(max_so_far, sum * (k - 2) + max_wrap)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local i = 0\n    local j = 0\n    local start = 0\n    local end_ = 0\n    local s = 0",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local min_element = a[1]\n  local min_ending_here = 0\n  local min_so_far = 0\n  local sum = 0",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element * k\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    local max_wrap = 0\n    local curr_wrap = 0\n    for i = 1, n do\n        curr_wrap = curr_wrap + a[i]\n        if curr_wrap < 0 then\n            curr_wrap = 0\n        end\n        if max_wrap < curr_wrap then\n            max_wrap = curr_wrap\n        end\n    end\n    return math.max(max_so_far, sum * (k - 2) + max_wrap)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local i = 0\n  local j = 0\n  local start = 0\n  local end_ = 0\n  local s = 0",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local max_index = 1\n  local min_element = a[1]\n  local min_index = 1\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n    if a[i] > max_element then\n      max_element = a[i]\n      max_index = i\n    end\n    if a[i] < min_element then\n      min_element = a[i]\n      min_index = i\n    end\n  end\n  if sum > 0 then\n    return sum * k\n  end\n  if max_element < 0 then\n    return max_element\n  end\n  max_so_far = a[1]\n  max_ending_here = a[1]\n  for i = 2, n do\n    max_ending_here = math.max(a[i], max_ending_here + a[i])\n    max_so_far = math.max(max_so_far, max_ending_here)\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  max_wrap = max_wrap + max_sub_array_sum_repeated(a, n, 1)\n  return math.max(max_so_far, max_wrap)\nend",
    "\tlocal max_so_far = 0\n\tlocal max_ending_here = 0\n\tlocal max_element = a[1]\n\tlocal start = 1\n\tlocal end_ = 1\n\tlocal s = 1\n\tfor i = 1, n do\n\t\tmax_element = math.max(max_element, a[i])\n\t\tmax_ending_here = max_ending_here + a[i]\n\t\tif max_ending_here < 0 then\n\t\t\tmax_ending_here = 0\n\t\t\ts = i + 1\n\t\telseif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\t\tstart = s\n\t\t\tend_ = i\n\t\tend\n\tend\n\tif max_element < 0 then\n\t\treturn max_element\n\tend\n\tlocal curr_sum = 0\n\tlocal curr_start = 1\n\tlocal curr_end = 1\n\tlocal max_sum = 0\n\tlocal max_start = 1\n\tlocal max_end = 1\n\tfor i = 1, n * k do\n\t\tcurr_sum = curr_sum + a[((i - 1) % n) + 1]\n\t\tcurr_end = ((i - 1) % n) + 1\n\t\tif curr_sum < 0 then\n\t\t\tcurr_sum = 0\n\t\t\tcurr_start = i + 1\n\t\telseif max_sum < curr_sum then\n\t\t\tmax_sum = curr_sum\n\t\t\tmax_start = curr_start\n\t\t\tmax_end = curr_end\n\t\tend\n\tend\n\tif max_sum > max_so_far then\n\t\tstart = ((max_start - 1) % n) + 1\n\t\tend_ = max_end\n\tend\n\treturn max_so_far, start, end_\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local start = 1\n    local end_ = 1\n    local s = 1\n    for i = 1, n do\n        max_element = math.max(max_element, a[i])\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n            s = i + 1\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n            start = s\n            end_ = i\n        end\n    end\n    if max_so_far == 0 then\n        max_so_far = max_element\n    end\n    return max_so_far * k - (k - 1) * (sum(a, n) - max_so_far)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element < 0 then\n    return max_element * k\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local max_suffix = 0\n  local max_prefix = 0\n  for i = 1, n do\n    max_suffix = max_suffix + a[i]\n    if max_suffix < 0 then\n      max_suffix = 0\n    end\n  end\n  for i = n, 1, -1 do\n    max_prefix = max_prefix + a[i]\n    if max_prefix < 0 then\n      max_prefix = 0\n    end\n  end\n  local max_wrap_sum = max_suffix + max_prefix\n  if max_wrap_sum > max_so_far then\n    max_so_far = max_wrap_sum\n  end\n  return max_so_far * k - max_wrap\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local i = 0\n  while i < n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    i = i + 1\n  end\n  if max_so_far == 0 then\n    return max_element * k\n  end\n  local sum = 0\n  i = 0\n  while i < n do\n    sum = sum + a[i]\n    i = i + 1\n  end\n  local max_wrap = 0\n  local i = 0\n  local curr_sum = 0\n  while i < n do\n    curr_sum = curr_sum + a[i]\n    if curr_sum > max_wrap then\n      max_wrap = curr_sum\n    end\n    i = i + 1\n  end\n  local max_wrap_sum = sum * k - max_wrap\n  return math.max(max_so_far, max_wrap_sum)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element\n    end\n    local max_wrap = 0\n    for i = 1, n do\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    end\n    local max_ending_here = 0\n    for i = 1, n do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    max_wrap = max_wrap + max_ending_here\n    if k == 1 then\n        return max_so_far\n    end\n    return math.max(max_so_far, max_wrap)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local min_element = a[1]\n  local min_so_far = 0\n  local max_sum = 0\n  local min_sum = 0\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n    if max_element < a[i] then\n      max_element = a[i]\n    end\n    if min_element > a[i] then\n      min_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    min_so_far = min_so_far + a[i]\n    if min_so_far > 0 then\n      min_so_far = 0\n    end\n    if min_sum > min_so_far then\n      min_sum = min_so_far\n    end\n  end\n  if k == 1 then\n    return max_so_far\n  end\n  if sum > 0 then\n    max_sum = max_so_far + (k - 2) * sum\n  else\n    max_sum = max_so_far\n  end\n  if sum == min_sum then\n    return max_element\n  end\n  min_sum = min_sum * k\n  return math.max(max_sum, min_sum)\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    local start = 0\n    local end_ = 0\n    local s = 0\n    local i = 0\n    while i < n do\n        max_ending_here = max_ending_here + a[i]\n        if max_element < a[i] then\n            max_element = a[i]\n        end\n        if max_ending_here < 0 then\n            max_ending_here = 0\n            s = i + 1\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n            start = s\n            end_ = i\n        end\n        i = i + 1\n    end\n    if max_so_far == 0 then\n        max_so_far = max_element\n    end\n    return max_so_far * k - sum(a, start, end_)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    max_element = math.max(max_element, a[i])\n  end\n  if max_element < 0 then\n    return max_element * k\n  end\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  local max_wrap = 0\n  for i = 1, n do\n    max_wrap = max_wrap + a[i]\n    a[i] = -a[i]\n  end\n  local max_ending_here = 0\n  for i = 1, n do\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  max_wrap = max_wrap + max_ending_here\n  if max_wrap > max_so_far then\n    return max_wrap\n  end\n  return max_so_far + (k - 2) * max_wrap\nend",
    "  local max_sum = 0\n  local max_ending_here = 0\n  local min_ending_here = 0\n  local max_so_far = 0\n  local min_so_far = 0\n  local i = 1\n  while i <= n do\n    max_ending_here = max_ending_here + a[i]\n    min_ending_here = min_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if min_ending_here > 0 then\n      min_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n    if min_so_far > min_ending_here then\n      min_so_far = min_ending_here\n    end\n    i = i + 1\n  end\n  local min_sum = min_so_far * k\n  local max_sum = max_so_far\n  local total_sum = 0\n  i = 1\n  while i <= n do\n    total_sum = total_sum + a[i]\n    i = i + 1\n  end\n  if total_sum < 0 then\n    max_sum = max_so_far\n  else\n    max_sum = max_so_far + (total_sum * (k - 2))\n  end\n  return max(max_sum, min_sum)\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local i = 0\n  local j = 0\n  local max_i = 0\n  local max_j = 0\n  local max_sum = 0\n  local sum = 0\n  local start = 0\n  local end_ = 0\n  local max_start = 0\n  local max_end = 0\n  local max_start_index = 0\n  local max_end_index = 0\n  local max_sum_index = 0\n  local sum_index = 0\n  local max_sum_index_ = 0\n  local sum_index_ = 0\n  local max_start_index_ = 0\n  local max_end_index_ = 0\n  local max_start_ = 0\n  local max_end_ = 0\n  local max_sum_ = 0\n  local sum_ = 0\n  local start_ = 0\n  local end__ = 0\n  local max_start_index__ = 0\n  local max_end_index__ = 0\n  local max_sum_index__ = 0\n  local sum_index__ = 0\n  local max_sum_index___ = 0\n  local sum_index___ = 0\n  local max_start_index___ = 0\n  local max_end_index___ = 0\n  local max_start___ = 0\n  local max_end___ = 0\n  local max_sum___ = 0\n  local sum___ = 0\n  local start___ = 0\n  local end___ = 0\n  local max_start_index___ = 0\n  local max_end_index___ = 0\n  local max_sum_index___ = 0\n  local sum_index___ = 0\n  local max_sum_index____ = 0\n  local sum_index____ = 0\n  local max_start_index____ = 0\n  local max_end_index____ = 0\n  local max_start____ = 0\n  local max_end____ = 0\n  local max_sum____ = 0\n  local sum____ = 0\n  local start____ = 0\n  local end____ = 0\n  local max_start_index____ = 0\n  local max_end_",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  local sum = 0",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element\n    end\n    local max_wrap = 0\n    for i = 1, n do\n        max_wrap = max_wrap + a[i]\n        a[i] = -a[i]\n    end\n    local max_ending_here = 0\n    for i = 1, n do\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    max_so_far = max_so_far + max_wrap * (k - 2)\n    return max_so_far\nend",
    "    local max_so_far = 0\n    local max_ending_here = 0\n    local max_element = a[1]\n    for i = 1, n do\n        if a[i] > max_element then\n            max_element = a[i]\n        end\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    if max_so_far == 0 then\n        return max_element * k\n    end\n    local sum = 0\n    for i = 1, n do\n        sum = sum + a[i]\n    end\n    local max_wrap = 0\n    local curr_wrap = 0\n    for i = 1, n do\n        curr_wrap = curr_wrap + a[i]\n        if curr_wrap < 0 then\n            curr_wrap = 0\n        end\n        if max_wrap < curr_wrap then\n            max_wrap = curr_wrap\n        end\n    end\n    return max(max_so_far, max_wrap + sum * (k - 2))\nend",
    "  local max_so_far = 0\n  local max_ending_here = 0\n  local max_element = a[1]\n  for i = 1, n do\n    if a[i] > max_element then\n      max_element = a[i]\n    end\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0 then\n      max_ending_here = 0\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if max_so_far == 0 then\n    return max_element\n  end\n  local sum = 0\n  for i = 1, n do\n    sum = sum + a[i]\n  end\n  max_so_far = max_so_far + sum * (k - 2)\n  local max_wrap = 0\n  local i = 1\n  local j = 1\n  while j < n do\n    while a[j] < 0 and i <= j do\n      max_wrap = max_wrap + a[j]\n      j = j + 1\n    end\n    if j == n then\n      break\n    end\n    while a[i] < 0 and i < j do\n      max_wrap = max_wrap - a[i]\n      i = i + 1\n    end\n    if i == j then\n      j = j + 1\n    end\n  end\n  return math.max(max_so_far, max_wrap)\nend"
  ]
}