{
  "name": "mbpp_68_is_Monotonic",
  "language": "lua",
  "prompt": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local n = #A\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 1, n - 1 do\n        if A[i] > A[i + 1] then\n            is_increasing = false\n        end\n        if A[i] < A[i + 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend",
    "    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend",
    "    if #A == 1 then\n        return true\n    end\n    local flag = 0\n    for i = 2, #A do\n        if A[i] > A[i - 1] then\n            flag = 1\n        elseif A[i] < A[i - 1] then\n            flag = -1\n        end\n        if flag * (A[i] - A[i - 1]) < 0 then\n            return false\n        end\n    end\n    return true\nend",
    "  local n = #A\n  local increasing = true\n  local decreasing = true\n  for i = 1, n - 1 do\n    if A[i] < A[i + 1] then\n      decreasing = false\n    end\n    if A[i] > A[i + 1] then\n      increasing = false\n    end\n  end\n  return increasing or decreasing\nend",
    "  local n = #A\n  local increasing = true\n  local decreasing = true\n  for i = 2, n do\n    if A[i] < A[i-1] then\n      increasing = false\n    end\n    if A[i] > A[i-1] then\n      decreasing = false\n    end\n  end\n  return increasing or decreasing\nend",
    "  local increasing = true\n  local decreasing = true\n  for i = 2, #A do\n    if A[i] < A[i-1] then\n      increasing = false\n    end\n    if A[i] > A[i-1] then\n      decreasing = false\n    end\n  end\n  return increasing or decreasing\nend",
    "  local n = #A\n  local increasing = true\n  local decreasing = true\n  for i = 1, n - 1 do\n    if A[i] < A[i + 1] then\n      decreasing = false\n    end\n    if A[i] > A[i + 1] then\n      increasing = false\n    end\n  end\n  return increasing or decreasing\nend",
    "    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i-1] then\n            is_increasing = false\n        end\n        if A[i] > A[i-1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend",
    "\tlocal n = #A\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 1, n - 1 do\n\t\tif A[i] < A[i + 1] then\n\t\t\tdecreasing = false\n\t\telseif A[i] > A[i + 1] then\n\t\t\tincreasing = false\n\t\tend\n\tend\n\treturn increasing or decreasing\nend",
    "\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i - 1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i - 1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend",
    "    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend",
    "\tlocal n = #A\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 2, n do\n\t\tif A[i] < A[i - 1] then\n\t\t\tincreasing = false\n\t\tend\n\t\tif A[i] > A[i - 1] then\n\t\t\tdecreasing = false\n\t\tend\n\tend\n\treturn increasing or decreasing\nend",
    "    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i - 1] then\n            is_increasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend",
    "    local flag = true\n    local n = #A\n    local i = 1\n    local j = 2\n    while i < n and j < n do\n        if A[i] < A[j] then\n            i = i + 1\n            j = j + 1\n        else\n            flag = false\n            break\n        end\n    end\n    return flag\nend",
    "    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend",
    "    local is_increasing = true\n    local is_decreasing = true\n    for i = 1, #A - 1 do\n        if A[i] < A[i + 1] then\n            is_decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            is_increasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend",
    "\tlocal n = #A\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 1, n - 1 do\n\t\tif A[i] < A[i + 1] then\n\t\t\tdecreasing = false\n\t\telseif A[i] > A[i + 1] then\n\t\t\tincreasing = false\n\t\tend\n\tend\n\treturn increasing or decreasing\nend",
    "    if #A <= 1 then return true end\n    local direction = A[2] - A[1]\n    for i = 3, #A do\n        if direction == 0 then\n            direction = A[i] - A[i-1]\n            if direction == 0 then return false end\n        else\n            if (A[i] - A[i-1]) / direction < 0 then return false end\n        end\n    end\n    return true\nend",
    "  local is_increasing = true\n  local is_decreasing = true\n  for i = 2, #A do\n    if A[i] < A[i - 1] then\n      is_increasing = false\n    end\n    if A[i] > A[i - 1] then\n      is_decreasing = false\n    end\n  end\n  return is_increasing or is_decreasing\nend",
    "    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 2, n do\n        if A[i] < A[i-1] then\n            increasing = false\n        end\n        if A[i] > A[i-1] then\n            decreasing = false\n        end\n    end\n    return increasing or decreasing\nend"
  ]
}