{
  "name": "mbpp_563_extract_values",
  "language": "lua",
  "prompt": "-- Write a function to extract values between quotation marks from a string.\nlocal function extract_values(text)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_values\n    lu.assertEquals(candidate('\"Python\", \"PHP\", \"Java\"'), {'Python', 'PHP', 'Java'})\n    lu.assertEquals(candidate('\"python\",\"program\",\"language\"'), {'python', 'program', 'language'})\n    lu.assertEquals(candidate('\"red\",\"blue\",\"green\",\"yellow\"'), {'red', 'blue', 'green', 'yellow'})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local values = {}\n  local start = 1\n  local quote = string.byte('\"')\n  while start do\n    local first = string.find(text, '\"', start)\n    if first then\n      local second = string.find(text, '\"', first + 1)\n      if second then\n        table.insert(values, string.sub(text, first + 1, second - 1))\n        start = second + 1\n      else\n        start = nil\n      end\n    else\n      start = nil\n    end\n  end\n  return values\nend",
    "  local values = {}\n  local i = 1\n  while i <= #text do\n    local start = text:find('\"', i)\n    if not start then break end\n    local finish = text:find('\"', start + 1)\n    if not finish then break end\n    local value = text:sub(start + 1, finish - 1)\n    table.insert(values, value)\n    i = finish + 1\n  end\n  return values\nend",
    "  local values = {}\n  for value in text:gmatch('\"(.-)\"') do\n    values[#values + 1] = value\n  end\n  return values\nend",
    "  local values = {}\n  local i = 1\n  while i <= #text do\n    local j = text:find('\"', i)\n    if not j then\n      break\n    end\n    local k = text:find('\"', j + 1)\n    if not k then\n      break\n    end\n    local value = text:sub(j + 1, k - 1)\n    values[#values + 1] = value\n    i = k + 1\n  end\n  return values\nend",
    "  local values = {}\n  local i = 1\n  while i <= #text do\n    local start = text:find('\"', i)\n    if not start then break end\n    local finish = text:find('\"', start + 1)\n    if not finish then break end\n    values[#values + 1] = text:sub(start + 1, finish - 1)\n    i = finish + 1\n  end\n  return values\nend",
    "    local values = {}\n    for value in text:gmatch('\"(.-)\"') do\n        table.insert(values, value)\n    end\n    return values\nend",
    "    local values = {}\n    local pattern = '\"(.-)\"'\n    for value in text:gmatch(pattern) do\n        table.insert(values, value)\n    end\n    return values\nend",
    "    local values = {}\n    for value in text:gmatch('\"(.-)\"') do\n        table.insert(values, value)\n    end\n    return values\nend",
    "  local values = {}\n  local i = 1\n  while true do\n    local j, k = text:find('\"', i)\n    if not j then\n      break\n    end\n    local l = text:find('\"', k + 1)\n    if not l then\n      break\n    end\n    table.insert(values, text:sub(k + 1, l - 1))\n    i = l + 1\n  end\n  return values\nend",
    "  local values = {}\n  for value in text:gmatch('\"(.-)\"') do\n    table.insert(values, value)\n  end\n  return values\nend",
    "    local values = {}\n    for value in text:gmatch('\"(.-)\"') do\n        table.insert(values, value)\n    end\n    return values\nend",
    "  local values = {}\n  local i = 1\n  while i <= #text do\n    local j = text:find('\"', i)\n    if j then\n      local k = text:find('\"', j + 1)\n      if k then\n        values[#values + 1] = text:sub(j + 1, k - 1)\n        i = k + 1\n      else\n        i = j + 1\n      end\n    else\n      i = #text + 1\n    end\n  end\n  return values\nend",
    "    local values = {}\n    for value in text:gmatch('\"(.-)\"') do\n        table.insert(values, value)\n    end\n    return values\nend",
    "  local values = {}\n  for value in text:gmatch('\"(.-)\"') do\n    table.insert(values, value)\n  end\n  return values\nend",
    "  local result = {}\n  for value in text:gmatch('\"(.-)\"') do\n    table.insert(result, value)\n  end\n  return result\nend",
    "  local values = {}\n  local i = 1\n  while i <= #text do\n    local j = text:find('\"', i)\n    if not j then break end\n    local k = text:find('\"', j + 1)\n    if not k then break end\n    values[#values + 1] = text:sub(j + 1, k - 1)\n    i = k + 1\n  end\n  return values\nend",
    "    local values = {}\n    for value in text:gmatch('\"(.-)\"') do\n        table.insert(values, value)\n    end\n    return values\nend",
    "  local values = {}\n  for value in text:gmatch('\"(.-)\"') do\n    table.insert(values, value)\n  end\n  return values\nend",
    "  local values = {}\n  local i = 1\n  while i <= #text do\n    local start = text:find('\"', i)\n    if not start then break end\n    local finish = text:find('\"', start+1)\n    if not finish then break end\n    table.insert(values, text:sub(start+1, finish-1))\n    i = finish + 1\n  end\n  return values\nend",
    "    local values = {}\n    local i = 1\n    while true do\n        local start, stop = text:find('\"', i)\n        if not start then break end\n        local value = text:sub(start + 1, stop - 1)\n        table.insert(values, value)\n        i = stop + 1\n    end\n    return values\nend"
  ]
}