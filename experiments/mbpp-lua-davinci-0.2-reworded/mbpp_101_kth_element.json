{
  "name": "mbpp_101_kth_element",
  "language": "lua",
  "prompt": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend",
    "\tif k < 1 or k > #arr then\n\t\treturn nil\n\tend",
    "  local len = #arr\n  if k < 1 or k > len then\n    return nil\n  end\n  return arr[k]\nend",
    "    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "    assert(k >= 1 and k <= #arr, \"k must be between 1 and \" .. #arr)\n    return arr[k]\nend",
    "    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "  assert(k >= 1 and k <= #arr)\n  return arr[k]\nend",
    "  assert(k >= 1 and k <= #arr, \"k is out of range\")\n  return arr[k]\nend",
    "  assert(k >= 1 and k <= #arr, \"k must be between 1 and \"..#arr)\n  return arr[k]\nend",
    "  if k < 1 or k > #arr then\n    error(\"k must be between 1 and \" .. #arr)\n  end\n  return arr[k]\nend",
    "  assert(k >= 1 and k <= #arr)\n  return arr[k]\nend",
    "  assert(k > 0, \"k must be greater than 0\")\n  assert(k <= #arr, \"k must be less than or equal to the length of the array\")\n  return arr[k]\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend",
    "  assert(k >= 1 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend",
    "    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "  -- TODO: Implement this function.\n  return arr[k]\nend",
    "    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend",
    "  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend"
  ]
}