{
  "name": "mbpp_753_min_k",
  "language": "lua",
  "prompt": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local min_k_list = {}\n    local min_k_list_size = 0\n    for i = 1, #test_list do\n        local test_case = test_list[i]\n        if min_k_list_size < K then\n            min_k_list[min_k_list_size + 1] = test_case\n            min_k_list_size = min_k_list_size + 1\n        else\n            local max_index = 1\n            for j = 2, min_k_list_size do\n                if min_k_list[j].score > min_k_list[max_index].score then\n                    max_index = j\n                end\n            end\n            if min_k_list[max_index].score > test_case.score then\n                min_k_list[max_index] = test_case\n            end\n        end\n    end\n    return min_k_list\nend",
    "    local function compare(a, b)\n        return a[1] < b[1]\n    end\n    table.sort(test_list, compare)\n    local result = {}\n    for i = 1, K do\n        result[i] = test_list[i]\n    end\n    return result\nend",
    "    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if min_list_size < K then\n            min_list[min_list_size + 1] = test\n            min_list_size = min_list_size + 1\n        else\n            local min_index = 0\n            local min_value = test.value\n            for j = 1, min_list_size do\n                if min_list[j].value < min_value then\n                    min_index = j\n                    min_value = min_list[j].value\n                end\n            end\n            if min_index > 0 then\n                min_list[min_index] = test\n            end\n        end\n    end\n    return min_list\nend",
    "\tlocal min_k_list = {}\n\tlocal min_k_list_size = 0\n\tfor i = 1, #test_list do\n\t\tif min_k_list_size < K then\n\t\t\tmin_k_list[min_k_list_size + 1] = test_list[i]\n\t\t\tmin_k_list_size = min_k_list_size + 1\n\t\t\tif min_k_list_size == K then\n\t\t\t\ttable.sort(min_k_list, function(a, b) return a.id < b.id end)\n\t\t\tend\n\t\telse\n\t\t\tif test_list[i].id < min_k_list[K].id then\n\t\t\t\tmin_k_list[K] = test_list[i]\n\t\t\t\ttable.sort(min_k_list, function(a, b) return a.id < b.id end)\n\t\t\tend\n\t\tend\n\tend\n\treturn min_k_list\nend",
    "  local min_k_list = {}\n  local min_k_list_size = 0\n  local min_k_list_max_size = K\n  local test_list_size = #test_list\n  local test_list_index = 1\n  local test_list_item = nil\n  local min_k_list_item = nil\n  local min_k_list_item_index = nil\n  local min_k_list_item_value = nil\n  local min_k_list_item_value_index = nil\n  local min_k_list_item_value_index_value = nil\n  local min_k_list_item_value_index_value_index = nil\n  local min_k_list_item_value_index_value_index_value = nil\n  local min_k_list_item_value_index_value_index_value_index = nil\n  local min_k_list_item_value_index_value_index_value_index_value = nil\n  local min_k_list_item_value_index_value_index_value_index_value_index = nil\n  local min_k_list_item_value_index_value_index_value_index_value_index_value = nil\n  local min_k_list_item_value_index_value_index_value_index_value_index_value_index = nil\n  local min_k_list_item_value_index_value_index_value_index_value_index_value_index_value = nil\n  local min_k_list_item_value_index_value_index_value_index_value_index_value_index_value_index = nil\n  local min_k_list_item_value_index_value_index_value_index_value_index_value_index_value_index_value = nil\n  local min_k_list_item_value_index_value_index_value_index_value_index_value_index_value_index_value_index = nil\n  local min_k_list_item_value_index_value_index_value_index_value_index_value_index_value_index_value_index_",
    "  local min_list = {}\n  local min_list_size = 0\n  local min_list_max_size = K\n  local min_list_max_value = 0\n  local min_list_max_value_index = 0\n  local min_list_max_value_index_set = false\n  local min_list_max_value_index_set_count = 0\n  local min_list_max_value_index_set_count_max = K\n  local min_list_max_value_index_set_count_max_value = 0\n  local min_list_max_value_index_set_count_max_value_index = 0\n  local min_list_max_value_index_set_count_max_value_index_set = false\n  local min_list_max_value_index_set_count_max_value_index_set_count = 0\n  local min_list_max_value_index_set_count_max_value_index_set_count_max = K\n  local min_list_max_value_index_set_count_max_value_index_set_count_max_value = 0\n  local min_list_max_value_index_set_count_max_value_index_set_count_max_value_index = 0\n  local min_list_max_value_index_set_count_max_value_index_set_count_max_value_index_set = false\n  local min_list_max_value_index_set_count_max_value_index_set_count_max_value_index_set_count = 0\n  local min_list_max_value_index_set_count_max_value_index_set_count_max_value_index_set_count_max = K\n  local min_list_max_value_index_set_count_max_value_index_set_count_max_value_index_set_count_max_value = 0\n  local min_list_max_value_index_set_count_max_value_index_set_count_max_value_index_set_count_max_value_index = 0\n  local min_list",
    "  local function min_k_helper(test_list, K, min_list)\n    if #test_list == 0 then\n      return min_list\n    end\n    local min_list = min_list or {}\n    local min_value = test_list[1]\n    local min_index = 1\n    for i = 2, #test_list do\n      if test_list[i] < min_value then\n        min_value = test_list[i]\n        min_index = i\n      end\n    end\n    table.insert(min_list, min_value)\n    table.remove(test_list, min_index)\n    if #min_list == K then\n      return min_list\n    end\n    return min_k_helper(test_list, K, min_list)\n  end\n  return min_k_helper(test_list, K)\nend",
    "  local min_list = {}\n  for i = 1, #test_list do\n    local test = test_list[i]\n    if #min_list < K then\n      table.insert(min_list, test)\n    else\n      local max_test = min_list[1]\n      for j = 2, #min_list do\n        if min_list[j].score > max_test.score then\n          max_test = min_list[j]\n        end\n      end\n      if test.score < max_test.score then\n        for j = 1, #min_list do\n          if min_list[j] == max_test then\n            min_list[j] = test\n            break\n          end\n        end\n      end\n    end\n  end\n  return min_list\nend",
    "\tlocal min_list = {}\n\tfor i = 1, K do\n\t\tlocal min_val = math.huge\n\t\tlocal min_idx = 0\n\t\tfor j = 1, #test_list do\n\t\t\tif test_list[j] < min_val then\n\t\t\t\tmin_val = test_list[j]\n\t\t\t\tmin_idx = j\n\t\t\tend\n\t\tend\n\t\tmin_list[i] = min_val\n\t\ttable.remove(test_list, min_idx)\n\tend\n\treturn min_list\nend",
    "  local function min_k_helper(test_list, K)\n    local min_k_list = {}\n    for i = 1, K do\n      local min_val = math.huge\n      local min_index = 0\n      for j = 1, #test_list do\n        if test_list[j] < min_val then\n          min_val = test_list[j]\n          min_index = j\n        end\n      end\n      min_k_list[i] = min_val\n      table.remove(test_list, min_index)\n    end\n    return min_k_list\n  end\n  local min_k_list = min_k_helper(test_list, K)\n  table.sort(min_k_list)\n  return min_k_list\nend",
    "    local min_k_list = {}\n    local min_k_list_size = 0\n    for i, test in ipairs(test_list) do\n        if min_k_list_size < K then\n            min_k_list[min_k_list_size + 1] = test\n            min_k_list_size = min_k_list_size + 1\n        else\n            local max_test = min_k_list[1]\n            local max_test_index = 1\n            for j, test_2 in ipairs(min_k_list) do\n                if test_2.score > max_test.score then\n                    max_test = test_2\n                    max_test_index = j\n                end\n            end\n            if test.score < max_test.score then\n                min_k_list[max_test_index] = test\n            end\n        end\n    end\n    return min_k_list\nend",
    "  local function min_k_rec(test_list, K, min_list)\n    if K == 0 then\n      return min_list\n    end\n    local min_val, min_idx = math.huge, 0\n    for i, v in ipairs(test_list) do\n      if v < min_val then\n        min_val, min_idx = v, i\n      end\n    end\n    table.insert(min_list, min_val)\n    table.remove(test_list, min_idx)\n    return min_k_rec(test_list, K - 1, min_list)\n  end\n  return min_k_rec(test_list, K, {})\nend",
    "\tlocal function min_k_rec(test_list, K, min_list)\n\t\tif K == 0 then\n\t\t\treturn min_list\n\t\tend\n\t\tlocal min_val = math.huge\n\t\tlocal min_index = 0\n\t\tfor i = 1, #test_list do\n\t\t\tif test_list[i] < min_val then\n\t\t\t\tmin_val = test_list[i]\n\t\t\t\tmin_index = i\n\t\t\tend\n\t\tend\n\t\ttable.insert(min_list, min_val)\n\t\ttable.remove(test_list, min_index)\n\t\treturn min_k_rec(test_list, K - 1, min_list)\n\tend\n\treturn min_k_rec(test_list, K, {})\nend",
    "    local min = math.huge\n    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        if test_list[i] < min then\n            min = test_list[i]\n            min_list_size = 1\n            min_list[1] = min\n        elseif test_list[i] == min then\n            min_list_size = min_list_size + 1\n            min_list[min_list_size] = min\n        end\n    end\n    return min_list[K]\nend",
    "  local function min_k_rec(test_list, K, min_list)\n    if K == 0 then return min_list end\n    local min_val = math.huge\n    local min_idx = nil\n    for i, v in ipairs(test_list) do\n      if v < min_val then\n        min_val = v\n        min_idx = i\n      end\n    end\n    table.remove(test_list, min_idx)\n    table.insert(min_list, min_val)\n    return min_k_rec(test_list, K-1, min_list)\n  end\n  return min_k_rec(test_list, K, {})\nend",
    "  local min_list = {}\n  for i = 1, #test_list do\n    local test_case = test_list[i]\n    if #min_list < K then\n      min_list[#min_list + 1] = test_case\n    else\n      local max_index = 1\n      local max_value = min_list[1].value\n      for j = 2, #min_list do\n        if min_list[j].value > max_value then\n          max_index = j\n          max_value = min_list[j].value\n        end\n      end\n      if test_case.value < max_value then\n        min_list[max_index] = test_case\n      end\n    end\n  end\n  return min_list\nend",
    "  local function min_k_helper(test_list, K, min_k_list)\n    if #test_list == 0 then\n      return min_k_list\n    end\n    local min_k_list = min_k_list or {}\n    local min_k_list_len = #min_k_list\n    local test_list_len = #test_list\n    local test_list_item = test_list[1]\n    local test_list_item_val = test_list_item[2]\n    local min_k_list_item = min_k_list[1]\n    local min_k_list_item_val = min_k_list_item and min_k_list_item[2] or math.huge\n    if min_k_list_len < K then\n      table.insert(min_k_list, test_list_item)\n      table.sort(min_k_list, function(a, b) return a[2] < b[2] end)\n    elseif test_list_item_val < min_k_list_item_val then\n      table.remove(min_k_list, min_k_list_len)\n      table.insert(min_k_list, test_list_item)\n      table.sort(min_k_list, function(a, b) return a[2] < b[2] end)\n    end\n    table.remove(test_list, 1)\n    return min_k_helper(test_list, K, min_k_list)\n  end\n  return min_k_helper(test_list, K)\nend",
    "\tlocal function min_k_helper(test_list, K, min_k_list)\n\t\tif #test_list == 0 then\n\t\t\treturn min_k_list\n\t\tend\n\t\tlocal min_k_list = min_k_list or {}\n\t\tlocal min_k_list_len = #min_k_list\n\t\tlocal min_k_list_len_less_k = min_k_list_len < K\n\t\tlocal test_list_len = #test_list\n\t\tlocal test_list_len_less_k = test_list_len < K\n\t\tlocal min_k_list_len_less_k_and_test_list_len_less_k = min_k_list_len_less_k and test_list_len_less_k\n\t\tlocal min_k_list_len_less_k_and_test_list_len_less_k_and_test_list_len_less_min_k_list_len = min_k_list_len_less_k_and_test_list_len_less_k and test_list_len < min_k_list_len\n\t\tlocal min_k_list_len_less_k_and_test_list_len_less_k_and_test_list_len_less_min_k_list_len_and_min_k_list_len_less_k = min_k_list_len_less_k_and_test_list_len_less_k_and_test_list_len_less_min_k_list_len and min_k_list_len < K\n\t\tif min_k_list_len_less_k_and_test_list_len_less_k_and_test_list_len_less_min_k_list_len_and_min_k_list_len_less_k then\n\t\t\treturn min_k_list\n\t\tend\n\t\tlocal min_k_list_len_less_k_and_test_list_len_less_k_and_test_list_len_less_min_k_list_len_and_min_k_",
    "  local min_list = {}\n  local min_list_size = 0\n  local min_list_max_size = K\n  local function insert_min_list(test_case)\n    if min_list_size < min_list_max_size then\n      min_list[min_list_size] = test_case\n      min_list_size = min_list_size + 1\n      return\n    end\n    local min_value = min_list[0].value\n    local min_index = 0\n    for i = 1, min_list_size - 1 do\n      if min_list[i].value < min_value then\n        min_value = min_list[i].value\n        min_index = i\n      end\n    end\n    if test_case.value < min_value then\n      min_list[min_index] = test_case\n    end\n  end\n  for i = 1, #test_list do\n    insert_min_list(test_list[i])\n  end\n  return min_list\nend",
    "  local min_k_list = {}\n  local min_k_list_size = 0\n  for i = 1, #test_list do\n    local test_item = test_list[i]\n    if min_k_list_size < K then\n      min_k_list[min_k_list_size + 1] = test_item\n      min_k_list_size = min_k_list_size + 1\n    else\n      local max_item = min_k_list[1]\n      local max_item_index = 1\n      for j = 2, min_k_list_size do\n        if max_item < min_k_list[j] then\n          max_item = min_k_list[j]\n          max_item_index = j\n        end\n      end\n      if max_item > test_item then\n        min_k_list[max_item_index] = test_item\n      end\n    end\n  end\n  return min_k_list\nend"
  ]
}