{
  "name": "mbpp_92_is_undulating",
  "language": "lua",
  "prompt": "-- Write a function to check whether the given number is undulating or not.\nlocal function is_undulating(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_undulating\n    lu.assertEquals(candidate(1212121), true)\n    lu.assertEquals(candidate(1991), false)\n    lu.assertEquals(candidate(121), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal n_str = tostring(n)\n\tlocal n_len = #n_str\n\tlocal n_digits = {}\n\tfor i = 1, n_len do\n\t\tn_digits[i] = tonumber(n_str:sub(i, i))\n\tend\n\tlocal n_digits_rev = {}\n\tfor i = 1, n_len do\n\t\tn_digits_rev[i] = n_digits[n_len - i + 1]\n\tend\n\tlocal is_undulating = true\n\tfor i = 1, n_len - 1 do\n\t\tif n_digits[i] == n_digits[i + 1] or n_digits[i] == n_digits_rev[i + 1] then\n\t\t\tis_undulating = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn is_undulating\nend",
    "  local s = tostring(n)\n  local last_digit = tonumber(s:sub(1, 1))\n  local is_increasing = true\n  local is_decreasing = true\n  for i = 2, #s do\n    local digit = tonumber(s:sub(i, i))\n    if digit > last_digit then\n      is_decreasing = false\n    elseif digit < last_digit then\n      is_increasing = false\n    end\n    last_digit = digit\n  end\n  return is_increasing or is_decreasing\nend",
    "\tlocal s = tostring(n)\n\tlocal len = #s\n\tlocal i = 1\n\twhile i < len do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local k = 1\n  local m = l - 1\n  local r = true\n  while i < j and k < m do\n    if s:sub(i, i) ~= s:sub(j, j) then\n      r = false\n      break\n    end\n    if s:sub(k, k) ~= s:sub(m, m) then\n      r = false\n      break\n    end\n    i = i + 1\n    j = j - 1\n    k = k + 1\n    m = m - 1\n  end\n  return r\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local n_digits = {}\n  for i = 1, n_len do\n    n_digits[i] = tonumber(n_str:sub(i, i))\n  end\n  local is_undulating = true\n  for i = 1, n_len - 2 do\n    if n_digits[i] == n_digits[i + 1] or n_digits[i + 1] == n_digits[i + 2] or n_digits[i + 2] == n_digits[i + 3] then\n      is_undulating = false\n      break\n    end\n  end\n  return is_undulating\nend",
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 2 do\n    if s:sub(i, i) == s:sub(i + 2, i + 2) then\n      return true\n    end\n  end\n  return false\nend",
    "\tlocal n_str = tostring(n)\n\tlocal n_len = #n_str\n\tlocal is_undulating = true\n\tfor i = 1, n_len - 1 do\n\t\tlocal c1 = n_str:sub(i, i)\n\t\tlocal c2 = n_str:sub(i + 1, i + 1)\n\t\tif c1 == c2 then\n\t\t\tis_undulating = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn is_undulating\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local is_undulating = true\n  for i = 1, n_len - 2, 2 do\n    if n_str:sub(i, i + 1) >= n_str:sub(i + 2, i + 3) then\n      is_undulating = false\n      break\n    end\n  end\n  return is_undulating\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\twhile i < j do\n\t\tif s:sub(i,i) ~= s:sub(j,j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local i = 1\n  while i < #s do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local last_digit = n % 10\n  n = n / 10\n  while n > 0 do\n    local digit = n % 10\n    if digit == last_digit then\n      return false\n    end\n    last_digit = digit\n    n = n / 10\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local last = s:sub(1, 1)\n  local last_diff = nil\n  for i = 2, #s do\n    local c = s:sub(i, i)\n    local diff = c - last\n    if last_diff ~= nil and diff ~= last_diff then\n      return false\n    end\n    last_diff = diff\n    last = c\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  local j = 2\n  local k = 3\n  while k <= len do\n    if s:sub(i, i) == s:sub(j, j) then\n      return false\n    end\n    if s:sub(j, j) == s:sub(k, k) then\n      return false\n    end\n    if s:sub(i, i) > s:sub(j, j) then\n      if s:sub(j, j) > s:sub(k, k) then\n        return false\n      end\n    else\n      if s:sub(j, j) < s:sub(k, k) then\n        return false\n      end\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return true\nend",
    "    local s = tostring(n)\n    local i = 1\n    local j = #s\n    while i < j do\n        if s:sub(i, i) ~= s:sub(j, j) then\n            return false\n        end\n        i = i + 1\n        j = j - 1\n    end\n    return true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    local j = l\n    local is_undulating = true\n    while i < j do\n        if s:sub(i, i) ~= s:sub(j, j) then\n            is_undulating = false\n            break\n        end\n        i = i + 1\n        j = j - 1\n    end\n    return is_undulating\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  while i < l do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  while i < len do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local last_diff = 0\n  while i < j do\n    local c1 = tonumber(s:sub(i, i))\n    local c2 = tonumber(s:sub(j, j))\n    local diff = c1 - c2\n    if diff == 0 then\n      return false\n    end\n    if last_diff == 0 then\n      last_diff = diff\n    elseif last_diff * diff < 0 then\n      last_diff = diff\n    else\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "  local str = tostring(n)\n  local len = #str\n  local i = 1\n  local j = len\n  while i < j do\n    if str:sub(i, i) ~= str:sub(j, j) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tfor i = 1, l - 2 do\n\t\tif s:sub(i, i) == s:sub(i + 2, i + 2) then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tlocal s = tostring(n)\n\tlocal last = s:sub(1,1)\n\tlocal inc = false\n\tlocal dec = false\n\tfor i = 2, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tif c > last then\n\t\t\tif dec then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tinc = true\n\t\telseif c < last then\n\t\t\tif inc then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tdec = true\n\t\tend\n\t\tlast = c\n\tend\n\treturn true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    local j = l\n    local k = 1\n    local l = l - 1\n    while i <= j do\n        if s:sub(i, i) ~= s:sub(j, j) then\n            return false\n        end\n        if s:sub(k, k) ~= s:sub(l, l) then\n            return false\n        end\n        i = i + 1\n        j = j - 1\n        k = k + 1\n        l = l - 1\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local last_digit = tonumber(s:sub(1, 1))\n  local last_diff = 0\n  for i = 2, #s do\n    local digit = tonumber(s:sub(i, i))\n    local diff = digit - last_digit\n    if diff == last_diff then\n      return false\n    end\n    last_diff = diff\n    last_digit = digit\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  while i < len do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "    local s = tostring(n)\n    local len = #s\n    local i = 1\n    local j = len\n    local last_diff = nil\n    while i < j do\n        local a = tonumber(s:sub(i, i))\n        local b = tonumber(s:sub(j, j))\n        local diff = a - b\n        if last_diff ~= nil and diff ~= last_diff then\n            return false\n        end\n        last_diff = diff\n        i = i + 1\n        j = j - 1\n    end\n    return true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    while i < l do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) then\n            return false\n        end\n        i = i + 2\n    end\n    return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tfor i = 1, l - 1 do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 1 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n  end\n  return true\nend",
    "\tlocal n_str = tostring(n)\n\tlocal n_len = #n_str\n\tlocal n_str_rev = string.reverse(n_str)\n\tlocal n_str_rev_num = tonumber(n_str_rev)\n\tlocal n_str_rev_num_str = tostring(n_str_rev_num)\n\tlocal n_str_rev_num_str_len = #n_str_rev_num_str\n\tlocal n_str_rev_num_str_rev = string.reverse(n_str_rev_num_str)\n\tlocal n_str_rev_num_str_rev_num = tonumber(n_str_rev_num_str_rev)\n\tlocal n_str_rev_num_str_rev_num_str = tostring(n_str_rev_num_str_rev_num)\n\tlocal n_str_rev_num_str_rev_num_str_len = #n_str_rev_num_str_rev_num_str\n\tlocal n_str_rev_num_str_rev_num_str_rev = string.reverse(n_str_rev_num_str_rev_num_str)\n\tlocal n_str_rev_num_str_rev_num_str_rev_num = tonumber(n_str_rev_num_str_rev_num_str_rev)\n\tlocal n_str_rev_num_str_rev_num_str_rev_num_str = tostring(n_str_rev_num_str_rev_num_str_rev_num)\n\tlocal n_str_rev_num_str_rev_num_str_rev_num_str_len = #n_str_rev_num_str_rev_num_str_rev_num_str\n\tif n_len == n_str_rev_num_str_len and n_len == n_str_rev_num_str_rev_num_str_len and n_len == n_str_rev_num_str_rev_num_str_rev_num_str_len then\n\t\tif n_str == n_str_rev_num_str and",
    "  local s = tostring(n)\n  local last = s:sub(1, 1)\n  local last_was_odd = (last % 2 == 1)\n  for i = 2, #s do\n    local c = s:sub(i, i)\n    local is_odd = (c % 2 == 1)\n    if is_odd == last_was_odd then\n      return false\n    end\n    last_was_odd = is_odd\n  end\n  return true\nend",
    "\tlocal digits = {}\n\tlocal last_digit = nil\n\tlocal last_last_digit = nil\n\tlocal last_last_last_digit = nil\n\tlocal last_last_last_last_digit = nil\n\tlocal last_last_last_last_last_digit = nil\n\tlocal last_last_last_last_last_last_digit = nil\n\tlocal last_last_last_last_last_last_last_digit = nil\n\tlocal last_last_last_last_last_last_last_last_digit = nil\n\tlocal last_last_last_last_last_last_last_last_last_digit = nil\n\tlocal last_last_last_last_last_last_last_last_last_last_digit = nil\n\tlocal last_last_last_last_last_last_last_last_last_last_last_digit = nil\n\tlocal last_last_last_last_last_last_last_last_last_last_last_last_digit = nil\n\tlocal last_last_last_last_last_last_last_last_last_last_last_last_last_digit = nil\n\tlocal last_last_last_last_last_last_last_last_last_last_last_last_last_last_digit = nil\n\tlocal last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_digit = nil\n\tlocal last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_digit = nil\n\tlocal last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_digit = nil\n\tlocal last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_digit = nil\n\tlocal last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_digit = nil\n\tlocal last_last_last_last_last",
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 2 do\n    if s:sub(i, i) == s:sub(i + 2, i + 2) then\n      return true\n    end\n  end\n  return false\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  while i < l do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "\tlocal prev_digit = n % 10\n\tn = math.floor(n / 10)\n\tlocal prev_diff = 0\n\twhile n > 0 do\n\t\tlocal digit = n % 10\n\t\tlocal diff = digit - prev_digit\n\t\tif diff ~= 0 and diff ~= prev_diff then\n\t\t\treturn false\n\t\tend\n\t\tprev_diff = diff\n\t\tprev_digit = digit\n\t\tn = math.floor(n / 10)\n\tend\n\treturn true\nend",
    "    local s = tostring(n)\n    local last = s:sub(1, 1)\n    local last_was_increasing = true\n    for i = 2, #s do\n        local c = s:sub(i, i)\n        local is_increasing = c > last\n        if is_increasing == last_was_increasing then\n            return false\n        end\n        last_was_increasing = is_increasing\n        last = c\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local prev = nil\n  while i <= j do\n    local a = tonumber(s:sub(i, i))\n    local b = tonumber(s:sub(j, j))\n    if a == b then\n      if prev == nil then\n        prev = a\n      elseif prev ~= a then\n        return false\n      end\n    elseif a ~= b then\n      if prev == nil then\n        prev = a\n      elseif prev ~= b then\n        return false\n      end\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "    local s = tostring(n)\n    local i = 1\n    local j = #s\n    while i < j do\n        if s:sub(i, i) ~= s:sub(j, j) then\n            return false\n        end\n        i = i + 1\n        j = j - 1\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  while i < j do\n    if s:sub(i,i) ~= s:sub(j,j) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "    local n = tostring(n)\n    local last_digit = n:sub(-1)\n    local last_digit_type = tonumber(last_digit) % 2",
    "\tlocal s = tostring(n)\n\tlocal last_digit = tonumber(s:sub(1, 1))\n\tlocal last_diff = 0\n\tfor i = 2, #s do\n\t\tlocal digit = tonumber(s:sub(i, i))\n\t\tlocal diff = digit - last_digit\n\t\tif diff == 0 then\n\t\t\treturn false\n\t\tend\n\t\tif last_diff ~= 0 and diff ~= last_diff then\n\t\t\treturn false\n\t\tend\n\t\tlast_diff = diff\n\t\tlast_digit = digit\n\tend\n\treturn true\nend",
    "    local n_str = tostring(n)\n    local n_len = #n_str\n    local last_digit = tonumber(n_str:sub(1, 1))\n    local last_digit_type = last_digit % 2\n    local is_undulating = true\n    for i = 2, n_len do\n        local digit = tonumber(n_str:sub(i, i))\n        local digit_type = digit % 2\n        if digit_type == last_digit_type then\n            is_undulating = false\n            break\n        end\n        last_digit_type = digit_type\n    end\n    return is_undulating\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    while i < l do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) then\n            return false\n        end\n        i = i + 2\n    end\n    return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\tlocal k = 1\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  while i < l do\n    if s:sub(i,i) == s:sub(i+1,i+1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\twhile i < l do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local len = #s\n  for i = 1, len - 2 do\n    if s:sub(i, i) == s:sub(i + 2, i + 2) then\n      return true\n    end\n  end\n  return false\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\tlocal k = 1\n\tlocal m = l\n\tlocal u = true\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\tu = false\n\t\t\tbreak\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\twhile k < m do\n\t\tif s:sub(k, k) ~= s:sub(m, m) then\n\t\t\tu = false\n\t\t\tbreak\n\t\tend\n\t\tk = k + 1\n\t\tm = m - 1\n\tend\n\treturn u\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\twhile i < l do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local last = s:sub(1,1)\n  local last_was_odd = (last % 2) == 1\n  for i = 2, #s do\n    local c = s:sub(i,i)\n    local is_odd = (c % 2) == 1\n    if is_odd == last_was_odd then\n      return false\n    end\n    last_was_odd = is_odd\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal len = #s\n\tfor i = 1, len - 1 do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local i = 1\n  while i < #s do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = 2\n  local k = 3\n  while k <= l do\n    if s:sub(i,i) == s:sub(k,k) then\n      return true\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return false\nend",
    "    local digits = {}\n    local i = 0\n    while n > 0 do\n        i = i + 1\n        digits[i] = n % 10\n        n = (n - digits[i]) / 10\n    end\n    for i = 1, #digits - 2 do\n        if digits[i] == digits[i + 2] then\n            return true\n        end\n    end\n    return false\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  while i < len do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "\tlocal n_str = tostring(n)\n\tlocal n_len = #n_str\n\tlocal last_digit = tonumber(n_str:sub(1, 1))\n\tlocal last_diff = 0\n\tfor i = 2, n_len do\n\t\tlocal digit = tonumber(n_str:sub(i, i))\n\t\tlocal diff = digit - last_digit\n\t\tif diff == 0 then\n\t\t\treturn false\n\t\tend\n\t\tif last_diff == 0 then\n\t\t\tlast_diff = diff\n\t\telseif last_diff ~= diff then\n\t\t\treturn false\n\t\tend\n\t\tlast_digit = digit\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  while i < l do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  while i < len do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal len = #s\n\tlocal i = 1\n\tlocal j = len\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\twhile i < l do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    local j = l\n    while i < j do\n        if s:sub(i, i) ~= s:sub(j, j) then\n            return false\n        end\n        i = i + 1\n        j = j - 1\n    end\n    return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\twhile i < l do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  while i < l do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local len = #s\n  for i = 1, len - 1 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal len = #s\n\tlocal i = 1\n\twhile i < len do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  while i < l do\n    if s:sub(i,i) == s:sub(i+1,i+1) then\n      return false\n    end\n    i = i + 1\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local i = 1\n  while i < #s do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local i = 1\n  while i < n_len do\n    if n_str:sub(i, i) == n_str:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 2 do\n    if s:sub(i, i) == s:sub(i + 2, i + 2) then\n      return true\n    end\n  end\n  return false\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\twhile i < l do\n\t\tlocal a = tonumber(s:sub(i, i))\n\t\tlocal b = tonumber(s:sub(i + 1, i + 1))\n\t\tif a == b then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    local j = l\n    while i < j do\n        if s:sub(i, i) == s:sub(j, j) then\n            i = i + 1\n            j = j - 1\n        else\n            return false\n        end\n    end\n    return true\nend",
    "    local s = tostring(n)\n    local last_digit = tonumber(s:sub(1, 1))\n    local is_increasing = true\n    for i = 2, #s do\n        local digit = tonumber(s:sub(i, i))\n        if is_increasing then\n            if digit < last_digit then\n                is_increasing = false\n            elseif digit == last_digit then\n                return false\n            end\n        else\n            if digit > last_digit then\n                return false\n            elseif digit == last_digit then\n                return false\n            end\n        end\n        last_digit = digit\n    end\n    return true\nend",
    "    local s = tostring(n)\n    local last_digit = tonumber(s:sub(1, 1))\n    local last_diff = 0\n    for i = 2, #s do\n        local digit = tonumber(s:sub(i, i))\n        local diff = digit - last_digit\n        if diff == 0 then\n            return false\n        elseif last_diff == 0 then\n            last_diff = diff\n        elseif last_diff ~= diff then\n            return false\n        end\n        last_digit = digit\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  while i < j do\n    if s:sub(i, i) ~= s:sub(j, j) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local last_digit = tonumber(s:sub(1, 1))\n  local last_diff = 0\n  for i = 2, #s do\n    local digit = tonumber(s:sub(i, i))\n    local diff = digit - last_digit\n    if diff == last_diff then\n      return false\n    end\n    last_digit = digit\n    last_diff = diff\n  end\n  return true\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local i = 1\n  while i < n_len do\n    local a = tonumber(n_str:sub(i, i))\n    local b = tonumber(n_str:sub(i + 1, i + 1))\n    if a == b then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  while i < l do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local k = 1\n  local d = {}\n  while i <= j do\n    d[k] = tonumber(s:sub(i, j))\n    i = i + 1\n    j = j - 1\n    k = k + 1\n  end\n  for i = 1, #d - 1 do\n    if d[i] ~= d[i + 1] then\n      return false\n    end\n  end\n  return true\nend",
    "    local n_str = tostring(n)\n    local n_len = #n_str\n    local i = 1\n    local j = 2\n    local k = 3\n    local is_undulating = true\n    while is_undulating and k <= n_len do\n        if n_str:sub(i, i) ~= n_str:sub(j, j) or n_str:sub(j, j) ~= n_str:sub(k, k) then\n            is_undulating = false\n        end\n        i = i + 1\n        j = j + 1\n        k = k + 1\n    end\n    return is_undulating\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\twhile i < j do\n\t\tif s:sub(i, i) == s:sub(j, j) then\n\t\t\ti = i + 1\n\t\t\tj = j - 1\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  while i <= len - 1 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 1\n  end\n  return true\nend",
    "    local s = tostring(n)\n    local last_digit = tonumber(s:sub(1, 1))\n    local is_increasing = true\n    for i = 2, #s do\n        local digit = tonumber(s:sub(i, i))\n        if digit == last_digit then\n            return false\n        end\n        if is_increasing then\n            if digit < last_digit then\n                is_increasing = false\n            end\n        else\n            if digit > last_digit then\n                return false\n            end\n        end\n        last_digit = digit\n    end\n    return true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    while i < l do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) then\n            return false\n        end\n        i = i + 2\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = 2\n  local k = 3\n  local a = tonumber(s:sub(i, i))\n  local b = tonumber(s:sub(j, j))\n  local c = tonumber(s:sub(k, k))\n  while k <= l do\n    if a < b and b > c then\n      return true\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n    a = tonumber(s:sub(i, i))\n    b = tonumber(s:sub(j, j))\n    c = tonumber(s:sub(k, k))\n  end\n  return false\nend",
    "  local s = tostring(n)\n  local len = #s\n  for i = 1, len - 2 do\n    if s:sub(i, i) == s:sub(i + 2, i + 2) then\n      return true\n    end\n  end\n  return false\nend",
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 2 do\n    if s:sub(i, i) == s:sub(i + 2, i + 2) then\n      return true\n    end\n  end\n  return false\nend",
    "    local s = tostring(n)\n    local i = 1\n    while i < #s do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) then\n            return false\n        end\n        i = i + 2\n    end\n    return true\nend",
    "\tlocal s = tostring(n)\n\tlocal last_digit = tonumber(s:sub(1, 1))\n\tlocal increasing = true\n\tfor i = 2, #s do\n\t\tlocal digit = tonumber(s:sub(i, i))\n\t\tif digit == last_digit then\n\t\t\treturn false\n\t\tend\n\t\tif increasing then\n\t\t\tif digit < last_digit then\n\t\t\t\tincreasing = false\n\t\t\tend\n\t\telse\n\t\t\tif digit > last_digit then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\tlast_digit = digit\n\tend\n\treturn true\nend",
    "    local str = tostring(n)\n    local len = #str\n    local i = 1\n    while i < len do\n        if str:sub(i, i) == str:sub(i + 1, i + 1) then\n            return false\n        end\n        i = i + 2\n    end\n    return true\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local is_undulating = true\n  for i = 1, n_len - 2, 2 do\n    if n_str:sub(i, i) ~= n_str:sub(i + 2, i + 2) then\n      is_undulating = false\n      break\n    end\n  end\n  return is_undulating\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  while i < j do\n    if s:sub(i, i) ~= s:sub(j, j) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "\tlocal last_digit = n % 10\n\tlocal n = math.floor(n / 10)\n\tlocal is_increasing = true\n\twhile n > 0 do\n\t\tlocal digit = n % 10\n\t\tif digit > last_digit then\n\t\t\tis_increasing = false\n\t\telseif digit < last_digit then\n\t\t\tif not is_increasing then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\tlast_digit = digit\n\t\tn = math.floor(n / 10)\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\tlocal k = 1\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    local j = 2\n    local k = 3\n    while k <= l do\n        local a = tonumber(s:sub(i, i))\n        local b = tonumber(s:sub(j, j))\n        local c = tonumber(s:sub(k, k))\n        if a == b or b == c or a == c then\n            return false\n        end\n        i = i + 1\n        j = j + 1\n        k = k + 1\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local last = s:sub(1, 1)\n  local last_was_increasing = true\n  for i = 2, #s do\n    local c = s:sub(i, i)\n    if c == last then\n      return false\n    end\n    if c < last then\n      if not last_was_increasing then\n        return false\n      end\n      last_was_increasing = false\n    else\n      if last_was_increasing then\n        return false\n      end\n      last_was_increasing = true\n    end\n    last = c\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tfor i = 1, l - 2 do\n\t\tif s:sub(i, i) == s:sub(i + 2, i + 2) then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tfor i = 1, l - 2 do\n\t\tif s:sub(i, i) == s:sub(i + 2, i + 2) then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  while i <= len - 1 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 1\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tfor i = 1, l - 2 do\n\t\tlocal a, b, c = tonumber(s:sub(i, i)), tonumber(s:sub(i + 1, i + 1)), tonumber(s:sub(i + 2, i + 2))\n\t\tif not (a < b and b > c) and not (a > b and b < c) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    local n_str = tostring(n)\n    local n_len = #n_str\n    local is_undulating = true\n    for i = 1, n_len - 1 do\n        if n_str:sub(i, i) == n_str:sub(i + 1, i + 1) then\n            is_undulating = false\n            break\n        end\n    end\n    return is_undulating\nend",
    "\tlocal s = tostring(n)\n\tlocal last = s:sub(1,1)\n\tlocal last_was_even = (last % 2 == 0)\n\tfor i = 2, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tlocal is_even = (c % 2 == 0)\n\t\tif is_even == last_was_even then\n\t\t\treturn false\n\t\tend\n\t\tlast_was_even = is_even\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 1 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\tlocal x = s:sub(i, i)\n\tlocal y = s:sub(j, j)\n\twhile i < j do\n\t\tif x == y then\n\t\t\ti = i + 1\n\t\t\tj = j - 1\n\t\t\tx = s:sub(i, i)\n\t\t\ty = s:sub(j, j)\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    local j = l\n    local k = 1\n    local c = 0\n    while i < j do\n        if s:sub(i, i) == s:sub(j, j) then\n            i = i + 1\n            j = j - 1\n        elseif s:sub(i, i) < s:sub(j, j) then\n            i = i + 1\n            k = k + 1\n            c = c + 1\n        else\n            j = j - 1\n            k = k + 1\n            c = c + 1\n        end\n    end\n    return c == 1\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  while i < j do\n    if s:sub(i,i) ~= s:sub(j,j) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal last_digit = tonumber(s:sub(1, 1))\n\tlocal increasing = true\n\tfor i = 2, #s do\n\t\tlocal digit = tonumber(s:sub(i, i))\n\t\tif increasing then\n\t\t\tif digit < last_digit then\n\t\t\t\tincreasing = false\n\t\t\telseif digit == last_digit then\n\t\t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\tif digit > last_digit then\n\t\t\t\treturn false\n\t\t\telseif digit == last_digit then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\tlast_digit = digit\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  while i < j do\n    if s:sub(i, i) ~= s:sub(j, j) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "  local str = tostring(n)\n  local len = #str\n  local i = 1\n  while i <= len - 2 do\n    if str:sub(i, i) == str:sub(i + 2, i + 2) then\n      return true\n    end\n    i = i + 1\n  end\n  return false\nend",
    "    local s = tostring(n)\n    local i = 1\n    local j = #s\n    while i < j do\n        if s:sub(i, i) ~= s:sub(j, j) then\n            return false\n        end\n        i = i + 1\n        j = j - 1\n    end\n    return true\nend",
    "  local str = tostring(n)\n  local len = #str\n  local i = 1\n  local last_digit = tonumber(str:sub(1, 1))\n  local last_diff = 0\n  while i < len do\n    local digit = tonumber(str:sub(i + 1, i + 1))\n    local diff = digit - last_digit\n    if diff == last_diff then\n      return false\n    end\n    last_diff = diff\n    last_digit = digit\n    i = i + 1\n  end\n  return true\nend",
    "  local last_digit = n % 10\n  n = n / 10\n  local is_increasing = true\n  while n > 0 do\n    local digit = n % 10\n    if is_increasing then\n      if digit > last_digit then\n        return false\n      end\n    else\n      if digit < last_digit then\n        return false\n      end\n    end\n    last_digit = digit\n    n = n / 10\n    is_increasing = not is_increasing\n  end\n  return true\nend",
    "    local s = tostring(n)\n    local last_digit = tonumber(s:sub(1,1))\n    local is_increasing = true\n    for i = 2, #s do\n        local digit = tonumber(s:sub(i,i))\n        if is_increasing then\n            if digit < last_digit then\n                is_increasing = false\n            elseif digit == last_digit then\n                return false\n            end\n        else\n            if digit > last_digit then\n                return false\n            elseif digit == last_digit then\n                return false\n            end\n        end\n        last_digit = digit\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 1 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal i = 1\n\tlocal j = #s\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "  local str = tostring(n)\n  local len = #str\n  local last_digit = tonumber(str:sub(1, 1))\n  local is_increasing = true\n  for i = 2, len do\n    local digit = tonumber(str:sub(i, i))\n    if is_increasing then\n      if digit < last_digit then\n        is_increasing = false\n      elseif digit == last_digit then\n        return false\n      end\n    else\n      if digit > last_digit then\n        return false\n      elseif digit == last_digit then\n        return false\n      end\n    end\n    last_digit = digit\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local k = 1\n  local m = l - 1\n  local c = 0\n  while i < j do\n    if s:sub(i, i) == s:sub(j, j) then\n      i = i + 1\n      j = j - 1\n    else\n      return false\n    end\n  end\n  while k < m do\n    if s:sub(k, k) == s:sub(m, m) then\n      k = k + 1\n      m = m - 1\n    else\n      return false\n    end\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = 2\n  local k = 3\n  local last_diff = 0\n  local diff = 0\n  while k <= l do\n    if s:sub(i, i) == s:sub(j, j) then\n      return false\n    end\n    diff = s:sub(i, i) < s:sub(j, j) and 1 or -1\n    if diff ~= last_diff then\n      last_diff = diff\n      i = j\n      j = k\n      k = k + 1\n    else\n      return false\n    end\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local i = 1\n  local j = #s\n  while i < j do\n    if s:sub(i, i) ~= s:sub(j, j) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 2 do\n    if s:sub(i, i) == s:sub(i + 2, i + 2) then\n      return true\n    end\n  end\n  return false\nend",
    "    local n_str = tostring(n)\n    local n_len = #n_str\n    local last_digit = tonumber(n_str:sub(1,1))\n    local last_diff = 0\n    for i = 2, n_len do\n        local digit = tonumber(n_str:sub(i,i))\n        local diff = digit - last_digit\n        if diff == 0 then\n            return false\n        end\n        if last_diff ~= 0 and diff ~= last_diff then\n            return false\n        end\n        last_diff = diff\n        last_digit = digit\n    end\n    return true\nend",
    "\tlocal s = tostring(n)\n\tlocal last_digit = tonumber(s:sub(1, 1))\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 2, #s do\n\t\tlocal digit = tonumber(s:sub(i, i))\n\t\tif digit > last_digit then\n\t\t\tdecreasing = false\n\t\telseif digit < last_digit then\n\t\t\tincreasing = false\n\t\tend\n\t\tlast_digit = digit\n\tend\n\treturn increasing or decreasing\nend",
    "\tlocal s = tostring(n)\n\tlocal len = #s\n\tlocal i = 1\n\tlocal j = len\n\tlocal last_diff = nil\n\twhile i < j do\n\t\tlocal d1 = tonumber(s:sub(i, i))\n\t\tlocal d2 = tonumber(s:sub(j, j))\n\t\tlocal diff = d1 - d2\n\t\tif last_diff == nil then\n\t\t\tlast_diff = diff\n\t\telseif last_diff ~= diff then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "\tlocal digits = {}\n\twhile n > 0 do\n\t\tdigits[#digits + 1] = n % 10\n\t\tn = math.floor(n / 10)\n\tend\n\tlocal undulating = true\n\tfor i = 1, #digits - 2 do\n\t\tif digits[i] == digits[i + 1] or digits[i + 1] == digits[i + 2] then\n\t\t\tundulating = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn undulating\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  while i < j do\n    if s:sub(i, i) ~= s:sub(j, j) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "\tlocal n_str = tostring(n)\n\tlocal n_len = #n_str\n\tlocal n_digits = {}\n\tfor i = 1, n_len do\n\t\tn_digits[i] = tonumber(n_str:sub(i, i))\n\tend\n\tlocal is_undulating = true\n\tfor i = 1, n_len - 1 do\n\t\tif n_digits[i] == n_digits[i + 1] then\n\t\t\tis_undulating = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn is_undulating\nend",
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 1 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "\tlocal str = tostring(n)\n\tlocal len = #str\n\tlocal i = 1\n\twhile i < len do\n\t\tif str:sub(i, i) == str:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal i = 1\n\twhile i < #s do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\tlocal last_diff = nil\n\twhile i < j do\n\t\tlocal d1 = tonumber(s:sub(i, i))\n\t\tlocal d2 = tonumber(s:sub(j, j))\n\t\tlocal diff = d1 - d2\n\t\tif last_diff ~= nil and last_diff ~= diff then\n\t\t\treturn false\n\t\tend\n\t\tlast_diff = diff\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "  local str = tostring(n)\n  local len = #str\n  local last_digit = tonumber(str:sub(1, 1))\n  local is_increasing = true\n  local is_decreasing = true\n  for i = 2, len do\n    local digit = tonumber(str:sub(i, i))\n    if digit > last_digit then\n      is_decreasing = false\n    elseif digit < last_digit then\n      is_increasing = false\n    end\n    last_digit = digit\n  end\n  return is_increasing or is_decreasing\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\twhile i < l do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = 2\n  local k = 3\n  local last_diff = nil\n  while k <= l do\n    local diff = s:sub(i, i) - s:sub(j, j)\n    if diff ~= 0 then\n      if last_diff == nil then\n        last_diff = diff\n      elseif last_diff ~= diff then\n        return false\n      end\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal last = s:sub(1,1)\n\tlocal last_type = tonumber(last) and 'number' or 'letter'\n\tlocal undulating = true\n\tfor i = 2, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tlocal c_type = tonumber(c) and 'number' or 'letter'\n\t\tif c_type == last_type then\n\t\t\tundulating = false\n\t\t\tbreak\n\t\tend\n\t\tlast_type = c_type\n\tend\n\treturn undulating\nend",
    "    local s = tostring(n)\n    local prev = s:sub(1, 1)\n    local prev_prev = nil\n    for i = 2, #s do\n        local c = s:sub(i, i)\n        if c == prev then\n            return false\n        end\n        if prev_prev and c == prev_prev then\n            return false\n        end\n        prev_prev = prev\n        prev = c\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  while i < l do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 1\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal len = #s\n\tlocal i = 1\n\tlocal j = len\n\tlocal last_diff = nil\n\twhile i < j do\n\t\tlocal diff = s:sub(i, i) - s:sub(j, j)\n\t\tif last_diff then\n\t\t\tif diff == 0 then\n\t\t\t\treturn false\n\t\t\telseif diff ~= last_diff then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\tlast_diff = diff\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "    local last_digit = n % 10\n    local n = n // 10\n    local is_ascending = true\n    while n > 0 do\n        local digit = n % 10\n        if is_ascending then\n            if digit > last_digit then\n                return false\n            end\n        else\n            if digit < last_digit then\n                return false\n            end\n        end\n        last_digit = digit\n        n = n // 10\n        is_ascending = not is_ascending\n    end\n    return true\nend",
    "\tlocal s = tostring(n)\n\tlocal len = #s\n\tlocal i = 1\n\twhile i < len do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn true\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local i = 1\n  while i < n_len do\n    local d1 = tonumber(n_str:sub(i, i))\n    local d2 = tonumber(n_str:sub(i + 1, i + 1))\n    if d1 == d2 then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    while i < l do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) then\n            return false\n        end\n        i = i + 2\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 2 do\n    if s:sub(i, i) == s:sub(i + 2, i + 2) then\n      return true\n    end\n  end\n  return false\nend",
    "  local digits = {}\n  for i = 1, #tostring(n) do\n    digits[i] = tonumber(tostring(n):sub(i, i))\n  end\n  local undulating = true\n  for i = 1, #digits - 2 do\n    if digits[i] == digits[i + 1] then\n      undulating = false\n      break\n    end\n  end\n  return undulating\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\tlocal k = 1\n\tlocal l = 1\n\tlocal m = 1\n\tlocal n = 1\n\twhile i <= l do\n\t\tif s:sub(i, i) == s:sub(j, j) then\n\t\t\ti = i + 1\n\t\t\tj = j - 1\n\t\telse\n\t\t\tk = 0\n\t\t\tbreak\n\t\tend\n\tend\n\tif k == 1 then\n\t\treturn true\n\tend\n\twhile l <= l do\n\t\tif s:sub(l, l) == s:sub(m, m) then\n\t\t\tl = l + 1\n\t\t\tm = m - 1\n\t\telse\n\t\t\tn = 0\n\t\t\tbreak\n\t\tend\n\tend\n\tif n == 1 then\n\t\treturn true\n\tend\n\treturn false\nend",
    "  local str = tostring(n)\n  local len = #str\n  local i = 1\n  while i < len do\n    if str:sub(i, i) == str:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal i = 1\n\tlocal j = #s\n\twhile i < j do\n\t\tif s:sub(i, i) == s:sub(j, j) then\n\t\t\ti = i + 1\n\t\t\tj = j - 1\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "\tlocal str = tostring(n)\n\tlocal len = #str\n\tlocal i = 1\n\tlocal j = len\n\twhile i < j do\n\t\tif str:sub(i, i) ~= str:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    while i < l do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) then\n            return false\n        end\n        i = i + 2\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local last = s:sub(1,1)\n  local last_diff = nil\n  for i = 2, #s do\n    local c = s:sub(i,i)\n    local diff = c - last\n    if last_diff and diff ~= last_diff then\n      return false\n    end\n    last_diff = diff\n    last = c\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = 2\n\tlocal k = 3\n\tlocal last_diff = nil\n\twhile k <= l do\n\t\tlocal diff = s:sub(i, i) - s:sub(j, j)\n\t\tif diff ~= last_diff then\n\t\t\tlast_diff = diff\n\t\t\ti = j\n\t\t\tj = k\n\t\t\tk = k + 1\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal i = 1\n\tlocal j = #s\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local k = 1\n  local m = l\n  local a = {}\n  local b = {}\n  while i <= j do\n    a[k] = s:sub(i, i)\n    b[m] = s:sub(j, j)\n    i = i + 1\n    j = j - 1\n    k = k + 1\n    m = m - 1\n  end\n  local c = {}\n  local d = {}\n  for i = 1, l do\n    c[i] = tonumber(a[i])\n    d[i] = tonumber(b[i])\n  end\n  local e = {}\n  local f = {}\n  for i = 1, l - 1 do\n    e[i] = c[i] - c[i + 1]\n    f[i] = d[i] - d[i + 1]\n  end\n  local g = {}\n  local h = {}\n  for i = 1, l - 2 do\n    g[i] = e[i] * e[i + 1]\n    h[i] = f[i] * f[i + 1]\n  end\n  local flag = true\n  for i = 1, l - 2 do\n    if g[i] < 0 or h[i] < 0 then\n      flag = false\n    end\n  end\n  return flag\nend",
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 2 do\n    if s:sub(i, i) == s:sub(i + 2, i + 2) then\n      return true\n    end\n  end\n  return false\nend",
    "    local digits = get_digits(n)\n    local is_increasing = true\n    for i = 1, #digits - 1 do\n        if digits[i] < digits[i + 1] then\n            if not is_increasing then\n                return false\n            end\n        elseif digits[i] > digits[i + 1] then\n            if is_increasing then\n                is_increasing = false\n            end\n        else\n            return false\n        end\n    end\n    return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\twhile i <= l do\n\t\tlocal j = i + 1\n\t\twhile j <= l and s:sub(j, j) == s:sub(i, i) do\n\t\t\tj = j + 1\n\t\tend\n\t\tif j <= l and s:sub(j, j) == s:sub(i, i) + 1 then\n\t\t\ti = j + 1\n\t\telseif j <= l and s:sub(j, j) == s:sub(i, i) - 1 then\n\t\t\ti = j + 1\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    local j = l\n    local k = 1\n    local m = l\n    local a = {}\n    local b = {}\n    while i <= l do\n        a[k] = tonumber(s:sub(i, i))\n        b[m] = tonumber(s:sub(j, j))\n        i = i + 1\n        j = j - 1\n        k = k + 1\n        m = m - 1\n    end\n    for i = 1, l - 1 do\n        if a[i] > a[i + 1] then\n            return false\n        end\n    end\n    for i = 1, l - 1 do\n        if b[i] > b[i + 1] then\n            return false\n        end\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local i = 1\n  while i < #s do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 1\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  while i < l do\n    local a, b = tonumber(s:sub(i, i)), tonumber(s:sub(i + 1, i + 1))\n    if a == b then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local last_digit = tonumber(s:sub(1, 1))\n  local increasing = true\n  for i = 2, #s do\n    local digit = tonumber(s:sub(i, i))\n    if increasing then\n      if digit < last_digit then\n        increasing = false\n      elseif digit > last_digit then\n        return false\n      end\n    else\n      if digit > last_digit then\n        increasing = true\n      elseif digit < last_digit then\n        return false\n      end\n    end\n    last_digit = digit\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local last = s:sub(1, 1)\n  local last_was_increasing = false\n  for i = 2, #s do\n    local c = s:sub(i, i)\n    local is_increasing = c > last\n    if is_increasing == last_was_increasing then\n      return false\n    end\n    last = c\n    last_was_increasing = is_increasing\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = 2\n  local k = 3\n  local undulating = true\n  while undulating and k <= l do\n    if s:sub(i, i) == s:sub(j, j) then\n      undulating = false\n    elseif s:sub(i, i) < s:sub(j, j) then\n      if s:sub(j, j) > s:sub(k, k) then\n        undulating = false\n      end\n    else\n      if s:sub(j, j) < s:sub(k, k) then\n        undulating = false\n      end\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return undulating\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = 2\n  local k = 3\n  while k <= l do\n    if s:sub(i, i) == s:sub(j, j) or s:sub(j, j) == s:sub(k, k) then\n      return false\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local last = nil\n  while i <= j do\n    local a = tonumber(s:sub(i, i))\n    local b = tonumber(s:sub(j, j))\n    if a == b then\n      if last == nil then\n        last = a\n      elseif last ~= a then\n        return false\n      end\n    elseif a ~= b then\n      if last == nil then\n        last = a\n      elseif last ~= b then\n        return false\n      end\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal len = #s\n\tlocal prev = tonumber(s:sub(1, 1))\n\tlocal curr = tonumber(s:sub(2, 2))\n\tlocal inc = curr > prev\n\tfor i = 3, len do\n\t\tprev = curr\n\t\tcurr = tonumber(s:sub(i, i))\n\t\tif curr > prev then\n\t\t\tif not inc then return false end\n\t\telseif curr < prev then\n\t\t\tif inc then return false end\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal last_digit = tonumber(s:sub(1,1))\n\tlocal increasing = true\n\tfor i = 2, #s do\n\t\tlocal digit = tonumber(s:sub(i,i))\n\t\tif digit == last_digit then\n\t\t\treturn false\n\t\tend\n\t\tif increasing then\n\t\t\tif digit < last_digit then\n\t\t\t\tincreasing = false\n\t\t\tend\n\t\telse\n\t\t\tif digit > last_digit then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\tlast_digit = digit\n\tend\n\treturn true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    local j = l\n    while i < j do\n        if s:sub(i, i) ~= s:sub(j, j) then\n            return false\n        end\n        i = i + 1\n        j = j - 1\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local len = #s\n  for i = 1, len - 1 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n  end\n  return true\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local n_digits = {}\n  for i = 1, n_len do\n    n_digits[i] = tonumber(n_str:sub(i, i))\n  end\n  local n_odd = n_len % 2 == 1\n  local n_even = n_len % 2 == 0\n  local n_even_start = n_even and n_digits[1] == n_digits[2]\n  local n_odd_start = n_odd and n_digits[1] == n_digits[2]\n  local n_even_end = n_even and n_digits[n_len - 1] == n_digits[n_len]\n  local n_odd_end = n_odd and n_digits[n_len - 1] == n_digits[n_len]\n  local n_even_middle = n_even and n_digits[n_len / 2] == n_digits[n_len / 2 + 1]\n  local n_odd_middle = n_odd and n_digits[(n_len + 1) / 2] == n_digits[(n_len + 1) / 2 + 1]\n  local n_even_middle_start = n_even and n_digits[n_len / 2] == n_digits[n_len / 2 - 1]\n  local n_odd_middle_start = n_odd and n_digits[(n_len + 1) / 2] == n_digits[(n_len + 1) / 2 - 1]\n  local n_even_middle_end = n_even and n_digits[n_len / 2] == n_digits[n_len / 2 + 2]\n  local n_odd_middle_end = n_odd and n_digits[(n_len + 1) / 2] == n_digits[(n_len + 1) / 2 + 2]\n  local n_even_middle_start_end = n_even and n_digits[n_len / 2] == n_",
    "  local digits = {}\n  for d in tostring(n):gmatch(\"%d\") do\n    table.insert(digits, tonumber(d))\n  end\n  local i = 1\n  while i < #digits do\n    if digits[i] == digits[i + 1] then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local i = 1\n  local j = #s\n  while i < j do\n    if s:sub(i, i) ~= s:sub(j, j) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local len = #s\n  for i = 1, len - 1 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n  end\n  return true\nend",
    "    local s = tostring(n)\n    local len = #s\n    local i = 1\n    while i < len do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) then\n            return false\n        end\n        i = i + 2\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local last_digit = tonumber(s:sub(1, 1))\n  local increasing = true\n  for i = 2, #s do\n    local digit = tonumber(s:sub(i, i))\n    if increasing then\n      if digit < last_digit then\n        increasing = false\n      elseif digit == last_digit then\n        return false\n      end\n    else\n      if digit > last_digit then\n        return false\n      elseif digit == last_digit then\n        return false\n      end\n    end\n    last_digit = digit\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local last = s:sub(1, 1)\n  local last_was_increasing = true\n  for i = 2, #s do\n    local c = s:sub(i, i)\n    if c < last then\n      if not last_was_increasing then\n        return false\n      end\n      last_was_increasing = false\n    elseif c > last then\n      if last_was_increasing then\n        return false\n      end\n      last_was_increasing = true\n    end\n    last = c\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\tlocal k = 1\n\tlocal d = {}\n\twhile i <= j do\n\t\td[k] = tonumber(s:sub(i, j))\n\t\ti = i + 1\n\t\tj = j - 1\n\t\tk = k + 1\n\tend\n\tfor i = 1, l - 1 do\n\t\tif d[i] < d[i + 1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local prev = s:sub(i, i)\n  local curr = s:sub(j, j)\n  while i < j do\n    if prev == curr then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n    prev = s:sub(i, i)\n    curr = s:sub(j, j)\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal last_digit = tonumber(s:sub(1, 1))\n\tlocal increasing = true\n\tfor i = 2, #s do\n\t\tlocal digit = tonumber(s:sub(i, i))\n\t\tif digit == last_digit then\n\t\t\treturn false\n\t\telseif increasing then\n\t\t\tif digit < last_digit then\n\t\t\t\tincreasing = false\n\t\t\tend\n\t\telse\n\t\t\tif digit > last_digit then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\tlast_digit = digit\n\tend\n\treturn true\nend",
    "    local n_str = tostring(n)\n    local n_len = #n_str\n    local i = 1\n    local j = 2\n    local k = 3\n    while k <= n_len do\n        if n_str:sub(i, i) == n_str:sub(j, j) then\n            return false\n        end\n        if n_str:sub(j, j) == n_str:sub(k, k) then\n            return false\n        end\n        if n_str:sub(i, i) > n_str:sub(j, j) then\n            if n_str:sub(j, j) < n_str:sub(k, k) then\n                return false\n            end\n        elseif n_str:sub(i, i) < n_str:sub(j, j) then\n            if n_str:sub(j, j) > n_str:sub(k, k) then\n                return false\n            end\n        end\n        i = i + 1\n        j = j + 1\n        k = k + 1\n    end\n    return true\nend",
    "  local s = tostring(n)\n  local i = 1\n  local j = #s\n  while i < j do\n    if s:sub(i, i) ~= s:sub(j, j) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local k = 1\n  local m = l\n  local a = {}\n  local b = {}\n  while i <= l do\n    a[k] = tonumber(s:sub(i, i))\n    b[m] = tonumber(s:sub(j, j))\n    i = i + 1\n    j = j - 1\n    k = k + 1\n    m = m - 1\n  end\n  local c = 0\n  local d = 0\n  for i = 1, l - 1 do\n    if a[i] < a[i + 1] then\n      c = c + 1\n    elseif a[i] > a[i + 1] then\n      d = d + 1\n    end\n  end\n  local e = 0\n  local f = 0\n  for i = 1, l - 1 do\n    if b[i] < b[i + 1] then\n      e = e + 1\n    elseif b[i] > b[i + 1] then\n      f = f + 1\n    end\n  end\n  if c == l - 1 or d == l - 1 or e == l - 1 or f == l - 1 then\n    return true\n  else\n    return false\n  end\nend",
    "  local str = tostring(n)\n  local len = #str\n  local i = 1\n  while i < len do\n    if str:sub(i, i) == str:sub(i+1, i+1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "\tlocal n_str = tostring(n)\n\tlocal n_len = #n_str\n\tlocal n_tbl = {}\n\tfor i = 1, n_len do\n\t\tn_tbl[i] = tonumber(n_str:sub(i, i))\n\tend\n\tlocal is_undulating = true\n\tfor i = 1, n_len - 2 do\n\t\tif n_tbl[i] == n_tbl[i + 1] then\n\t\t\tis_undulating = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn is_undulating\nend",
    "  local s = tostring(n)\n  local last_digit = tonumber(s:sub(1, 1))\n  local is_increasing = true\n  local is_decreasing = true\n  for i = 2, #s do\n    local digit = tonumber(s:sub(i, i))\n    if digit > last_digit then\n      is_decreasing = false\n    elseif digit < last_digit then\n      is_increasing = false\n    end\n    if not is_increasing and not is_decreasing then\n      return false\n    end\n    last_digit = digit\n  end\n  return true\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local is_undulating = true\n  for i = 1, n_len - 2 do\n    local a, b, c = n_str:sub(i, i), n_str:sub(i + 1, i + 1), n_str:sub(i + 2, i + 2)\n    if not ((a < b and b > c) or (a > b and b < c)) then\n      is_undulating = false\n      break\n    end\n  end\n  return is_undulating\nend",
    "\tlocal str = tostring(n)\n\tlocal len = #str\n\tlocal last = str:sub(1, 1)\n\tlocal last_diff = 0\n\tlocal diff = 0\n\tlocal undulating = true\n\tfor i = 2, len do\n\t\tdiff = str:sub(i, i) - last\n\t\tif diff == 0 then\n\t\t\tundulating = false\n\t\t\tbreak\n\t\tend\n\t\tif last_diff == 0 then\n\t\t\tlast_diff = diff\n\t\telseif last_diff ~= diff then\n\t\t\tundulating = false\n\t\t\tbreak\n\t\tend\n\t\tlast = str:sub(i, i)\n\tend\n\treturn undulating\nend",
    "\tlocal s = tostring(n)\n\tlocal len = #s\n\tlocal i = 1\n\tlocal j = len\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local last_digit = tonumber(s:sub(1, 1))\n  local is_increasing = true\n  for i = 2, #s do\n    local digit = tonumber(s:sub(i, i))\n    if is_increasing then\n      if digit < last_digit then\n        is_increasing = false\n      elseif digit == last_digit then\n        return false\n      end\n    else\n      if digit > last_digit then\n        return false\n      elseif digit == last_digit then\n        return false\n      end\n    end\n    last_digit = digit\n  end\n  return true\nend",
    "\tlocal n_str = tostring(n)\n\tlocal n_len = #n_str\n\tlocal last_digit = tonumber(n_str:sub(1, 1))\n\tlocal last_diff = 0\n\tlocal diff = 0\n\tfor i = 2, n_len do\n\t\tlocal digit = tonumber(n_str:sub(i, i))\n\t\tdiff = digit - last_digit\n\t\tif diff == last_diff then\n\t\t\treturn false\n\t\tend\n\t\tlast_diff = diff\n\t\tlast_digit = digit\n\tend\n\treturn true\nend",
    "    local s = tostring(n)\n    local last = s:sub(1, 1)\n    local last_was_increasing = true\n    for i = 2, #s do\n        local c = s:sub(i, i)\n        if c == last then\n            return false\n        end\n        if last_was_increasing then\n            if c < last then\n                last_was_increasing = false\n            end\n        else\n            if c > last then\n                return false\n            end\n        end\n        last = c\n    end\n    return true\nend",
    "    local str = tostring(n)\n    local last_digit = tonumber(str:sub(1, 1))\n    local increasing = true\n    for i = 2, #str do\n        local digit = tonumber(str:sub(i, i))\n        if increasing then\n            if digit < last_digit then\n                increasing = false\n            elseif digit == last_digit then\n                return false\n            end\n        else\n            if digit > last_digit then\n                return false\n            elseif digit == last_digit then\n                return false\n            end\n        end\n        last_digit = digit\n    end\n    return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "  local n_str = tostring(n)\n  local len = #n_str\n  local i = 1\n  while i < len do\n    if n_str:sub(i, i) == n_str:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal i = 1\n\tlocal j = #s\n\tlocal last_diff = nil\n\twhile i < j do\n\t\tlocal diff = s:sub(i, i) - s:sub(j, j)\n\t\tif last_diff and last_diff ~= diff then\n\t\t\treturn false\n\t\tend\n\t\tlast_diff = diff\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local len = #s\n  local last_digit = tonumber(s:sub(1, 1))\n  local is_increasing = true\n  local is_decreasing = true\n  for i = 2, len do\n    local digit = tonumber(s:sub(i, i))\n    if digit > last_digit then\n      is_decreasing = false\n    elseif digit < last_digit then\n      is_increasing = false\n    end\n    last_digit = digit\n  end\n  return is_increasing or is_decreasing\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local k = 1\n  local l = l - 1\n  while k <= l do\n    if s:sub(i, i) ~= s:sub(j, j) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n    k = k + 1\n    l = l - 1\n  end\n  return true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = 2\n\tlocal k = 3\n\twhile k <= l do\n\t\tif s:sub(i, i) == s:sub(k, k) then\n\t\t\treturn true\n\t\tend\n\t\ti = i + 1\n\t\tj = j + 1\n\t\tk = k + 1\n\tend\n\treturn false\nend"
  ]
}