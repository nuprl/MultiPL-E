{
  "name": "mbpp_92_is_undulating",
  "language": "lua",
  "prompt": "-- Write a function to check whether the given number is undulating or not.\nlocal function is_undulating(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_undulating\n    lu.assertEquals(candidate(1212121), true)\n    lu.assertEquals(candidate(1991), false)\n    lu.assertEquals(candidate(121), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal n_str = tostring(n)\n\tlocal n_len = #n_str\n\tlocal n_digits = {}\n\tfor i = 1, n_len do\n\t\tn_digits[i] = tonumber(n_str:sub(i, i))\n\tend\n\tlocal n_digits_rev = {}\n\tfor i = 1, n_len do\n\t\tn_digits_rev[i] = n_digits[n_len - i + 1]\n\tend\n\tlocal is_undulating = true\n\tfor i = 1, n_len - 1 do\n\t\tif n_digits[i] == n_digits[i + 1] or n_digits[i] == n_digits_rev[i + 1] then\n\t\t\tis_undulating = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn is_undulating\nend",
    "  local s = tostring(n)\n  local last_digit = tonumber(s:sub(1, 1))\n  local is_increasing = true\n  local is_decreasing = true\n  for i = 2, #s do\n    local digit = tonumber(s:sub(i, i))\n    if digit > last_digit then\n      is_decreasing = false\n    elseif digit < last_digit then\n      is_increasing = false\n    end\n    last_digit = digit\n  end\n  return is_increasing or is_decreasing\nend",
    "\tlocal s = tostring(n)\n\tlocal len = #s\n\tlocal i = 1\n\twhile i < len do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 2\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local k = 1\n  local m = l - 1\n  local r = true\n  while i < j and k < m do\n    if s:sub(i, i) ~= s:sub(j, j) then\n      r = false\n      break\n    end\n    if s:sub(k, k) ~= s:sub(m, m) then\n      r = false\n      break\n    end\n    i = i + 1\n    j = j - 1\n    k = k + 1\n    m = m - 1\n  end\n  return r\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local n_digits = {}\n  for i = 1, n_len do\n    n_digits[i] = tonumber(n_str:sub(i, i))\n  end\n  local is_undulating = true\n  for i = 1, n_len - 2 do\n    if n_digits[i] == n_digits[i + 1] or n_digits[i + 1] == n_digits[i + 2] or n_digits[i + 2] == n_digits[i + 3] then\n      is_undulating = false\n      break\n    end\n  end\n  return is_undulating\nend",
    "  local s = tostring(n)\n  local l = #s\n  for i = 1, l - 2 do\n    if s:sub(i, i) == s:sub(i + 2, i + 2) then\n      return true\n    end\n  end\n  return false\nend",
    "\tlocal n_str = tostring(n)\n\tlocal n_len = #n_str\n\tlocal is_undulating = true\n\tfor i = 1, n_len - 1 do\n\t\tlocal c1 = n_str:sub(i, i)\n\t\tlocal c2 = n_str:sub(i + 1, i + 1)\n\t\tif c1 == c2 then\n\t\t\tis_undulating = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn is_undulating\nend",
    "  local n_str = tostring(n)\n  local n_len = #n_str\n  local is_undulating = true\n  for i = 1, n_len - 2, 2 do\n    if n_str:sub(i, i + 1) >= n_str:sub(i + 2, i + 3) then\n      is_undulating = false\n      break\n    end\n  end\n  return is_undulating\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\twhile i < j do\n\t\tif s:sub(i,i) ~= s:sub(j,j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "\tlocal s = tostring(n)\n\tlocal l = #s\n\tlocal i = 1\n\tlocal j = l\n\twhile i < j do\n\t\tif s:sub(i, i) ~= s:sub(j, j) then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend",
    "  local s = tostring(n)\n  local i = 1\n  while i < #s do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local last_digit = n % 10\n  n = n / 10\n  while n > 0 do\n    local digit = n % 10\n    if digit == last_digit then\n      return false\n    end\n    last_digit = digit\n    n = n / 10\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local last = s:sub(1, 1)\n  local last_diff = nil\n  for i = 2, #s do\n    local c = s:sub(i, i)\n    local diff = c - last\n    if last_diff ~= nil and diff ~= last_diff then\n      return false\n    end\n    last_diff = diff\n    last = c\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  local j = 2\n  local k = 3\n  while k <= len do\n    if s:sub(i, i) == s:sub(j, j) then\n      return false\n    end\n    if s:sub(j, j) == s:sub(k, k) then\n      return false\n    end\n    if s:sub(i, i) > s:sub(j, j) then\n      if s:sub(j, j) > s:sub(k, k) then\n        return false\n      end\n    else\n      if s:sub(j, j) < s:sub(k, k) then\n        return false\n      end\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return true\nend",
    "    local s = tostring(n)\n    local i = 1\n    local j = #s\n    while i < j do\n        if s:sub(i, i) ~= s:sub(j, j) then\n            return false\n        end\n        i = i + 1\n        j = j - 1\n    end\n    return true\nend",
    "    local s = tostring(n)\n    local l = #s\n    local i = 1\n    local j = l\n    local is_undulating = true\n    while i < j do\n        if s:sub(i, i) ~= s:sub(j, j) then\n            is_undulating = false\n            break\n        end\n        i = i + 1\n        j = j - 1\n    end\n    return is_undulating\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  while i < l do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local len = #s\n  local i = 1\n  while i < len do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
    "  local s = tostring(n)\n  local l = #s\n  local i = 1\n  local j = l\n  local last_diff = 0\n  while i < j do\n    local c1 = tonumber(s:sub(i, i))\n    local c2 = tonumber(s:sub(j, j))\n    local diff = c1 - c2\n    if diff == 0 then\n      return false\n    end\n    if last_diff == 0 then\n      last_diff = diff\n    elseif last_diff * diff < 0 then\n      last_diff = diff\n    else\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend",
    "  local str = tostring(n)\n  local len = #str\n  local i = 1\n  local j = len\n  while i < j do\n    if str:sub(i, i) ~= str:sub(j, j) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend"
  ]
}