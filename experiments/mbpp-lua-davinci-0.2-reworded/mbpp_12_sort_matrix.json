{
  "name": "mbpp_12_sort_matrix",
  "language": "lua",
  "prompt": "-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = sum(M[i])\n  end\n  local function compare(i, j)\n    return sums[i] < sums[j]\n  end\n  local indices = {}\n  for i = 1, n do\n    indices[i] = i\n  end\n  table.sort(indices, compare)\n  local result = {}\n  for i = 1, n do\n    result[i] = M[indices[i]]\n  end\n  return result\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums)\n  local sorted_matrix = {}\n  for i = 1, n do\n    sorted_matrix[i] = {}\n    for j = 1, n do\n      sorted_matrix[i][j] = M[i][j]\n    end\n  end\n  for i = 1, n do\n    for j = 1, n do\n      for k = 1, n do\n        if sums[i] == sums[k] then\n          for l = 1, n do\n            sorted_matrix[i][l] = M[k][l]\n          end\n        end\n      end\n    end\n  end\n  return sorted_matrix\nend",
    "\tlocal function compare(a, b)\n\t\tlocal sum_a = 0\n\t\tlocal sum_b = 0\n\t\tfor i = 1, #a do\n\t\t\tsum_a = sum_a + a[i]\n\t\t\tsum_b = sum_b + b[i]\n\t\tend\n\t\treturn sum_a < sum_b\n\tend\n\ttable.sort(M, compare)\nend",
    "\tlocal sums = {}\n\tfor i = 1, #M do\n\t\tsums[i] = 0\n\t\tfor j = 1, #M[i] do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\ttable.sort(sums)\n\tlocal sorted = {}\n\tfor i = 1, #M do\n\t\tfor j = 1, #M do\n\t\t\tif sums[i] == 0 then\n\t\t\t\tsorted[i] = M[j]\n\t\t\t\tsums[i] = -1\n\t\t\t\tbreak\n\t\t\telseif sums[i] == M[j][1] + M[j][2] + M[j][3] then\n\t\t\t\tsorted[i] = M[j]\n\t\t\t\tsums[i] = -1\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn sorted\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = sum(M[i])\n    end\n    local function compare(i, j)\n        return sums[i] < sums[j]\n    end\n    local indices = {}\n    for i = 1, n do\n        indices[i] = i\n    end\n    table.sort(indices, compare)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = M[indices[i]]\n    end\n    return sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function cmp(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal order = {}\n\tfor i = 1, n do\n\t\torder[i] = i\n\tend\n\ttable.sort(order, cmp)\n\tlocal res = {}\n\tfor i = 1, n do\n\t\tres[i] = M[order[i]]\n\tend\n\treturn res\nend",
    "\tlocal sums = {}\n\tfor i, row in ipairs(M) do\n\t\tsums[i] = sum(row)\n\tend\n\tlocal function cmp(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, #M do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, cmp)\n\tlocal sorted = {}\n\tfor i, j in ipairs(indices) do\n\t\tsorted[i] = M[j]\n\tend\n\treturn sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\treturn sums[a] < sums[b]\n\tend\n\tlocal indices = {}\n\tfor i = 1, n do\n\t\tindices[i] = i\n\tend\n\ttable.sort(indices, compare)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = M[indices[i]]\n\tend\n\treturn result\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = sum(M[i])\n    end\n    local function compare(a, b)\n        return sums[a] < sums[b]\n    end\n    local indices = {}\n    for i = 1, n do\n        indices[i] = i\n    end\n    table.sort(indices, compare)\n    local result = {}\n    for i = 1, n do\n        result[i] = M[indices[i]]\n    end\n    return result\nend",
    "    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, #M do\n        for j = 1, #M do\n            if sums[i] == sums[j] then\n                sorted[i] = M[j]\n            end\n        end\n    end\n    return sorted\nend",
    "    local n = #M\n    local sums = {}\n    for i = 1, n do\n        sums[i] = 0\n        for j = 1, n do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, n do\n        sorted[i] = {}\n        for j = 1, n do\n            sorted[i][j] = M[sums[i]][j]\n        end\n    end\n    return sorted\nend",
    "   local n = #M\n   local sums = {}\n   for i = 1, n do\n      sums[i] = 0\n      for j = 1, n do\n         sums[i] = sums[i] + M[i][j]\n      end\n   end\n   local function compare(i, j)\n      return sums[i] < sums[j]\n   end\n   table.sort(M, compare)\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = sum(M[i])\n\tend\n\tlocal function comp(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\tlocal order = range(n)\n\ttable.sort(order, comp)\n\tlocal M2 = {}\n\tfor i = 1, n do\n\t\tM2[i] = M[order[i]]\n\tend\n\treturn M2\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  local function compare(i, j)\n    return sums[i] < sums[j]\n  end\n  table.sort(sums, compare)\n  local sorted = {}\n  for i = 1, n do\n    sorted[i] = M[sums[i]]\n  end\n  return sorted\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tlocal function cmp(i, j)\n\t\treturn sums[i] < sums[j]\n\tend\n\tlocal perm = {}\n\tfor i = 1, n do\n\t\tperm[i] = i\n\tend\n\ttable.sort(perm, cmp)\n\tlocal M2 = {}\n\tfor i = 1, n do\n\t\tM2[i] = {}\n\t\tfor j = 1, n do\n\t\t\tM2[i][j] = M[perm[i]][j]\n\t\tend\n\tend\n\treturn M2\nend",
    "  local t = {}\n  for i = 1, #M do\n    t[i] = {sum = 0, row = i}\n    for j = 1, #M[i] do\n      t[i].sum = t[i].sum + M[i][j]\n    end\n  end\n  table.sort(t, function(a, b) return a.sum < b.sum end)\n  local result = {}\n  for i = 1, #t do\n    result[i] = M[t[i].row]\n  end\n  return result\nend",
    "  local n = #M\n  local sums = {}\n  for i = 1, n do\n    sums[i] = 0\n    for j = 1, n do\n      sums[i] = sums[i] + M[i][j]\n    end\n  end\n  table.sort(sums, function(a, b) return a < b end)\n  local sorted_matrix = {}\n  for i = 1, n do\n    sorted_matrix[i] = {}\n    for j = 1, n do\n      sorted_matrix[i][j] = M[sums[i]][j]\n    end\n  end\n  return sorted_matrix\nend",
    "\tlocal n = #M\n\tlocal sums = {}\n\tfor i = 1, n do\n\t\tsums[i] = 0\n\t\tfor j = 1, n do\n\t\t\tsums[i] = sums[i] + M[i][j]\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\tif sums[i] > sums[j] then\n\t\t\t\tsums[i], sums[j] = sums[j], sums[i]\n\t\t\t\tM[i], M[j] = M[j], M[i]\n\t\t\tend\n\t\tend\n\tend\nend",
    "    local sums = {}\n    for i = 1, #M do\n        sums[i] = 0\n        for j = 1, #M[i] do\n            sums[i] = sums[i] + M[i][j]\n        end\n    end\n    table.sort(sums)\n    local sorted = {}\n    for i = 1, #M do\n        for j = 1, #M do\n            if sums[i] == 0 then\n                break\n            end\n            if sums[i] == sums[j] then\n                sorted[i] = M[j]\n                sums[j] = 0\n                break\n            end\n        end\n    end\n    return sorted\nend",
    "\tlocal function compare(a,b)\n\t\treturn sum(a) < sum(b)\n\tend\n\ttable.sort(M,compare)\nend"
  ]
}