{
  "name": "mbpp_635_heap_sort",
  "language": "lua",
  "prompt": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw2smrmly.lua:3: attempt to index global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpw2smrmly.lua:3: in function 'candidate'\n\t/tmp/tmpw2smrmly.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local result = {}\n  while heap:size() > 0 do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv7q9qx77.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpv7q9qx77.lua:3: in function 'candidate'\n\t/tmp/tmpv7q9qx77.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpegk7scwk.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpegk7scwk.lua:3: in function 'candidate'\n\t/tmp/tmpegk7scwk.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbfoaj6wk.lua:3: attempt to index global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpbfoaj6wk.lua:3: in function 'candidate'\n\t/tmp/tmpbfoaj6wk.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local sorted = {}\n    while heap:len() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7x1yf8k5.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmp7x1yf8k5.lua:3: in function 'candidate'\n\t/tmp/tmp7x1yf8k5.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz_n__2bw.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpz_n__2bw.lua:3: in function 'candidate'\n\t/tmp/tmpz_n__2bw.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:extract_min())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9rz_oyc7.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmp9rz_oyc7.lua:3: in function 'candidate'\n\t/tmp/tmp9rz_oyc7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw2smrmly.lua:3: attempt to index global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpw2smrmly.lua:3: in function 'candidate'\n\t/tmp/tmpw2smrmly.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local result = {}\n  while not heap:is_empty() do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6euye_x_.lua:3: attempt to index global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmp6euye_x_.lua:3: in function 'candidate'\n\t/tmp/tmp6euye_x_.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n\tlocal heap = Heap.new(iterable)\n\tlocal sorted = {}\n\tfor i = 1, #iterable do\n\t\tsorted[i] = heap:pop()\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ndi85tq.lua:3: attempt to index global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmp2ndi85tq.lua:3: in function 'candidate'\n\t/tmp/tmp2ndi85tq.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local sorted = {}\n    for i = 1, #iterable do\n        sorted[i] = heap:pop()\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp50phtnom.lua:3: attempt to index global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmp50phtnom.lua:3: in function 'candidate'\n\t/tmp/tmp50phtnom.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, value in ipairs(iterable) do\n        heap:insert(value)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:extract_min()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo1cg7d70.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpo1cg7d70.lua:3: in function 'candidate'\n\t/tmp/tmpo1cg7d70.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:extract_min()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpca5s5pbs.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpca5s5pbs.lua:3: in function 'candidate'\n\t/tmp/tmpca5s5pbs.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhaok1bc.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpzhaok1bc.lua:3: in function 'candidate'\n\t/tmp/tmpzhaok1bc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbq58lzax.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpbq58lzax.lua:3: in function 'candidate'\n\t/tmp/tmpbq58lzax.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpes02zb45.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpes02zb45.lua:3: in function 'candidate'\n\t/tmp/tmpes02zb45.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local sorted = {}\n    while not heap:empty() do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp13rswy30.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmp13rswy30.lua:3: in function 'candidate'\n\t/tmp/tmp13rswy30.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local result = {}\n  while heap:size() > 0 do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv7q9qx77.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpv7q9qx77.lua:3: in function 'candidate'\n\t/tmp/tmpv7q9qx77.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while not heap:is_empty() do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfia0gxuz.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpfia0gxuz.lua:3: in function 'candidate'\n\t/tmp/tmpfia0gxuz.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = make_heap(iterable)\n    local result = {}\n    for i = 1, #heap do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ba3def_.lua:3: attempt to call global 'make_heap' (a nil value)\nstack traceback:\n\t/tmp/tmp8ba3def_.lua:3: in function 'candidate'\n\t/tmp/tmp8ba3def_.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local sorted = {}\n    for i = 1, #iterable do\n        sorted[i] = heap:pop()\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp50phtnom.lua:3: attempt to index global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmp50phtnom.lua:3: in function 'candidate'\n\t/tmp/tmp50phtnom.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, value in ipairs(iterable) do\n        heap:insert(value)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphs8oiw1s.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphs8oiw1s.lua:3: in local 'candidate'\n\t/tmp/tmphs8oiw1s.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhaok1bc.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpzhaok1bc.lua:3: in function 'candidate'\n\t/tmp/tmpzhaok1bc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk69fhhfy.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpk69fhhfy.lua:3: in local 'candidate'\n\t/tmp/tmpk69fhhfy.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while not heap:is_empty() do\n        sorted[#sorted + 1] = heap:pop()\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw150lf3u.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpw150lf3u.lua:3: in local 'candidate'\n\t/tmp/tmpw150lf3u.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpes02zb45.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpes02zb45.lua:3: in function 'candidate'\n\t/tmp/tmpes02zb45.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpegk7scwk.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpegk7scwk.lua:3: in function 'candidate'\n\t/tmp/tmpegk7scwk.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    for i = 1, #heap do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppftphsyp.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmppftphsyp.lua:3: in local 'candidate'\n\t/tmp/tmppftphsyp.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz_n__2bw.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpz_n__2bw.lua:3: in function 'candidate'\n\t/tmp/tmpz_n__2bw.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqu5roydy.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpqu5roydy.lua:3: in local 'candidate'\n\t/tmp/tmpqu5roydy.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while heap:size() > 0 do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm0_yqcmb.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpm0_yqcmb.lua:3: in local 'candidate'\n\t/tmp/tmpm0_yqcmb.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpes02zb45.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpes02zb45.lua:3: in function 'candidate'\n\t/tmp/tmpes02zb45.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    return heap:sort()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjs5867rg.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpjs5867rg.lua:3: in local 'candidate'\n\t/tmp/tmpjs5867rg.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfqb1cj1p.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpfqb1cj1p.lua:3: in local 'candidate'\n\t/tmp/tmpfqb1cj1p.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new()\n    for _, value in ipairs(iterable) do\n        heap:push(value)\n    end\n    local result = {}\n    while not heap:empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqegfmo_g.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpqegfmo_g.lua:3: in local 'candidate'\n\t/tmp/tmpqegfmo_g.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:extract_min()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpca5s5pbs.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpca5s5pbs.lua:3: in function 'candidate'\n\t/tmp/tmpca5s5pbs.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n\tlocal heap = Heap.new()\n\tfor _, v in ipairs(iterable) do\n\t\theap:push(v)\n\tend\n\tlocal result = {}\n\tfor i = #iterable, 1, -1 do\n\t\tresult[i] = heap:pop()\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx1qcj_ci.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpx1qcj_ci.lua:3: in local 'candidate'\n\t/tmp/tmpx1qcj_ci.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkuyes9as.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpkuyes9as.lua:3: in local 'candidate'\n\t/tmp/tmpkuyes9as.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbe4cqf17.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpbe4cqf17.lua:3: in local 'candidate'\n\t/tmp/tmpbe4cqf17.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhaok1bc.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpzhaok1bc.lua:3: in function 'candidate'\n\t/tmp/tmpzhaok1bc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    for _ = 1, #heap do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9py_9j2b.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp9py_9j2b.lua:3: in local 'candidate'\n\t/tmp/tmp9py_9j2b.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmv8bayyu.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpmv8bayyu.lua:3: in local 'candidate'\n\t/tmp/tmpmv8bayyu.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_74k2ryx.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp_74k2ryx.lua:3: in local 'candidate'\n\t/tmp/tmp_74k2ryx.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, value in ipairs(iterable) do\n        heap:insert(value)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0yzjs5v3.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp0yzjs5v3.lua:3: in local 'candidate'\n\t/tmp/tmp0yzjs5v3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhaok1bc.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpzhaok1bc.lua:3: in function 'candidate'\n\t/tmp/tmpzhaok1bc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local sorted = {}\n    while not heap:empty() do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp13rswy30.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmp13rswy30.lua:3: in function 'candidate'\n\t/tmp/tmp13rswy30.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfuoyc1wo.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpfuoyc1wo.lua:3: in local 'candidate'\n\t/tmp/tmpfuoyc1wo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg42nwvl6.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpg42nwvl6.lua:3: in local 'candidate'\n\t/tmp/tmpg42nwvl6.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmv8bayyu.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpmv8bayyu.lua:3: in local 'candidate'\n\t/tmp/tmpmv8bayyu.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhaok1bc.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpzhaok1bc.lua:3: in function 'candidate'\n\t/tmp/tmpzhaok1bc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while not heap:is_empty() do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfia0gxuz.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpfia0gxuz.lua:3: in function 'candidate'\n\t/tmp/tmpfia0gxuz.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n\tlocal heap = Heap(iterable)\n\tlocal result = {}\n\twhile heap:size() > 0 do\n\t\tresult[#result+1] = heap:pop()\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5r45cufr.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp5r45cufr.lua:3: in local 'candidate'\n\t/tmp/tmp5r45cufr.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmv8bayyu.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpmv8bayyu.lua:3: in local 'candidate'\n\t/tmp/tmpmv8bayyu.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprxje4xit.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmprxje4xit.lua:3: in local 'candidate'\n\t/tmp/tmprxje4xit.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    for i = 1, #heap do\n        sorted[i] = heap:pop()\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ttvgwyq.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp0ttvgwyq.lua:3: in local 'candidate'\n\t/tmp/tmp0ttvgwyq.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpegk7scwk.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpegk7scwk.lua:3: in function 'candidate'\n\t/tmp/tmpegk7scwk.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap.new()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  for i = 1, #iterable do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa6q9zvmz.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpa6q9zvmz.lua:3: in local 'candidate'\n\t/tmp/tmpa6q9zvmz.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpegk7scwk.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpegk7scwk.lua:3: in function 'candidate'\n\t/tmp/tmpegk7scwk.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n\tlocal heap = Heap(iterable)\n\tlocal sorted = {}\n\twhile heap:size() > 0 do\n\t\tsorted[#sorted + 1] = heap:pop()\n\tend\n\treturn sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8m6m6fyw.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp8m6m6fyw.lua:3: in local 'candidate'\n\t/tmp/tmp8m6m6fyw.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = new_heap(iterable)\n  local sorted = {}\n  while heap:size() > 0 do\n    table.insert(sorted, heap:pop())\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprs4x4lit.lua:3: attempt to call a nil value (global 'new_heap')\nstack traceback:\n\t/tmp/tmprs4x4lit.lua:3: in local 'candidate'\n\t/tmp/tmprs4x4lit.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:extract())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsknxx6l2.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpsknxx6l2.lua:3: in local 'candidate'\n\t/tmp/tmpsknxx6l2.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdpcu7xrk.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpdpcu7xrk.lua:3: in local 'candidate'\n\t/tmp/tmpdpcu7xrk.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local sorted = {}\n  while heap:size() > 0 do\n    table.insert(sorted, heap:pop())\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfc7fn1de.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpfc7fn1de.lua:3: in local 'candidate'\n\t/tmp/tmpfc7fn1de.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw2smrmly.lua:3: attempt to index global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpw2smrmly.lua:3: in function 'candidate'\n\t/tmp/tmpw2smrmly.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhaok1bc.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpzhaok1bc.lua:3: in function 'candidate'\n\t/tmp/tmpzhaok1bc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in pairs(iterable) do\n        heap:push(v)\n    end\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4r6zyi2b.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp4r6zyi2b.lua:3: in local 'candidate'\n\t/tmp/tmp4r6zyi2b.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local sorted = {}\n    while not heap:is_empty() do\n        table.insert(sorted, heap:extract_min())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx87_ikvo.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpx87_ikvo.lua:3: in local 'candidate'\n\t/tmp/tmpx87_ikvo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhaok1bc.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpzhaok1bc.lua:3: in function 'candidate'\n\t/tmp/tmpzhaok1bc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    for i = 1, #heap do\n        sorted[i] = heap:pop()\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ttvgwyq.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp0ttvgwyq.lua:3: in local 'candidate'\n\t/tmp/tmp0ttvgwyq.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n\tlocal heap = Heap.new(iterable)\n\tlocal result = {}\n\twhile not heap:is_empty() do\n\t\tresult[#result + 1] = heap:pop()\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcnrl5ejt.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpcnrl5ejt.lua:3: in local 'candidate'\n\t/tmp/tmpcnrl5ejt.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local result = {}\n  for _ = 1, #iterable do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0h9_99tq.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp0h9_99tq.lua:3: in local 'candidate'\n\t/tmp/tmp0h9_99tq.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbe4cqf17.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpbe4cqf17.lua:3: in local 'candidate'\n\t/tmp/tmpbe4cqf17.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap:new()\n  for _, value in ipairs(iterable) do\n    heap:insert(value)\n  end\n  local sorted = {}\n  while heap:size() > 0 do\n    table.insert(sorted, heap:pop())\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjqo6x56p.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpjqo6x56p.lua:3: in local 'candidate'\n\t/tmp/tmpjqo6x56p.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmv8bayyu.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpmv8bayyu.lua:3: in local 'candidate'\n\t/tmp/tmpmv8bayyu.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqu5roydy.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpqu5roydy.lua:3: in local 'candidate'\n\t/tmp/tmpqu5roydy.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhaok1bc.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpzhaok1bc.lua:3: in function 'candidate'\n\t/tmp/tmpzhaok1bc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, value in ipairs(iterable) do\n        heap:insert(value)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcsl32gr6.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpcsl32gr6.lua:3: in local 'candidate'\n\t/tmp/tmpcsl32gr6.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, value in ipairs(iterable) do\n        heap:insert(value)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_x4sl9vs.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp_x4sl9vs.lua:3: in local 'candidate'\n\t/tmp/tmp_x4sl9vs.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmv8bayyu.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpmv8bayyu.lua:3: in local 'candidate'\n\t/tmp/tmpmv8bayyu.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local sorted = {}\n    for i = 1, #iterable do\n        sorted[i] = heap:pop()\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp50phtnom.lua:3: attempt to index global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmp50phtnom.lua:3: in function 'candidate'\n\t/tmp/tmp50phtnom.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n\tlocal heap = Heap()\n\tfor _, v in ipairs(iterable) do\n\t\theap:insert(v)\n\tend\n\tlocal result = {}\n\tfor i = 1, #iterable do\n\t\tresult[i] = heap:pop()\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpegsu7c8w.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpegsu7c8w.lua:3: in local 'candidate'\n\t/tmp/tmpegsu7c8w.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local t = {}\n    for _, v in ipairs(iterable) do\n        table.insert(t, v)\n    end\n    heapify(t)\n    local size = #t\n    for i = size, 2, -1 do\n        t[1], t[i] = t[i], t[1]\n        size = size - 1\n        sift_down(t, 1, size)\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpizf8mjw_.lua:7: attempt to call a nil value (global 'heapify')\nstack traceback:\n\t/tmp/tmpizf8mjw_.lua:7: in local 'candidate'\n\t/tmp/tmpizf8mjw_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local sorted = {}\n  for i = 1, #iterable do\n    sorted[i] = heap:pop()\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwa_kxxyk.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpwa_kxxyk.lua:3: in local 'candidate'\n\t/tmp/tmpwa_kxxyk.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    for i = 1, #heap do\n        sorted[i] = heap:pop()\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ttvgwyq.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp0ttvgwyq.lua:3: in local 'candidate'\n\t/tmp/tmp0ttvgwyq.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkuyes9as.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpkuyes9as.lua:3: in local 'candidate'\n\t/tmp/tmpkuyes9as.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhaok1bc.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpzhaok1bc.lua:3: in function 'candidate'\n\t/tmp/tmpzhaok1bc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw2smrmly.lua:3: attempt to index global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpw2smrmly.lua:3: in function 'candidate'\n\t/tmp/tmpw2smrmly.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local result = {}\n    for i = 1, #heap do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppjk8zx4a.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmppjk8zx4a.lua:3: in local 'candidate'\n\t/tmp/tmppjk8zx4a.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        sorted[#sorted + 1] = heap:pop()\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_6chl9bn.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp_6chl9bn.lua:3: in local 'candidate'\n\t/tmp/tmp_6chl9bn.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap.new()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while not heap:is_empty() do\n    table.insert(result, heap:extract_min())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm9t6pd8x.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpm9t6pd8x.lua:3: in local 'candidate'\n\t/tmp/tmpm9t6pd8x.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfuoyc1wo.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpfuoyc1wo.lua:3: in local 'candidate'\n\t/tmp/tmpfuoyc1wo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local result = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "",
      "stderr": "lua: /tmp/tmp246m5x77.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfuoyc1wo.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpfuoyc1wo.lua:3: in local 'candidate'\n\t/tmp/tmpfuoyc1wo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while not heap:is_empty() do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfia0gxuz.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpfia0gxuz.lua:3: in function 'candidate'\n\t/tmp/tmpfia0gxuz.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while not heap:empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6nucl3lu.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp6nucl3lu.lua:3: in local 'candidate'\n\t/tmp/tmp6nucl3lu.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local sorted = {}\n    for i = 1, #iterable do\n        sorted[i] = heap:pop()\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp67taodli.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp67taodli.lua:3: in local 'candidate'\n\t/tmp/tmp67taodli.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while not heap:is_empty() do\n        sorted[#sorted + 1] = heap:pop()\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw150lf3u.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpw150lf3u.lua:3: in local 'candidate'\n\t/tmp/tmpw150lf3u.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while not heap:is_empty() do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfia0gxuz.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpfia0gxuz.lua:3: in function 'candidate'\n\t/tmp/tmpfia0gxuz.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local sorted = {}\n  while not heap:is_empty() do\n    table.insert(sorted, heap:pop())\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvda3meng.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpvda3meng.lua:3: in local 'candidate'\n\t/tmp/tmpvda3meng.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while not heap:is_empty() do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfia0gxuz.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpfia0gxuz.lua:3: in function 'candidate'\n\t/tmp/tmpfia0gxuz.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local result = {}\n  while heap:size() > 0 do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv7q9qx77.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpv7q9qx77.lua:3: in function 'candidate'\n\t/tmp/tmpv7q9qx77.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, value in ipairs(iterable) do\n        heap:push(value)\n    end\n    local result = {}\n    while not heap:empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6hc3vi8y.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp6hc3vi8y.lua:3: in local 'candidate'\n\t/tmp/tmp6hc3vi8y.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbe4cqf17.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpbe4cqf17.lua:3: in local 'candidate'\n\t/tmp/tmpbe4cqf17.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpegk7scwk.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpegk7scwk.lua:3: in function 'candidate'\n\t/tmp/tmpegk7scwk.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbe4cqf17.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpbe4cqf17.lua:3: in local 'candidate'\n\t/tmp/tmpbe4cqf17.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:remove())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7d76hbmw.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp7d76hbmw.lua:3: in local 'candidate'\n\t/tmp/tmp7d76hbmw.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhaok1bc.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpzhaok1bc.lua:3: in function 'candidate'\n\t/tmp/tmpzhaok1bc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local result = {}\n  for i = 1, #heap do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpshso1nqn.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpshso1nqn.lua:3: in local 'candidate'\n\t/tmp/tmpshso1nqn.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, item in ipairs(iterable) do\n    heap:insert(item)\n  end\n  local sorted = {}\n  while not heap:is_empty() do\n    table.insert(sorted, heap:pop())\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp___41a3b.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp___41a3b.lua:3: in local 'candidate'\n\t/tmp/tmp___41a3b.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        sorted[#sorted + 1] = heap:pop()\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_6chl9bn.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp_6chl9bn.lua:3: in local 'candidate'\n\t/tmp/tmp_6chl9bn.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprxje4xit.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmprxje4xit.lua:3: in local 'candidate'\n\t/tmp/tmprxje4xit.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpes02zb45.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpes02zb45.lua:3: in function 'candidate'\n\t/tmp/tmpes02zb45.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpggfunjet.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpggfunjet.lua:3: in local 'candidate'\n\t/tmp/tmpggfunjet.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprxje4xit.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmprxje4xit.lua:3: in local 'candidate'\n\t/tmp/tmprxje4xit.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmv8bayyu.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpmv8bayyu.lua:3: in local 'candidate'\n\t/tmp/tmpmv8bayyu.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap.new()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  for i = 1, #iterable do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa6q9zvmz.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpa6q9zvmz.lua:3: in local 'candidate'\n\t/tmp/tmpa6q9zvmz.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz_n__2bw.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpz_n__2bw.lua:3: in function 'candidate'\n\t/tmp/tmpz_n__2bw.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local sorted = {}\n  while heap:size() > 0 do\n    table.insert(sorted, heap:pop())\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfc7fn1de.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpfc7fn1de.lua:3: in local 'candidate'\n\t/tmp/tmpfc7fn1de.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz_n__2bw.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpz_n__2bw.lua:3: in function 'candidate'\n\t/tmp/tmpz_n__2bw.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local result = {}\n  for i = 1, #iterable do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6w_90kbm.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp6w_90kbm.lua:3: in local 'candidate'\n\t/tmp/tmp6w_90kbm.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:extract_min()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoqnon35x.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpoqnon35x.lua:3: in local 'candidate'\n\t/tmp/tmpoqnon35x.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local sorted = {}\n    while not heap:is_empty() do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxu30v_np.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpxu30v_np.lua:3: in local 'candidate'\n\t/tmp/tmpxu30v_np.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbe4cqf17.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpbe4cqf17.lua:3: in local 'candidate'\n\t/tmp/tmpbe4cqf17.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpes02zb45.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpes02zb45.lua:3: in function 'candidate'\n\t/tmp/tmpes02zb45.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    for i = 1, #heap do\n        sorted[i] = heap:pop()\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ttvgwyq.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp0ttvgwyq.lua:3: in local 'candidate'\n\t/tmp/tmp0ttvgwyq.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpow7klra5.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpow7klra5.lua:3: in local 'candidate'\n\t/tmp/tmpow7klra5.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, value in ipairs(iterable) do\n        heap:insert(value)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcsl32gr6.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpcsl32gr6.lua:3: in local 'candidate'\n\t/tmp/tmpcsl32gr6.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n\tlocal heap = Heap()\n\tfor _, value in ipairs(iterable) do\n\t\theap:insert(value)\n\tend\n\tlocal result = {}\n\twhile not heap:is_empty() do\n\t\ttable.insert(result, heap:pop())\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm8p9fevy.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpm8p9fevy.lua:3: in local 'candidate'\n\t/tmp/tmpm8p9fevy.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local sorted = {}\n    while not heap:is_empty() do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwhkicb79.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpwhkicb79.lua:3: in local 'candidate'\n\t/tmp/tmpwhkicb79.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:extract_min()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoqnon35x.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpoqnon35x.lua:3: in local 'candidate'\n\t/tmp/tmpoqnon35x.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw2smrmly.lua:3: attempt to index global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpw2smrmly.lua:3: in function 'candidate'\n\t/tmp/tmpw2smrmly.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbq58lzax.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpbq58lzax.lua:3: in function 'candidate'\n\t/tmp/tmpbq58lzax.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhaok1bc.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpzhaok1bc.lua:3: in function 'candidate'\n\t/tmp/tmpzhaok1bc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while not heap:is_empty() do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzl8tewnu.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpzl8tewnu.lua:3: in local 'candidate'\n\t/tmp/tmpzl8tewnu.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local sorted = {}\n    while not heap:empty() do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp13rswy30.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmp13rswy30.lua:3: in function 'candidate'\n\t/tmp/tmp13rswy30.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfqb1cj1p.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpfqb1cj1p.lua:3: in local 'candidate'\n\t/tmp/tmpfqb1cj1p.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local sorted = {}\n    for i = 1, #iterable do\n        sorted[i] = heap:pop()\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp50phtnom.lua:3: attempt to index global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmp50phtnom.lua:3: in function 'candidate'\n\t/tmp/tmp50phtnom.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpggfunjet.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpggfunjet.lua:3: in local 'candidate'\n\t/tmp/tmpggfunjet.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while not heap:is_empty() do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfia0gxuz.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpfia0gxuz.lua:3: in function 'candidate'\n\t/tmp/tmpfia0gxuz.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhaok1bc.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpzhaok1bc.lua:3: in function 'candidate'\n\t/tmp/tmpzhaok1bc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    for i = 1, #heap do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppftphsyp.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmppftphsyp.lua:3: in local 'candidate'\n\t/tmp/tmppftphsyp.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local sorted = {}\n  while heap:size() > 0 do\n    table.insert(sorted, heap:pop())\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfc7fn1de.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpfc7fn1de.lua:3: in local 'candidate'\n\t/tmp/tmpfc7fn1de.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:extract_min()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpca5s5pbs.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpca5s5pbs.lua:3: in function 'candidate'\n\t/tmp/tmpca5s5pbs.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n\tlocal heap = Heap()\n\tfor _, value in ipairs(iterable) do\n\t\theap:insert(value)\n\tend\n\tlocal result = {}\n\twhile not heap:empty() do\n\t\ttable.insert(result, heap:pop())\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpseh3j1ip.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpseh3j1ip.lua:3: in local 'candidate'\n\t/tmp/tmpseh3j1ip.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpggfunjet.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpggfunjet.lua:3: in local 'candidate'\n\t/tmp/tmpggfunjet.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpggfunjet.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpggfunjet.lua:3: in local 'candidate'\n\t/tmp/tmpggfunjet.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:extract_min()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpca5s5pbs.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpca5s5pbs.lua:3: in function 'candidate'\n\t/tmp/tmpca5s5pbs.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:push(v)\n  end\n  local sorted = {}\n  while not heap:empty() do\n    table.insert(sorted, heap:pop())\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp5205unh.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpp5205unh.lua:3: in local 'candidate'\n\t/tmp/tmpp5205unh.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpum2enwrf.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpum2enwrf.lua:3: in local 'candidate'\n\t/tmp/tmpum2enwrf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfqb1cj1p.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpfqb1cj1p.lua:3: in local 'candidate'\n\t/tmp/tmpfqb1cj1p.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    for i = 1, #iterable do\n        sorted[i] = heap:pop()\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ek8e809.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp7ek8e809.lua:3: in local 'candidate'\n\t/tmp/tmp7ek8e809.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhaok1bc.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpzhaok1bc.lua:3: in function 'candidate'\n\t/tmp/tmpzhaok1bc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local sorted = {}\n  for i = 1, #heap do\n    sorted[i] = heap:pop()\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo4x_c4ia.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpo4x_c4ia.lua:3: in local 'candidate'\n\t/tmp/tmpo4x_c4ia.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz_n__2bw.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpz_n__2bw.lua:3: in function 'candidate'\n\t/tmp/tmpz_n__2bw.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpggfunjet.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpggfunjet.lua:3: in local 'candidate'\n\t/tmp/tmpggfunjet.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpegk7scwk.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpegk7scwk.lua:3: in function 'candidate'\n\t/tmp/tmpegk7scwk.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpes02zb45.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpes02zb45.lua:3: in function 'candidate'\n\t/tmp/tmpes02zb45.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local sorted = {}\n  while heap:size() > 0 do\n    table.insert(sorted, heap:pop())\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9a9py7xo.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp9a9py7xo.lua:3: in local 'candidate'\n\t/tmp/tmp9a9py7xo.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhaok1bc.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpzhaok1bc.lua:3: in function 'candidate'\n\t/tmp/tmpzhaok1bc.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpum2enwrf.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpum2enwrf.lua:3: in local 'candidate'\n\t/tmp/tmpum2enwrf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_03qhkyi.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp_03qhkyi.lua:3: in local 'candidate'\n\t/tmp/tmp_03qhkyi.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local sorted = {}\n    while heap:size() > 0 do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp42odpasp.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp42odpasp.lua:3: in local 'candidate'\n\t/tmp/tmp42odpasp.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:extract_min())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9rz_oyc7.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmp9rz_oyc7.lua:3: in function 'candidate'\n\t/tmp/tmp9rz_oyc7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local sorted = {}\n    while not heap:empty() do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp13rswy30.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmp13rswy30.lua:3: in function 'candidate'\n\t/tmp/tmp13rswy30.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, value in ipairs(iterable) do\n        heap:insert(value)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphs8oiw1s.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmphs8oiw1s.lua:3: in local 'candidate'\n\t/tmp/tmphs8oiw1s.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    for i = 1, #iterable do\n        sorted[i] = heap:pop()\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ek8e809.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp7ek8e809.lua:3: in local 'candidate'\n\t/tmp/tmp7ek8e809.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:push(v)\n  end\n  local sorted = {}\n  while not heap:empty() do\n    table.insert(sorted, heap:pop())\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp5205unh.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpp5205unh.lua:3: in local 'candidate'\n\t/tmp/tmpp5205unh.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg42nwvl6.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpg42nwvl6.lua:3: in local 'candidate'\n\t/tmp/tmpg42nwvl6.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmv8bayyu.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpmv8bayyu.lua:3: in local 'candidate'\n\t/tmp/tmpmv8bayyu.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n\tlocal heap = Heap.new()\n\tfor _, value in ipairs(iterable) do\n\t\theap:insert(value)\n\tend\n\tlocal result = {}\n\twhile heap:size() > 0 do\n\t\tresult[#result + 1] = heap:pop()\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp0ffsmsz.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpp0ffsmsz.lua:3: in local 'candidate'\n\t/tmp/tmpp0ffsmsz.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap()\n  for _, v in ipairs(iterable) do\n    heap:insert(v)\n  end\n  local result = {}\n  while not heap:is_empty() do\n    table.insert(result, heap:extract_min())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmcpu8mi9.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpmcpu8mi9.lua:3: in local 'candidate'\n\t/tmp/tmpmcpu8mi9.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpes02zb45.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpes02zb45.lua:3: in function 'candidate'\n\t/tmp/tmpes02zb45.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    for i = 1, #heap do\n        sorted[i] = heap:pop()\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ttvgwyq.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp0ttvgwyq.lua:3: in local 'candidate'\n\t/tmp/tmp0ttvgwyq.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local sorted = {}\n  for i = 1, #heap do\n    sorted[i] = heap:pop()\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo4x_c4ia.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpo4x_c4ia.lua:3: in local 'candidate'\n\t/tmp/tmpo4x_c4ia.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local sorted = {}\n    for i = 1, #iterable do\n        sorted[i] = heap:pop()\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ek8e809.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp7ek8e809.lua:3: in local 'candidate'\n\t/tmp/tmp7ek8e809.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local sorted = {}\n    while not heap:is_empty() do\n        table.insert(sorted, heap:extract_min())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx87_ikvo.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpx87_ikvo.lua:3: in local 'candidate'\n\t/tmp/tmpx87_ikvo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbe4cqf17.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpbe4cqf17.lua:3: in local 'candidate'\n\t/tmp/tmpbe4cqf17.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg42nwvl6.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpg42nwvl6.lua:3: in local 'candidate'\n\t/tmp/tmpg42nwvl6.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    heap:heapify()\n    return heap:sort()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3az3a8j3.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp3az3a8j3.lua:3: in local 'candidate'\n\t/tmp/tmp3az3a8j3.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg42nwvl6.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpg42nwvl6.lua:3: in local 'candidate'\n\t/tmp/tmpg42nwvl6.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsyy_zr_.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmptsyy_zr_.lua:3: in local 'candidate'\n\t/tmp/tmptsyy_zr_.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph2vstokp.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmph2vstokp.lua:3: in local 'candidate'\n\t/tmp/tmph2vstokp.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmv8bayyu.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpmv8bayyu.lua:3: in local 'candidate'\n\t/tmp/tmpmv8bayyu.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap(iterable)\n  local sorted = {}\n  while heap:size() > 0 do\n    sorted[#sorted + 1] = heap:pop()\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps1tvtcsx.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmps1tvtcsx.lua:3: in local 'candidate'\n\t/tmp/tmps1tvtcsx.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg42nwvl6.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpg42nwvl6.lua:3: in local 'candidate'\n\t/tmp/tmpg42nwvl6.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for i, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local sorted = {}\n    while not heap:is_empty() do\n        table.insert(sorted, heap:extract_min())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzq5e2786.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpzq5e2786.lua:3: in local 'candidate'\n\t/tmp/tmpzq5e2786.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027733,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpegk7scwk.lua:3: attempt to call global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmpegk7scwk.lua:3: in function 'candidate'\n\t/tmp/tmpegk7scwk.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n\tlocal heap = Heap(iterable)\n\tlocal result = {}\n\twhile not heap:is_empty() do\n\t\tresult[#result + 1] = heap:pop()\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptx92r1a9.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmptx92r1a9.lua:3: in local 'candidate'\n\t/tmp/tmptx92r1a9.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:extract_min()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoqnon35x.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpoqnon35x.lua:3: in local 'candidate'\n\t/tmp/tmpoqnon35x.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_03qhkyi.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp_03qhkyi.lua:3: in local 'candidate'\n\t/tmp/tmp_03qhkyi.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmv8bayyu.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpmv8bayyu.lua:3: in local 'candidate'\n\t/tmp/tmpmv8bayyu.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n  local heap = Heap.new(iterable)\n  local result = {}\n  while heap:size() > 0 do\n    result[#result + 1] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpndjtiu3p.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpndjtiu3p.lua:3: in local 'candidate'\n\t/tmp/tmpndjtiu3p.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new()\n    for _, value in ipairs(iterable) do\n        heap:insert(value)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2bza0s5i.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp2bza0s5i.lua:3: in local 'candidate'\n\t/tmp/tmp2bza0s5i.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph2vstokp.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmph2vstokp.lua:3: in local 'candidate'\n\t/tmp/tmph2vstokp.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbe4cqf17.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpbe4cqf17.lua:3: in local 'candidate'\n\t/tmp/tmpbe4cqf17.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:insert(v)\n    end\n    local result = {}\n    while not heap:is_empty() do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmv8bayyu.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpmv8bayyu.lua:3: in local 'candidate'\n\t/tmp/tmpmv8bayyu.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new(iterable)\n    local result = {}\n    for i = 1, #iterable do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqu5roydy.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpqu5roydy.lua:3: in local 'candidate'\n\t/tmp/tmpqu5roydy.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap(iterable)\n    local result = {}\n    while heap:size() > 0 do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbe4cqf17.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpbe4cqf17.lua:3: in local 'candidate'\n\t/tmp/tmpbe4cqf17.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap()\n    for _, v in ipairs(iterable) do\n        heap:push(v)\n    end\n    local result = {}\n    while heap:size() > 0 do\n        result[#result + 1] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsyy_zr_.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmptsyy_zr_.lua:3: in local 'candidate'\n\t/tmp/tmptsyy_zr_.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local heap = Heap.new()\n    for _, value in ipairs(iterable) do\n        heap:push(value)\n    end\n    local sorted = {}\n    while not heap:is_empty() do\n        table.insert(sorted, heap:pop())\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124227,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1zwpgdp6.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp1zwpgdp6.lua:3: in local 'candidate'\n\t/tmp/tmp1zwpgdp6.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}