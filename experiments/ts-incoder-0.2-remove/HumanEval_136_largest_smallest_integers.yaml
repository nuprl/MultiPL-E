name: HumanEval_136_largest_smallest_integers
language: ts
prompt: "//Create a function that returns a tuple (a, b), where 'a' is\n// the largest\
  \ of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n\
  // If there is no negative or positive integers, return them as None.\n// Examples:\n\
  function largest_smallest_integers(lst: number[]): [number | undefined, number |\
  \ undefined] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
  \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5,\
  \ 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2,\
  \ 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7,\
  \ 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
  \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
  \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
  \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
  \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\n\
  test();"
completions: ["  let largest = undefined;\n  let smallest = undefined;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest =\
    \ lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n   \
    \ }\n  }\n  return [largest, smallest];\n}\n", "  const positive = lst.filter(x\
    \ => x > 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length\
    \ > 0 && negative.length > 0) {\n    return [Math.max(...negative), Math.min(...positive)];\n\
    \  }\n  return [undefined, undefined];\n}\n", "  let largest = undefined;\n  let\
    \ smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n\
    \      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n", " \
    \ let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n \
    \   }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest\
    \ === undefined) {\n        largest = lst[i];\n      } else if (largest < lst[i])\
    \ {\n        largest = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if\
    \ (smallest === undefined) {\n        smallest = lst[i];\n      } else if (smallest\
    \ > lst[i]) {\n        smallest = lst[i];\n      }\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      largest\
    \ = lst[i];\n    } else if (lst[i] > 0) {\n      smallest = lst[i];\n    }\n \
    \ }\n  return [largest, smallest];\n}\n", "  let max: number | undefined = undefined;\n\
    \  let min: number | undefined = undefined;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i]\
    \ < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n}\n", "  let\
    \ largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n\
    \  for (let num of lst) {\n    if (num < 0) {\n      largest = num;\n    } else\
    \ if (num > 0) {\n      smallest = num;\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  if (lst.length < 2) return [undefined, undefined];\n  let [a, b] = lst.reduce(([a,\
    \ b], x) => {\n    if (x < 0) return [a, x];\n    if (x > 0) return [b, x];\n\
    \    return [a, b];\n  }, [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n\
    \  return [a, b];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let max: number | undefined;\n\
    \  let min: number | undefined;\n  for (let i = 0; i < lst.length; i++) {\n  \
    \  if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n\
    \      min = lst[i];\n    }\n  }\n  return [max, min];\n}\n", "  let max: number\
    \ | undefined = undefined;\n  let min: number | undefined = undefined;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (max ===\
    \ undefined) {\n        max = lst[i];\n      } else {\n        max = Math.max(max,\
    \ lst[i]);\n      }\n    } else {\n      if (min === undefined) {\n        min\
    \ = lst[i];\n      } else {\n        min = Math.min(min, lst[i]);\n      }\n \
    \   }\n  }\n  return [max, min];\n}\n", "  let largest = undefined;\n  let smallest\
    \ = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0)\
    \ {\n      if (largest === undefined) {\n        largest = lst[i];\n      } else\
    \ if (largest < lst[i]) {\n        largest = lst[i];\n      }\n    } else {\n\
    \      if (smallest === undefined) {\n        smallest = lst[i];\n      } else\
    \ if (smallest > lst[i]) {\n        smallest = lst[i];\n      }\n    }\n  }\n\
    \  return [largest, smallest];\n}\n", "  let largest = Number.MIN_SAFE_INTEGER;\n\
    \  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const num = lst[i];\n    if (num < 0) {\n      largest = num;\n\
    \    } else if (num > 0) {\n      smallest = num;\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  if (lst.length < 2) {\n    return [undefined, undefined];\n\
    \  }\n  const [a, b] = lst.sort((a, b) => a - b);\n  return [a, b];\n}\n", " \
    \ let max_negative = Number.NEGATIVE_INFINITY;\n  let min_positive = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      max_negative\
    \ = Math.max(max_negative, lst[i]);\n    } else {\n      min_positive = Math.min(min_positive,\
    \ lst[i]);\n    }\n  }\n  return [max_negative, min_positive];\n}\n", "  let largest\
    \ = undefined;\n  let smallest = undefined;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [smallest,\
    \ largest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = Number.MAX_SAFE_INTEGER;\n\
    \  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const num = lst[i];\n    if (num < 0) {\n      largest = num;\n\
    \    } else if (num > 0) {\n      smallest = num;\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest\
    \ = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] > largest)\
    \ {\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n    \
    \  smallest = lst[i];\n    }\n    if (lst[i] > largest) {\n      largest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] < 0) {\n      if (largest === undefined) {\n        largest = lst[i];\n\
    \      } else {\n        largest = Math.max(largest, lst[i]);\n      }\n    }\
    \ else if (lst[i] > 0) {\n      if (smallest === undefined) {\n        smallest\
    \ = lst[i];\n      } else {\n        smallest = Math.min(smallest, lst[i]);\n\
    \      }\n    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] < 0) {\n      if (largest === undefined) {\n        largest = lst[i];\n\
    \      } else if (largest < lst[i]) {\n        largest = lst[i];\n      }\n  \
    \  } else {\n      if (smallest === undefined) {\n        smallest = lst[i];\n\
    \      } else if (smallest > lst[i]) {\n        smallest = lst[i];\n      }\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = -Infinity;\n\
    \  let smallest = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n\
    \  for (let num of lst) {\n    if (num < smallest) {\n      smallest = num;\n\
    \    }\n    if (num > largest) {\n      largest = num;\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let max_negative = Number.NEGATIVE_INFINITY;\n  let min_positive\
    \ = Number.POSITIVE_INFINITY;\n  for (let num of lst) {\n    if (num < 0) {\n\
    \      max_negative = Math.max(max_negative, num);\n    } else {\n      min_positive\
    \ = Math.min(min_positive, num);\n    }\n  }\n  return [max_negative, min_positive];\n\
    }\n", "  let largest = undefined;\n  let smallest = undefined;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n\
    \    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n \
    \ return [largest, smallest];\n}\n", "  let largest = undefined;\n  let smallest\
    \ = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest)\
    \ {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest\
    \ = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n", "  let largest =\
    \ undefined;\n  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] < 0) {\n      if (largest === undefined) {\n        largest\
    \ = lst[i];\n      } else if (largest < lst[i]) {\n        largest = lst[i];\n\
    \      }\n    } else {\n      if (smallest === undefined) {\n        smallest\
    \ = lst[i];\n      } else if (smallest > lst[i]) {\n        smallest = lst[i];\n\
    \      }\n    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = -Infinity;\n  let smallest = Infinity;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  if (lst.length === 0) {\n    return [undefined, undefined];\n\
    \  }\n  const [smallest, largest] = lst;\n  if (smallest > largest) {\n    return\
    \ [smallest, largest];\n  }\n  const [smaller, larger] = lst;\n  if (smaller <\
    \ largest) {\n    return [smaller, largest];\n  }\n  return [smallest, larger];\n\
    }\n", "  const positive_integers = lst.filter(x => x > 0);\n  const negative_integers\
    \ = lst.filter(x => x < 0);\n  if (positive_integers.length > 0 && negative_integers.length\
    \ > 0) {\n    return [Math.max(...negative_integers), Math.min(...positive_integers)];\n\
    \  }\n  return [undefined, undefined];\n}\n", "  let largest = undefined;\n  let\
    \ smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n\
    \      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n", " \
    \ let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined)\
    \ {\n        largest = lst[i];\n      } else if (largest < lst[i]) {\n       \
    \ largest = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallest\
    \ === undefined) {\n        smallest = lst[i];\n      } else if (smallest > lst[i])\
    \ {\n        smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  let largest = undefined;\n  let smallest = undefined;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n\
    \    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n \
    \ return [smallest, largest];\n}\n", "  let largest = undefined;\n  let smallest\
    \ = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0)\
    \ {\n      if (largest === undefined) {\n        largest = lst[i];\n      } else\
    \ {\n        largest = Math.max(largest, lst[i]);\n      }\n    } else if (lst[i]\
    \ > 0) {\n      if (smallest === undefined) {\n        smallest = lst[i];\n  \
    \    } else {\n        smallest = Math.min(smallest, lst[i]);\n      }\n    }\n\
    \  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n  let\
    \ smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ < 0) {\n      if (largest === undefined) {\n        largest = lst[i];\n    \
    \  } else if (largest < lst[i]) {\n        largest = lst[i];\n      }\n    } else\
    \ if (lst[i] > 0) {\n      if (smallest === undefined) {\n        smallest = lst[i];\n\
    \      } else if (smallest > lst[i]) {\n        smallest = lst[i];\n      }\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n \
    \   }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined)\
    \ {\n        largest = lst[i];\n      } else if (largest < lst[i]) {\n       \
    \ largest = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallest\
    \ === undefined) {\n        smallest = lst[i];\n      } else if (smallest > lst[i])\
    \ {\n        smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  const [minInt, maxInt] = lst.reduce(([minInt, maxInt], num) => {\n  \
    \  if (num < 0) minInt = num;\n    if (num > 0) maxInt = num;\n    return [minInt,\
    \ maxInt];\n  }, [Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY]);\n  return\
    \ [minInt, maxInt];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest\
    \ === undefined) {\n        largest = lst[i];\n      } else if (largest < lst[i])\
    \ {\n        largest = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if\
    \ (smallest === undefined) {\n        smallest = lst[i];\n      } else if (smallest\
    \ > lst[i]) {\n        smallest = lst[i];\n      }\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = Number.NEGATIVE_INFINITY;\n  let smallest\
    \ = Number.POSITIVE_INFINITY;\n  for (let num of lst) {\n    if (num < smallest)\
    \ {\n      smallest = num;\n    }\n    if (num > largest) {\n      largest = num;\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] < 0) {\n      if (largest === undefined) {\n        largest = lst[i];\n\
    \      } else if (largest < lst[i]) {\n        largest = lst[i];\n      }\n  \
    \  } else if (lst[i] > 0) {\n      if (smallest === undefined) {\n        smallest\
    \ = lst[i];\n      } else if (smallest > lst[i]) {\n        smallest = lst[i];\n\
    \      }\n    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = Number.NEGATIVE_INFINITY;\n\
    \  let smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n \
    \   }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  if (lst.length === 0) {\n    return [undefined,\
    \ undefined];\n  }\n  const [smallest, largest] = lst.sort((a, b) => a - b);\n\
    \  if (smallest > largest) {\n    return [smallest, largest];\n  }\n  return [undefined,\
    \ undefined];\n}\n", "  let max: number | undefined = undefined;\n  let min: number\
    \ | undefined = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ < 0) {\n      if (max === undefined) {\n        max = lst[i];\n      } else\
    \ if (max < lst[i]) {\n        max = lst[i];\n      }\n    } else {\n      if\
    \ (min === undefined) {\n        min = lst[i];\n      } else if (min > lst[i])\
    \ {\n        min = lst[i];\n      }\n    }\n  }\n  return [max, min];\n}\n", " \
    \ let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n \
    \   }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  if (lst.length === 0) {\n\
    \    return [undefined, undefined];\n  }\n  const [smallest, largest] = lst;\n\
    \  if (smallest > largest) {\n    return [smallest, largest];\n  }\n  const [smaller,\
    \ larger] = lst;\n  if (smaller < largest) {\n    return [smaller, largest];\n\
    \  }\n  return [undefined, undefined];\n}\n", "  let largest = undefined;\n  let\
    \ smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ > largest) {\n      largest = lst[i];\n    } else if (lst[i] < smallest) {\n\
    \      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n", " \
    \ let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined)\
    \ {\n        largest = lst[i];\n      } else if (largest < lst[i]) {\n       \
    \ largest = lst[i];\n      }\n    } else {\n      if (smallest === undefined)\
    \ {\n        smallest = lst[i];\n      } else if (smallest > lst[i]) {\n     \
    \   smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n \
    \   }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest\
    \ === undefined) {\n        largest = lst[i];\n      } else if (largest < lst[i])\
    \ {\n        largest = lst[i];\n      }\n    } else {\n      if (smallest ===\
    \ undefined) {\n        smallest = lst[i];\n      } else if (smallest > lst[i])\
    \ {\n        smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  let largest = -Infinity;\n  let smallest = Infinity;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n\
    \    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n \
    \ return [largest, smallest];\n}\n", "  let max_negative = Number.NEGATIVE_INFINITY;\n\
    \  let min_positive = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const num = lst[i];\n    if (num < 0) {\n      max_negative = Math.max(max_negative,\
    \ num);\n    } else if (num > 0) {\n      min_positive = Math.min(min_positive,\
    \ num);\n    } else {\n      return [max_negative, min_positive];\n    }\n  }\n\
    \  return [max_negative, min_positive];\n}\n", "  let largest = Number.NEGATIVE_INFINITY;\n\
    \  let smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest\
    \ === undefined) {\n        largest = lst[i];\n      } else {\n        largest\
    \ = Math.max(largest, lst[i]);\n      }\n    } else if (lst[i] > 0) {\n      if\
    \ (smallest === undefined) {\n        smallest = lst[i];\n      } else {\n   \
    \     smallest = Math.min(smallest, lst[i]);\n      }\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest\
    \ = Number.MIN_SAFE_INTEGER;\n  for (let num of lst) {\n    if (num < 0) {\n \
    \     largest = Math.max(largest, num);\n    } else if (num > 0) {\n      smallest\
    \ = Math.min(smallest, num);\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined)\
    \ {\n        largest = lst[i];\n      } else if (largest < lst[i]) {\n       \
    \ largest = lst[i];\n      }\n    } else {\n      if (smallest === undefined)\
    \ {\n        smallest = lst[i];\n      } else if (smallest > lst[i]) {\n     \
    \   smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined)\
    \ {\n        largest = lst[i];\n      } else {\n        largest = Math.max(largest,\
    \ lst[i]);\n      }\n    } else {\n      if (smallest === undefined) {\n     \
    \   smallest = lst[i];\n      } else {\n        smallest = Math.min(smallest,\
    \ lst[i]);\n      }\n    }\n  }\n  return [largest, smallest];\n}\n", "  let largest\
    \ = undefined;\n  let smallest = undefined;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    } else if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest\
    \ === undefined) {\n        largest = lst[i];\n      } else if (largest < lst[i])\
    \ {\n        largest = lst[i];\n      }\n    } else {\n      if (smallest ===\
    \ undefined) {\n        smallest = lst[i];\n      } else if (smallest > lst[i])\
    \ {\n        smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  let largest = Number.NEGATIVE_INFINITY;\n  let smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] < 0) {\n      if (largest === undefined) {\n        largest = lst[i];\n\
    \      } else if (largest < lst[i]) {\n        largest = lst[i];\n      }\n  \
    \  } else {\n      if (smallest === undefined) {\n        smallest = lst[i];\n\
    \      } else if (smallest > lst[i]) {\n        smallest = lst[i];\n      }\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined)\
    \ {\n        largest = lst[i];\n      } else if (largest < lst[i]) {\n       \
    \ largest = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallest\
    \ === undefined) {\n        smallest = lst[i];\n      } else if (smallest > lst[i])\
    \ {\n        smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n\
    \  for (let num of lst) {\n    if (num < smallest) {\n      smallest = num;\n\
    \    }\n    if (num > largest) {\n      largest = num;\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest\
    \ === undefined) {\n        largest = lst[i];\n      } else {\n        largest\
    \ = Math.max(largest, lst[i]);\n      }\n    } else {\n      if (smallest ===\
    \ undefined) {\n        smallest = lst[i];\n      } else {\n        smallest =\
    \ Math.min(smallest, lst[i]);\n      }\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  let largest = undefined;\n  let smallest = undefined;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined)\
    \ {\n        largest = lst[i];\n      } else if (largest < lst[i]) {\n       \
    \ largest = lst[i];\n      }\n    } else {\n      if (smallest === undefined)\
    \ {\n        smallest = lst[i];\n      } else if (smallest > lst[i]) {\n     \
    \   smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let max: number | undefined = undefined;\n  let min: number | undefined = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max\
    \ = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n\
    \  return [max, min];\n}\n", "  if (lst.length < 2) {\n    return [undefined,\
    \ undefined];\n  }\n  const [a, b] = lst.reduce(\n    ([a, b], num) => {\n   \
    \   if (num < 0) {\n        a = Math.max(a, num);\n      } else {\n        b =\
    \ Math.min(b, num);\n      }\n      return [a, b];\n    },\n    [Number.MAX_SAFE_INTEGER,\
    \ Number.MIN_SAFE_INTEGER]\n  );\n  return [a, b];\n}\n", "  let largest = Number.NEGATIVE_INFINITY;\n\
    \  let smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = Number.MIN_SAFE_INTEGER;\n\
    \  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest\
    \ === undefined) {\n        largest = lst[i];\n      } else if (largest < lst[i])\
    \ {\n        largest = lst[i];\n      }\n    } else {\n      if (smallest ===\
    \ undefined) {\n        smallest = lst[i];\n      } else if (smallest > lst[i])\
    \ {\n        smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  const negatives = lst.filter(x => x < 0);\n  const positives = lst.filter(x\
    \ => x >= 0);\n  if (negatives.length && positives.length) {\n    return [Math.max(...negatives),\
    \ Math.min(...positives)];\n  }\n  return [undefined, undefined];\n}\n", "  let\
    \ largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest\
    \ = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] > largest)\
    \ {\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = Number.NEGATIVE_INFINITY;\n  let smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let num of lst) {\n    if (num < smallest) {\n      smallest = num;\n\
    \    }\n    if (num > largest) {\n      largest = num;\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let max_negative = Number.NEGATIVE_INFINITY;\n\
    \  let min_positive = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const num = lst[i];\n    if (num < 0) {\n      max_negative = Math.max(max_negative,\
    \ num);\n    } else {\n      min_positive = Math.min(min_positive, num);\n   \
    \ }\n  }\n  return [max_negative, min_positive];\n}\n", "  if (lst.length ===\
    \ 0) {\n    return [undefined, undefined];\n  }\n  const [smallest, largest] =\
    \ lst;\n  if (smallest > largest) {\n    return [smallest, largest];\n  }\n  const\
    \ [smallest2, largest2] = largest_smallest_integers(lst.slice(1));\n  if (smallest\
    \ > smallest2) {\n    return [smallest, smallest2];\n  }\n  if (largest < largest2)\
    \ {\n    return [largest, largest2];\n  }\n  return [smallest2, largest2];\n}\n",
  "  let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined)\
    \ {\n        largest = lst[i];\n      } else {\n        largest = Math.max(largest,\
    \ lst[i]);\n      }\n    } else if (lst[i] > 0) {\n      if (smallest === undefined)\
    \ {\n        smallest = lst[i];\n      } else {\n        smallest = Math.min(smallest,\
    \ lst[i]);\n      }\n    }\n  }\n  return [largest, smallest];\n}\n", "  let largest\
    \ = undefined;\n  let smallest = undefined;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = Number.NEGATIVE_INFINITY;\n  let smallest\
    \ = Number.POSITIVE_INFINITY;\n  for (let num of lst) {\n    if (num < smallest)\
    \ {\n      smallest = num;\n    } else if (num > largest) {\n      largest = num;\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  if (lst.length === 0) {\n\
    \    return [undefined, undefined];\n  }\n  const [a, b] = lst.reduce(\n    ([max,\
    \ min], x) => {\n      if (x < 0) {\n        max = x;\n      } else if (x > 0)\
    \ {\n        min = x;\n      }\n      return [Math.max(max, min), Math.min(max,\
    \ min)];\n    },\n    [Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY]\n \
    \ );\n  return [a, b];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined)\
    \ {\n        largest = lst[i];\n      } else if (largest < lst[i]) {\n       \
    \ largest = lst[i];\n      }\n    } else {\n      if (smallest === undefined)\
    \ {\n        smallest = lst[i];\n      } else if (smallest > lst[i]) {\n     \
    \   smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined)\
    \ {\n        largest = lst[i];\n      } else if (largest < lst[i]) {\n       \
    \ largest = lst[i];\n      }\n    } else {\n      if (smallest === undefined)\
    \ {\n        smallest = lst[i];\n      } else if (smallest > lst[i]) {\n     \
    \   smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n \
    \   }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return\
    \ [smallest, largest];\n}\n", "  let largest = Number.NEGATIVE_INFINITY;\n  let\
    \ smallest = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    } else if (lst[i]\
    \ < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    } else if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  const [minInt, maxInt] = lst.reduce(([minInt, maxInt], num) => {\n    if (num\
    \ < minInt) {\n      return [num, minInt];\n    } else if (num > maxInt) {\n \
    \     return [minInt, num];\n    } else {\n      return [minInt, maxInt];\n  \
    \  }\n  }, [Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY]);\n  return [minInt,\
    \ maxInt];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n \
    \ for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest\
    \ = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n \
    \   }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  const [smallest, largest] = lst.reduce(\n    (acc, val) =>\n      val < 0 ? [Math.max(...acc,\
    \ val), val] : [Math.min(...acc, val), val],\n    [Infinity, -Infinity]\n  );\n\
    \  return smallest === undefined ? [undefined, undefined] : largest;\n}\n", " \
    \ let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined)\
    \ {\n        largest = lst[i];\n      } else if (largest < lst[i]) {\n       \
    \ largest = lst[i];\n      }\n    } else {\n      if (smallest === undefined)\
    \ {\n        smallest = lst[i];\n      } else if (smallest > lst[i]) {\n     \
    \   smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n \
    \   }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  const [smallest, largest] = lst.reduce(\n   \
    \ ([smallest, largest], num) => {\n      if (num < 0) {\n        return [smallest,\
    \ num];\n      } else if (num > 0) {\n        return [num, largest];\n      }\n\
    \      return [undefined, undefined];\n    },\n    [undefined, undefined]\n  );\n\
    \  return [smallest, largest];\n}\n", "  let largest = -Infinity;\n  let smallest\
    \ = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest)\
    \ {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest\
    \ = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n", "  let largest =\
    \ undefined;\n  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i]\
    \ < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  const positive = lst.filter(x => x >= 0);\n  const negative = lst.filter(x\
    \ => x < 0);\n  if (negative.length > 0) {\n    return [negative[0], positive[0]];\n\
    \  }\n  if (positive.length > 0) {\n    return [positive[0], negative[0]];\n \
    \ }\n  return [undefined, undefined];\n}\n", "  let largest = undefined;\n  let\
    \ smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n\
    \      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n", " \
    \ let largest = -Infinity;\n  let smallest = Infinity;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n \
    \   }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest\
    \ === undefined) {\n        largest = lst[i];\n      } else if (largest < lst[i])\
    \ {\n        largest = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if\
    \ (smallest === undefined) {\n        smallest = lst[i];\n      } else if (smallest\
    \ > lst[i]) {\n        smallest = lst[i];\n      }\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      largest\
    \ = lst[i];\n    } else if (lst[i] > 0) {\n      smallest = lst[i];\n    }\n \
    \ }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n  let smallest\
    \ = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest)\
    \ {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest\
    \ = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n", "  let largest =\
    \ undefined;\n  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] < 0) {\n      if (largest === undefined) {\n        largest\
    \ = lst[i];\n      } else {\n        largest = Math.max(largest, lst[i]);\n  \
    \    }\n    } else {\n      if (smallest === undefined) {\n        smallest =\
    \ lst[i];\n      } else {\n        smallest = Math.min(smallest, lst[i]);\n  \
    \    }\n    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = -Infinity;\n\
    \  let smallest = Infinity;\n  for (let num of lst) {\n    if (num > largest)\
    \ {\n      largest = num;\n    }\n    if (num < smallest) {\n      smallest =\
    \ num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = -Infinity;\n\
    \  let smallest = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    const\
    \ num = lst[i];\n    if (num < 0) {\n      if (largest < -num) {\n        largest\
    \ = -num;\n      }\n    } else if (num > 0) {\n      if (smallest > num) {\n \
    \       smallest = num;\n      }\n    } else {\n      return [largest, smallest];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] < 0) {\n      if (largest === undefined) {\n        largest = lst[i];\n\
    \      } else {\n        largest = Math.max(largest, lst[i]);\n      }\n    }\
    \ else if (lst[i] > 0) {\n      if (smallest === undefined) {\n        smallest\
    \ = lst[i];\n      } else {\n        smallest = Math.min(smallest, lst[i]);\n\
    \      }\n    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] < 0) {\n      if (largest === undefined) {\n        largest = lst[i];\n\
    \      } else if (largest < lst[i]) {\n        largest = lst[i];\n      }\n  \
    \  } else {\n      if (smallest === undefined) {\n        smallest = lst[i];\n\
    \      } else if (smallest > lst[i]) {\n        smallest = lst[i];\n      }\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] < 0) {\n      if (largest === undefined) {\n        largest = lst[i];\n\
    \      } else if (largest < lst[i]) {\n        largest = lst[i];\n      }\n  \
    \  } else {\n      if (smallest === undefined) {\n        smallest = lst[i];\n\
    \      } else if (smallest > lst[i]) {\n        smallest = lst[i];\n      }\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined)\
    \ {\n        largest = lst[i];\n      } else {\n        largest = Math.max(largest,\
    \ lst[i]);\n      }\n    } else if (lst[i] > 0) {\n      if (smallest === undefined)\
    \ {\n        smallest = lst[i];\n      } else {\n        smallest = Math.min(smallest,\
    \ lst[i]);\n      }\n    }\n  }\n  return [largest, smallest];\n}\n", "  if (lst.length\
    \ === 0) {\n    return [undefined, undefined];\n  }\n  const [smallest, largest]\
    \ = lst;\n  if (smallest > largest) {\n    return [smallest, largest];\n  }\n\
    \  const [smallest2, largest2] = largest_smallest_integers(lst.slice(1));\n  if\
    \ (smallest > smallest2) {\n    return [smallest, smallest2];\n  }\n  if (largest\
    \ < largest2) {\n    return [largest, largest2];\n  }\n  return [smallest2, largest2];\n\
    }\n", "  if (lst.length === 0) {\n    return [undefined, undefined];\n  }\n  const\
    \ [smallest, largest] = lst;\n  if (smallest > largest) {\n    return [smallest,\
    \ largest];\n  }\n  const [smallest2, largest2] = largest_smallest_integers(lst.slice(1));\n\
    \  if (smallest > smallest2) {\n    return [smallest, smallest2];\n  }\n  if (largest\
    \ < largest2) {\n    return [largest, largest2];\n  }\n  return [smallest2, largest2];\n\
    }\n", "  let largest = undefined;\n  let smallest = undefined;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined)\
    \ {\n        largest = lst[i];\n      } else if (largest < lst[i]) {\n       \
    \ largest = lst[i];\n      }\n    } else {\n      if (smallest === undefined)\
    \ {\n        smallest = lst[i];\n      } else if (smallest > lst[i]) {\n     \
    \   smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined)\
    \ {\n        largest = lst[i];\n      } else if (largest < lst[i]) {\n       \
    \ largest = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallest\
    \ === undefined) {\n        smallest = lst[i];\n      } else if (smallest > lst[i])\
    \ {\n        smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  let largest = undefined;\n  let smallest = undefined;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n\
    \    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n \
    \ return [largest, smallest];\n}\n", "  let largest = undefined;\n  let smallest\
    \ = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0)\
    \ {\n      if (largest === undefined) {\n        largest = lst[i];\n      } else\
    \ if (largest < lst[i]) {\n        largest = lst[i];\n      }\n    } else {\n\
    \      if (smallest === undefined) {\n        smallest = lst[i];\n      } else\
    \ if (smallest > lst[i]) {\n        smallest = lst[i];\n      }\n    }\n  }\n\
    \  return [largest, smallest];\n}\n", "  let largest = undefined;\n  let smallest\
    \ = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest)\
    \ {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest\
    \ = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n", "  let largest =\
    \ Number.NEGATIVE_INFINITY;\n  let smallest = Number.POSITIVE_INFINITY;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest\
    \ = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n \
    \   }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [smallest, largest];\n}\n",
  "  let largest = Number.MAX_SAFE_INTEGER;\n  let smallest = Number.MIN_SAFE_INTEGER;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] < 0) {\n      if (largest === undefined) {\n        largest = lst[i];\n\
    \      } else if (largest < lst[i]) {\n        largest = lst[i];\n      }\n  \
    \  } else {\n      if (smallest === undefined) {\n        smallest = lst[i];\n\
    \      } else if (smallest > lst[i]) {\n        smallest = lst[i];\n      }\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] < 0) {\n      if (largest === undefined) {\n        largest = lst[i];\n\
    \      } else {\n        largest = Math.max(largest, lst[i]);\n      }\n    }\
    \ else {\n      if (smallest === undefined) {\n        smallest = lst[i];\n  \
    \    } else {\n        smallest = Math.min(smallest, lst[i]);\n      }\n    }\n\
    \  }\n  return [largest, smallest];\n}\n", "  const [smallest, largest] = lst.reduce(([smallest,\
    \ largest], num) => {\n    if (num < smallest) {\n      return [num, smallest];\n\
    \    } else if (num > largest) {\n      return [smallest, num];\n    }\n    return\
    \ [smallest, largest];\n  }, [Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY]);\n\
    \  return [smallest, largest];\n}\n", "  let max_negative: number | undefined\
    \ = undefined;\n  let min_positive: number | undefined = undefined;\n  for (let\
    \ num of lst) {\n    if (num < 0) {\n      max_negative = num;\n    } else if\
    \ (num > 0) {\n      min_positive = num;\n    }\n  }\n  return [max_negative,\
    \ min_positive];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest\
    \ === undefined) {\n        largest = lst[i];\n      } else {\n        largest\
    \ = Math.max(largest, lst[i]);\n      }\n    } else {\n      if (smallest ===\
    \ undefined) {\n        smallest = lst[i];\n      } else {\n        smallest =\
    \ Math.min(smallest, lst[i]);\n      }\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  let largest = undefined;\n  let smallest = undefined;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n\
    \    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n \
    \ return [largest, smallest];\n}\n", "  let largest = undefined;\n  let smallest\
    \ = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest)\
    \ {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest\
    \ = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n", "  let largest =\
    \ undefined;\n  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i]\
    \ < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  let largest = undefined;\n  let smallest = undefined;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n\
    \    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n \
    \ return [largest, smallest];\n}\n", "  let largest = Number.MIN_SAFE_INTEGER;\n\
    \  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest\
    \ === undefined) {\n        largest = lst[i];\n      } else if (largest < lst[i])\
    \ {\n        largest = lst[i];\n      }\n    } else {\n      if (smallest ===\
    \ undefined) {\n        smallest = lst[i];\n      } else if (smallest > lst[i])\
    \ {\n        smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  let max_negative = Number.NEGATIVE_INFINITY;\n  let min_positive = Number.POSITIVE_INFINITY;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      max_negative\
    \ = Math.max(max_negative, lst[i]);\n    } else {\n      min_positive = Math.min(min_positive,\
    \ lst[i]);\n    }\n  }\n  return [max_negative, min_positive];\n}\n", "  let max_negative:\
    \ number | undefined = undefined;\n  let min_positive: number | undefined = undefined;\n\
    \  for (let num of lst) {\n    if (num < 0) {\n      if (max_negative === undefined)\
    \ {\n        max_negative = num;\n      } else {\n        if (num > max_negative)\
    \ {\n          max_negative = num;\n        }\n      }\n    } else {\n      if\
    \ (min_positive === undefined) {\n        min_positive = num;\n      } else {\n\
    \        if (num < min_positive) {\n          min_positive = num;\n        }\n\
    \      }\n    }\n  }\n  return [max_negative, min_positive];\n}\n", "  let largest\
    \ = undefined;\n  let smallest = undefined;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest\
    \ === undefined) {\n        largest = lst[i];\n      } else if (largest < lst[i])\
    \ {\n        largest = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if\
    \ (smallest === undefined) {\n        smallest = lst[i];\n      } else if (smallest\
    \ > lst[i]) {\n        smallest = lst[i];\n      }\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = -Infinity;\n  let smallest = Infinity;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined)\
    \ {\n        largest = lst[i];\n      } else if (largest < lst[i]) {\n       \
    \ largest = lst[i];\n      }\n    } else {\n      if (smallest === undefined)\
    \ {\n        smallest = lst[i];\n      } else if (smallest > lst[i]) {\n     \
    \   smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined)\
    \ {\n        largest = lst[i];\n      } else {\n        largest = Math.max(largest,\
    \ lst[i]);\n      }\n    } else {\n      if (smallest === undefined) {\n     \
    \   smallest = lst[i];\n      } else {\n        smallest = Math.min(smallest,\
    \ lst[i]);\n      }\n    }\n  }\n  return [largest, smallest];\n}\n", "  let largest\
    \ = undefined;\n  let smallest = undefined;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined) {\n        largest\
    \ = lst[i];\n      } else if (largest < lst[i]) {\n        largest = lst[i];\n\
    \      }\n    } else {\n      if (smallest === undefined) {\n        smallest\
    \ = lst[i];\n      } else if (smallest > lst[i]) {\n        smallest = lst[i];\n\
    \      }\n    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = -Infinity;\n\
    \  let smallest = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let max_negative: number | undefined = undefined;\n  let min_positive: number\
    \ | undefined = undefined;\n  for (let num of lst) {\n    if (num < 0) {\n   \
    \   max_negative = num;\n    } else if (num > 0) {\n      min_positive = num;\n\
    \    }\n  }\n  return [max_negative, min_positive];\n}\n", "  let largest = Number.MIN_SAFE_INTEGER;\n\
    \  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let num of lst) {\n    if (num\
    \ < 0) {\n      largest = num;\n    } else if (num > 0) {\n      smallest = num;\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = -Infinity;\n\
    \  let smallest = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n \
    \   }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest\
    \ === undefined) {\n        largest = lst[i];\n      } else {\n        largest\
    \ = Math.max(largest, lst[i]);\n      }\n    } else if (lst[i] > 0) {\n      if\
    \ (smallest === undefined) {\n        smallest = lst[i];\n      } else {\n   \
    \     smallest = Math.min(smallest, lst[i]);\n      }\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest\
    \ === undefined) {\n        largest = lst[i];\n      } else if (largest < lst[i])\
    \ {\n        largest = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if\
    \ (smallest === undefined) {\n        smallest = lst[i];\n      } else if (smallest\
    \ > lst[i]) {\n        smallest = lst[i];\n      }\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let max_negative = Number.NEGATIVE_INFINITY;\n  let min_positive\
    \ = Number.POSITIVE_INFINITY;\n  for (let num of lst) {\n    if (num < 0) {\n\
    \      max_negative = Math.max(max_negative, num);\n    } else {\n      min_positive\
    \ = Math.min(min_positive, num);\n    }\n  }\n  return [max_negative, min_positive];\n\
    }\n", "  let largest = undefined;\n  let smallest = undefined;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n\
    \    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n \
    \ return [largest, smallest];\n}\n", "  let largest = Number.NEGATIVE_INFINITY;\n\
    \  let smallest = Number.POSITIVE_INFINITY;\n  for (let num of lst) {\n    if\
    \ (num < smallest) {\n      smallest = num;\n    } else if (num > largest) {\n\
    \      largest = num;\n    }\n  }\n  return [largest, smallest];\n}\n", "  let\
    \ max: number | undefined = undefined;\n  let min: number | undefined = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (max\
    \ === undefined) {\n        max = lst[i];\n      } else {\n        max = Math.max(max,\
    \ lst[i]);\n      }\n    } else {\n      if (min === undefined) {\n        min\
    \ = lst[i];\n      } else {\n        min = Math.min(min, lst[i]);\n      }\n \
    \   }\n  }\n  return [max, min];\n}\n", "  if (lst.length < 2) {\n    return [undefined,\
    \ undefined];\n  }\n  const [a, b] = lst.reduce(([minInt, maxInt], [cur]) => {\n\
    \    if (cur < minInt) {\n      minInt = cur;\n    }\n    if (cur > maxInt) {\n\
    \      maxInt = cur;\n    }\n    return [minInt, maxInt];\n  }, [lst[0], lst[0]]);\n\
    \  return [a, b];\n}\n", "  const positive = lst.filter(x => x > 0);\n  const\
    \ negative = lst.filter(x => x < 0);\n  if (positive.length > 0 && negative.length\
    \ > 0) {\n    return [Math.max(...negative), Math.min(...positive)];\n  } else\
    \ if (positive.length > 0) {\n    return [Math.min(...positive)];\n  } else if\
    \ (negative.length > 0) {\n    return [Math.max(...negative)];\n  }\n  return\
    \ [undefined, undefined];\n}\n", "  let largest = undefined;\n  let smallest =\
    \ undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest)\
    \ {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest\
    \ = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n", "  let largest =\
    \ undefined;\n  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i]\
    \ < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  let largest = undefined;\n  let smallest = undefined;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n\
    \    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n \
    \ return [largest, smallest];\n}\n", "  let largest = undefined;\n  let smallest\
    \ = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest)\
    \ {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest\
    \ = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n", "  let largest =\
    \ undefined;\n  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i]\
    \ < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  let largest = undefined;\n  let smallest = undefined;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined)\
    \ {\n        largest = lst[i];\n      } else if (largest < lst[i]) {\n       \
    \ largest = lst[i];\n      }\n    } else {\n      if (smallest === undefined)\
    \ {\n        smallest = lst[i];\n      } else if (smallest > lst[i]) {\n     \
    \   smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n \
    \   }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  if (lst.length < 2) {\n    return [undefined,\
    \ undefined];\n  }\n  let [a, b] = lst.sort((a, b) => a - b);\n  if (a < 0 &&\
    \ b > 0) {\n    return [a, b];\n  }\n  if (a > 0 && b < 0) {\n    return [b, a];\n\
    \  }\n  return [a, b];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let max_negative = Number.NEGATIVE_INFINITY;\n\
    \  let min_positive = Number.POSITIVE_INFINITY;\n  for (let num of lst) {\n  \
    \  if (num < 0) {\n      max_negative = Math.max(max_negative, num);\n    } else\
    \ {\n      min_positive = Math.min(min_positive, num);\n    }\n  }\n  return [max_negative,\
    \ min_positive];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let max_negative = Number.NEGATIVE_INFINITY;\n\
    \  let min_positive = Number.POSITIVE_INFINITY;\n  for (let num of lst) {\n  \
    \  if (num < 0) {\n      max_negative = Math.max(max_negative, num);\n    } else\
    \ {\n      min_positive = Math.min(min_positive, num);\n    }\n  }\n  return [max_negative,\
    \ min_positive];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest\
    \ === undefined) {\n        largest = lst[i];\n      } else if (largest < lst[i])\
    \ {\n        largest = lst[i];\n      }\n    } else {\n      if (smallest ===\
    \ undefined) {\n        smallest = lst[i];\n      } else if (smallest > lst[i])\
    \ {\n        smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  let largest = undefined;\n  let smallest = undefined;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined)\
    \ {\n        largest = lst[i];\n      } else if (largest < lst[i]) {\n       \
    \ largest = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallest\
    \ === undefined) {\n        smallest = lst[i];\n      } else if (smallest > lst[i])\
    \ {\n        smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "  let largest = Number.NEGATIVE_INFINITY;\n  let smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let num of lst) {\n    if (num < smallest) {\n      smallest = num;\n\
    \    } else if (num > largest) {\n      largest = num;\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined)\
    \ {\n        largest = lst[i];\n      } else if (largest < lst[i]) {\n       \
    \ largest = lst[i];\n      }\n    } else {\n      if (smallest === undefined)\
    \ {\n        smallest = lst[i];\n      } else if (smallest > lst[i]) {\n     \
    \   smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let max: number | undefined = undefined;\n  let min: number | undefined = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (max\
    \ === undefined) {\n        max = lst[i];\n      } else {\n        max = Math.max(max,\
    \ lst[i]);\n      }\n    } else {\n      if (min === undefined) {\n        min\
    \ = lst[i];\n      } else {\n        min = Math.min(min, lst[i]);\n      }\n \
    \   }\n  }\n  return [max, min];\n}\n", "  let largest = undefined;\n  let smallest\
    \ = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0)\
    \ {\n      if (largest === undefined) {\n        largest = lst[i];\n      } else\
    \ {\n        largest = Math.max(largest, lst[i]);\n      }\n    } else {\n   \
    \   if (smallest === undefined) {\n        smallest = lst[i];\n      } else {\n\
    \        smallest = Math.min(smallest, lst[i]);\n      }\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n \
    \   }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return\
    \ [largest, smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    } else if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = undefined;\n  let smallest = undefined;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === undefined)\
    \ {\n        largest = lst[i];\n      } else if (largest < lst[i]) {\n       \
    \ largest = lst[i];\n      }\n    } else {\n      if (smallest === undefined)\
    \ {\n        smallest = lst[i];\n      } else if (smallest > lst[i]) {\n     \
    \   smallest = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = Number.NEGATIVE_INFINITY;\n  let smallest = Number.POSITIVE_INFINITY;\n\
    \  for (let num of lst) {\n    if (num > largest) {\n      largest = num;\n  \
    \  } else if (num < smallest) {\n      smallest = num;\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  let largest = undefined;\n  let smallest = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n     \
    \ largest = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = undefined;\n\
    \  let smallest = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if (lst[i] < smallest)\
    \ {\n      smallest = lst[i];\n    }\n  }\n  return [largest, smallest];\n}\n",
  "  let largest = -Infinity;\n  let smallest = Infinity;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n", "  if (lst.length === 0) {\n    return [undefined, undefined];\n\
    \  }\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n    if (num\
    \ < 0) {\n      if (largest < num) {\n        largest = num;\n      }\n    } else\
    \ {\n      if (smallest > num) {\n        smallest = num;\n      }\n    }\n  }\n\
    \  return [largest, smallest];\n}\n", "  let largest = Number.MAX_SAFE_INTEGER;\n\
    \  let smallest = Number.MIN_SAFE_INTEGER;\n  for (let num of lst) {\n    if (num\
    \ < 0) {\n      largest = num;\n    } else if (num > 0) {\n      smallest = num;\n\
    \    }\n  }\n  return [largest, smallest];\n}\n", "  let largest = Number.MIN_SAFE_INTEGER;\n\
    \  let smallest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n    if\
    \ (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return [largest,\
    \ smallest];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
