language: ts
name: HumanEval_116_sort_array
results:
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[]\
    \ = [];\n    let dec: number[] = [];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        let bin = arr[i].toString(2);\n        while (bin.length < 8) {\n\
    \            bin = \"0\" + bin;\n        }\n        ones.push(parseInt(bin.substr(0,\
    \ 8), 2));\n        dec.push(arr[i].toString(10));\n    }\n    ones = sort_array(ones);\n\
    \    dec = sort_array(dec);\n    for (let i = 0; i < ones.length; i++) {\n   \
    \     for (let j = 0; j < dec.length; j++) {\n            if (dec[j].length <\
    \ 8) {\n                dec[j] = \"0\" + dec[j];\n            }\n            if\
    \ (dec[j].substr(0, ones[i].length) === ones[i]) {\n                dec[j] = dec[j].substr(ones[i].length);\n\
    \            }\n        }\n    }\n    return dec.concat(ones);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4bckoi99.ts(14,18): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp4bckoi99.ts(20,24): error TS2339: Property ''length'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp4bckoi99.ts(21,17): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmp4bckoi99.ts(23,24): error TS2339: Property ''substr'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp4bckoi99.ts(23,42): error TS2339: Property ''length'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp4bckoi99.ts(24,33): error TS2339: Property ''substr'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp4bckoi99.ts(24,48): error TS2339: Property ''length'' does
    not exist on type ''number''.

    '
  timestamp: 1659979608
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len < 2) {\n        return arr;\n    }\n    const ones\
    \ = arr.filter(x => x === 1);\n    const len = ones.length;\n    if (len === 0)\
    \ {\n        return arr;\n    }\n    const maxOnes = Math.max.apply(null, ones);\n\
    \    const maxOnesLen = Math.ceil(Math.log(maxOnes) / Math.LN2);\n    const maxOnesBinLen\
    \ = maxOnesLen + 1;\n    const maxOnesBin = new Array(maxOnesBinLen).fill(0);\n\
    \    for (let i = 0; i < maxOnesBinLen; i++) {\n        maxOnesBin[i] = 0;\n \
    \   }\n    for (let i = 0; i < len; i++) {\n        maxOnesBin[ones[i] - 1]++;\n\
    \    }\n    const maxOnesBinLen2 = maxOnesBin.length;\n    const maxOnesBin2 =\
    \ new Array(maxOnesBinLen2).fill(0);\n    for (let i = 0; i < maxOnesBinLen2;\
    \ i++) {\n        maxOnesBin2[i] = 0;\n    }\n    for (let i = 0; i < len; i++)\
    \ {\n        maxOnesBin2[maxOnesBin[ones[i] - 1] - 1]++;\n    }\n    const maxOnesBinLen3\
    \ = maxOnesBin2.length;\n    const maxOnesBin3 = new Array(maxOnesBinLen3).fill(0);\n\
    \    for (let i = 0; i < maxOnesBinLen3; i++) {\n        maxOnesBin3[i] = 0;\n\
    \    }\n    for (let i = 0; i < len; i++) {\n        maxOnesBin3[maxOnesBin2[ones[i]\
    \ - 1] - 1]++;\n    }\n    const maxOnesBinLen4 = maxOnesBin3.length;\n    const\
    \ maxOnesBin4 = new Array(maxOnesBinLen4).fill(0);\n    for (let i = 0; i < maxOnesBinLen4;\
    \ i++) {\n        maxOnesBin4[i] = 0;\n    }\n    for (let i = 0; i < len; i++)\
    \ {\n        maxOnesBin4[maxOnesBin3[ones[i] - 1] - 1]++;\n    }\n    const maxOnesBinLen5\
    \ = maxOnesBin4.length;\n    const maxOnesBin5 = new Array(maxOnesBinLen5).fill(0);\n\
    \    for (let i = 0; i < maxOnesBinLen5; i++) {\n        maxOnesBin5[i] = 0;\n\
    \    }\n    for (let i = 0; i < len; i++) {\n        maxOnesBin5[maxOnesBin4[ones[i]\
    \ - 1] - 1]++;\n    }\n    const maxOnesBinLen6 = maxOnesBin5.length;\n    const\
    \ maxOnesBin6 = new Array(maxOnesBinLen6).fill(0);\n    for (let i = 0; i < maxOnesBinLen6;\
    \ i++) {\n        maxOnesBin6[i] = 0;\n    }\n    for (let i = 0; i < len; i++)\
    \ {\n        maxOnesBin6[maxOne\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsjadpz8w.ts(64,1): error TS1005: '']'' expected.

    ../../../../../tmp/tmpsjadpz8w.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979608
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  const ones = arr.filter(n\
    \ => n & 1);\n  const decimals = arr.filter(n => !(n&1));\n  return decimals.sort((a,\
    \ b) => a - b);\n}\n</code>\n<|/ a tags=javascript,sorting |>\n<| a dscore=0 |>\n\
    <code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqr22lkpq.ts(10,2): error TS1110: Type expected.

    ../../../../../tmp/tmpqr22lkpq.ts(10,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpqr22lkpq.ts(11,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpqr22lkpq.ts(11,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpqr22lkpq.ts(12,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpqr22lkpq.ts(12,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqr22lkpq.ts(12,16): error TS1109: Expression expected.

    ../../../../../tmp/tmpqr22lkpq.ts(14,9): error TS1005: '';'' expected.

    '
  timestamp: 1659979608
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n\
    \        if (ones === ones_b) {\n            return a - b;\n        }\n      \
    \  return ones - ones_b;\n    });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppdntiui9.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmppdntiui9.ts(8,24): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979608
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a,\
    \ b) => {\n        const ones = count_ones(b);\n        const decA = count_ones(a);\n\
    \        const decB = count_ones(b);\n        if (decA === decB) {\n         \
    \   return a - b;\n        }\n        return decA - decB;\n    });\n    return\
    \ arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp40i5pyai.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmp40i5pyai.ts(8,22): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmp40i5pyai.ts(9,22): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979608
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let result:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count\
    \ = 0;\n        for (let j = 0; j < arr[i].toString().length; j++) {\n       \
    \     if (arr[i].toString()[j] == '1') {\n                count++;\n         \
    \   }\n        }\n        result.push(count);\n    }\n    for (let i = 0; i <\
    \ result.length; i++) {\n        result[i] = result[i].toString();\n    }\n  \
    \  for (let i = 0; i < result.length; i++) {\n        result[i] = result[i].split('').sort().join('');\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7tmod865.ts(17,9): error TS2322: Type ''string''
    is not assignable to type ''number''.

    ../../../../../tmp/tmp7tmod865.ts(20,31): error TS2339: Property ''split'' does
    not exist on type ''number''.

    '
  timestamp: 1659979608
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(b);\n        const decA = count_decA(a);\n\
    \        const decB = count_decB(b);\n        if (decA === decB) {\n         \
    \   return decA - decB;\n        }\n        return decA - decB || decB - decA;\n\
    \    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb7kzx41a.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpb7kzx41a.ts(8,22): error TS2304: Cannot find name ''count_decA''.

    ../../../../../tmp/tmpb7kzx41a.ts(9,22): error TS2304: Cannot find name ''count_decB''.

    '
  timestamp: 1659979608
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b)\
    \ => {\n    const ones = count_ones(b);\n    const decA = count_decA(a);\n   \
    \ const decB = count_decB(b);\n    if (decA === decB) {\n      return decA - decB;\n\
    \    }\n    return ones - decB - decA;\n  });\n  return arr;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp20bhecd5.ts(7,18): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmp20bhecd5.ts(8,18): error TS2304: Cannot find name ''count_decA''.

    ../../../../../tmp/tmp20bhecd5.ts(9,18): error TS2304: Cannot find name ''count_decB''.

    '
  timestamp: 1659979608
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones =\
    \ arr.filter(x => x === 1);\n    const decimals = arr.filter(x => x % 1 !== 0);\n\
    \    const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedWithOnes\
    \ = decimalsSorted.concat(ones);\n    return decimalsSortedWithOnes;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpdneozm23.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdneozm23.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979608
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let result:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let ones\
    \ = arr[i] & 1;\n        let decimal = arr[i] >> 1;\n        if (ones === 0) {\n\
    \            result.push(decimal);\n        } else {\n            result.push(decimal\
    \ * 10 + ones);\n        }\n    }\n    result.sort((a, b) => a - b);\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  2,\n  11,\n  21\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp_v2p4i3y.js:23:12)\n    at Object.<anonymous> (/tmp/tmp_v2p4i3y.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2,\
    \ 11, 21 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979608
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray\
    \ = arr.slice();\n    sortedArray.sort((a, b) => {\n        let ones = Math.log2(b);\n\
    \        let decA = Math.log2(a);\n        let decB = Math.log2(b);\n        if\
    \ (decA < decB) {\n            return -1;\n        }\n        if (decA > decB)\
    \ {\n            return 1;\n        }\n        if (ones < 0) {\n            return\
    \ -1;\n        }\n        if (ones > 0) {\n            return 1;\n        }\n\
    \        return 0;\n    });\n    return sortedArray;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpizw2rwdn.ts(8,25): error TS2551: Property ''log2''
    does not exist on type ''Math''. Did you mean ''LOG2E''?

    ../../../../../tmp/tmpizw2rwdn.ts(9,25): error TS2551: Property ''log2'' does
    not exist on type ''Math''. Did you mean ''LOG2E''?

    ../../../../../tmp/tmpizw2rwdn.ts(10,25): error TS2551: Property ''log2'' does
    not exist on type ''Math''. Did you mean ''LOG2E''?

    '
  timestamp: 1659979608
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n\
    \  const ones = new Array(len).fill(0);\n  for (let i = 0; i < len; i++) {\n \
    \   ones[arr[i]] += 1;\n  }\n  const sortedArr = new Array(len);\n  for (let i\
    \ = 0; i < len; i++) {\n    sortedArr[i] = i;\n  }\n  sortedArr.sort((a, b) =>\
    \ {\n    const aOnes = ones[a];\n    const bOnes = ones[b];\n    if (aOnes > bOnes)\
    \ {\n      return 1;\n    }\n    if (aOnes < bOnes) {\n      return -1;\n    }\n\
    \    return a - b;\n  });\n  return sortedArr;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5bn4wlfn.ts(7,31): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659979608
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[]\
    \ = [];\n    let dec: number[] = [];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] === 1) {\n            ones.push(arr[i]);\n        } else\
    \ {\n            dec.push(arr[i]);\n        }\n    }\n    let sorted: number[]\
    \ = [];\n    for (let i = 0; i < ones.length; i++) {\n        sorted.push(ones[i]);\n\
    \    }\n    for (let i = 0; i < dec.length; i++) {\n        sorted.push(dec[i]);\n\
    \    }\n    return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmphv3wmgqv.js:28:12)\n    at Object.<anonymous> (/tmp/tmphv3wmgqv.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2,\
    \ 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979608
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const a_bin = bin(a);\n        const b_bin = bin(b);\n    \
    \    const a_ones = a_bin.split(\"1\").length - 1;\n        const b_ones = b_bin.split(\"\
    1\").length - 1;\n        return a_ones - b_ones;\n    });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf5fk6_yd.ts(7,23): error TS2304: Cannot find name
    ''bin''.

    ../../../../../tmp/tmpf5fk6_yd.ts(8,23): error TS2304: Cannot find name ''bin''.

    '
  timestamp: 1659979608
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = Math.log2(a) + Math.log2(b);\n        if (ones\
    \ === 0) {\n            return a - b;\n        }\n        return ones - sort_array(ones).length;\n\
    \    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps5dmj8fi.ts(7,27): error TS2551: Property ''log2''
    does not exist on type ''Math''. Did you mean ''LOG2E''?

    ../../../../../tmp/tmps5dmj8fi.ts(7,42): error TS2551: Property ''log2'' does
    not exist on type ''Math''. Did you mean ''LOG2E''?

    '
  timestamp: 1659979608
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones\
    \ = arr.reduce((acc, val) => acc + val, 0);\n    const sortedArr = arr.sort((a,\
    \ b) => {\n        const aNum = parseInt(a.toString(2), 2);\n        const bNum\
    \ = parseInt(b.toString(2), 2);\n        return aNum - bNum;\n    });\n    const\
    \ sortedLen = sortedArr.length;\n    for (let i = 0; i < sortedLen; i++) {\n \
    \       const onesInBin = parseInt(sortedArr[i].toString(2), 2);\n        if (onesInBin\
    \ === ones) {\n            sortedArr[i] = parseInt(sortedArr[i].toString(10),\
    \ 10);\n        }\n    }\n    return sortedArr;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp3fo0gb4d.js:28:12)\n    at Object.<anonymous> (/tmp/tmp3fo0gb4d.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979608
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray\
    \ = arr.slice();\n    sortedArray.sort((a, b) => {\n        const ones = count_ones(a);\n\
    \        const zerosOnes = count_zeros(a);\n        const zerosZeros = count_zeros(b);\n\
    \        if (ones === zerosOnes && zerosZeros === 0) {\n            return 0;\n\
    \        }\n        if (ones === zerosOnes && zerosZeros > 0) {\n            return\
    \ 1;\n        }\n        if (ones === zerosZeros && zerosOnes > 0) {\n       \
    \     return -1;\n        }\n        return a > b ? 1 : -1;\n    });\n    return\
    \ sortedArray;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpotp_94i3.ts(8,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpotp_94i3.ts(9,27): error TS2304: Cannot find name ''count_zeros''.

    ../../../../../tmp/tmpotp_94i3.ts(10,28): error TS2304: Cannot find name ''count_zeros''.

    '
  timestamp: 1659979608
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        if (a === 0) return 1;\n        if (b === 0) return -1;\n \
    \       return count_ones(a) - count_ones(b);\n    });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphr487q2h.ts(9,16): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmphr487q2h.ts(9,32): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979608
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n    \
    \  return 1;\n    }\n    return -1;\n  });\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpbquc8ytv.js:19:12)\n    at Object.<anonymous> (/tmp/tmpbquc8ytv.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979608
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  const ones = arr.filter(n\
    \ => n & 1);\n  const decs = arr.filter(n => !(n&1));\n  return decs.concat(ones).sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp9ua17udb.js:13:12)\n    at Object.<anonymous> (/tmp/tmp9ua17udb.js:22:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979608
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones\
    \ = arr\n        .map(n => n.toString(2).split('').reduce((acc, cur) => acc +\
    \ +cur, 0))\n        .filter(n => n > 0);\n    const len = ones.length;\n    if\
    \ (len === 0) {\n        return arr;\n    }\n    const sorted = [];\n    let i\
    \ = 0;\n    while (i < len) {\n        const j = i;\n        while (j > 0 && ones[j\
    \ - 1] > ones[j]) {\n            sorted[sorted.length - 1] = ones[j - 1];\n  \
    \          j--;\n        }\n        sorted[sorted.length - 1] = ones[j];\n   \
    \     i++;\n    }\n    return sorted;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqp1k2bh1.ts(6,11): error TS2451: Cannot redeclare
    block-scoped variable ''len''.

    ../../../../../tmp/tmpqp1k2bh1.ts(13,11): error TS2451: Cannot redeclare block-scoped
    variable ''len''.

    ../../../../../tmp/tmpqp1k2bh1.ts(23,13): error TS2588: Cannot assign to ''j''
    because it is a constant.

    '
  timestamp: 1659979608
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b)\
    \ => {\n    if (a === 0) return 1;\n    if (b === 0) return -1;\n    return count_ones(a)\
    \ - count_ones(b);\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpispkp5w6.ts(9,12): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpispkp5w6.ts(9,28): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979608
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones =\
    \ arr.reduce((acc, val) => acc + val, 0);\n    const decimal = arr.reduce((acc,\
    \ val) => acc + Math.pow(val, 2), 0);\n    return arr.sort((a, b) => ones - b\
    \ - decimal);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  5,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpti0xp4e8.js:13:12)\n    at Object.<anonymous> (/tmp/tmpti0xp4e8.js:22:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 5, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979608
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n\
    \        if (ones > ones_b) {\n            return -1;\n        } else if (ones\
    \ < ones_b) {\n            return 1;\n        } else {\n            return count_dec(a)\
    \ - count_dec(b);\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5g_c354_.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmp5g_c354_.ts(8,24): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmp5g_c354_.ts(14,20): error TS2304: Cannot find name ''count_dec''.

    ../../../../../tmp/tmp5g_c354_.ts(14,35): error TS2304: Cannot find name ''count_dec''.

    '
  timestamp: 1659979610
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sorted:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count\
    \ = 0;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j]\
    \ & 1) {\n                count++;\n            }\n        }\n        sorted.push(count);\n\
    \    }\n    sorted.sort((a, b) => a - b);\n    return sorted;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  3,\n  3,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpnoii919j.js:22:12)\n    at Object.<anonymous> (/tmp/tmpnoii919j.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 3,\
    \ 3, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = ~~(a / 2);\n        const zeros = a % 2;\n   \
    \     const decimal = ~~(b / 2);\n        const decimal2 = b % 2;\n        if\
    \ (ones === 0 && zeros === 0) {\n            return decimal;\n        }\n    \
    \    if (ones === 0 && decimal2 === 0) {\n            return decimal;\n      \
    \  }\n        if (zeros === 0 && decimal2 === 0) {\n            return decimal;\n\
    \        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n\
    \        }\n        if (zeros === 0 && decimal !== 0) {\n            return decimal2;\n\
    \        }\n        if (ones === 0 && decimal === 0) {\n            return decimal2;\n\
    \        }\n        if (ones === 0 && decimal !== 0) {\n            return decimal2;\n\
    \        }\n        if (zeros === 0 && decimal === 0) {\n            return decimal2;\n\
    \        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n\
    \        }\n        if (zeros === 0 && decimal !== 0) {\n            return decimal2;\n\
    \        }\n        if (ones === 0 && decimal === 0) {\n            return decimal2;\n\
    \        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n\
    \        }\n        if (zeros === 0 && decimal === 0) {\n            return decimal2;\n\
    \        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n\
    \        }\n        if (zeros === 0 && decimal !== 0) {\n            return decimal2;\n\
    \        }\n        if (ones === 0 && decimal === 0) {\n            return decimal2;\n\
    \        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n\
    \        }\n        if (zeros === 0 && decimal !== 0) {\n            return decimal2;\n\
    \        }\n        if (ones === 0 && decimal === 0) {\n            return decimal2;\n\
    \        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n\
    \        }\n        if (zeros === 0 && decimal !== 0) {\n            return decimal2;\n\
    \        }\n        if (ones === 0 && decimal === 0) {\n            return decimal2;\n\
    \        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n\
    \        }\n        if (zeros === 0 && decimal !== 0) {\n            return decimal2;\n\
    \        }\n        if (ones === 0 && decimal === 0) {\n            return decimal2;\n\
    \        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n\
    \        }\n        if (zeros === 0 && decimal !== 0) {\n            return decimal2;\n\
    \        }\n        if (ones === 0 && decimal === 0) {\n            return decimal2;\n\
    \        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n\
    \        }\n        if (zeros === 0 && decimal !== 0) {\n            return decimal2;\n\
    \        }\n        if (ones === 0 && decimal === 0) {\n            return decimal2;\n\
    \        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n\
    \        }\n        if (zeros === 0 && decimal !== 0) {\n            return decimal2;\n\
    \        }\n        if (ones === 0 && decimal === 0) {\n            return decimal2;\n\
    \        }\n        if (ones === 0 && decimal2 !== 0) {\n            return decimal2;\n\
    \        }\n        if (zeros === 0 && decimal \ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2i6psbfl.ts(117,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmp2i6psbfl.ts(133,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979610
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[]\
    \ = [];\n    let dec: number[] = [];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] == 1) {\n            ones.push(i);\n        } else {\n\
    \            dec.push(arr[i]);\n        }\n    }\n    dec.sort((a, b) => a - b);\n\
    \    ones = ones.sort((a, b) => a - b);\n    let result: number[] = [];\n    for\
    \ (let i = 0; i < ones.length; i++) {\n        result.push(dec[ones[i]]);\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp9um5p_io.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9um5p_io.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let result:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count\
    \ = 0;\n        for (let j = 0; j < arr[i].toString().length; j++) {\n       \
    \     if (arr[i].toString()[j] == '1') {\n                count++;\n         \
    \   }\n        }\n        result.push(count);\n    }\n    result.sort((a, b) =>\
    \ a - b);\n    for (let i = 0; i < result.length; i++) {\n        if (result[i]\
    \ != 0) {\n            result[i] = result[i] * Math.pow(10, result[i].toString().length\
    \ - 1);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp4dh3zd15.js:27:12)\n    at Object.<anonymous> (/tmp/tmp4dh3zd15.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    if (a === b) {\n      return 0;\n    }\n    const ones = count_ones(a);\n\
    \    const twos = count_ones(b);\n    if (ones === twos) {\n      return a.localeCompare(b);\n\
    \    }\n    return ones - twos;\n  });\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuodb4uwp.ts(10,18): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpuodb4uwp.ts(11,18): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmpuodb4uwp.ts(13,16): error TS2339: Property ''localeCompare''
    does not exist on type ''number''.

    '
  timestamp: 1659979610
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones\
    \ = arr.reduce((acc, val) => {\n        if (val === 1) {\n            acc += 1;\n\
    \        }\n        return acc;\n    }, 0);\n    const decimal = arr.reduce((acc,\
    \ val) => {\n        if (val === 1) {\n            acc += 1;\n        }\n    \
    \    return acc;\n    }, 0);\n    if (ones === len) {\n        return arr;\n \
    \   }\n    if (decimal === len) {\n        return arr.sort((a, b) => a - b);\n\
    \    }\n    return arr.sort((a, b) => {\n        const aDecimal = a.toString(2);\n\
    \        const bDecimal = b.toString(2);\n        if (aDecimal === bDecimal) {\n\
    \            return 0;\n        }\n        if (aDecimal === 1) {\n           \
    \ return 1;\n        }\n        if (bDecimal === 1) {\n            return -1;\n\
    \        }\n        return aDecimal > bDecimal ? 1 : -1;\n    });\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplw4v857u.ts(34,13): error TS2367: This condition
    will always return ''false'' since the types ''string'' and ''1'' have no overlap.

    ../../../../../tmp/tmplw4v857u.ts(37,13): error TS2367: This condition will always
    return ''false'' since the types ''string'' and ''1'' have no overlap.

    '
  timestamp: 1659979610
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n\
    \        if (ones === ones_b) {\n            return a - b;\n        }\n      \
    \  return ones - ones_b;\n    });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppdntiui9.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmppdntiui9.ts(8,24): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979608
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let result:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count\
    \ = 0;\n        for (let j = 0; j < arr[i].toString().length; j++) {\n       \
    \     if (arr[i].toString()[j] == \"1\") {\n                count++;\n       \
    \     }\n        }\n        result.push(count);\n    }\n    result.sort((a, b)\
    \ => a - b);\n    for (let i = 0; i < result.length; i++) {\n        result[i]\
    \ = parseInt(result[i]);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8pgpwq_v.ts(18,30): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    '
  timestamp: 1659979610
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let result:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let ones\
    \ = arr[i] & 1;\n        let decimal = arr[i] >> 1;\n        if (ones === 0) {\n\
    \            result.push(decimal);\n        } else {\n            result.push(decimal\
    \ * 10 + ones);\n        }\n    }\n    result.sort((a, b) => a - b);\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  2,\n  11,\n  21\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp_v2p4i3y.js:23:12)\n    at Object.<anonymous> (/tmp/tmp_v2p4i3y.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2,\
    \ 11, 21 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979608
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones:\
    \ number[] = [];\n    const zeros: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        const num = arr[i];\n        if (num === 1) {\n            ones.push(num);\n\
    \        } else {\n            zeros.push(num);\n        }\n    }\n    zeros.sort((a,\
    \ b) => a - b);\n    ones.sort((a, b) => a - b);\n    return zeros.concat(ones);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4,\n  5,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpcjijpykc.js:24:12)\n    at Object.<anonymous> (/tmp/tmpcjijpykc.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4,\
    \ 5, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a,\
    \ b) => {\n        const ones = binToInt(a);\n        const zerosOrOnes = binToInt(b);\n\
    \        if (ones > zerosOrOnes) {\n            return -1;\n        } else if\
    \ (ones < zerosOrOnes) {\n            return 1;\n        } else {\n          \
    \  return 0;\n        }\n    });\n    return arr;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmm30wg49.ts(7,22): error TS2304: Cannot find name
    ''binToInt''.

    ../../../../../tmp/tmpmm30wg49.ts(8,29): error TS2304: Cannot find name ''binToInt''.

    '
  timestamp: 1659979610
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones\
    \ = arr.reduce((acc, val) => acc + val, 0);\n    const decimal = ones / Math.pow(2,\
    \ len);\n    const decimals = arr.map(val => val * decimal);\n    return decimals.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.46875,\n\
    \  0.9375,\n  1.40625,\n  1.875,\n  2.34375\n]\n\nshould loosely deep-equal\n\n\
    [\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpn4qd7j9g.js:18:12)\n \
    \   at Object.<anonymous> (/tmp/tmpn4qd7j9g.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.46875,\
    \ 0.9375, 1.40625, 1.875, 2.34375 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = binToInt(a);\n        const zerosOnes = binToInt(b);\n\
    \        if (ones === zerosOnes) {\n            return a - b;\n        }\n   \
    \     return zerosOnes - ones;\n    });\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdtbs7_vg.ts(7,22): error TS2304: Cannot find name
    ''binToInt''.

    ../../../../../tmp/tmpdtbs7_vg.ts(8,27): error TS2304: Cannot find name ''binToInt''.

    '
  timestamp: 1659979610
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n\
    \        if (ones === ones_b) {\n            return a - b;\n        }\n      \
    \  return ones - ones_b;\n    });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppdntiui9.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmppdntiui9.ts(8,24): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979608
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(b);\n        const decimal = count_decimal(b);\n\
    \        if (ones === decimal) {\n            return a - b;\n        }\n     \
    \   return ones - decimal;\n    });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnbn21gq5.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpnbn21gq5.ts(8,25): error TS2304: Cannot find name ''count_decimal''.

    '
  timestamp: 1659979610
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones =\
    \ arr.filter(x => x === 1);\n    const decimals = arr.filter(x => x % 1 !== 0);\n\
    \    const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedOnes\
    \ = decimalsSorted.filter(x => x === 1);\n    const decimalsSortedOnesSorted =\
    \ decimalsSortedOnes.sort((a, b) => a - b);\n    const decimalsSortedOnesSortedSortedArray\
    \ = decimalsSortedOnesSorted.map(x => [x, 1]);\n    const decimalsSortedOnesSortedSortedArraySorted\
    \ = decimalsSortedOnesSortedSortedArray.sort((a, b) => a[0] - b[0]);\n    const\
    \ decimalsSortedOnesSortedSortedArraySortedArray = decimalsSortedOnesSortedSortedArraySorted.map(x\
    \ => [x[0], x[1]]);\n    const decimalsSortedOnesSortedSortedArraySortedArraySorted\
    \ = decimalsSortedOnesSortedSortedArraySortedArray.sort((a, b) => a[0] - b[0]);\n\
    \    const decimalsSortedOnesSortedSortedArraySortedArraySortedArray = decimalsSortedOnesSortedSortedArraySortedArraySorted.map(x\
    \ => [x[0], x[1]]);\n    const decimalsSortedOnesSortedSortedArraySortedArraySortedArraySorted\
    \ = decimalsSortedOnesSortedSortedArraySortedArraySortedArray.sort((a, b) => a[0]\
    \ - b[0]);\n    const decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArray\
    \ = decimalsSortedOnesSortedSortedArraySortedArraySortedArraySorted.map(x => [x[0],\
    \ x[1]]);\n    const decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArraySorted\
    \ = decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArraySorted.sort((a,\
    \ b) => a[0] - b[0]);\n    const decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArraySortedArray\
    \ = decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArraySorted.map(x\
    \ => [x[0], x[1]]);\n    const decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArraySortedArraySorted\
    \ = decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArraySortedArray.sort((a,\
    \ b) => a[0] - b[0]);\n    const decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArraySortedArraySortedArray\
    \ = decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArraySortedArraySortedArraySorted.map(x\
    \ => [x[0], x[1]]);\n    const decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArraySortedArraySortedArraySorted\
    \ = decimalsSortedOnesSortedSortedArraySortedArraySortedArraySortedArraySortedArraySorted\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp738tvsl1.ts(39,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979610
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones =\
    \ arr.filter((x) => x === 1);\n    const decimals = arr.filter((x) => x % 1 ===\
    \ 0);\n    const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedWithOnes\
    \ = decimalsSorted.concat(ones);\n    return decimalsSortedWithOnes;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n\
    \  3,\n  5\n]\n    at test (/tmp/tmp933bwbcz.js:15:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp933bwbcz.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    const ones = count_ones(a);\n    const onesB = count_ones(b);\n\
    \    if (onesB > ones) {\n      return 1;\n    }\n    if (onesB < ones) {\n  \
    \    return -1;\n    }\n    return a - b;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplwqe6gbx.ts(7,18): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmplwqe6gbx.ts(8,19): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979610
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = binToInt(a);\n        const zerosOnes = binToInt(b);\n\
    \        if (ones < zerosOnes) {\n            return -1;\n        } else if (ones\
    \ > zerosOnes) {\n            return 1;\n        } else {\n            return\
    \ 0;\n        }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1krym9r4.ts(7,22): error TS2304: Cannot find name
    ''binToInt''.

    ../../../../../tmp/tmp1krym9r4.ts(8,27): error TS2304: Cannot find name ''binToInt''.

    '
  timestamp: 1659979610
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones =\
    \ arr.reduce((acc, val) => acc + val, 0);\n    const decimals = arr.map(val =>\
    \ Math.log2(val + 1)).reduce((acc, val) => acc + val, 0);\n    return arr.sort((a,\
    \ b) => ones - b - decimals);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3uhk2zuj.ts(7,42): error TS2551: Property ''log2''
    does not exist on type ''Math''. Did you mean ''LOG2E''?

    '
  timestamp: 1659979610
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    const ones = count_ones(a);\n    const ones_b = count_ones(b);\n\
    \    if (ones_b > ones) {\n      return 1;\n    }\n    if (ones_b < ones) {\n\
    \      return -1;\n    }\n    return a - b;\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0o5sdohq.ts(7,18): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmp0o5sdohq.ts(8,20): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979610
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArr\
    \ = arr.slice();\n    sortedArr.sort((a, b) => {\n        let oneCount = 0;\n\
    \        let decCount = 0;\n        for (let i = 0; i < a.length; i++) {\n   \
    \         if (a[i] === 1) {\n                oneCount++;\n            } else {\n\
    \                decCount++;\n            }\n        }\n        if (oneCount ===\
    \ decCount) {\n            return a - b;\n        } else {\n            return\
    \ decCount - oneCount;\n        }\n    });\n    return sortedArr;\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp52f52qne.ts(10,31): error TS2339: Property ''length''
    does not exist on type ''number''.

    '
  timestamp: 1659979610
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(b);\n        const decA = count_ones(a);\n\
    \        if (decA === ones) {\n            return a - b;\n        }\n        return\
    \ decA - ones;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph9nn_fbf.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmph9nn_fbf.ts(8,22): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979610
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(b);\n        const decimal = count_decimal(b);\n\
    \        if (ones === decimal) {\n            return a - b;\n        }\n     \
    \   return ones - decimal;\n    });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnbn21gq5.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpnbn21gq5.ts(8,25): error TS2304: Cannot find name ''count_decimal''.

    '
  timestamp: 1659979610
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArr:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count\
    \ = 0;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j]\
    \ & 1) {\n                count++;\n            }\n        }\n        sortedArr.push(count);\n\
    \    }\n    sortedArr.sort((a, b) => a - b);\n    return sortedArr;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  3,\n  3,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpv96kcjn3.js:22:12)\n    at Object.<anonymous> (/tmp/tmpv96kcjn3.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 3,\
    \ 3, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979610
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones =\
    \ arr.filter(x => x === 1);\n    const decimals = arr.filter(x => x % 1 !== 0);\n\
    \    const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedOnes\
    \ = decimalsSorted.filter(x => x === 1);\n    const decimalsSortedOnesSorted =\
    \ decimalsSortedOnes.sort((a, b) => a - b);\n    const decimalsSortedOnesSortedSorted:\
    \ number[] = [];\n    for (let i = 0; i < decimalsSortedOnesSorted[0]; i++) {\n\
    \        decimalsSortedOnesSortedSorted.push(1);\n    }\n    for (let i = 0; i\
    \ < decimalsSortedOnesSortedSorted[0]; i++) {\n        decimalsSortedOnesSortedSorted.push(0);\n\
    \    }\n    for (let i = 0; i < decimalsSortedOnesSortedSorted[0]; i++) {\n  \
    \      decimalsSortedOnesSortedSorted.push(-1);\n    }\n    const sortedArray\
    \ = decimalsSortedOnesSortedSorted;\n    return sortedArray;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpwsmzhcav.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwsmzhcav.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979611
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b)\
    \ => {\n    const ones = binToInt(a);\n    const twos = binToInt(b);\n    if (ones\
    \ < twos) {\n      return -1;\n    }\n    if (ones > twos) {\n      return 1;\n\
    \    }\n    return a - b;\n  });\n  return arr;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplsvicovr.ts(7,18): error TS2304: Cannot find name
    ''binToInt''.

    ../../../../../tmp/tmplsvicovr.ts(8,18): error TS2304: Cannot find name ''binToInt''.

    '
  timestamp: 1659979612
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones =\
    \ arr.filter((x) => x === 1);\n    const decimals = arr.filter((x) => x % 1 !==\
    \ 0);\n    const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedWithOnes\
    \ = decimalsSorted.concat(ones);\n    return decimalsSortedWithOnes;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp7h6myimn.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7h6myimn.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979613
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a,\
    \ b) => {\n        const ones = count_ones(b);\n        const decimal = count_decimal(b);\n\
    \        if (ones === decimal) {\n            return a - b;\n        }\n     \
    \   return ones - decimal;\n    });\n    return arr;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvnnrugc4.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpvnnrugc4.ts(8,25): error TS2304: Cannot find name ''count_decimal''.

    '
  timestamp: 1659979612
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len < 2) {\n        return arr;\n    }\n    const ones\
    \ = arr.filter(x => x === 1);\n    const zeros = arr.filter(x => x === 0);\n \
    \   const len = ones.length;\n    if (len > 0) {\n        ones = sort_array(ones);\n\
    \    }\n    const len = zeros.length;\n    if (len > 0) {\n        zeros = sort_array(zeros);\n\
    \    }\n    const len = ones.length;\n    const ones_len = len * 8 + len * 4;\n\
    \    const zeros_len = len * 4 + len * 2;\n    const ones_arr: number[] = new\
    \ Array(ones_len);\n    const zeros_arr: number[] = new Array(zeros_len);\n  \
    \  for (let i = 0; i < ones_len; i++) {\n        ones_arr[i] = ones[i];\n    }\n\
    \    for (let i = 0; i < zeros_len; i++) {\n        zeros_arr[i] = zeros[i];\n\
    \    }\n    const ones_arr2 = ones_arr.sort((a, b) => a - b);\n    const zeros_arr2\
    \ = zeros_arr.sort((a, b) => a - b);\n    const arr2 = ones_arr2.concat(zeros_arr2);\n\
    \    return arr2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg_ds8bb3.ts(6,11): error TS2451: Cannot redeclare
    block-scoped variable ''len''.

    ../../../../../tmp/tmpg_ds8bb3.ts(12,11): error TS2451: Cannot redeclare block-scoped
    variable ''len''.

    ../../../../../tmp/tmpg_ds8bb3.ts(14,9): error TS2588: Cannot assign to ''ones''
    because it is a constant.

    ../../../../../tmp/tmpg_ds8bb3.ts(16,11): error TS2451: Cannot redeclare block-scoped
    variable ''len''.

    ../../../../../tmp/tmpg_ds8bb3.ts(18,9): error TS2588: Cannot assign to ''zeros''
    because it is a constant.

    ../../../../../tmp/tmpg_ds8bb3.ts(20,11): error TS2451: Cannot redeclare block-scoped
    variable ''len''.

    '
  timestamp: 1659979612
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(a);\n        const onesB = count_ones(b);\n\
    \        if (ones === onesB) {\n            return a - b;\n        }\n       \
    \ return ones - onesB;\n    });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmvz2jt8o.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpmvz2jt8o.ts(8,23): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979612
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    const ones = count_ones(a);\n    const twos = count_ones(b);\n\
    \    if (ones === twos) {\n      return a.localeCompare(b);\n    }\n    return\
    \ ones - twos;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk21dsnri.ts(7,18): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpk21dsnri.ts(8,18): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmpk21dsnri.ts(10,16): error TS2339: Property ''localeCompare''
    does not exist on type ''number''.

    '
  timestamp: 1659979612
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones:\
    \ number[] = [];\n    const zeros: number[] = [];\n    const decimals: number[]\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        const num = arr[i];\n\
    \        if (num === 1) {\n            ones.push(num);\n        } else if (num\
    \ === 0) {\n            zeros.push(num);\n        } else {\n            decimals.push(num);\n\
    \        }\n    }\n    ones = sort_array(ones);\n    zeros = sort_array(zeros);\n\
    \    decimals = sort_array(decimals);\n    const result: number[] = [];\n    for\
    \ (let i = 0; i < ones.length; i++) {\n        result.push(ones[i]);\n    }\n\
    \    for (let i = 0; i < zeros.length; i++) {\n        result.push(zeros[i]);\n\
    \    }\n    for (let i = 0; i < decimals.length; i++) {\n        result.push(decimals[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp25y3_0gf.ts(19,5): error TS2588: Cannot assign to
    ''ones'' because it is a constant.

    ../../../../../tmp/tmp25y3_0gf.ts(20,5): error TS2588: Cannot assign to ''zeros''
    because it is a constant.

    ../../../../../tmp/tmp25y3_0gf.ts(21,5): error TS2588: Cannot assign to ''decimals''
    because it is a constant.

    '
  timestamp: 1659979613
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n\
    \        if (ones_b > ones) {\n            return -1;\n        }\n        if (ones_b\
    \ < ones) {\n            return 1;\n        }\n        return a - b;\n    });\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgwdu5yz0.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpgwdu5yz0.ts(8,24): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979612
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[]\
    \ = [];\n    let dec: number[] = [];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        let one = arr[i];\n        if (one > 0) {\n            ones.push(one);\n\
    \        } else {\n            dec.push(one);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    dec = sort_array(dec);\n    let result = [];\n    for (let i = 0; i < ones.length;\
    \ i++) {\n        result.push(ones[i]);\n        result.push(dec[i]);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmps3yelx44.js:5\nfunction sort_array(arr) {\n                   ^\n\
    \nRangeError: Maximum call stack size exceeded\n    at sort_array (/tmp/tmps3yelx44.js:5:20)\n\
    \    at sort_array (/tmp/tmps3yelx44.js:17:12)\n    at sort_array (/tmp/tmps3yelx44.js:17:12)\n\
    \    at sort_array (/tmp/tmps3yelx44.js:17:12)\n    at sort_array (/tmp/tmps3yelx44.js:17:12)\n\
    \    at sort_array (/tmp/tmps3yelx44.js:17:12)\n    at sort_array (/tmp/tmps3yelx44.js:17:12)\n\
    \    at sort_array (/tmp/tmps3yelx44.js:17:12)\n    at sort_array (/tmp/tmps3yelx44.js:17:12)\n\
    \    at sort_array (/tmp/tmps3yelx44.js:17:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979613
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a,\
    \ b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n\
    \        if (ones > ones_b) {\n            return -1;\n        } else if (ones\
    \ < ones_b) {\n            return 1;\n        } else {\n            return count_dec(a)\
    \ - count_dec(b);\n        }\n    });\n    return arr;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps8j_y0ow.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmps8j_y0ow.ts(8,24): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmps8j_y0ow.ts(14,20): error TS2304: Cannot find name ''count_dec''.

    ../../../../../tmp/tmps8j_y0ow.ts(14,35): error TS2304: Cannot find name ''count_dec''.

    '
  timestamp: 1659979613
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones:\
    \ number[] = [];\n    const zeros: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        const num = arr[i];\n        if (num === 1) {\n            ones.push(num);\n\
    \        } else {\n            zeros.push(num);\n        }\n    }\n    const onesCount\
    \ = ones.length;\n    const zerosCount = zeros.length;\n    if (onesCount ===\
    \ zerosCount) {\n        return arr;\n    }\n    if (onesCount > zerosCount) {\n\
    \        ones.sort((a, b) => a - b);\n        return ones;\n    }\n    zeros.sort((a,\
    \ b) => a - b);\n    return zeros;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n\
    ]\n    at test (/tmp/tmplxs12_a_.js:32:12)\n    at Object.<anonymous> (/tmp/tmplxs12_a_.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4,\
    \ 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979613
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[]\
    \ = [];\n    let decimals: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 1) {\n            ones.push(arr[i]);\n      \
    \  } else {\n            decimals.push(arr[i]);\n        }\n    }\n    decimals\
    \ = decimals.sort((a, b) => a - b);\n    ones = ones.sort((a, b) => a - b);\n\
    \    return ones.concat(decimals);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp4vl88edp.js:23:12)\n    at Object.<anonymous> (/tmp/tmp4vl88edp.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979613
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b)\
    \ => {\n    if (a === 0) return -1;\n    if (b === 0) return 1;\n    const aStr\
    \ = a.toString(2);\n    const bStr = b.toString(2);\n    const aLen = aStr.length;\n\
    \    const bLen = bStr.length;\n    let aCount = 0;\n    let bCount = 0;\n   \
    \ for (let i = 0; i < aLen; i++) {\n      if (aStr[i] === '1') aCount++;\n   \
    \ }\n    for (let i = 0; i < bLen; i++) {\n      if (bStr[i] === '1') bCount++;\n\
    \    }\n    return aCount - bCount;\n  });\n  return arr;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  4,\n  5,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp4hzbdxsm.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4hzbdxsm.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 5, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979613
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray\
    \ = arr.slice();\n    sortedArray.sort((a, b) => {\n        let ones = count_ones(a);\n\
    \        let zerosOnes = count_zeros(a);\n        let zerosZeros = count_zeros(b);\n\
    \        if (ones === zerosOnes) {\n            return zerosZeros - zerosOnes;\n\
    \        }\n        return zerosZeros - zerosOnes - ones;\n    });\n    return\
    \ sortedArray;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw_3a4ala.ts(8,20): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpw_3a4ala.ts(9,25): error TS2304: Cannot find name ''count_zeros''.

    ../../../../../tmp/tmpw_3a4ala.ts(10,26): error TS2304: Cannot find name ''count_zeros''.

    '
  timestamp: 1659979613
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a,\
    \ b) => {\n        const ones = count_ones(b);\n        const ones_b = count_ones(a);\n\
    \        if (ones_b < ones) {\n            return -1;\n        }\n        if (ones_b\
    \ > ones) {\n            return 1;\n        }\n        return a - b;\n    });\n\
    \    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0dzloa9h.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmp0dzloa9h.ts(8,24): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979613
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[]\
    \ = [];\n    let decimals: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 1) {\n            ones.push(i);\n        } else\
    \ {\n            decimals.push(arr[i]);\n        }\n    }\n    decimals.sort((a,\
    \ b) => a - b);\n    ones = ones.sort((a, b) => a - b);\n    let result: number[]\
    \ = [];\n    for (let i = 0; i < ones.length; i++) {\n        result.push(arr[ones[i]]);\n\
    \    }\n    for (let i = 0; i < decimals.length; i++) {\n        result.push(decimals[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpm5thflad.js:30:12)\n    at Object.<anonymous> (/tmp/tmpm5thflad.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979613
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        if (a === b) {\n            return 0;\n        }\n        const\
    \ aStr = a.toString(2);\n        const bStr = b.toString(2);\n        const aLen\
    \ = aStr.length;\n        const bLen = bStr.length;\n        if (aLen === bLen)\
    \ {\n            return aStr.localeCompare(bStr);\n        }\n        return aLen\
    \ - bLen;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp32p_11l8.js:23:12)\n    at Object.<anonymous> (/tmp/tmp32p_11l8.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979613
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = binToInt(a);\n        const twos = binToInt(b);\n\
    \        if (ones < twos) {\n            return -1;\n        } else if (ones >\
    \ twos) {\n            return 1;\n        } else {\n            return 0;\n  \
    \      }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjpk33g5z.ts(7,22): error TS2304: Cannot find name
    ''binToInt''.

    ../../../../../tmp/tmpjpk33g5z.ts(8,22): error TS2304: Cannot find name ''binToInt''.

    '
  timestamp: 1659979613
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones =\
    \ arr.filter(n => n & 1);\n    const decimals = arr.filter(n => !(n&1));\n   \
    \ const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedWithOnes\
    \ = decimalsSorted.concat(ones);\n    const decimalsSortedWithOnesSorted = decimalsSortedWithOnes.sort((a,\
    \ b) => a - b);\n    return decimalsSortedWithOnesSorted;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp1wfnklm2.js:16:12)\n    at Object.<anonymous> (/tmp/tmp1wfnklm2.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979613
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = binToInt(a);\n        const twos = binToInt(b);\n\
    \        if (ones === twos) {\n            return a - b;\n        }\n        return\
    \ ones - twos;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptdgpdjdr.ts(7,22): error TS2304: Cannot find name
    ''binToInt''.

    ../../../../../tmp/tmptdgpdjdr.ts(8,22): error TS2304: Cannot find name ''binToInt''.

    '
  timestamp: 1659979613
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b)\
    \ => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return\
    \ 1;\n    }\n    return -1;\n  });\n  return arr;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmprfcixx8j.js:20:12)\n    at Object.<anonymous> (/tmp/tmprfcixx8j.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979613
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sorted:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        sorted.push(arr[i]);\n\
    \    }\n    sorted = sorted.sort((a, b) => {\n        if (a.toString(2).length\
    \ <= b.toString(2).length) {\n            return -1;\n        }\n        if (a.toString(2).length\
    \ >= b.toString(2).length) {\n            return 1;\n        }\n        return\
    \ a.toString(2).localeCompare(b.toString(2));\n    });\n    return sorted;\n}\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  2,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpwh_71k2y.js:24:12)\n    at Object.<anonymous> (/tmp/tmpwh_71k2y.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 2,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979613
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    const ones = arr.filter((x) => x === 1);\n    const decs =\
    \ arr.filter((x) => x % 1 === 0);\n    const decLen = decs.length;\n    const\
    \ decOnes = decs.filter((x) => x === 1);\n    const decOnesLen = decOnes.length;\n\
    \    if (decLen === 0 || decOnesLen === 0) {\n        return ones;\n    }\n  \
    \  const decOnesSum = decOnes.reduce((a, b) => a + b, 0);\n    const decSum =\
    \ decs.reduce((a, b) => a + b, 0);\n    const decOnesSumAbs = Math.abs(decOnesSum);\n\
    \    const decSumAbs = Math.abs(decSum);\n    const decOnesSumAbsDiff = Math.abs(decOnesSum\
    \ - decSum);\n    const decOnesSumAbsDiffAbs = Math.abs(decOnesSumAbsDiff);\n\
    \    const decOnesSumAbsDiffAbsDiff = Math.abs(decOnesSumAbsDiffAbs);\n    const\
    \ decOnesSumAbsDiffAbsDiffAbs = Math.abs(decOnesSumAbsDiffAbsDiff);\n    const\
    \ decOnesSumAbsDiffAbsDiffAbsDiff = Math.abs(decOnesSumAbsDiffAbsDiffAbs);\n \
    \   const decOnesSumAbsDiffAbsDiffAbsDiffAbs = Math.abs(decOnesSumAbsDiffAbsDiffAbsDiff);\n\
    \    const decOnesSumAbsDiffAbsDiffAbsDiffAbsDiff = Math.abs(decOnesSumAbsDiffAbsDiffAbsDiffAbs);\n\
    \    const decOnesSumAbsDiffAbsDiffAbsDiffAbsDiffAbs = Math.abs(decOnesSumAbsDiffAbsDiffAbsDiffAbsDiff);\n\
    \    const decOnesSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = Math.abs(decOnesSumAbsDiffAbsDiffAbsDiffAbsDiffAbs);\n\
    \    const decOnesSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = Math.abs(decOnesSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff);\n\
    \    const decOnesSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = Math.abs(decOnesSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs);\n\
    \    const decOnesSumAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAb\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpptsbs1k4.ts(47,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979613
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  const ones = arr.filter(x\
    \ => x === 1);\n  const decimals = arr.filter(x => x % 1 !== 0);\n  return decimals.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpb_lti_ku.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmpb_lti_ku.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979615
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones =\
    \ arr.reduce((acc, x) => acc + (x ? 1 : 0), 0);\n    const decimals = arr.map(x\
    \ => x ? Math.log(x) / Math.LN2 : 0);\n    return decimals.map(x => Math.round(x\
    \ * ones));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  12,\n\
    \  5,\n  8,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp_sodom6u.js:13:12)\n    at Object.<anonymous> (/tmp/tmp_sodom6u.js:22:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 12, 5,\
    \ 8, 10 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979615
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones =\
    \ arr.filter(n => n & 1);\n    const decimals = arr.filter(n => !(n&1));\n   \
    \ const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedWithOnes\
    \ = decimalsSorted.concat(ones);\n    return decimalsSortedWithOnes;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4,\n\
    \  1,\n  5,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmphxwiurq_.js:15:12)\n    at Object.<anonymous> (/tmp/tmphxwiurq_.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 1,\
    \ 5, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979615
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    const ones = count_ones(a);\n    const onesB = count_ones(b);\n\
    \    if (ones === onesB) {\n      return a - b;\n    }\n    return ones - onesB;\n\
    \  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdjws9o3r.ts(7,18): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpdjws9o3r.ts(8,19): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979615
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len < 2) {\n        return arr;\n    }\n    const ones\
    \ = arr.filter((x) => x === 1);\n    const len = ones.length;\n    if (len ===\
    \ 0) {\n        return arr;\n    }\n    const maxOnes = Math.ceil(Math.log2(len));\n\
    \    const maxDec = Math.pow(10, maxOnes);\n    const maxDecStr = maxDec.toString();\n\
    \    const decStr = ones\n        .map((x) => maxDecStr.substring(0, maxDecStr.length\
    \ - x.length))\n        .join('');\n    const decArr = decStr.split('');\n   \
    \ const decArr = decArr.map((x) => parseInt(x, 10));\n    const decArr = decArr.sort((a,\
    \ b) => a - b);\n    const decArr = decArr.map((x) => x * Math.pow(10, maxOnes\
    \ - decArr.indexOf(x)));\n    const decArr = decArr.map((x) => Math.ceil(x));\n\
    \    const decArr = decArr.map((x) => Math.max(x, 0));\n    const decArr = decArr.map((x)\
    \ => Math.min(x, len - 1));\n    const decArr = decArr.map((x) => arr[x]);\n \
    \   return decArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm_w1213d.ts(6,11): error TS2451: Cannot redeclare
    block-scoped variable ''len''.

    ../../../../../tmp/tmpm_w1213d.ts(11,11): error TS2451: Cannot redeclare block-scoped
    variable ''len''.

    ../../../../../tmp/tmpm_w1213d.ts(15,36): error TS2551: Property ''log2'' does
    not exist on type ''Math''. Did you mean ''LOG2E''?

    ../../../../../tmp/tmpm_w1213d.ts(19,65): error TS2339: Property ''length'' does
    not exist on type ''number''.

    ../../../../../tmp/tmpm_w1213d.ts(21,11): error TS2451: Cannot redeclare block-scoped
    variable ''decArr''.

    ../../../../../tmp/tmpm_w1213d.ts(22,11): error TS2451: Cannot redeclare block-scoped
    variable ''decArr''.

    ../../../../../tmp/tmpm_w1213d.ts(23,11): error TS2451: Cannot redeclare block-scoped
    variable ''decArr''.

    ../../../../../tmp/tmpm_w1213d.ts(23,42): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpm_w1213d.ts(23,46): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpm_w1213d.ts(24,11): error TS2451: Cannot redeclare block-scoped
    variable ''decArr''.

    ../../../../../tmp/tmpm_w1213d.ts(24,38): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpm_w1213d.ts(25,11): error TS2451: Cannot redeclare block-scoped
    variable ''decArr''.

    ../../../../../tmp/tmpm_w1213d.ts(25,48): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpm_w1213d.ts(26,11): error TS2451: Cannot redeclare block-scoped
    variable ''decArr''.

    ../../../../../tmp/tmpm_w1213d.ts(26,47): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpm_w1213d.ts(27,11): error TS2451: Cannot redeclare block-scoped
    variable ''decArr''.

    ../../../../../tmp/tmpm_w1213d.ts(27,47): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    .'
  timestamp: 1659979615
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray\
    \ = arr.slice();\n    sortedArray.sort((a, b) => {\n        let aNum = parseInt(a.toString(2),\
    \ 2);\n        let bNum = parseInt(b.toString(2), 2);\n        return aNum - bNum;\n\
    \    });\n    return sortedArray;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpwi6kbwx0.js:17:12)\n    at Object.<anonymous> (/tmp/tmpwi6kbwx0.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979615
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n\
    \        if (ones_b > ones) {\n            return -1;\n        }\n        if (ones_b\
    \ < ones) {\n            return 1;\n        }\n        return a - b;\n    });\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgwdu5yz0.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpgwdu5yz0.ts(8,24): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979612
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len < 2) {\n        return arr;\n    }\n    const ones\
    \ = arr.reduce((acc, val) => acc + val, 0);\n    const decimals = arr.reduce((acc,\
    \ val) => acc + Math.pow(val, 2), 0);\n    const decimalsArr = decimals.toString(2).split('');\n\
    \    const decimalsArrLen = decimalsArr.length;\n    const decimalsArrMax = Math.max(...decimalsArr);\n\
    \    const decimalsArrMin = Math.min(...decimalsArr);\n    const decimalsArrSum\
    \ = decimalsArr.reduce((acc, val) => acc + val, 0);\n    const decimalsArrSumArr\
    \ = decimalsArrSum.toString(2).split('');\n    const decimalsArrSumArrLen = decimalsArrSumArr.length;\n\
    \    const decimalsArrSumArrMax = Math.max(...decimalsArrSumArr);\n    const decimalsArrSumArrMin\
    \ = Math.min(...decimalsArrSumArr);\n    const decimalsArrSumArrSum = decimalsArrSumArr.reduce((acc,\
    \ val) => acc + val, 0);\n    const decimalsArrSumArrSumArr = decimalsArrSumArrSum.toString(2).split('');\n\
    \    const decimalsArrSumArrSumArrLen = decimalsArrSumArrSumArr.length;\n    const\
    \ decimalsArrSumArrSumArrMax = Math.max(...decimalsArrSumArrSumArr);\n    const\
    \ decimalsArrSumArrSumArrMin = Math.min(...decimalsArrSumArrSumArr);\n    const\
    \ decimalsArrSumArrSumArrSum = decimalsArrSumArrSumArr.reduce((acc, val) => acc\
    \ + val, 0);\n    const decimalsArrSumArrSumArrSumArr = decimalsArrSumArrSumArrSum.toString(2).split('');\n\
    \    const decimalsArrSumArrSumArrSumArrLen = decimalsArrSumArrSumArrSumArr.length;\n\
    \    const decimalsArrSumArrSumArrSumArrMax = Math.max(...decimalsArrSumArrSumArrSumArr);\n\
    \    const decimalsArrSumArrSumArrSumArrMin = Math.min(...decimalsArrSumArrSumArrSumArr);\n\
    \    const decimalsArrSumArrSumArrSumArrSum = decimalsArrSumArrSumArrSumArr.reduce((acc,\
    \ val) => acc + val, 0);\n    const decimalsArrSumArrSumArrSumArrSumArr = decimalsArrSumArrSumArrSumArrSum.toString(2).split('');\n\
    \    const decimalsArrSumArrSumArrSumArrSumArrLen = decimalsArrSumArrSumArrSumArrSumArr.length;\n\
    \    const decimals\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph50h5mdy.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979615
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray\
    \ = arr.slice();\n    sortedArray.sort((a, b) => {\n        let aNum = parseInt(a.toString(2));\n\
    \        let bNum = parseInt(b.toString(2));\n        return aNum - bNum;\n  \
    \  });\n    return sortedArray;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp5w_awir7.js:17:12)\n    at Object.<anonymous> (/tmp/tmp5w_awir7.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979615
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones =\
    \ arr.filter(n => n & 1);\n    const decimals = arr.filter(n => !(n&1));\n   \
    \ const decimalsSorted = decimals.sort((a, b) => a - b);\n    const onesSorted\
    \ = ones.sort((a, b) => a - b);\n    return onesSorted.concat(decimalsSorted);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  5,\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp67n1iafo.js:15:12)\n    at Object.<anonymous> (/tmp/tmp67n1iafo.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 5,\
    \ 2, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979615
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len < 2) return arr;\n    const ones = arr.reduce((acc,\
    \ val) => acc + val, 0);\n    const decimal = ones / Math.pow(2, len - 1);\n \
    \   return arr.sort((a, b) => a - b * decimal);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpgh2cr12h.js:16:12)\n    at Object.<anonymous> (/tmp/tmpgh2cr12h.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979615
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sorted:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count\
    \ = 0;\n        for (let j = 0; j < arr[i].length; j++) {\n            if (arr[i][j]\
    \ === 1) {\n                count++;\n            }\n        }\n        if (count\
    \ === 0) {\n            sorted.push(arr[i]);\n        }\n    }\n    for (let i\
    \ = 0; i < sorted.length; i++) {\n        let count = 0;\n        for (let j =\
    \ 0; j < sorted[i].length; j++) {\n            if (sorted[i][j] === 1) {\n   \
    \             count++;\n            }\n        }\n        if (count === 0) {\n\
    \            sorted.splice(i, 1);\n            i--;\n        }\n    }\n    return\
    \ sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppfd7l890.ts(9,36): error TS2339: Property ''length''
    does not exist on type ''number''.

    ../../../../../tmp/tmppfd7l890.ts(20,39): error TS2339: Property ''length'' does
    not exist on type ''number''.

    '
  timestamp: 1659979615
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    const ones = binToInt(a);\n    const twos = binToInt(b);\n    if\
    \ (ones < twos) {\n      return -1;\n    }\n    if (ones > twos) {\n      return\
    \ 1;\n    }\n    return a - b;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1n0lrh76.ts(7,18): error TS2304: Cannot find name
    ''binToInt''.

    ../../../../../tmp/tmp1n0lrh76.ts(8,18): error TS2304: Cannot find name ''binToInt''.

    '
  timestamp: 1659979615
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[]\
    \ = [];\n    let dec: number[] = [];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        let one = arr[i];\n        if (one > 0) {\n            ones.push(one);\n\
    \        } else {\n            dec.push(one);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    dec = sort_array(dec);\n    return dec.concat(ones);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp78sy8ugq.js:5\nfunction sort_array(arr) {\n                   ^\n\
    \nRangeError: Maximum call stack size exceeded\n    at sort_array (/tmp/tmp78sy8ugq.js:5:20)\n\
    \    at sort_array (/tmp/tmp78sy8ugq.js:17:12)\n    at sort_array (/tmp/tmp78sy8ugq.js:17:12)\n\
    \    at sort_array (/tmp/tmp78sy8ugq.js:17:12)\n    at sort_array (/tmp/tmp78sy8ugq.js:17:12)\n\
    \    at sort_array (/tmp/tmp78sy8ugq.js:17:12)\n    at sort_array (/tmp/tmp78sy8ugq.js:17:12)\n\
    \    at sort_array (/tmp/tmp78sy8ugq.js:17:12)\n    at sort_array (/tmp/tmp78sy8ugq.js:17:12)\n\
    \    at sort_array (/tmp/tmp78sy8ugq.js:17:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979615
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArr:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let ones\
    \ = arr[i];\n        let decimal = ones * Math.pow(10, arr.length - i - 1);\n\
    \        sortedArr.push(decimal);\n    }\n    sortedArr.sort((a, b) => a - b);\n\
    \    return sortedArr;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu3duzd56.ts(15,2): error TS1110: Type expected.

    ../../../../../tmp/tmpu3duzd56.ts(15,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpu3duzd56.ts(16,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpu3duzd56.ts(16,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpu3duzd56.ts(17,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpu3duzd56.ts(17,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpu3duzd56.ts(17,16): error TS1109: Expression expected.

    ../../../../../tmp/tmpu3duzd56.ts(19,9): error TS1005: '';'' expected.

    '
  timestamp: 1659979615
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a,\
    \ b) => {\n        if (a.toString(2).length !== b.toString(2).length) {\n    \
    \        return a.toString(2).length - b.toString(2).length;\n        }\n    \
    \    return a > b ? 1 : -1;\n    });\n    return arr;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpo0v1chdi.js:17:12)\n    at Object.<anonymous> (/tmp/tmpo0v1chdi.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979616
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones\
    \ = arr.reduce((acc, x) => acc + (x === 1 ? 1 : 0), 0);\n    const tens = arr.reduce((acc,\
    \ x) => acc + (x === 10 ? 1 : 0), 0);\n    const hundreds = arr.reduce((acc, x)\
    \ => acc + (x === 100 ? 1 : 0), 0);\n    const thousands = arr.reduce((acc, x)\
    \ => acc + (x === 1000 ? 1 : 0), 0);\n    const tenThousands = arr.reduce((acc,\
    \ x) => acc + (x === 10000 ? 1 : 0), 0);\n    const oneThousands = arr.reduce((acc,\
    \ x) => acc + (x === 100000 ? 1 : 0), 0);\n    const tenMillions = arr.reduce((acc,\
    \ x) => acc + (x === 1000000 ? 1 : 0), 0);\n    const oneMillions = arr.reduce((acc,\
    \ x) => acc + (x === 10000000 ? 1 : 0), 0);\n    const tenBillions = arr.reduce((acc,\
    \ x) => acc + (x === 100000000 ? 1 : 0), 0);\n    const oneBillions = arr.reduce((acc,\
    \ x) => acc + (x === 1000000000 ? 1 : 0), 0);\n    const tenTrillions = arr.reduce((acc,\
    \ x) => acc + (x === 10000000000 ? 1 : 0), 0);\n    const oneTrillions = arr.reduce((acc,\
    \ x) => acc + (x === 100000000000 ? 1 : 0), 0);\n    const tenQuadrillions = arr.reduce((acc,\
    \ x) => acc + (x === 1000000000000 ? 1 : 0), 0);\n    const oneQuadrillions =\
    \ arr.reduce((acc, x) => acc + (x === 10000000000000 ? 1 : 0), 0);\n    const\
    \ tenQuintillions = arr.reduce((acc, x) => acc + (x === 100000000000000 ? 1 :\
    \ 0), 0);\n    const oneQuintillions = arr.reduce((acc, x) => acc + (x === 1000000000000000\
    \ ? 1 : 0), 0);\n    const tenSextillions = arr.reduce((acc, x) => acc + (x ===\
    \ 10000000000000000 ? 1 : 0), 0);\n    const oneSextillions = arr.reduce((acc,\
    \ x) => acc + (x === 100000000000000000 ? 1 : 0), 0);\n    const tenSeptillions\
    \ = arr.reduce((acc, x) => acc + (x === 100000000000000000 ? 1 : 0), 0);\n   \
    \ const oneSeptillions = arr.reduce((acc, x) => acc + (x === 1000000000000000010\
    \ ? 1 : 0), 0);\n    const tenOctillions = arr.reduce((acc, x) => acc + (x ===\
    \ \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl9y20op3.ts(31,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpl9y20op3.ts(47,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979615
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[]\
    \ = [];\n    let decimals: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        let ones_count = arr[i] & 1;\n        ones.push(ones_count);\n\
    \        decimals.push(arr[i] / ones_count);\n    }\n    decimals.sort((a, b)\
    \ => a - b);\n    ones = ones.sort((a, b) => a - b);\n    let result: number[]\
    \ = [];\n    for (let i = 0; i < ones.length; i++) {\n        result.push(decimals[i]\
    \ * ones[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  5,\n  Infinity,\n  Infinity\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n\
    \  4,\n  3,\n  5\n]\n    at test (/tmp/tmpwkh62906.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwkh62906.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 5,\
    \ Infinity, Infinity ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979615
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray\
    \ = arr.slice();\n    sortedArray.sort((a, b) => {\n        let aOnes = count_ones(a);\n\
    \        let bOnes = count_ones(b);\n        if (aOnes === bOnes) {\n        \
    \    return a - b;\n        }\n        return aOnes - bOnes;\n    });\n    return\
    \ sortedArray;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp45aa7at5.ts(8,21): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmp45aa7at5.ts(9,21): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979615
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a,\
    \ b) => {\n        const ones = count_ones(b);\n        const decA = count_decA(a);\n\
    \        const decB = count_decB(b);\n        if (decA === decB) {\n         \
    \   return decA - decB;\n        }\n        return decA - decB || decB - decA;\n\
    \    });\n    return arr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi45ysrjy.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpi45ysrjy.ts(8,22): error TS2304: Cannot find name ''count_decA''.

    ../../../../../tmp/tmpi45ysrjy.ts(9,22): error TS2304: Cannot find name ''count_decB''.

    '
  timestamp: 1659979615
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones =\
    \ arr.reduce((acc, x) => acc + (x === 1 ? 1 : 0), 0);\n    const decimal = arr.reduce((acc,\
    \ x) => acc + (x === 1 ? 0 : 1), 0);\n    return arr.sort((a, b) => decimal.localeCompare(ones,\
    \ a, b));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwbp2aemw.ts(8,39): error TS2339: Property ''localeCompare''
    does not exist on type ''number''.

    '
  timestamp: 1659979615
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones\
    \ = arr.reduce((acc, val) => acc + (val & 1), 0);\n    const decimals = len *\
    \ 8 - ones;\n    if (decimals <= 0) {\n        return arr;\n    }\n    const decimalPower\
    \ = Math.pow(10, decimals);\n    const decimalSum = arr.reduce((acc, val) => acc\
    \ + val * decimalPower, 0);\n    const decimalSumPower = Math.pow(10, decimalSum);\n\
    \    const decimalSumPowerFloor = Math.floor(decimalSumPower);\n    const decimalSumPowerFloorFloor\
    \ = Math.floor(decimalSumPowerFloor);\n    const decimalSumPowerFloorFloorFloor\
    \ = Math.floor(decimalSumPowerFloorFloor);\n    const decimalSumPowerFloorFloorFloorFloor\
    \ = Math.floor(decimalSumPowerFloorFloorFloor);\n    const decimalSumPowerFloorFloorFloorFloorFloor\
    \ = Math.floor(decimalSumPowerFloorFloorFloorFloorFloor);\n    const decimalSumPowerFloorFloorFloorFloorFloorFloor\
    \ = Math.floor(decimalSumPowerFloorFloorFloorFloorFloorFloor);\n    const decimalSumPowerFloorFloorFloorFloorFloorFloorFloor\
    \ = Math.floor(decimalSumPowerFloorFloorFloorFloorFloorFloorFloor);\n    const\
    \ decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloor);\n\
    \    const decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloor = Math.floor(decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n\
    \    const decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor =\
    \ Math.floor(decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n\
    \    const decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor\
    \ = Math.floor(decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n\
    \    const decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor\
    \ = Math.floor(decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n\
    \    const decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor\
    \ = Math.floor(decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n\
    \    const decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor\
    \ = Math.floor(decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n\
    \    const decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor\
    \ = Math.floor(decimalSumPowerFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloorFloor);\n\
    \    const decimalSum\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8gp3di9z.ts(50,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979616
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones =\
    \ arr.filter(x => x === 1);\n    const decimals = arr.filter(x => x % 1 !== 0);\n\
    \    const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedWithOnes\
    \ = decimalsSorted.concat(ones);\n    return decimalsSortedWithOnes;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpdneozm23.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdneozm23.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979608
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones\
    \ = arr.filter(x => x === 1);\n    if (ones.length === 0) {\n        return arr;\n\
    \    }\n    const sorted = [];\n    let max = 0;\n    for (let i = 0; i < len;\
    \ i++) {\n        const one = ones[i];\n        const index = arr.indexOf(one);\n\
    \        if (index === -1) {\n            throw new Error(`Cannot find ${one}\
    \ in ${arr}`);\n        }\n        const val = arr[index];\n        if (val >\
    \ max) {\n            max = val;\n        }\n        sorted.push(val);\n    }\n\
    \    for (let i = 0; i < len; i++) {\n        const one = ones[i];\n        const\
    \ index = arr.indexOf(one);\n        if (index === -1) {\n            throw new\
    \ Error(`Cannot find ${one} in ${arr}`);\n        }\n        const val = arr[index];\n\
    \        if (val > max) {\n            max = val;\n        }\n        sorted.push(val);\n\
    \    }\n    for (let i = 0; i < len; i++) {\n        const one = ones[i];\n  \
    \      const index = arr.indexOf(one);\n        if (index === -1) {\n        \
    \    throw new Error(`Cannot find ${one} in ${arr}`);\n        }\n        const\
    \ val = arr[index];\n        if (val > max) {\n            max = val;\n      \
    \  }\n        sorted.push(val);\n    }\n    return sorted;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp2w2lel96.js:20\n            throw new Error(\"Cannot find \" +\
    \ one + \" in \" + arr);\n            ^\n\nError: Cannot find undefined in 1,5,2,3,4\n\
    \    at sort_array (/tmp/tmp2w2lel96.js:20:19)\n    at test (/tmp/tmp2w2lel96.js:57:22)\n\
    \    at Object.<anonymous> (/tmp/tmp2w2lel96.js:66:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979616
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(a);\n        const onesB = count_ones(b);\n\
    \        if (onesB > ones) {\n            return -1;\n        }\n        if (onesB\
    \ < ones) {\n            return 1;\n        }\n        return a - b;\n    });\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3zxn6x1d.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmp3zxn6x1d.ts(8,23): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979616
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = binToInt(a);\n        const twos = binToInt(b);\n\
    \        if (ones < twos) {\n            return -1;\n        }\n        if (ones\
    \ > twos) {\n            return 1;\n        }\n        return 0;\n    });\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0rz0r1ja.ts(7,22): error TS2304: Cannot find name
    ''binToInt''.

    ../../../../../tmp/tmp0rz0r1ja.ts(8,22): error TS2304: Cannot find name ''binToInt''.

    '
  timestamp: 1659979617
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n\
    \        if (ones === ones_b) {\n            return a - b;\n        }\n      \
    \  return ones - ones_b;\n    });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppdntiui9.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmppdntiui9.ts(8,24): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979608
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray\
    \ = arr.slice();\n    sortedArray.sort((a, b) => {\n        let ones = count_ones(a);\n\
    \        let decimal = count_decimal(a);\n        if (ones < decimal) {\n    \
    \        return -1;\n        }\n        if (ones > decimal) {\n            return\
    \ 1;\n        }\n        return 0;\n    });\n    return sortedArray;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmow5mcjv.ts(8,20): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpmow5mcjv.ts(9,23): error TS2304: Cannot find name ''count_decimal''.

    '
  timestamp: 1659979617
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(b);\n        const decimal = count_decimal(b);\n\
    \        if (ones === decimal) {\n            return a - b;\n        }\n     \
    \   return ones - decimal;\n    });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnbn21gq5.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpnbn21gq5.ts(8,25): error TS2304: Cannot find name ''count_decimal''.

    '
  timestamp: 1659979610
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sorted:\
    \ number[] = [];\n    let ones: number[] = [];\n    let decimals: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        let ones_count = arr[i] &\
    \ 1;\n        decimals.push(arr[i] / Math.pow(2, ones_count));\n        ones.push(ones_count);\n\
    \    }\n    decimals = decimals.sort((a, b) => a - b);\n    ones = ones.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < ones.length; i++) {\n        sorted.push(decimals[i]\
    \ * Math.pow(2, ones[i]));\n    }\n    return sorted;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.5,\n  1.5,\n\
    \  4,\n  5,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpzjc94aui.js:24:12)\n    at Object.<anonymous> (/tmp/tmpzjc94aui.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.5, 1.5,\
    \ 4, 5, 8 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979617
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[]\
    \ = [];\n    let dec: number[] = [];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        let bin = bin(arr[i]);\n        let index = bin.indexOf(\"1\");\n\
    \        if (index > -1) {\n            ones.push(arr[i]);\n        } else {\n\
    \            dec.push(arr[i]);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    dec = sort_array(dec);\n    let result: number[] = [];\n    for (let i =\
    \ 0; i < ones.length; i++) {\n        result.push(ones[i]);\n    }\n    for (let\
    \ i = 0; i < dec.length; i++) {\n        result.push(dec[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp59llb7j8.ts(9,19): error TS2448: Block-scoped variable
    ''bin'' used before its declaration.

    '
  timestamp: 1659979617
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.filter((x) => x\
    \ === 1);\n  const decs = arr.map((x) => parseInt(x.toString(10), 10));\n  const\
    \ sorted = [...ones, ...decs].sort((a, b) => a - b);\n  return sorted.map((x)\
    \ => x / Math.pow(2, len));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.03125,\n\
    \  0.03125,\n  0.0625,\n  0.09375,\n  0.125,\n  0.15625\n]\n\nshould loosely deep-equal\n\
    \n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpmri64r07.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmri64r07.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.03125,\
    \ 0.03125, 0.0625, 0.09375, 0.125, 0.15625 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979617
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n\
    \        if (ones_b > ones) {\n            return -1;\n        }\n        if (ones_b\
    \ < ones) {\n            return 1;\n        }\n        return a - b;\n    });\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgwdu5yz0.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpgwdu5yz0.ts(8,24): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979612
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a,\
    \ b) => {\n        if (a === b) {\n            return 0;\n        }\n        const\
    \ ones = count_ones(a);\n        const ones_b = count_ones(b);\n        if (ones\
    \ === ones_b) {\n            return a < b ? -1 : 1;\n        }\n        return\
    \ ones - ones_b;\n    });\n    return arr;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2_56gni2.ts(10,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmp2_56gni2.ts(11,24): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979617
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = binToInt(a);\n        const twos = binToInt(b);\n\
    \        if (ones < twos) {\n            return -1;\n        }\n        if (ones\
    \ > twos) {\n            return 1;\n        }\n        return 0;\n    });\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0rz0r1ja.ts(7,22): error TS2304: Cannot find name
    ''binToInt''.

    ../../../../../tmp/tmp0rz0r1ja.ts(8,22): error TS2304: Cannot find name ''binToInt''.

    '
  timestamp: 1659979617
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[]\
    \ = [];\n    let decimals: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 1) {\n            ones.push(i);\n        } else\
    \ {\n            decimals.push(arr[i]);\n        }\n    }\n    decimals = decimals.sort((a,\
    \ b) => a - b);\n    ones = ones.sort((a, b) => a - b);\n    let result: number[]\
    \ = [];\n    for (let i = 0; i < ones.length; i++) {\n        result.push(arr[ones[i]]);\n\
    \    }\n    for (let i = 0; i < decimals.length; i++) {\n        result.push(decimals[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpo_xely7g.js:30:12)\n    at Object.<anonymous> (/tmp/tmpo_xely7g.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979618
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sorted:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count\
    \ = 0;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j]\
    \ == 1) {\n                count++;\n            }\n        }\n        sorted.push(count);\n\
    \    }\n    sorted.sort((a, b) => a - b);\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        arr[i] = sorted[i];\n    }\n    return arr;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  1,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp5tsf3ram.js:25:12)\n    at Object.<anonymous> (/tmp/tmp5tsf3ram.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 1,\
    \ 1, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979618
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArr:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let ones\
    \ = arr[i] & 1;\n        let decimal = arr[i] >> 1;\n        if (ones > 0) {\n\
    \            sortedArr.push(decimal);\n        } else {\n            sortedArr.push(decimal\
    \ * -1);\n        }\n    }\n    return sortedArr.sort((a, b) => a - b);\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -2,\n  -1,\n\
    \  0,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp2qvd8cir.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2qvd8cir.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -2, -1,\
    \ 0, 1, 2 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979618
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let ones: number[]\
    \ = [];\n    let zeros: number[] = [];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] === 1) {\n            ones.push(arr[i]);\n        } else\
    \ {\n            zeros.push(arr[i]);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    zeros = sort_array(zeros);\n    return ones.concat(zeros);\n}\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpa7w3k2m9.js:10\n            ones.push(arr[i]);\n              \
    \   ^\n\nRangeError: Maximum call stack size exceeded\n    at Array.push (<anonymous>)\n\
    \    at sort_array (/tmp/tmpa7w3k2m9.js:10:18)\n    at sort_array (/tmp/tmpa7w3k2m9.js:16:12)\n\
    \    at sort_array (/tmp/tmpa7w3k2m9.js:16:12)\n    at sort_array (/tmp/tmpa7w3k2m9.js:16:12)\n\
    \    at sort_array (/tmp/tmpa7w3k2m9.js:16:12)\n    at sort_array (/tmp/tmpa7w3k2m9.js:16:12)\n\
    \    at sort_array (/tmp/tmpa7w3k2m9.js:16:12)\n    at sort_array (/tmp/tmpa7w3k2m9.js:16:12)\n\
    \    at sort_array (/tmp/tmpa7w3k2m9.js:16:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979618
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n\
    \        if (ones_b > ones) {\n            return -1;\n        }\n        if (ones_b\
    \ < ones) {\n            return 1;\n        }\n        return a - b;\n    });\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp17o_3f8v.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmp17o_3f8v.ts(8,24): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979617
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones:\
    \ number[] = [];\n    const zeros: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 1) {\n            ones.push(arr[i]);\n      \
    \  } else {\n            zeros.push(arr[i]);\n        }\n    }\n    const onesCount\
    \ = ones.length;\n    const zerosCount = zeros.length;\n    if (onesCount ===\
    \ zerosCount) {\n        return ones;\n    }\n    if (onesCount > zerosCount)\
    \ {\n        return ones;\n    }\n    return zeros;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n\
    ]\n    at test (/tmp/tmpy_7ebsas.js:29:12)\n    at Object.<anonymous> (/tmp/tmpy_7ebsas.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 2, 3,\
    \ 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979618
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        if (a === b) {\n            return 0;\n        }\n        if\
    \ (a > b) {\n            return 1;\n        }\n        return -1;\n    });\n}\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmptclmcc_g.js:19:12)\n    at Object.<anonymous> (/tmp/tmptclmcc_g.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979618
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let result:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count\
    \ = 0;\n        let curr = arr[i];\n        while (curr) {\n            count\
    \ += curr & 1;\n            curr >>= 1;\n        }\n        result.push(count);\n\
    \    }\n    result.sort((a, b) => a - b);\n    for (let i = 0; i < result.length;\
    \ i++) {\n        result[i] = result[i] / Math.pow(2, i);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  0.5,\n\
    \  0.25,\n  0.25,\n  0.125\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n\
    \  4,\n  3,\n  5\n]\n    at test (/tmp/tmp0u5p9ib9.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0u5p9ib9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 0.5,\
    \ 0.25, 0.25, 0.125 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979618
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  const map = new\
    \ Map();\n  for (let i = 0; i < arr.length; i++) {\n    const bin = arr[i].toString(2).padStart(32,\
    \ '0');\n    const count = map.get(bin) || 0;\n    map.set(bin, count + 1);\n\
    \  }\n  const sortedArray = Array.from(map.keys()).sort((a, b) => map.get(b) -\
    \ map.get(a));\n  return sortedArray.map(i => parseInt(i, 2));\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5wdwybai.ts(6,19): error TS2552: Cannot find name
    ''Map''. Did you mean ''map''?

    ../../../../../tmp/tmp5wdwybai.ts(8,36): error TS2339: Property ''padStart'' does
    not exist on type ''string''.

    ../../../../../tmp/tmp5wdwybai.ts(12,29): error TS2339: Property ''from'' does
    not exist on type ''ArrayConstructor''.

    '
  timestamp: 1659979618
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sorted:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let ones\
    \ = arr[i] % 2;\n        sorted.push(ones);\n        arr[i] /= 2;\n    }\n   \
    \ sorted.sort((a, b) => a - b);\n    for (let i = 0; i < arr.length; i++) {\n\
    \        arr[i] *= 2;\n    }\n    return sorted;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  1,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp1bkajwur.js:21:12)\n    at Object.<anonymous> (/tmp/tmp1bkajwur.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 1,\
    \ 1, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979618
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    const ones = count_ones(a);\n    const twos = count_ones(b);\n\
    \    if (ones < twos) {\n      return -1;\n    }\n    if (ones > twos) {\n   \
    \   return 1;\n    }\n    return count_ones(a) - count_ones(b);\n  });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk6xzgtce.ts(7,18): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpk6xzgtce.ts(8,18): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmpk6xzgtce.ts(15,12): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmpk6xzgtce.ts(15,28): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979618
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a,\
    \ b) => {\n        const ones = binToInt(a);\n        const zerosOnes = binToInt(b);\n\
    \        if (ones === zerosOnes) {\n            return a.localeCompare(b);\n \
    \       }\n        return ones - zerosOnes;\n    });\n    return arr;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprs583c9j.ts(7,22): error TS2304: Cannot find name
    ''binToInt''.

    ../../../../../tmp/tmprs583c9j.ts(8,27): error TS2304: Cannot find name ''binToInt''.

    ../../../../../tmp/tmprs583c9j.ts(10,22): error TS2339: Property ''localeCompare''
    does not exist on type ''number''.

    '
  timestamp: 1659979618
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray\
    \ = arr.slice();\n    sortedArray.sort((a, b) => {\n        let ones = Math.log2(a);\n\
    \        let twos = Math.log2(b);\n        if (ones < twos) {\n            return\
    \ -1;\n        }\n        if (ones > twos) {\n            return 1;\n        }\n\
    \        return 0;\n    });\n    return sortedArray;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6ah13m16.ts(8,25): error TS2551: Property ''log2''
    does not exist on type ''Math''. Did you mean ''LOG2E''?

    ../../../../../tmp/tmp6ah13m16.ts(9,25): error TS2551: Property ''log2'' does
    not exist on type ''Math''. Did you mean ''LOG2E''?

    '
  timestamp: 1659979618
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArr:\
    \ number[] = [];\n    let oneCount: number = 0;\n    let decimalCount: number\
    \ = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 1)\
    \ {\n            oneCount++;\n        } else {\n            decimalCount++;\n\
    \        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (oneCount\
    \ > decimalCount) {\n            sortedArr.push(arr[i]);\n            oneCount--;\n\
    \        } else {\n            sortedArr.push(arr[i] * 10 + arr[i + 1]);\n   \
    \         decimalCount--;\n        }\n    }\n    return sortedArr;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  52,\n\
    \  23,\n  34,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpuyqabu_2.js:32:12)\n    at Object.<anonymous> (/tmp/tmpuyqabu_2.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 52,\
    \ 23, 34, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979618
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n\
    \        if (ones_b > ones) {\n            return -1;\n        }\n        if (ones_b\
    \ < ones) {\n            return 1;\n        }\n        return a < b ? -1 : 1;\n\
    \    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8lbxka3h.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmp8lbxka3h.ts(8,24): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979618
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sorted:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count\
    \ = 0;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j]\
    \ == i) {\n                count++;\n            }\n        }\n        sorted.push(count);\n\
    \    }\n    sorted.sort((a, b) => a - b);\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        arr[i] = sorted[i];\n    }\n    return arr;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpbvejq7hc.js:25:12)\n    at Object.<anonymous> (/tmp/tmpbvejq7hc.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1,\
    \ 1, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979618
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val)\
    \ => acc + val, 0);\n  const decimals = Math.log2(ones);\n  const decimalsArr\
    \ = new Array(decimals + 1).fill(0);\n  for (let i = 0; i < decimals; i++) {\n\
    \    decimalsArr[i] = Math.pow(2, i);\n  }\n  const decimalsArrLen = decimalsArr.length;\n\
    \  const decimalsArrArr = new Array(decimalsArrLen).fill(0);\n  for (let i = 0;\
    \ i < decimalsArrLen; i++) {\n    decimalsArrArr[i] = decimalsArrArr[i] + decimalsArr[i];\n\
    \  }\n  const decimalsArrArrLen = decimalsArrArr.length;\n  const decimalsArrArrArr\
    \ = new Array(decimalsArrArrLen).fill(0);\n  for (let i = 0; i < decimalsArrArrLen;\
    \ i++) {\n    decimalsArrArrArr[i] = decimalsArrArrArr[i] + decimalsArrArr[i];\n\
    \  }\n  const decimalsArrArrArrLen = decimalsArrArrArr.length;\n  const decimalsArrArrArrArr\
    \ = new Array(decimalsArrArrArrLen).fill(0);\n  for (let i = 0; i < decimalsArrArrArrLen;\
    \ i++) {\n    decimalsArrArrArrArr[i] = decimalsArrArrArrArr[i] + decimalsArrArrArr[i];\n\
    \  }\n  const decimalsArrArrArrArrLen = decimalsArrArrArrArr.length;\n  const\
    \ decimalsArrArrArrArrArr = new Array(decimalsArrArrArrArrLen).fill(0);\n  for\
    \ (let i = 0; i < decimalsArrArrArrArrLen; i++) {\n    decimalsArrArrArrArrArr[i]\
    \ = decimalsArrArrArrArrArr[i] + decimalsArrArrArrArr[i];\n  }\n  const decimalsArrArrArrArrLen\
    \ = decimalsArrArrArrArrArr.length;\n  const decimalsArrArrArrArrArrArr = new\
    \ Array(decimalsArrArrArrArrArrLen).fill(0);\n  for (let i = 0; i < decimalsArrArrArrArrLen;\
    \ i++) {\n    decimalsArrArrArrArrArrArr[i] = decimalsArrArrArrArrArrArr[i] +\
    \ decimalsArrArrArrArrArrArr[i];\n  }\n  const decimalsArrArrArrArrArrLen = decimalsArrArrArrArrArrArr.length;\n\
    \  const decimalsArrArrArrArrArrArrArr = new Array(decimalsArrArrArrArrArrArrLen).fill(0);\n\
    \  for (let i = 0; i < decimalsArrArrArrArrArrLen; i++) {\n    decimalsArrArrArrArrArrArr[i]\
    \ = decimalsArrArrArrArrArrArr[i] + decimals\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjip7h3gl.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979618
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones =\
    \ arr.filter(x => x === 1);\n    const decimals = arr.filter(x => x % 1 === 0);\n\
    \    const sortedOnes = ones\n        .map(x => parseInt(x.toString(2), 2))\n\
    \        .sort((a, b) => a - b);\n    const sortedDecimals = decimals\n      \
    \  .map(x => parseInt(x.toString(10), 10))\n        .sort((a, b) => a - b);\n\
    \    return sortedOnes.concat(sortedDecimals);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n\
    \  3,\n  5\n]\n    at test (/tmp/tmps8g5ofc5.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps8g5ofc5.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2,\
    \ 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979619
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArr:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let ones\
    \ = arr[i];\n        let decimal = ones - ones * ones * ones;\n        sortedArr.push(decimal);\n\
    \    }\n    sortedArr.sort((a, b) => a - b);\n    return sortedArr;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -120,\n \
    \ -60,\n  -24,\n  -6,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n\
    \  4,\n  3,\n  5\n]\n    at test (/tmp/tmprmbnuldc.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprmbnuldc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -120, -60,\
    \ -24, -6, 0 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979620
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let result:\
    \ number[] = [];\n    let ones = 0;\n    let decimal = 0;\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        if (arr[i] === 1) {\n            ones++;\n \
    \       } else {\n            decimal = decimal + arr[i] * Math.pow(10, arr.length\
    \ - i - 1);\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n  \
    \      if (arr[i] === 1) {\n            result.push(ones);\n        } else {\n\
    \            result.push(decimal);\n        }\n    }\n    result.sort((a, b) =>\
    \ {\n        return a - b;\n    });\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5234,\n\
    \  5234,\n  5234,\n  5234\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n \
    \ 4,\n  3,\n  5\n]\n    at test (/tmp/tmpy9_hsex_.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpy9_hsex_.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5234,\
    \ 5234, 5234, 5234 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979620
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones:\
    \ number[] = [];\n    const decs: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        const one = arr[i] & 1;\n        if (one) {\n            ones.push(one);\n\
    \        } else {\n            decs.push(arr[i]);\n        }\n    }\n    ones\
    \ = sort_array(ones);\n    decs = sort_array(decs);\n    return decs.concat(ones);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7fup12p9.ts(16,5): error TS2588: Cannot assign to
    ''ones'' because it is a constant.

    ../../../../../tmp/tmp7fup12p9.ts(17,5): error TS2588: Cannot assign to ''decs''
    because it is a constant.

    '
  timestamp: 1659979619
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(a);\n        const onesB = count_ones(b);\n\
    \        if (onesB > ones) {\n            return -1;\n        }\n        if (onesB\
    \ < ones) {\n            return 1;\n        }\n        return a - b;\n    });\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3zxn6x1d.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmp3zxn6x1d.ts(8,23): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979616
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones\
    \ = arr.filter(x => x === 1);\n    const len = ones.length;\n    if (len === 0)\
    \ {\n        return arr;\n    }\n    const maxOnes = Math.max.apply(null, ones);\n\
    \    const maxDecimal = Math.pow(10, Math.ceil(Math.log10(maxOnes)));\n    const\
    \ maxDecimalLen = Math.ceil(Math.log10(maxDecimal));\n    const maxDecimalDigits\
    \ = maxDecimalLen - 1;\n    const maxDecimalDigit = Math.pow(10, maxDecimalDigits);\n\
    \    const maxDecimalNum = Math.floor(maxDecimalDigit * maxOnes);\n    const maxDecimalNumLen\
    \ = Math.ceil(Math.log10(maxDecimalNum));\n    const maxDecimalNumDigits = maxDecimalNumLen\
    \ - 1;\n    const maxDecimalNumDigit = Math.pow(10, maxDecimalNumDigits);\n  \
    \  const maxDecimalNumNum = Math.floor(maxDecimalNumDigit * maxOnes);\n    const\
    \ maxDecimalNumNumLen = Math.ceil(Math.log10(maxDecimalNumNum));\n    const maxDecimalNumNumDigits\
    \ = maxDecimalNumNumLen - 1;\n    const maxDecimalNumNumDigit = Math.pow(10, maxDecimalNumNumDigits);\n\
    \    const maxDecimalNumNumNum = Math.floor(maxDecimalNumNumDigit * maxOnes);\n\
    \    const maxDecimalNumNumNumLen = Math.ceil(Math.log10(maxDecimalNumNumNum));\n\
    \    const maxDecimalNumNumNumDigits = maxDecimalNumNumNumLen - 1;\n    const\
    \ maxDecimalNumNumNumDigit = Math.pow(10, maxDecimalNumNumNumDigits);\n    const\
    \ maxDecimalNumNumNumNum = Math.floor(maxDecimalNumNumNumNumDigit * maxOnes);\n\
    \    const maxDecimalNumNumNumNumLen = Math.ceil(Math.log10(maxDecimalNumNumNumNum));\n\
    \    const maxDecimalNumNumNumNumDigits = maxDecimalNumNumNumNumLen - 1;\n   \
    \ const maxDecimalNumNumNumNumDigit = Math.pow(10, maxDecimalNumNumNumNumDigits);\n\
    \    const maxDecimalNumNumNumNumNum = Math.floor(maxDecimalNumNumNumNumNumDigit\
    \ * maxOnes);\n    const maxDecimalNumNumNumNumNumLen = Math.ceil(Math.log10(maxDecimalNumNumNumNumNum));\n\
    \    const maxDecimalNumNumNumNumNumDigits = maxDecimalNumNumNumNumNumLen - 1;\n\
    \    const maxDecimalNumNumNumNumNumDigit = Math.pow(10, maxDecimalNumNumNumNumNumDigits);\n\
    \    const maxDecimalNumNumNumNumNumNum = Math.floor(maxDecimalNumNumNumNumNumNumDigit\
    \ * maxOnes);\n    const maxDecimalNumNumNumNumNumNumLen = Math.ceil(Math.log10(max\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdsve2aud.ts(42,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpdsve2aud.ts(42,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpdsve2aud.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979620
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones\
    \ = arr.reduce((acc, x) => acc + x, 0);\n    const dec = ones / Math.pow(2, len);\n\
    \    const arr2 = arr.sort((a, b) => a - b);\n    return arr2.map(x => x * dec);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0.46875,\n\
    \  0.9375,\n  1.40625,\n  1.875,\n  2.34375\n]\n\nshould loosely deep-equal\n\n\
    [\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpv22e_0xe.js:18:12)\n \
    \   at Object.<anonymous> (/tmp/tmpv22e_0xe.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0.46875,\
    \ 0.9375, 1.40625, 1.875, 2.34375 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979620
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(a);\n        const onesB = count_ones(b);\n\
    \        if (ones === onesB) {\n            return a - b;\n        }\n       \
    \ return ones - onesB;\n    });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmvz2jt8o.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpmvz2jt8o.ts(8,23): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979612
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones =\
    \ arr.filter(n => n & 1);\n    const decimals = arr.filter(n => !(n&1));\n   \
    \ const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedWithOnes\
    \ = decimalsSorted.concat(ones);\n    return decimalsSortedWithOnes;\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4,\n\
    \  1,\n  5,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpnprhbrts.js:15:12)\n    at Object.<anonymous> (/tmp/tmpnprhbrts.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 1,\
    \ 5, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979620
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones =\
    \ arr.filter(x => x === 1);\n    const zeros = arr.filter(x => x === 0);\n   \
    \ const sortedOnes = ones.sort((a, b) => a - b);\n    const sortedZeros = zeros.sort((a,\
    \ b) => a - b);\n    const sortedArray = sortedOnes.concat(sortedZeros);\n   \
    \ return sortedArray;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpoo47dqmh.js:16:12)\n\
    \    at Object.<anonymous> (/tmp/tmpoo47dqmh.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979620
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let counts:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        counts.push(arr[i]\
    \ ? 1 : 0);\n    }\n    counts = counts.sort((a, b) => a - b);\n    let result:\
    \ number[] = [];\n    for (let i = 0; i < counts.length; i++) {\n        result.push(counts[i]);\n\
    \    }\n    for (let i = 0; i < counts.length; i++) {\n        result.push(counts[i]\
    \ / Math.pow(2, counts.length - 1 - i));\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  1,\n  1,\n  1,\n  0.0625,\n  0.125,\n  0.25,\n  0.5,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp6mj4j30x.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6mj4j30x.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n      \
    \  1,    1,      1,\n        1,    1, 0.0625,\n    0.125, 0.25,    0.5,\n    \
    \    1\n  ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979620
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a,\
    \ b) => {\n        const ones = count_ones(b);\n        const decA = count_decA(a);\n\
    \        const decB = count_decB(b);\n        if (decA === decB) {\n         \
    \   return ones - decA;\n        }\n        return decA - decB;\n    });\n   \
    \ return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7wd360nb.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmp7wd360nb.ts(8,22): error TS2304: Cannot find name ''count_decA''.

    ../../../../../tmp/tmp7wd360nb.ts(9,22): error TS2304: Cannot find name ''count_decB''.

    '
  timestamp: 1659979620
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b)\
    \ => {\n    const ones = count_ones(b);\n    const decA = count_decA(a);\n   \
    \ const decB = count_decB(b);\n    if (decA === decB) {\n      return decA - decB;\n\
    \    }\n    return decA - decB || decB - decA;\n  });\n  return arr;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl8lht7wk.ts(7,18): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpl8lht7wk.ts(8,18): error TS2304: Cannot find name ''count_decA''.

    ../../../../../tmp/tmpl8lht7wk.ts(9,18): error TS2304: Cannot find name ''count_decB''.

    '
  timestamp: 1659979620
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(b);\n        const decA = count_decA(a);\n\
    \        const decB = count_decB(b);\n        if (decA === decB) {\n         \
    \   return ones - decA;\n        }\n        return decA - decB;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyb22tjyz.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpyb22tjyz.ts(8,22): error TS2304: Cannot find name ''count_decA''.

    ../../../../../tmp/tmpyb22tjyz.ts(9,22): error TS2304: Cannot find name ''count_decB''.

    '
  timestamp: 1659979620
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(b);\n        const decA = count_ones(a);\n\
    \        const decB = count_ones(b);\n        if (decA === decB) {\n         \
    \   return ones - decA;\n        }\n        return decA - decB;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyav2fesv.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpyav2fesv.ts(8,22): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmpyav2fesv.ts(9,22): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979620
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones\
    \ = arr.filter((x) => x === 1);\n    if (ones.length === 0) {\n        return\
    \ arr;\n    }\n    const dec = ones\n        .map((x) => parseInt(x.toString(2),\
    \ 10))\n        .sort((a, b) => a - b);\n    const bin = ones\n        .map((x)\
    \ => parseInt(x.toString(2), 2))\n        .sort((a, b) => a - b);\n    const dec2bin\
    \ = dec.map((x) => parseInt(x, 2));\n    const bin2dec = bin.map((x) => parseInt(x,\
    \ 10));\n    const dec2bin2 = dec.map((x) => parseInt(x.toString(2), 2));\n  \
    \  const bin2dec2 = bin.map((x) => parseInt(x, 10));\n    const dec2bin3 = dec.map((x)\
    \ => parseInt(x.toString(3), 10));\n    const bin2dec3 = bin.map((x) => parseInt(x,\
    \ 10));\n    const dec2bin4 = dec.map((x) => parseInt(x.toString(4), 10));\n \
    \   const bin2dec4 = bin.map((x) => parseInt(x, 10));\n    const dec2bin5 = dec.map((x)\
    \ => parseInt(x.toString(5), 10));\n    const bin2dec5 = bin.map((x) => parseInt(x,\
    \ 10));\n    const dec2bin6 = dec.map((x) => parseInt(x.toString(6), 10));\n \
    \   const bin2dec6 = bin.map((x) => parseInt(x, 10));\n    const dec2bin7 = dec.map((x)\
    \ => parseInt(x.toString(7), 10));\n    const bin2dec7 = bin.map((x) => parseInt(x,\
    \ 10));\n    const dec2bin8 = dec.map((x) => parseInt(x.toString(8), 10));\n \
    \   const bin2dec8 = bin.map((x) => parseInt(x, 10));\n    const dec2bin9 = dec.map((x)\
    \ => parseInt(x.toString(9), 10));\n    const bin2dec9 = bin.map((x) => parseInt(x,\
    \ 10));\n    const dec2bin10 = dec.map((x) => parseInt(x.toString(10), 10));\n\
    \    const bin2dec10 = bin.map((x) => parseInt(x, 10));\n    const dec2bin11 =\
    \ dec.map((x) => parseInt(x.toString(11), 10));\n    const bin2dec11 = bin.map((x)\
    \ => parseInt(x, 10));\n    const dec2bin12 = dec.map((x) => parseInt(x.toString(12),\
    \ 10));\n    const bin2dec12 = bin.map((x) => parseInt(x, 10));\n    const dec2bin13\
    \ = dec.map((x) => parseInt(x.toString(13), \ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzlrn1zhr.ts(45,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpzlrn1zhr.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979620
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let result:\
    \ number[] = [];\n    let ones: number[] = [];\n    let zeros: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n     \
    \   if (num === 1) {\n            ones.push(num);\n        } else if (num ===\
    \ 0) {\n            zeros.push(num);\n        } else {\n            let index\
    \ = ones.length - 1;\n            while (index >= 0) {\n                if (ones[index]\
    \ > num) {\n                    ones[index + 1] = ones[index];\n             \
    \       ones[index] = num;\n                    break;\n                }\n  \
    \              index--;\n            }\n        }\n    }\n    for (let i = 0;\
    \ i < ones.length; i++) {\n        result.push(ones[i]);\n    }\n    for (let\
    \ i = 0; i < zeros.length; i++) {\n        result.push(zeros[i]);\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp8uske3lj.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8uske3lj.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979621
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray\
    \ = arr.slice();\n    sortedArray.sort((a, b) => {\n        let ones = Math.log2(a);\n\
    \        let twos = Math.log2(b);\n        if (ones < twos) {\n            return\
    \ -1;\n        }\n        if (ones > twos) {\n            return 1;\n        }\n\
    \        return 0;\n    });\n    return sortedArray;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThanks for your answer. Your solution works perfectly for small arrays\
    \ but for large arrays it takes too much time. My array is of size 10^6 and it\
    \ takes around 1 minute to sort it using your solution. Can you suggest any faster\
    \ solution?\n<|/ c |>\n<| c |>\nI updated my answer, please check it out\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. Your solution works perfectly for small\
    \ arrays but for large arrays it takes too much time. My array is of size 10^6\
    \ and it takes around 1 minute to sort it using your solution. Can you suggest\
    \ any faster solution?\n<|/ c |>\n<| c |>\nI updated my answer, please check it\
    \ out\n<|/ c |>\n<| c |>\nThanks for your answer. Your solution works perfectly\
    \ for small arrays but for large arrays it takes too much time. My array is of\
    \ size 10^6 and it takes around 1 minute to sort it using your solution. Can you\
    \ suggest any faster solution?\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb1ww81i9.ts(20,2): error TS1110: Type expected.

    ../../../../../tmp/tmpb1ww81i9.ts(20,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpb1ww81i9.ts(21,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpb1ww81i9.ts(21,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpb1ww81i9.ts(22,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpb1ww81i9.ts(22,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,12): error TS1005: ''('' expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,17): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,30): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,39): error TS1005: '')'' expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,45): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,55): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,59): error TS1005: ''('' expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,65): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,72): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,76): error TS1005: '')'' expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,80): error TS1005: ''('' expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,86): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,93): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,96): error TS1005: '')'' expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,102): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,106): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,111): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,120): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,126): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,129): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb1ww81i9.ts(23,132): error TS1005: '';'' expected.

    ../../../../'
  timestamp: 1659979620
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArr:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let ones\
    \ = arr[i] & 1;\n        arr[i] = arr[i] >> 1;\n        if (ones > 0) {\n    \
    \        sortedArr.push(arr[i]);\n        }\n    }\n    sortedArr.sort((a, b)\
    \ => a - b);\n    return sortedArr;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n  \
    \  at test (/tmp/tmp98vczom7.js:20:12)\n    at Object.<anonymous> (/tmp/tmp98vczom7.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979621
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones\
    \ = arr.filter((x) => x === 1);\n    const len = ones.length;\n    if (len ===\
    \ 0) {\n        return arr;\n    }\n    const biggest = ones[len - 1];\n    const\
    \ biggestIndex = arr.findIndex((x) => x > biggest);\n    const biggestOne = arr[biggestIndex];\n\
    \    const biggestOneIndex = arr.findIndex((x) => x === biggestOne);\n    const\
    \ onesCount = biggestIndex - biggestOneIndex;\n    const decimal = biggestOne\
    \ / Math.pow(2, onesCount);\n    const decimalIndex = arr.findIndex((x) => x ===\
    \ decimal);\n    const decimalOne = arr[decimalIndex];\n    const decimalOneIndex\
    \ = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x)\
    \ => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x ===\
    \ decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n\
    \    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const\
    \ decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex\
    \ = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x)\
    \ => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x ===\
    \ decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n\
    \    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const\
    \ decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex\
    \ = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x)\
    \ => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x ===\
    \ decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n\
    \    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const\
    \ decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex\
    \ = arr.findIndex((x) => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x)\
    \ => x === decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x ===\
    \ decimalOne);\n    const decimalOneIndex = arr.findIndex((x) => x === decimalOne);\n\
    \    const decimalOneIndex = arr.findIndex((x) => x === decimal\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjlez6ed0.ts(46,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpjlez6ed0.ts(46,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpjlez6ed0.ts(62,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979621
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones =\
    \ arr.filter((x) => x === 1);\n    const zeros = arr.filter((x) => x === 0);\n\
    \    const onesCount = ones.length;\n    const zerosCount = zeros.length;\n  \
    \  if (onesCount === zerosCount) {\n        return arr;\n    }\n    if (onesCount\
    \ > zerosCount) {\n        return sort_array(ones);\n    }\n    return sort_array(zeros);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpn5b4k6eo.js:6\n    var ones = arr.filter(function (x) { return\
    \ x === 1; });\n                   ^\n\nRangeError: Maximum call stack size exceeded\n\
    \    at Array.filter (<anonymous>)\n    at sort_array (/tmp/tmpn5b4k6eo.js:6:20)\n\
    \    at sort_array (/tmp/tmpn5b4k6eo.js:14:16)\n    at sort_array (/tmp/tmpn5b4k6eo.js:14:16)\n\
    \    at sort_array (/tmp/tmpn5b4k6eo.js:14:16)\n    at sort_array (/tmp/tmpn5b4k6eo.js:14:16)\n\
    \    at sort_array (/tmp/tmpn5b4k6eo.js:14:16)\n    at sort_array (/tmp/tmpn5b4k6eo.js:14:16)\n\
    \    at sort_array (/tmp/tmpn5b4k6eo.js:14:16)\n    at sort_array (/tmp/tmpn5b4k6eo.js:14:16)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979621
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b)\
    \ => {\n    if (a === 0) return 1;\n    if (b === 0) return -1;\n    const aBin\
    \ = bin(a);\n    const bBin = bin(b);\n    const aLen = aBin.length;\n    const\
    \ bLen = bBin.length;\n    const aOnes = aBin.substr(aLen - 1);\n    const bOnes\
    \ = bBin.substr(bLen - 1);\n    if (aOnes === bOnes) return aLen - bLen;\n   \
    \ return aOnes.localeCompare(bOnes);\n  });\n  return arr;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc9vbxxo0.ts(9,18): error TS2552: Cannot find name
    ''bin''. Did you mean ''aBin''?

    ../../../../../tmp/tmpc9vbxxo0.ts(10,18): error TS2552: Cannot find name ''bin''.
    Did you mean ''aBin''?

    '
  timestamp: 1659979620
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len < 2) {\n        return arr;\n    }\n    const ones\
    \ = arr.filter(x => x === 1);\n    const zeros = arr.filter(x => x === 0);\n \
    \   const len = ones.length;\n    if (len === 1) {\n        return sort_array(zeros);\n\
    \    }\n    const ones_len = ones.length;\n    const zeros_len = zeros.length;\n\
    \    const max_len = Math.max(ones_len, zeros_len);\n    const min_len = Math.min(ones_len,\
    \ zeros_len);\n    const max_ones = ones_len - 1;\n    const min_zeros = zeros_len\
    \ - 1;\n    const max_ones_len = max_ones * 2;\n    const min_zeros_len = min_zeros\
    \ * 2;\n    const max_len = Math.max(max_ones_len, min_zeros_len);\n    const\
    \ min_len = Math.min(max_ones_len, min_zeros_len);\n    const max_ones_len = max_ones\
    \ * 2;\n    const min_zeros_len = min_zeros * 2;\n    const max_len = Math.max(max_ones_len,\
    \ min_zeros_len);\n    const min_len = Math.min(max_ones_len, min_zeros_len);\n\
    \    const max_ones_len = max_ones * 2;\n    const min_zeros_len = min_zeros *\
    \ 2;\n    const max_len = Math.max(max_ones_len, min_zeros_len);\n    const min_len\
    \ = Math.min(max_ones_len, min_zeros_len);\n    const max_ones_len = max_ones\
    \ * 2;\n    const min_zeros_len = min_zeros * 2;\n    const max_len = Math.max(max_ones_len,\
    \ min_zeros_len);\n    const min_len = Math.min(max_ones_len, min_zeros_len);\n\
    \    const max_ones_len = max_ones * 2;\n    const min_zeros_len = min_zeros *\
    \ 2;\n    const max_len = Math.max(max_ones_len, min_zeros_len);\n    const min_len\
    \ = Math.min(max_ones_len, min_zeros_len);\n    const max_ones_len = max_ones\
    \ * 2;\n    const min_zeros_len = min_zeros * 2;\n    const max_len = Math.max(max_ones_len,\
    \ min_zeros_len);\n    const min_len = Math.min(max_ones_len, min_zeros_len);\n\
    \    const max_ones_len = max_ones * 2;\n    const min_zeros_len = min_zeros *\
    \ 2;\n    const max_len = Math.max(max_ones_len, min_zeros_len);\n    const min_len\
    \ = Math.min(max_ones_len, min_zeros_len);\n    const max_ones_len = max_ones\
    \ * 2;\n    const min_zeros_len = min_zeros * 2;\n    const max_len = Math.max(max_ones_len,\
    \ min_zeros_len);\n    const min_len = Math.min(max_ones_len, min_zeros_len);\n\
    \    const max_ones_len = max_ones * 2;\n    const min_zeros_len = min_zeros *\
    \ 2;\n    const max_len = Math.\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3gxdca36.ts(56,26): error TS1003: Identifier expected.

    ../../../../../tmp/tmp3gxdca36.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979621
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray\
    \ = arr.slice();\n    sortedArray.sort((a, b) => {\n        if (a === 1) {\n \
    \           return -1;\n        }\n        if (b === 1) {\n            return\
    \ 1;\n        }\n        return a - b;\n    });\n    return sortedArray;\n}\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmplbguak0q.js:21:12)\n    at Object.<anonymous> (/tmp/tmplbguak0q.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979621
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArr\
    \ = arr.slice();\n    sortedArr.sort((a, b) => {\n        let aNum = parseInt(a.toString(2));\n\
    \        let bNum = parseInt(b.toString(2));\n        return aNum - bNum;\n  \
    \  });\n    return sortedArr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp7bez3v4f.js:17:12)\n    at Object.<anonymous> (/tmp/tmp7bez3v4f.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979621
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones\
    \ = arr.reduce((acc, val) => {\n        return acc + val;\n    }, 0);\n    const\
    \ decimals = ones - arr.reduce((acc, val) => {\n        return acc + val * Math.pow(10,\
    \ arr.length - 1 - val);\n    }, 0);\n    return arr.sort((a, b) => {\n      \
    \  return decimals - a * Math.pow(10, arr.length - 1 - b) - b * Math.pow(10, arr.length\
    \ - 1 - a);\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  5,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp3oqfkiro.js:23:12)\n    at Object.<anonymous> (/tmp/tmp3oqfkiro.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 5, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979622
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let result:\
    \ number[] = [];\n    let ones: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        let num = arr[i];\n        if (num === 1) {\n            ones.push(num);\n\
    \        } else {\n            let index = ones.length - 1;\n            let ones_count\
    \ = ones[index];\n            let decimal_value = num / ones_count;\n        \
    \    let decimal_value = decimal_value * ones_count;\n            result.push(decimal_value);\n\
    \            ones[index] = 0;\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk728yxv3.ts(15,17): error TS2451: Cannot redeclare
    block-scoped variable ''decimal_value''.

    ../../../../../tmp/tmpk728yxv3.ts(16,17): error TS2451: Cannot redeclare block-scoped
    variable ''decimal_value''.

    '
  timestamp: 1659979622
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let result:\
    \ number[] = [];\n    let counts: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        let num = arr[i];\n        let index = counts[num];\n      \
    \  if (index === undefined) {\n            counts[num] = result.length;\n    \
    \        result.push(num);\n        } else {\n            let pos = result[index];\n\
    \            result[index] = num;\n            result[pos] = num;\n        }\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp_yebhciw.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_yebhciw.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2,\
    \ 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979622
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a,\
    \ b) => {\n        const ones = count_ones(b);\n        const decimal = count_decimal(b);\n\
    \        if (ones === decimal) {\n            return a - b;\n        }\n     \
    \   return ones - decimal;\n    });\n    return arr;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvnnrugc4.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpvnnrugc4.ts(8,25): error TS2304: Cannot find name ''count_decimal''.

    '
  timestamp: 1659979612
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let result:\
    \ number[] = [];\n    let ones: number[] = [];\n    let zeros: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       ones.push(arr[i]);\n        } else {\n            zeros.push(arr[i]);\n\
    \        }\n    }\n    ones = sort_array(ones);\n    zeros = sort_array(zeros);\n\
    \    for (let i = 0; i < ones.length; i++) {\n        result.push(ones[i]);\n\
    \    }\n    for (let i = 0; i < zeros.length; i++) {\n        result.push(zeros[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpsfji0nyv.js:5\nfunction sort_array(arr) {\n                   ^\n\
    \nRangeError: Maximum call stack size exceeded\n    at sort_array (/tmp/tmpsfji0nyv.js:5:20)\n\
    \    at sort_array (/tmp/tmpsfji0nyv.js:17:12)\n    at sort_array (/tmp/tmpsfji0nyv.js:17:12)\n\
    \    at sort_array (/tmp/tmpsfji0nyv.js:17:12)\n    at sort_array (/tmp/tmpsfji0nyv.js:17:12)\n\
    \    at sort_array (/tmp/tmpsfji0nyv.js:17:12)\n    at sort_array (/tmp/tmpsfji0nyv.js:17:12)\n\
    \    at sort_array (/tmp/tmpsfji0nyv.js:17:12)\n    at sort_array (/tmp/tmpsfji0nyv.js:17:12)\n\
    \    at sort_array (/tmp/tmpsfji0nyv.js:17:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979622
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones:\
    \ number[] = [];\n    const zeros: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] === 1) {\n            ones.push(arr[i]);\n      \
    \  } else {\n            zeros.push(arr[i]);\n        }\n    }\n    ones = sort_array(ones);\n\
    \    zeros = sort_array(zeros);\n    const result: number[] = [];\n    for (let\
    \ i = 0; i < ones.length; i++) {\n        result.push(ones[i]);\n    }\n    for\
    \ (let i = 0; i < zeros.length; i++) {\n        result.push(zeros[i]);\n    }\n\
    \    return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbof5l8cd.ts(15,5): error TS2588: Cannot assign to
    ''ones'' because it is a constant.

    ../../../../../tmp/tmpbof5l8cd.ts(16,5): error TS2588: Cannot assign to ''zeros''
    because it is a constant.

    '
  timestamp: 1659979622
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray\
    \ = arr.slice();\n    sortedArray.sort((a, b) => {\n        let ones = Math.log2(a);\n\
    \        let twos = Math.log2(b);\n        if (ones < twos) {\n            return\
    \ -1;\n        } else if (ones > twos) {\n            return 1;\n        } else\
    \ {\n            return a - b;\n        }\n    });\n    return sortedArray;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5lrkjo9o.ts(8,25): error TS2551: Property ''log2''
    does not exist on type ''Math''. Did you mean ''LOG2E''?

    ../../../../../tmp/tmp5lrkjo9o.ts(9,25): error TS2551: Property ''log2'' does
    not exist on type ''Math''. Did you mean ''LOG2E''?

    '
  timestamp: 1659979622
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    const ones = binToInt(a);\n    const twos = binToInt(b);\n    if\
    \ (ones < twos) {\n      return -1;\n    }\n    if (ones > twos) {\n      return\
    \ 1;\n    }\n    return a - b;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1n0lrh76.ts(7,18): error TS2304: Cannot find name
    ''binToInt''.

    ../../../../../tmp/tmp1n0lrh76.ts(8,18): error TS2304: Cannot find name ''binToInt''.

    '
  timestamp: 1659979615
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray\
    \ = arr.slice();\n    sortedArray.sort((a, b) => {\n        let ones = Math.log2(a);\n\
    \        let twos = Math.log2(b);\n        if (ones < twos) {\n            return\
    \ -1;\n        }\n        if (ones > twos) {\n            return 1;\n        }\n\
    \        return 0;\n    });\n    return sortedArray;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzxdwl5c3.ts(8,25): error TS2551: Property ''log2''
    does not exist on type ''Math''. Did you mean ''LOG2E''?

    ../../../../../tmp/tmpzxdwl5c3.ts(9,25): error TS2551: Property ''log2'' does
    not exist on type ''Math''. Did you mean ''LOG2E''?

    '
  timestamp: 1659979623
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray\
    \ = arr.slice();\n    sortedArray.sort((a, b) => {\n        let aBin = binToInt(a);\n\
    \        let bBin = binToInt(b);\n        let aOnes = aBin >> 1;\n        let\
    \ bOnes = bBin >> 1;\n        if (aOnes > bOnes) {\n            return 1;\n  \
    \      } else if (aOnes < bOnes) {\n            return -1;\n        } else {\n\
    \            return aBin - bBin;\n        }\n    });\n    return sortedArray;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphd6qpigc.ts(8,20): error TS2304: Cannot find name
    ''binToInt''.

    ../../../../../tmp/tmphd6qpigc.ts(9,20): error TS2304: Cannot find name ''binToInt''.

    '
  timestamp: 1659979622
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones =\
    \ arr.filter(n => n & 1);\n    const decimals = arr.filter(n => !(n&1));\n   \
    \ const decimalsSorted = decimals.sort((a, b) => a - b);\n    const onesSorted\
    \ = ones.sort((a, b) => a - b);\n    return onesSorted.concat(decimalsSorted);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  5,\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp67n1iafo.js:15:12)\n    at Object.<anonymous> (/tmp/tmp67n1iafo.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 5,\
    \ 2, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979615
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArr:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let ones\
    \ = arr[i];\n        let decimal = ones - 1;\n        sortedArr.push(decimal);\n\
    \    }\n    sortedArr.sort((a, b) => a - b);\n    return sortedArr;\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp63jhnxgq.js:18:12)\n    at Object.<anonymous> (/tmp/tmp63jhnxgq.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2,\
    \ 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979623
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n\
    \  if (len < 2) {\n    return arr;\n  }\n  const ones = arr.filter((x) => x ===\
    \ 1);\n  const decimals = arr.filter((x) => x % 1 === 0);\n  const decimalsLen\
    \ = decimals.length;\n  if (decimalsLen === 0) {\n    return ones;\n  }\n  const\
    \ decimalsSum = decimals.reduce((acc, x) => acc + x, 0);\n  const decimalsSumDecimals\
    \ = decimalsSum / decimalsLen;\n  const decimalsSumDecimalsLen = decimalsSumDecimals.length;\n\
    \  const decimalsSumDecimalsLenDecimals = decimalsSumDecimalsLen / decimalsLen;\n\
    \  const decimalsSumDecimalsLenDecimalsLen = decimalsSumDecimalsLenDecimals /\
    \ decimalsLen;\n  const decimalsSumDecimalsLenDecimalsLenDecimals = decimalsSumDecimalsLenDecimalsLen\
    \ / decimalsLen;\n  const decimalsSumDecimalsLenDecimalsLenDecimalsLen = decimalsSumDecimalsLenDecimalsLenDecimals\
    \ / decimalsLen;\n  const decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimals\
    \ = decimalsSumDecimalsLenDecimalsLenDecimalsLen / decimalsLen;\n  const decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimalsLen\
    \ = decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimals / decimalsLen;\n  const\
    \ decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLen = decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimals\
    \ / decimalsLen;\n  const decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLen\
    \ = decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimals\
    \ / decimalsLen;\n  const decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLen\
    \ = decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimals\
    \ / decimalsLen;\n  const decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLen\
    \ = decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLen\
    \ / decimalsLen;\n  const decimalsSumDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimalsLenDecimals\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5gzp28w1.ts(46,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979623
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones\
    \ = arr\n        .map((x) => parseInt(x.toString(2), 2))\n        .sort((a, b)\
    \ => a - b);\n    const decimals = arr\n        .map((x) => parseInt(x.toString(10),\
    \ 10))\n        .sort((a, b) => a - b);\n    const len = ones.length;\n    let\
    \ i = 0;\n    while (i < len) {\n        if (ones[i] === 1) {\n            ones[i]\
    \ = decimals[i];\n            i++;\n        } else {\n            ones[i] = 0;\n\
    \        }\n    }\n    return ones;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1yps03eg.ts(6,11): error TS2451: Cannot redeclare
    block-scoped variable ''len''.

    ../../../../../tmp/tmp1yps03eg.ts(16,11): error TS2451: Cannot redeclare block-scoped
    variable ''len''.

    '
  timestamp: 1659979623
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = binToInt(a);\n        const zerosOnes = binToInt(b);\n\
    \        if (ones < zerosOnes) {\n            return -1;\n        }\n        if\
    \ (ones > zerosOnes) {\n            return 1;\n        }\n        return 0;\n\
    \    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3_hz28ks.ts(7,22): error TS2304: Cannot find name
    ''binToInt''.

    ../../../../../tmp/tmp3_hz28ks.ts(8,27): error TS2304: Cannot find name ''binToInt''.

    '
  timestamp: 1659979623
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a,\
    \ b) => {\n        const ones = count_ones(a);\n        const onesB = count_ones(b);\n\
    \        if (onesB > ones) {\n            return -1;\n        }\n        if (onesB\
    \ < ones) {\n            return 1;\n        }\n        return a - b;\n    });\n\
    \    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8wfudntc.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmp8wfudntc.ts(8,23): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979623
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  const ones = arr.filter(n\
    \ => n & 1);\n  const decimals = arr.filter(n => !(n&1));\n  \n  return [...ones,\
    \ ...decimals].sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp2o__q2l3.js:20:12)\n    at Object.<anonymous> (/tmp/tmp2o__q2l3.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979623
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n\
    \        if (ones > ones_b) {\n            return -1;\n        } else if (ones\
    \ < ones_b) {\n            return 1;\n        } else {\n            return count_ones(a)\
    \ - count_ones(b);\n        }\n    });\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphp572tf4.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmphp572tf4.ts(8,24): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmphp572tf4.ts(14,20): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmphp572tf4.ts(14,36): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979623
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const result:\
    \ number[] = [];\n    const map = new Map<number, number>();\n    for (const num\
    \ of arr) {\n        const bin = num.toString(2);\n        const count = map.get(bin);\n\
    \        if (count === undefined) {\n            map.set(bin, 1);\n          \
    \  result.push(num);\n        } else {\n            map.set(bin, count + 1);\n\
    \        }\n    }\n    result.sort((a, b) => map.get(a) - map.get(b));\n    return\
    \ result.map(num => num.toString(2));\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpav4c7veu.ts(7,21): error TS2552: Cannot find name\
    \ 'Map'. Did you mean 'map'?\n../../../../../tmp/tmpav4c7veu.ts(19,5): error TS2322:\
    \ Type 'string[]' is not assignable to type 'number[]'.\n  Type 'string' is not\
    \ assignable to type 'number'.\n"
  timestamp: 1659979623
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones =\
    \ arr.filter(n => n & 1);\n    const decimals = arr.filter(n => !(n&1));\n   \
    \ const decimalsSorted = decimals.sort((a, b) => a - b);\n    const onesSorted\
    \ = ones.sort((a, b) => a - b);\n    return onesSorted.concat(decimalsSorted);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  5,\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp67n1iafo.js:15:12)\n    at Object.<anonymous> (/tmp/tmp67n1iafo.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 5,\
    \ 2, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979615
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a,\
    \ b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n\
    \        if (ones_b > ones) {\n            return -1;\n        } else if (ones_b\
    \ < ones) {\n            return 1;\n        } else {\n            return count_ones(a)\
    \ - count_ones(b);\n        }\n    });\n    return arr;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv5sezsa2.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpv5sezsa2.ts(8,24): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmpv5sezsa2.ts(14,20): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmpv5sezsa2.ts(14,36): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979623
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArr\
    \ = [];\n    let oneCount = 0;\n    for (let i = 0; i < arr.length; i++) {\n \
    \       if (arr[i] === 1) {\n            oneCount++;\n        } else {\n     \
    \       sortedArr.push(oneCount);\n            oneCount = 0;\n        }\n    }\n\
    \    sortedArr.push(oneCount);\n    return sortedArr.sort((a, b) => a - b);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpnqv0pbdk.js:23:12)\n    at Object.<anonymous> (/tmp/tmpnqv0pbdk.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979623
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let counts:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        counts.push(0);\n\
    \    }\n    for (let i = 0; i < arr.length; i++) {\n        counts[arr[i]]++;\n\
    \    }\n    let sorted: number[] = [];\n    for (let i = 0; i < counts.length;\
    \ i++) {\n        sorted.push(counts[i]);\n    }\n    sorted.sort((a, b) => a\
    \ - b);\n    for (let i = 0; i < sorted.length; i++) {\n        arr[i] = sorted[i];\n\
    \    }\n    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  1,\n  1,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n\
    \  3,\n  5\n]\n    at test (/tmp/tmp2q1my91j.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2q1my91j.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1,\
    \ 1, 1, NaN ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979623
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sorted:\
    \ number[] = [];\n    let ones: number[] = [];\n    let decimal: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       ones.push(arr[i]);\n        } else {\n            decimal.push(arr[i]);\n\
    \        }\n    }\n    ones = sort_array(ones);\n    decimal = sort_array(decimal);\n\
    \    sorted = ones.concat(decimal);\n    return sorted;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpkn9f4o9y.js:5\nfunction sort_array(arr) {\n                   ^\n\
    \nRangeError: Maximum call stack size exceeded\n    at sort_array (/tmp/tmpkn9f4o9y.js:5:20)\n\
    \    at sort_array (/tmp/tmpkn9f4o9y.js:17:12)\n    at sort_array (/tmp/tmpkn9f4o9y.js:17:12)\n\
    \    at sort_array (/tmp/tmpkn9f4o9y.js:17:12)\n    at sort_array (/tmp/tmpkn9f4o9y.js:17:12)\n\
    \    at sort_array (/tmp/tmpkn9f4o9y.js:17:12)\n    at sort_array (/tmp/tmpkn9f4o9y.js:17:12)\n\
    \    at sort_array (/tmp/tmpkn9f4o9y.js:17:12)\n    at sort_array (/tmp/tmpkn9f4o9y.js:17:12)\n\
    \    at sort_array (/tmp/tmpkn9f4o9y.js:17:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979623
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = ~~(a / 2);\n        const tens = a % 2;\n    \
    \    const tensOnes = ~~(b / 2);\n        const tensOnesOnes = b % 2;\n      \
    \  if (ones === tens) {\n            return tensOnesOnes - tensOnes;\n       \
    \ }\n        return tensOnes - tens;\n    });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  1,\n\
    \  3,\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp80z20e9q.js:20:12)\n    at Object.<anonymous> (/tmp/tmp80z20e9q.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 1, 3,\
    \ 2, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979624
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    const ones = count_ones(b);\n    const decA = count_decA(a);\n\
    \    const decB = count_decB(b);\n    if (decA === decB) {\n      return ones\
    \ - decA;\n    }\n    return decA - decB;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsx40p51u.ts(7,18): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpsx40p51u.ts(8,18): error TS2304: Cannot find name ''count_decA''.

    ../../../../../tmp/tmpsx40p51u.ts(9,18): error TS2304: Cannot find name ''count_decB''.

    '
  timestamp: 1659979624
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones\
    \ = arr.reduce((acc, val) => {\n        if (val === 1) {\n            acc += 1;\n\
    \        }\n        return acc;\n    }, 0);\n    if (ones === len) {\n       \
    \ return arr;\n    }\n    const decimal = ones / len;\n    const decimals = decimal.toFixed(2);\n\
    \    const decimalArray = decimal.split('.');\n    const decimalArrayLen = decimalArray.length;\n\
    \    const decimalArrayLen2 = decimalArrayLen + 1;\n    const decimalArray2 =\
    \ new Array(decimalArrayLen2);\n    for (let i = 0; i < decimalArrayLen2; i++)\
    \ {\n        decimalArray2[i] = decimalArray[i];\n    }\n    decimalArray2[decimalArrayLen2]\
    \ = '0';\n    for (let i = decimalArrayLen2; i < decimalArrayLen; i++) {\n   \
    \     decimalArray2[i] = decimalArray[i - decimalArrayLen2];\n    }\n    return\
    \ decimalArray2.sort((a, b) => {\n        const aNum = parseInt(a, 10);\n    \
    \    const bNum = parseInt(b, 10);\n        return aNum - bNum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsc_f8ybi.ts(21,34): error TS2339: Property ''split''
    does not exist on type ''number''.

    '
  timestamp: 1659979624
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(a);\n        const ones_b = count_ones(b);\n\
    \        if (ones_b > ones) {\n            return -1;\n        }\n        if (ones_b\
    \ < ones) {\n            return 1;\n        }\n        return a - b;\n    });\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgwdu5yz0.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpgwdu5yz0.ts(8,24): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979612
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len < 2) return arr;\n    const ones = arr.filter((x) =>\
    \ x === 1);\n    const len = ones.length;\n    if (len === 0) return arr;\n  \
    \  const arr = new Array(len);\n    for (let i = 0; i < len; i++) {\n        arr[i]\
    \ = ones[len - i - 1];\n    }\n    return arr;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb4akutpq.ts(5,21): error TS2300: Duplicate identifier
    ''arr''.

    ../../../../../tmp/tmpb4akutpq.ts(6,11): error TS2451: Cannot redeclare block-scoped
    variable ''len''.

    ../../../../../tmp/tmpb4akutpq.ts(9,11): error TS2451: Cannot redeclare block-scoped
    variable ''len''.

    ../../../../../tmp/tmpb4akutpq.ts(11,11): error TS2300: Duplicate identifier ''arr''.

    '
  timestamp: 1659979624
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let result:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        let ones\
    \ = arr[i];\n        let decimal = ones - ones * ones;\n        result.push(decimal);\n\
    \    }\n    result.sort((a, b) => a - b);\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -20,\n  -12,\n\
    \  -6,\n  -2,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpyzpgrpwn.js:18:12)\n    at Object.<anonymous> (/tmp/tmpyzpgrpwn.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -20, -12,\
    \ -6, -2, 0 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979624
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b)\
    \ => {\n    const ones = count_ones(a);\n    const ones_b = count_ones(b);\n \
    \   if (ones > ones_b) {\n      return -1;\n    }\n    if (ones < ones_b) {\n\
    \      return 1;\n    }\n    return a - b;\n  });\n  return arr;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphb9ssmz0.ts(7,18): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmphb9ssmz0.ts(8,20): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979624
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray\
    \ = arr.slice();\n    sortedArray.sort((a, b) => {\n        let oneCount = 0;\n\
    \        let decimalCount = 0;\n        for (let i = 0; i < a.length; i++) {\n\
    \            if (a[i] == 1) {\n                oneCount++;\n            } else\
    \ {\n                decimalCount++;\n            }\n        }\n        if (oneCount\
    \ > decimalCount) {\n            return -1;\n        } else if (oneCount < decimalCount)\
    \ {\n            return 1;\n        } else {\n            return 0;\n        }\n\
    \    });\n    return sortedArray;\n}\n</code>\n<|/ a tags=sorting,javascript,arrays\
    \ |>\n<| c |>\nThis doesn't work if there are two or more 1's in the array. For\
    \ example, `[1,1,1,1]` returns `[1,1,1,1]` instead of `[1,1,1,0]`.\n<|/ c |>\n\
    <| c |>\nIt does work if there are two or more 1's in the array. Try it yourself.\n\
    <|/ c |>\n<| c |>\nYes, it does. Try it yourself.\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it yourself.\n<|/ c |>\n<| c |>\nIt does work. Try it yourself.\n\
    <|/ c |>\n<| a tags=sorting,javascript,arrays |>\n<code>\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp564t2rh9.ts(27,2): error TS1110: Type expected.

    ../../../../../tmp/tmp564t2rh9.ts(27,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp564t2rh9.ts(28,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp564t2rh9.ts(28,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp564t2rh9.ts(29,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp564t2rh9.ts(29,7): error TS1109: Expression expected.

    ../../../../../tmp/tmp564t2rh9.ts(30,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmp564t2rh9.ts(30,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmp564t2rh9.ts(30,46): error TS1005: '';'' expected.

    ../../../../../tmp/tmp564t2rh9.ts(30,55): error TS1005: '';'' expected.

    ../../../../../tmp/tmp564t2rh9.ts(30,66): error TS1005: '';'' expected.

    ../../../../../tmp/tmp564t2rh9.ts(30,87): error TS1005: '';'' expected.

    ../../../../../tmp/tmp564t2rh9.ts(30,107): error TS1005: '';'' expected.

    ../../../../../tmp/tmp564t2rh9.ts(30,115): error TS1005: '';'' expected.

    ../../../../../tmp/tmp564t2rh9.ts(31,1): error TS1003: Identifier expected.

    ../../../../../tmp/tmp564t2rh9.ts(31,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp564t2rh9.ts(31,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp564t2rh9.ts(32,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp564t2rh9.ts(32,7): error TS1109: Expression expected.

    ../../../../../tmp/tmp564t2rh9.ts(33,4): error TS1005: '';'' expected.

    ../../../../../tmp/tmp564t2rh9.ts(33,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmp564t2rh9.ts(33,14): error TS1005: '';'' expected.

    ../../../../../tmp/tmp564t2rh9.ts(33,17): error TS1005: ''('' expected.

    ../../../../../tmp/tmp564t2rh9.ts(33,23): error TS1005: '')'' expected.

    ../../../../../tmp/tmp564t2rh9.ts(33,27): error TS1005: '';'' expected.

    ../../../../../tmp/tmp564t2rh9.ts(33,31): error TS1005: '';'' expected.

    ../../../../../tmp/tmp564t2rh9.ts(33,34): error TS1005: '';'' expected.

    ../../../../../tmp/tmp564t2rh9.ts(33,39'
  timestamp: 1659979624
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = binToInt(a);\n        const zerosOrOnes = binToInt(b);\n\
    \        if (ones === zerosOrOnes) {\n            return 0;\n        }\n     \
    \   if (ones < zerosOrOnes) {\n            return -1;\n        }\n        return\
    \ 1;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpit5zxi9q.ts(7,22): error TS2304: Cannot find name
    ''binToInt''.

    ../../../../../tmp/tmpit5zxi9q.ts(8,29): error TS2304: Cannot find name ''binToInt''.

    '
  timestamp: 1659979624
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray\
    \ = arr.slice();\n    sortedArray.sort((a, b) => {\n        let oneCount = 0;\n\
    \        let decCount = 0;\n        for (let i = 0; i < a.length; i++) {\n   \
    \         if (a[i] == 1) {\n                oneCount++;\n            } else {\n\
    \                decCount++;\n            }\n        }\n        if (oneCount >\
    \ decCount) {\n            return -1;\n        } else if (oneCount < decCount)\
    \ {\n            return 1;\n        } else {\n            return 0;\n        }\n\
    \    });\n    return sortedArray;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpav2acsqk.ts(10,31): error TS2339: Property ''length''
    does not exist on type ''number''.

    '
  timestamp: 1659979624
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(b);\n        const decA = count_decA(a);\n\
    \        const decB = count_decB(b);\n        if (decA === decB) {\n         \
    \   return count_decA(a) - count_decB(b);\n        }\n        return decA - decB;\n\
    \    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfzwv60vs.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpfzwv60vs.ts(8,22): error TS2304: Cannot find name ''count_decA''.

    ../../../../../tmp/tmpfzwv60vs.ts(9,22): error TS2304: Cannot find name ''count_decB''.

    ../../../../../tmp/tmpfzwv60vs.ts(11,20): error TS2304: Cannot find name ''count_decA''.

    ../../../../../tmp/tmpfzwv60vs.ts(11,36): error TS2304: Cannot find name ''count_decB''.

    '
  timestamp: 1659979625
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    const ones = count_ones(a);\n    const onesB = count_ones(b);\n\
    \    if (ones === onesB) {\n      return a - b;\n    }\n    return ones - onesB;\n\
    \  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdjws9o3r.ts(7,18): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpdjws9o3r.ts(8,19): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979615
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let counts:\
    \ number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        counts.push(0);\n\
    \    }\n    for (let i = 0; i < arr.length; i++) {\n        counts[arr[i]]++;\n\
    \    }\n    let sorted: number[] = [];\n    for (let i = 0; i < counts.length;\
    \ i++) {\n        sorted.push(i);\n    }\n    sorted.sort((a, b) => {\n      \
    \  if (counts[a] === counts[b]) {\n            return a - b;\n        }\n    \
    \    return counts[a] - counts[b];\n    });\n    return sorted;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n\
    \  3,\n  5\n]\n    at test (/tmp/tmp8lz4x12_.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8lz4x12_.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2,\
    \ 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979625
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a,\
    \ b) => {\n        const ones = count_ones(b);\n        const decimal = count_decimal(b);\n\
    \        if (ones < decimal) {\n            return -1;\n        }\n        if\
    \ (ones > decimal) {\n            return 1;\n        }\n        return 0;\n  \
    \  });\n    return arr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaup_85ut.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpaup_85ut.ts(8,25): error TS2304: Cannot find name ''count_decimal''.

    '
  timestamp: 1659979625
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = binToInt(a);\n        const zerosOnes = binToInt(b);\n\
    \        if (ones === zerosOnes) {\n            return a.localeCompare(b);\n \
    \       }\n        return ones - zerosOnes;\n    });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj2b0ene_.ts(7,22): error TS2304: Cannot find name
    ''binToInt''.

    ../../../../../tmp/tmpj2b0ene_.ts(8,27): error TS2304: Cannot find name ''binToInt''.

    ../../../../../tmp/tmpj2b0ene_.ts(10,22): error TS2339: Property ''localeCompare''
    does not exist on type ''number''.

    '
  timestamp: 1659979625
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = count_ones(b);\n        const decimal = count_decimal(b);\n\
    \        if (ones === decimal) {\n            return a - b;\n        }\n     \
    \   return ones - decimal;\n    });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnbn21gq5.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpnbn21gq5.ts(8,25): error TS2304: Cannot find name ''count_decimal''.

    '
  timestamp: 1659979610
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a, b)\
    \ => {\n    if (a === 0) return -1;\n    if (b === 0) return 1;\n    return count_ones(a)\
    \ - count_ones(b);\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoc67diwo.ts(9,12): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpoc67diwo.ts(9,28): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979625
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones =\
    \ arr.filter(n => n & 1);\n    const decimals = arr.filter(n => !(n&1));\n   \
    \ const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedWithOnes\
    \ = decimalsSorted.concat(ones);\n    return decimalsSortedWithOnes;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4,\n\
    \  1,\n  5,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmphxwiurq_.js:15:12)\n    at Object.<anonymous> (/tmp/tmphxwiurq_.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 1,\
    \ 5, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979615
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len === 0) {\n        return arr;\n    }\n    const ones\
    \ = arr.filter(x => x === 1);\n    const len = ones.length;\n    if (len === 0)\
    \ {\n        return arr;\n    }\n    const biggest = ones[len - 1];\n    const\
    \ smallest = ones[0];\n    const biggestIndex = arr.indexOf(biggest);\n    const\
    \ smallestIndex = arr.indexOf(smallest);\n    const biggestOnesCount = biggest\
    \ === 1 ? 0 : biggest - 1;\n    const smallestOnesCount = smallest === 1 ? 0 :\
    \ smallest - 1;\n    const biggestOnesIndex = biggestIndex + biggestOnesCount;\n\
    \    const smallestOnesIndex = smallestIndex + smallestOnesCount;\n    const biggestOnesCount\
    \ = biggest === 1 ? 0 : biggest - 1;\n    const smallestOnesCount = smallest ===\
    \ 1 ? 0 : smallest - 1;\n    const biggestOnesIndex = biggestIndex + biggestOnesCount;\n\
    \    const smallestOnesIndex = smallestIndex + smallestOnesCount;\n    const biggestOnesCount\
    \ = biggest === 1 ? 0 : biggest - 1;\n    const smallestOnesCount = smallest ===\
    \ 1 ? 0 : smallest - 1;\n    const biggestOnesIndex = biggestIndex + biggestOnesCount;\n\
    \    const smallestOnesIndex = smallestIndex + smallestOnesCount;\n    const biggestOnesCount\
    \ = biggest === 1 ? 0 : biggest - 1;\n    const smallestOnesCount = smallest ===\
    \ 1 ? 0 : smallest - 1;\n    const biggestOnesIndex = biggestIndex + biggestOnesCount;\n\
    \    const smallestOnesIndex = smallestIndex + smallestOnesCount;\n    const biggestOnesCount\
    \ = biggest === 1 ? 0 : biggest - 1;\n    const smallestOnesCount = smallest ===\
    \ 1 ? 0 : smallest - 1;\n    const biggestOnesIndex = biggestIndex + biggestOnesCount;\n\
    \    const smallestOnesIndex = smallestIndex + smallestOnesCount;\n    const biggestOnesCount\
    \ = biggest === 1 ? 0 : biggest - 1;\n    const smallestOnesCount = smallest ===\
    \ 1 ? 0 : smallest - 1;\n    const biggestOnesIndex = biggestIndex + biggestOnesCount;\n\
    \    const smallestOnesIndex = smallestIndex + smallestOnesCount;\n    const biggestOnesCount\
    \ = biggest === 1 ? 0 : biggest - 1;\n    const smallestOnesCount = smallest ===\
    \ 1 ? 0 : smallest - 1;\n    const biggestOnesIndex = biggestIndex + biggestOnesCount;\n\
    \    const smallest\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdadwc8ih.ts(63,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979625
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    let sortedArray\
    \ = arr.slice();\n    sortedArray.sort((a, b) => {\n        let ones = Math.log2(a);\n\
    \        let twos = Math.log2(b);\n        if (ones < twos) {\n            return\
    \ -1;\n        } else if (ones > twos) {\n            return 1;\n        } else\
    \ {\n            return a - b;\n        }\n    });\n    return sortedArray;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5lrkjo9o.ts(8,25): error TS2551: Property ''log2''
    does not exist on type ''Math''. Did you mean ''LOG2E''?

    ../../../../../tmp/tmp5lrkjo9o.ts(9,25): error TS2551: Property ''log2'' does
    not exist on type ''Math''. Did you mean ''LOG2E''?

    '
  timestamp: 1659979622
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a:\
    \ number, b: number) => {\n        const ones = count_ones(a);\n        const\
    \ ones_b = count_ones(b);\n        if (ones_b < ones) {\n            return -1;\n\
    \        }\n        if (ones_b > ones) {\n            return 1;\n        }\n \
    \       return a - b;\n    });\n    return arr;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmdklds8y.ts(7,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpmdklds8y.ts(8,24): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979625
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    return arr.sort((a,\
    \ b) => {\n        const ones = binToInt(a);\n        const twos = binToInt(b);\n\
    \        if (ones < twos) {\n            return -1;\n        } else if (ones >\
    \ twos) {\n            return 1;\n        } else {\n            return 0;\n  \
    \      }\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjpk33g5z.ts(7,22): error TS2304: Cannot find name
    ''binToInt''.

    ../../../../../tmp/tmpjpk33g5z.ts(8,22): error TS2304: Cannot find name ''binToInt''.

    '
  timestamp: 1659979613
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len < 2) return arr;\n    const ones = arr.filter(x =>\
    \ x === 1);\n    const dec = ones.length * 10;\n    const sorted = ones\n    \
    \    .map(x => [x, dec])\n        .sort((a, b) => b[1] - a[1])\n        .map(x\
    \ => x[0]);\n    return sorted.map(x => arr[x]);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmph2h2wo52.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmph2h2wo52.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5 ],\n \
    \ expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979625
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const len =\
    \ arr.length;\n    if (len < 2) {\n        return arr;\n    }\n    const ones\
    \ = arr.filter((v) => v === 1);\n    const len = ones.length;\n    if (len ===\
    \ 0) {\n        return arr;\n    }\n    const maxOnes = Math.max.apply(null, ones);\n\
    \    const maxDecimal = Math.max.apply(null, ones.map(v => v.toString().split('').map(Number).reduce((a,\
    \ b) => a + b, 0)));\n    const decimal = maxDecimal.toString().split('').map(Number).reduce((a,\
    \ b) => a + b, 0);\n    const decimalLen = decimal.toString().length;\n    const\
    \ decimalNum = decimalLen / Math.pow(10, decimalLen);\n    const decimalNumLen\
    \ = Math.ceil(decimalNum);\n    const decimalNumStr = decimalNum.toString();\n\
    \    const decimalNumStrLen = decimalNumStr.length;\n    const decimalNumStrArr\
    \ = decimalNumStr.split('');\n    const decimalNumStrArrLen = decimalNumStrArr.length;\n\
    \    const decimalNumStrArrLen2 = decimalNumStrArrLen + decimalNumStrArrLen -\
    \ 1;\n    const decimalNumStrArrLen3 = decimalNumStrArrLen - 1;\n    const decimalNumStrArrLen4\
    \ = decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen - 1;\n   \
    \ const decimalNumStrArrLen5 = decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen\
    \ + decimalNumStrArrLen - 1;\n    const decimalNumStrArrLen6 = decimalNumStrArrLen\
    \ + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen\
    \ - 1;\n    const decimalNumStrArrLen7 = decimalNumStrArrLen + decimalNumStrArrLen\
    \ + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen\
    \ - 1;\n    const decimalNumStrArrLen8 = decimalNumStrArrLen + decimalNumStrArrLen\
    \ + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen\
    \ + decimalNumStrArrLen - 1;\n    const decimalNumStrArrLen9 = decimalNumStrArrLen\
    \ + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen\
    \ + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen - 1;\n   \
    \ const decimalNumStrArrLen10 = decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen\
    \ + decimalNumStrArrLen + decimalNumStrArrLen + decimalNumStrArrLen + decimalNum\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1ax43kdu.ts(50,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979625
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n  const len = arr.length;\n\
    \  if (len === 0) {\n    return arr;\n  }\n  const ones = arr.reduce((acc, val)\
    \ => acc + val, 0);\n  const sortedArr = arr.sort((a, b) => {\n    if (a === b)\
    \ {\n      return 0;\n    }\n    const aBin = parseInt(a.toString(2), 2);\n  \
    \  const bBin = parseInt(b.toString(2), 2);\n    return aBin - bBin;\n  });\n\
    \  const sortedArr2 = sortedArr.sort((a, b) => {\n    if (a === b) {\n      return\
    \ 0;\n    }\n    const aDec = a.toString(10);\n    const bDec = b.toString(10);\n\
    \    return aDec - bDec;\n  });\n  return sortedArr2.concat(sortedArr);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd1jaclw5.ts(25,12): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpd1jaclw5.ts(25,19): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659979625
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\nfunction sort_array(arr: number[]): number[] {\n    const ones =\
    \ arr.filter(n => n & 1);\n    const decimals = arr.filter(n => !(n & 1));\n \
    \   const decimalsSorted = decimals.sort((a, b) => a - b);\n    const decimalsSortedWithOnes\
    \ = decimalsSorted.concat(ones);\n    return decimalsSortedWithOnes;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4,\n\
    \  1,\n  5,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpzvcxyqiq.js:15:12)\n    at Object.<anonymous> (/tmp/tmpzvcxyqiq.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 1,\
    \ 5, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979625
