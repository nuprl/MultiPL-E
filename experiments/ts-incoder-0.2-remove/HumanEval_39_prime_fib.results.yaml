language: ts
name: HumanEval_39_prime_fib
results:
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let a = 0;\n  let b = 0;\n  let c = 0;\n  for (let i = 0; i < n; i++) {\n \
    \   fib[i] = a + b;\n    a = b;\n    b = c;\n    c = fib[i];\n  }\n  return fib[n];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n2\n    at test (/tmp/tmptrb2q_rf.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptrb2q_rf.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let counter: number = 0;\n  let temp: number =\
    \ 0;\n  let temp2: number = 0;\n  let temp3: number = 0;\n  let temp4: number\
    \ = 0;\n  let temp5: number = 0;\n  let temp6: number = 0;\n  let temp7: number\
    \ = 0;\n  let temp8: number = 0;\n  let temp9: number = 0;\n  let temp10: number\
    \ = 0;\n  let temp11: number = 0;\n  let temp12: number = 0;\n  let temp13: number\
    \ = 0;\n  let temp14: number = 0;\n  let temp15: number = 0;\n  let temp16: number\
    \ = 0;\n  let temp17: number = 0;\n  let temp18: number = 0;\n  let temp19: number\
    \ = 0;\n  let temp20: number = 0;\n  let temp21: number = 0;\n  let temp22: number\
    \ = 0;\n  let temp23: number = 0;\n  let temp24: number = 0;\n  let temp25: number\
    \ = 0;\n  let temp26: number = 0;\n  let temp27: number = 0;\n  let temp28: number\
    \ = 0;\n  let temp29: number = 0;\n  let temp30: number = 0;\n  let temp31: number\
    \ = 0;\n  let temp32: number = 0;\n  let temp33: number = 0;\n  let temp34: number\
    \ = 0;\n  let temp35: number = 0;\n  let temp36: number = 0;\n  let temp37: number\
    \ = 0;\n  let temp38: number = 0;\n  let temp39: number = 0;\n  let temp40: number\
    \ = 0;\n  let temp41: number = 0;\n  let temp42: number = 0;\n  let temp43: number\
    \ = 0;\n  let temp44: number = 0;\n  let temp45: number = 0;\n  let temp46: number\
    \ = 0;\n  let temp47: number = 0;\n  let temp48: number = 0;\n  let temp49: number\
    \ = 0;\n  let temp50: number = 0;\n  let temp51: number = 0;\n  let temp52: number\
    \ = 0;\n  let temp53: number = 0;\n  let temp54: number = 0;\n  let temp55: number\
    \ = 0;\n  let temp56: number = 0;\n  let temp57: number = 0;\n  let temp58: number\
    \ = 0;\n  let temp59: number = 0;\n  let temp60: number = 0;\n  let temp61: number\
    \ = 0;\n  let temp62: number = 0;\n  let temp63: number = 0;\n  let temp64: number\
    \ = 0;\n  let temp65: number = 0;\n  let temp66: number = 0;\n  let temp67: number\
    \ = 0;\n  let temp68: number = 0;\n  let temp69: number = 0;\n  let temp70: number\
    \ = 0;\n  let temp71: number = 0;\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpusap7tma.ts(96,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let counter: number = 0;\n  while (counter < n)\
    \ {\n    fib.push(counter);\n    counter++;\n  }\n  for (let i = 0; i < fib.length;\
    \ i++) {\n    for (let j = 0; j < fib.length; j++) {\n      if (fib[j] + fib[j\
    \ + 1] === fib[i]) {\n        prime = fib.slice(i, j + 1);\n      }\n    }\n \
    \ }\n  return prime[prime.length - 1];\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n2\n    at test (/tmp/tmpvljlm78z.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvljlm78z.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpqgppkm0d.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqgppkm0d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let isPrime: boolean;\n  let isFibonacci: boolean;\n\
    \  let isPrimeFibonacci: boolean;\n  let isPrimeFibonacciPrime: boolean;\n  let\
    \ isPrimeFibonacciPrimeFibonacci: boolean;\n  let isPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacci: boolean;\n  let\
    \ isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime: boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps3qtx82y.ts(38,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpi8tf534w.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpi8tf534w.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 == 0) return 3;\n  if (n % 3 == 0) return 4;\n\
    \  if (n % 5 == 0) return 5;\n  if (n % 7 == 0) return 6;\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsv688smj.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsv688smj.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 == 0) return 3;\n  if (n % 3 == 0) return 4;\n\
    \  if (n % 5 == 0) return 5;\n  if (n % 7 == 0) return 6;\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsv688smj.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsv688smj.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 === 0) return 0;\n  if (n % 3 === 1) return\
    \ 1;\n  if (n % 4 === 2) return 2;\n  if (n % 5 === 3) return 3;\n  if (n % 6\
    \ === 5) return 4;\n  if (n % 7 === 7) return 5;\n  if (n % 8 === 8) return 6;\n\
    \  if (n % 9 === 9) return 7;\n  if (n % 10 === 10) return 8;\n  if (n % 11 ===\
    \ 11) return 9;\n  if (n % 12 === 12) return 10;\n  if (n % 13 === 13) return\
    \ 11;\n  if (n % 14 === 14) return 12;\n  if (n % 15 === 15) return 13;\n  if\
    \ (n % 16 === 16) return 14;\n  if (n % 17 === 17) return 15;\n  if (n % 18 ===\
    \ 18) return 16;\n  if (n % 19 === 19) return 17;\n  if (n % 20 === 20) return\
    \ 18;\n  if (n % 21 === 21) return 19;\n  if (n % 22 === 22) return 20;\n  if\
    \ (n % 23 === 23) return 21;\n  if (n % 24 === 24) return 22;\n  if (n % 25 ===\
    \ 25) return 23;\n  if (n % 26 === 26) return 24;\n  if (n % 27 === 27) return\
    \ 25;\n  if (n % 28 === 28) return 26;\n  if (n % 29 === 29) return 27;\n  if\
    \ (n % 30 === 30) return 28;\n  if (n % 31 === 31) return 29;\n  if (n % 32 ===\
    \ 32) return 30;\n  if (n % 33 === 33) return 31;\n  if (n % 34 === 34) return\
    \ 32;\n  if (n % 35 === 35) return 33;\n  if (n % 36 === 36) return 34;\n  if\
    \ (n % 37 === 37) return 35;\n  if (n % 38 === 38) return 36;\n  if (n % 39 ===\
    \ 39) return 37;\n  if (n % 40 === 40) return 38;\n  if (n % 41 === 41) return\
    \ 39;\n  if (n % 42 === 42) return 40;\n  if (n % 43 === 43) return 41;\n  if\
    \ (n % 44 === 44) return 42;\n  if (n % 45 === 45) return 43;\n  if (n % 46 ===\
    \ 46) return 44;\n  if (n % 47 === 47) return 45;\n  if (n % 48 === 48) return\
    \ 46;\n  if (n % 49 === 49) return 47;\n  if (n % 50 === 50) return 48;\n  if\
    \ (n % 51 === 51) return 49;\n  if (n % 52 === 52) return 50;\n  if (n % 53 ===\
    \ 53) return 51;\n  if (n % 54 === 54) return 52;\n  if (n % 55 === 55) return\
    \ 53;\n  if (n % 56 === 56) return 54;\n  if (n % 57 === 57) return 55;\n  if\
    \ (n % 58 === 58) return 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpep47s0nt.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let fib_index: number[] = [];\n  let fib_index2: number[] = [];\n  let fib_index3:\
    \ number[] = [];\n  let fib_index4: number[] = [];\n  let fib_index5: number[]\
    \ = [];\n  let fib_index6: number[] = [];\n  let fib_index7: number[] = [];\n\
    \  let fib_index8: number[] = [];\n  let fib_index9: number[] = [];\n  let fib_index10:\
    \ number[] = [];\n  let fib_index11: number[] = [];\n  let fib_index12: number[]\
    \ = [];\n  let fib_index13: number[] = [];\n  let fib_index14: number[] = [];\n\
    \  let fib_index15: number[] = [];\n  let fib_index16: number[] = [];\n  let fib_index17:\
    \ number[] = [];\n  let fib_index18: number[] = [];\n  let fib_index19: number[]\
    \ = [];\n  let fib_index20: number[] = [];\n  let fib_index21: number[] = [];\n\
    \  let fib_index22: number[] = [];\n  let fib_index23: number[] = [];\n  let fib_index24:\
    \ number[] = [];\n  let fib_index25: number[] = [];\n  let fib_index26: number[]\
    \ = [];\n  let fib_index27: number[] = [];\n  let fib_index28: number[] = [];\n\
    \  let fib_index29: number[] = [];\n  let fib_index30: number[] = [];\n  let fib_index31:\
    \ number[] = [];\n  let fib_index32: number[] = [];\n  let fib_index33: number[]\
    \ = [];\n  let fib_index34: number[] = [];\n  let fib_index35: number[] = [];\n\
    \  let fib_index36: number[] = [];\n  let fib_index37: number[] = [];\n  let fib_index38:\
    \ number[] = [];\n  let fib_index39: number[] = [];\n  let fib_index40: number[]\
    \ = [];\n  let fib_index41: number[] = [];\n  let fib_index42: number[] = [];\n\
    \  let fib_index43: number[] = [];\n  let fib_index44: number[] = [];\n  let fib_index45:\
    \ number[] = [];\n  let fib_index46: number[] = [];\n  let fib_index47: number[]\
    \ = [];\n  let fib_index48: number[] = [];\n  let fib_index49: number[] = [];\n\
    \  let fib_index50: number[] = [];\n  let fib_index51: number[] = [];\n  let fib_index52:\
    \ number[] = [];\n  let fib_index53: number[] = [];\n  let fib_index54: number[]\
    \ = [];\n  let fib_index55: number[] = [];\n  let fib_index56: number[] = [];\n\
    \  let fib_index57: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpupbqdh4t.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  for (let i = 0; i <= n; i++) {\n    fib.push(i);\n\
    \  }\n  for (let i = 0; i <= n; i++) {\n    if (fib[i] % 2 === 0) {\n      prime\
    \ = fib.slice();\n      fib.splice(i, 1);\n    }\n  }\n  return prime[prime.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpcjojs6n6.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcjojs6n6.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let fib_index: number[] = [];\n  let fib_index2: number[] = [];\n  let fib_index3:\
    \ number[] = [];\n  let fib_index4: number[] = [];\n  let fib_index5: number[]\
    \ = [];\n  let fib_index6: number[] = [];\n  let fib_index7: number[] = [];\n\
    \  let fib_index8: number[] = [];\n  let fib_index9: number[] = [];\n  let fib_index10:\
    \ number[] = [];\n  let fib_index11: number[] = [];\n  let fib_index12: number[]\
    \ = [];\n  let fib_index13: number[] = [];\n  let fib_index14: number[] = [];\n\
    \  let fib_index15: number[] = [];\n  let fib_index16: number[] = [];\n  let fib_index17:\
    \ number[] = [];\n  let fib_index18: number[] = [];\n  let fib_index19: number[]\
    \ = [];\n  let fib_index20: number[] = [];\n  let fib_index21: number[] = [];\n\
    \  let fib_index22: number[] = [];\n  let fib_index23: number[] = [];\n  let fib_index24:\
    \ number[] = [];\n  let fib_index25: number[] = [];\n  let fib_index26: number[]\
    \ = [];\n  let fib_index27: number[] = [];\n  let fib_index28: number[] = [];\n\
    \  let fib_index29: number[] = [];\n  let fib_index30: number[] = [];\n  let fib_index31:\
    \ number[] = [];\n  let fib_index32: number[] = [];\n  let fib_index33: number[]\
    \ = [];\n  let fib_index34: number[] = [];\n  let fib_index35: number[] = [];\n\
    \  let fib_index36: number[] = [];\n  let fib_index37: number[] = [];\n  let fib_index38:\
    \ number[] = [];\n  let fib_index39: number[] = [];\n  let fib_index40: number[]\
    \ = [];\n  let fib_index41: number[] = [];\n  let fib_index42: number[] = [];\n\
    \  let fib_index43: number[] = [];\n  let fib_index44: number[] = [];\n  let fib_index45:\
    \ number[] = [];\n  let fib_index46: number[] = [];\n  let fib_index47: number[]\
    \ = [];\n  let fib_index48: number[] = [];\n  let fib_index49: number[] = [];\n\
    \  let fib_index50: number[] = [];\n  let fib_index51: number[] = [];\n  let fib_index52:\
    \ number[] = [];\n  let fib_index53: number[] = [];\n  let fib_index54: number[]\
    \ = [];\n  let fib_index55: number[] = [];\n  let fib_index56: number[] = [];\n\
    \  let fib_index57: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpupbqdh4t.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  let fibs: number[] = [];\n  for\
    \ (let i = 3; i <= n; i += 2) {\n    fibs.push(prime_fib(i - 1) + prime_fib(i\
    \ - 2));\n  }\n  return fibs[n - 1];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpuzjf4q3c.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpuzjf4q3c.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    if (n <= 1) return 1;\n\
    \    if (n === 2) return 2;\n    if (n % 2 === 0) return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n    return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpiblxn9u3.js:14:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpiblxn9u3.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let counter: number = 0;\n  while (counter < n)\
    \ {\n    fib.push(counter);\n    counter++;\n  }\n  for (let i = 0; i < fib.length;\
    \ i++) {\n    if (fib[i] % 2 === 0) {\n      prime = fib.slice(i);\n      break;\n\
    \    }\n  }\n  return prime[prime.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpote7dak6.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpote7dak6.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpqgppkm0d.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqgppkm0d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return\
    \ 4;\n  if (n % 5 === 0) return 5;\n  if (n % 7 === 0) return 6;\n  if (n % 11\
    \ === 0) return 7;\n  if (n % 13 === 0) return 8;\n  if (n % 17 === 0) return\
    \ 9;\n  if (n % 19 === 0) return 10;\n  if (n % 23 === 0) return 11;\n  if (n\
    \ % 29 === 0) return 12;\n  if (n % 31 === 0) return 13;\n  if (n % 37 === 0)\
    \ return 14;\n  if (n % 43 === 0) return 15;\n  if (n % 53 === 0) return 16;\n\
    \  if (n % 59 === 0) return 17;\n  if (n % 63 === 0) return 18;\n  if (n % 69\
    \ === 0) return 19;\n  if (n % 73 === 0) return 20;\n  if (n % 79 === 0) return\
    \ 21;\n  if (n % 83 === 0) return 22;\n  if (n % 87 === 0) return 23;\n  if (n\
    \ % 97 === 0) return 24;\n  if (n % 103 === 0) return 25;\n  if (n % 105 === 0)\
    \ return 26;\n  if (n % 111 === 0) return 27;\n  if (n % 127 === 0) return 28;\n\
    \  if (n % 131 === 0) return 29;\n  if (n % 139 === 0) return 30;\n  if (n % 143\
    \ === 0) return 31;\n  if (n % 147 === 0) return 32;\n  if (n % 151 === 0) return\
    \ 33;\n  if (n % 153 === 0) return 34;\n  if (n % 155 === 0) return 35;\n  if\
    \ (n % 159 === 0) return 36;\n  if (n % 163 === 0) return 37;\n  if (n % 165 ===\
    \ 0) return 38;\n  if (n % 167 === 0) return 39;\n  if (n % 169 === 0) return\
    \ 40;\n  if (n % 173 === 0) return 41;\n  if (n % 175 === 0) return 42;\n  if\
    \ (n % 177 === 0) return 43;\n  if (n % 179 === 0) return 44;\n  if (n % 183 ===\
    \ 0) return 45;\n  if (n % 185 === 0) return 46;\n  if (n % 189 === 0) return\
    \ 47;\n  if (n % 191 === 0) return 48;\n  if (n % 193 === 0) return 49;\n  if\
    \ (n % 195 === 0) return 50;\n  if (n % 199 === 0) return 51;\n  if (n % 203 ===\
    \ 0) return 52;\n  if (n % 205 === 0) return 53;\n  if (n % 209 === 0) return\
    \ 54;\n  if (n % 211 === 0) return 55;\n  if (n % 213 === 0) return 56;\n  if\
    \ (n % 215\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp72_pi24n.ts(60,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmp72_pi24n.ts(78,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let fib_index: number[] = [];\n  let fib_index2: number[] = [];\n  let fib_index3:\
    \ number[] = [];\n  let fib_index4: number[] = [];\n  let fib_index5: number[]\
    \ = [];\n  let fib_index6: number[] = [];\n  let fib_index7: number[] = [];\n\
    \  let fib_index8: number[] = [];\n  let fib_index9: number[] = [];\n  let fib_index10:\
    \ number[] = [];\n  let fib_index11: number[] = [];\n  let fib_index12: number[]\
    \ = [];\n  let fib_index13: number[] = [];\n  let fib_index14: number[] = [];\n\
    \  let fib_index15: number[] = [];\n  let fib_index16: number[] = [];\n  let fib_index17:\
    \ number[] = [];\n  let fib_index18: number[] = [];\n  let fib_index19: number[]\
    \ = [];\n  let fib_index20: number[] = [];\n  let fib_index21: number[] = [];\n\
    \  let fib_index22: number[] = [];\n  let fib_index23: number[] = [];\n  let fib_index24:\
    \ number[] = [];\n  let fib_index25: number[] = [];\n  let fib_index26: number[]\
    \ = [];\n  let fib_index27: number[] = [];\n  let fib_index28: number[] = [];\n\
    \  let fib_index29: number[] = [];\n  let fib_index30: number[] = [];\n  let fib_index31:\
    \ number[] = [];\n  let fib_index32: number[] = [];\n  let fib_index33: number[]\
    \ = [];\n  let fib_index34: number[] = [];\n  let fib_index35: number[] = [];\n\
    \  let fib_index36: number[] = [];\n  let fib_index37: number[] = [];\n  let fib_index38:\
    \ number[] = [];\n  let fib_index39: number[] = [];\n  let fib_index40: number[]\
    \ = [];\n  let fib_index41: number[] = [];\n  let fib_index42: number[] = [];\n\
    \  let fib_index43: number[] = [];\n  let fib_index44: number[] = [];\n  let fib_index45:\
    \ number[] = [];\n  let fib_index46: number[] = [];\n  let fib_index47: number[]\
    \ = [];\n  let fib_index48: number[] = [];\n  let fib_index49: number[] = [];\n\
    \  let fib_index50: number[] = [];\n  let fib_index51: number[] = [];\n  let fib_index52:\
    \ number[] = [];\n  let fib_index53: number[] = [];\n  let fib_index54: number[]\
    \ = [];\n  let fib_index55: number[] = [];\n  let fib_index56: number[] = [];\n\
    \  let fib_index57: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpupbqdh4t.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 2) + prime_fib(n - 1);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmplz76pf1a.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplz76pf1a.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + 2;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmppxj5gqku.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppxj5gqku.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return\
    \ 3;\n  }\n  if (n % 2 === 0) {\n    return prime_fib(n - 1) + prime_fib(n - 2);\n\
    \  }\n  if (n % 3 === 0) {\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3);\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3)\
    \ + prime_fib(n - 4);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpdvlu7vdi.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdvlu7vdi.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 == 0) return 3;\n  if (n % 3 == 0) return 4;\n\
    \  if (n % 5 == 0) return 5;\n  if (n % 7 == 0) return 6;\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsv688smj.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsv688smj.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpqgppkm0d.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqgppkm0d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n < 4) return 2;\n  if (n < 7) return 3;\n  if (n < 9) return 5;\n  if (n <\
    \ 13) return 8;\n  if (n < 17) return 11;\n  if (n < 19) return 13;\n  if (n <\
    \ 23) return 15;\n  if (n < 27) return 17;\n  if (n < 31) return 19;\n  if (n\
    \ < 37) return 23;\n  if (n < 41) return 27;\n  if (n < 43) return 31;\n  if (n\
    \ < 47) return 37;\n  if (n < 53) return 41;\n  if (n < 59) return 43;\n  if (n\
    \ < 61) return 59;\n  if (n < 67) return 61;\n  if (n < 73) return 67;\n  if (n\
    \ < 79) return 73;\n  if (n < 83) return 79;\n  if (n < 89) return 83;\n  if (n\
    \ < 97) return 89;\n  if (n < 101) return 97;\n  if (n < 103) return 101;\n  if\
    \ (n < 109) return 103;\n  if (n < 113) return 109;\n  if (n < 127) return 113;\n\
    \  if (n < 131) return 127;\n  if (n < 137) return 131;\n  if (n < 139) return\
    \ 137;\n  if (n < 141) return 139;\n  if (n < 143) return 141;\n  if (n < 149)\
    \ return 143;\n  if (n < 151) return 149;\n  if (n < 157) return 151;\n  if (n\
    \ < 163) return 157;\n  if (n < 171) return 163;\n  if (n < 177) return 171;\n\
    \  if (n < 181) return 177;\n  if (n < 191) return 181;\n  if (n < 197) return\
    \ 191;\n  if (n < 199) return 199;\n  if (n < 211) return 201;\n  if (n < 223)\
    \ return 207;\n  if (n < 227) return 211;\n  if (n < 229) return 227;\n  if (n\
    \ < 233) return 229;\n  if (n < 239) return 233;\n  if (n < 241) return 239;\n\
    \  if (n < 251) return 241;\n  if (n < 257) return 257;\n  if (n < 263) return\
    \ 261;\n  if (n < 269) return 267;\n  if (n < 271) return 273;\n  if (n < 277)\
    \ return 279;\n  if (n < 281) return 281;\n  if (n < 283) return 283;\n  if (n\
    \ < 293) return 293;\n  if (n < 307) return 307;\n  if (n < 311) return 311;\n\
    \  if (n < 313) return 313;\n  if (n < 317) return 317;\n  if (n < 331) return\
    \ 331;\n  if (n < 337) return 337;\n  if (n < 343) return 343;\n  if (n < 349)\
    \ return 349;\n  if (n < 351) return 351;\n  if (n < 359) return 359;\n  if (n\
    \ < 363) return 363;\n  if (n < 369) return 369;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwlpbc4bz.ts(92,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014985
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [];\n\
    \    for (let i = 0; i <= n; i++) {\n        fib.push(i);\n    }\n    for (let\
    \ i = 2; i <= n; i++) {\n        if (fib[i] === fib[i - 1]) {\n            fib[i]\
    \ = fib[i - 1] + 1;\n        }\n    }\n    return fib[n];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpxls0utwj.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxls0utwj.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n < 4) return n;\n  if (n % 2 == 0) return prime_fib(n - 1) + prime_fib(n -\
    \ 2);\n  if (n % 3 == 0) return prime_fib(n - 3) + prime_fib(n - 4);\n  return\
    \ prime_fib(n - 5) + prime_fib(n - 6);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpcypscobp.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcypscobp.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpqgppkm0d.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqgppkm0d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let fib_index: number[] = [];\n  let fib_index2: number[] = [];\n  let fib_index3:\
    \ number[] = [];\n  let fib_index4: number[] = [];\n  let fib_index5: number[]\
    \ = [];\n  let fib_index6: number[] = [];\n  let fib_index7: number[] = [];\n\
    \  let fib_index8: number[] = [];\n  let fib_index9: number[] = [];\n  let fib_index10:\
    \ number[] = [];\n  let fib_index11: number[] = [];\n  let fib_index12: number[]\
    \ = [];\n  let fib_index13: number[] = [];\n  let fib_index14: number[] = [];\n\
    \  let fib_index15: number[] = [];\n  let fib_index16: number[] = [];\n  let fib_index17:\
    \ number[] = [];\n  let fib_index18: number[] = [];\n  let fib_index19: number[]\
    \ = [];\n  let fib_index20: number[] = [];\n  let fib_index21: number[] = [];\n\
    \  let fib_index22: number[] = [];\n  let fib_index23: number[] = [];\n  let fib_index24:\
    \ number[] = [];\n  let fib_index25: number[] = [];\n  let fib_index26: number[]\
    \ = [];\n  let fib_index27: number[] = [];\n  let fib_index28: number[] = [];\n\
    \  let fib_index29: number[] = [];\n  let fib_index30: number[] = [];\n  let fib_index31:\
    \ number[] = [];\n  let fib_index32: number[] = [];\n  let fib_index33: number[]\
    \ = [];\n  let fib_index34: number[] = [];\n  let fib_index35: number[] = [];\n\
    \  let fib_index36: number[] = [];\n  let fib_index37: number[] = [];\n  let fib_index38:\
    \ number[] = [];\n  let fib_index39: number[] = [];\n  let fib_index40: number[]\
    \ = [];\n  let fib_index41: number[] = [];\n  let fib_index42: number[] = [];\n\
    \  let fib_index43: number[] = [];\n  let fib_index44: number[] = [];\n  let fib_index45:\
    \ number[] = [];\n  let fib_index46: number[] = [];\n  let fib_index47: number[]\
    \ = [];\n  let fib_index48: number[] = [];\n  let fib_index49: number[] = [];\n\
    \  let fib_index50: number[] = [];\n  let fib_index51: number[] = [];\n  let fib_index52:\
    \ number[] = [];\n  let fib_index53: number[] = [];\n  let fib_index54: number[]\
    \ = [];\n  let fib_index55: number[] = [];\n  let fib_index56: number[] = [];\n\
    \  let fib_index57: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpupbqdh4t.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let counter: number = 0;\n  while (counter < n)\
    \ {\n    fib.push(counter);\n    counter++;\n  }\n  for (let i = 0; i < fib.length;\
    \ i++) {\n    if (fib[i] % 2 === 0) {\n      prime = fib.slice(i);\n      break;\n\
    \    }\n  }\n  return prime[prime.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpote7dak6.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpote7dak6.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let fib_index = 0;\n  let prime_fib_index = 0;\n  let prime_fib_value = 0;\n\
    \  let prime_fib_value2 = 0;\n  let prime_fib_value3 = 0;\n  let prime_fib_value4\
    \ = 0;\n  let prime_fib_value5 = 0;\n  let prime_fib_value6 = 0;\n  let prime_fib_value7\
    \ = 0;\n  let prime_fib_value8 = 0;\n  let prime_fib_value9 = 0;\n  let prime_fib_value10\
    \ = 0;\n  let prime_fib_value11 = 0;\n  let prime_fib_value12 = 0;\n  let prime_fib_value13\
    \ = 0;\n  let prime_fib_value14 = 0;\n  let prime_fib_value15 = 0;\n  let prime_fib_value16\
    \ = 0;\n  let prime_fib_value17 = 0;\n  let prime_fib_value18 = 0;\n  let prime_fib_value19\
    \ = 0;\n  let prime_fib_value20 = 0;\n  let prime_fib_value21 = 0;\n  let prime_fib_value22\
    \ = 0;\n  let prime_fib_value23 = 0;\n  let prime_fib_value24 = 0;\n  let prime_fib_value25\
    \ = 0;\n  let prime_fib_value26 = 0;\n  let prime_fib_value27 = 0;\n  let prime_fib_value28\
    \ = 0;\n  let prime_fib_value29 = 0;\n  let prime_fib_value30 = 0;\n  let prime_fib_value31\
    \ = 0;\n  let prime_fib_value32 = 0;\n  let prime_fib_value33 = 0;\n  let prime_fib_value34\
    \ = 0;\n  let prime_fib_value35 = 0;\n  let prime_fib_value36 = 0;\n  let prime_fib_value37\
    \ = 0;\n  let prime_fib_value38 = 0;\n  let prime_fib_value39 = 0;\n  let prime_fib_value40\
    \ = 0;\n  let prime_fib_value41 = 0;\n  let prime_fib_value42 = 0;\n  let prime_fib_value43\
    \ = 0;\n  let prime_fib_value44 = 0;\n  let prime_fib_value45 = 0;\n  let prime_fib_value46\
    \ = 0;\n  let prime_fib_value47 = 0;\n  let prime_fib_value48 = 0;\n  let prime_fib_value49\
    \ = 0;\n  let prime_fib_value50 = 0;\n  let prime_fib_value51 = 0;\n  let prime_fib_value52\
    \ = 0;\n  let prime_fib_value53 = 0;\n  let prime_fib_value54 = 0;\n  let prime_fib_value55\
    \ = 0;\n  let prime_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx9568x7i.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let fib_index: number[] = [];\n  let prime_index:\
    \ number[] = [];\n  let temp: number[] = [];\n  let temp_prime: number[] = [];\n\
    \  let temp_fib: number[] = [];\n  let temp_fib_index: number[] = [];\n  let temp_prime_index:\
    \ number[] = [];\n  let temp_temp: number[] = [];\n  let temp_temp_prime: number[]\
    \ = [];\n  let temp_temp_fib: number[] = [];\n  let temp_temp_fib_index: number[]\
    \ = [];\n  let temp_temp_prime_index: number[] = [];\n  let temp_temp_temp: number[]\
    \ = [];\n  let temp_temp_temp_prime: number[] = [];\n  let temp_temp_temp_fib:\
    \ number[] = [];\n  let temp_temp_temp_fib_index: number[] = [];\n  let temp_temp_temp_prime_index:\
    \ number[] = [];\n  let temp_temp_temp_temp: number[] = [];\n  let temp_temp_temp_temp_prime:\
    \ number[] = [];\n  let temp_temp_temp_temp_fib: number[] = [];\n  let temp_temp_temp_temp_fib_index:\
    \ number[] = [];\n  let temp_temp_temp_temp_prime_index: number[] = [];\n  let\
    \ temp_temp_temp_temp_temp: number[] = [];\n  let temp_temp_temp_temp_temp_prime:\
    \ number[] = [];\n  let temp_temp_temp_temp_temp_fib: number[] = [];\n  let temp_temp_temp_temp_fib_index:\
    \ number[] = [];\n  let temp_temp_temp_temp_prime_index: number[] = [];\n  let\
    \ temp_temp_temp_temp_temp_temp: number[] = [];\n  let temp_temp_temp_temp_temp_prime:\
    \ number[] = [];\n  let temp_temp_temp_temp_temp_fib: number[] = [];\n  let temp_temp_temp_temp_fib_index:\
    \ number[] = [];\n  let temp_temp_temp_temp_prime_index: number[] = [];\n  let\
    \ temp_temp_temp_temp_temp_temp: number[] = [];\n  let temp_temp_temp_temp_temp_prime:\
    \ number[] = [];\n  let temp_temp_temp_temp_temp_fib: number[] = [];\n  let temp_temp_temp_temp_fib_index:\
    \ number[] = [];\n  let temp_temp_temp_temp_prime_index: number[] = [];\n  let\
    \ temp_temp_temp_temp_temp_temp: number[] = [];\n  let temp_temp_temp_temp_temp_temp_prime:\
    \ number[] = [];\n  let temp_temp_temp_temp_temp_temp_fib: number[] = [];\n  let\
    \ temp_temp_temp_temp_temp_fib_index: number[] = [];\n  let temp_temp_temp_temp_prime_index:\
    \ number[] = [];\n  let temp_temp_temp_temp_temp_temp: number[] = [];\n  let temp_temp_temp_temp_temp_temp_prime:\
    \ number[] = [];\n  let temp_temp_temp_temp_temp_temp_fib: number[] = [];\n  let\
    \ temp_temp_temp_temp_temp_fib_index\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphqhsg5l5.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [];\n\
    \    let prime: number[] = [];\n    let isPrime: boolean;\n    let isFibonacci:\
    \ boolean;\n    let isPrimeFibonacci: boolean;\n    let isPrimePrime: boolean;\n\
    \    let isPrimePrimeFibonacci: boolean;\n    let isPrimePrimePrime: boolean;\n\
    \    let isPrimePrimePrimeFibonacci: boolean;\n    let isPrimePrimePrimePrime:\
    \ boolean;\n    let isPrimePrimePrimePrimeFibonacci: boolean;\n    let isPrimePrimePrimePrimePrime:\
    \ boolean;\n    let isPrimePrimePrimePrimePrimeFibonacci: boolean;\n    let isPrimePrimePrimePrimePrimePrime:\
    \ boolean;\n    let isPrimePrimePrimePrimePrimePrimeFibonacci: boolean;\n    let\
    \ isPrimePrimePrimePrimePrimePrimePrime: boolean;\n    let isPrimePrimePrimePrimePrimePrimePrimeFibonacci:\
    \ boolean;\n    let isPrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n   \
    \ let isPrimePrimePrimePrimePrimePrimePrimePrimeFibonacci: boolean;\n    let isPrimePrimePrimePrimePrimePrimePrimePrimePrime:\
    \ boolean;\n    let isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFibonacci:\
    \ boolean;\n    let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n\
    \    let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFibonacci: boolean;\n\
    \    let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n\
    \    let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFibonacci: boolean;\n\
    \    let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n\
    \    let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFibonacci:\
    \ boolean;\n    let isPrimePrimePrimePri\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1x_h92xj.ts(49,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpqgppkm0d.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqgppkm0d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return\
    \ 3;\n  }\n  if (n % 2 === 0) {\n    return prime_fib(n - 1) + prime_fib(n - 2);\n\
    \  }\n  if (n % 3 === 0) {\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3);\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3)\
    \ + prime_fib(n - 4);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpdvlu7vdi.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdvlu7vdi.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 == 0) return 3;\n  if (n % 3 == 0) return 4;\n\
    \  if (n % 5 == 0) return 5;\n  if (n % 7 == 0) return 6;\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsv688smj.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsv688smj.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return\
    \ 4;\n  if (n % 5 === 0) return 5;\n  if (n % 7 === 0) return 6;\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp5zkw3ted.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5zkw3ted.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let fib_index = 0;\n  let prime: boolean;\n  let prime_index = 0;\n  let prime_fib:\
    \ number = 0;\n\n  while (fib_index < n) {\n    prime = true;\n    fib_index++;\n\
    \    fib[fib_index] = fib_index;\n    while (fib_index < n) {\n      if (fib[fib_index]\
    \ + fib[fib_index + 1] === n) {\n        prime = false;\n        break;\n    \
    \  }\n      fib_index++;\n      fib[fib_index] = fib[fib_index + 1];\n    }\n\
    \    if (prime) {\n      prime_fib = fib[fib_index];\n      prime_index++;\n \
    \   }\n  }\n  return prime_fib;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpcm4lz96l.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcm4lz96l.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014988
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let isPrime: boolean;\n  let isFibonacci: boolean;\n\
    \  let isPrimeFibonacci: boolean;\n  let isPrimePrime: boolean;\n  let isPrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrime: boolean;\n  let isPrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePrime: boolean;\n  let isPrimePrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePrimePrime: boolean;\n  let isPrimePrimePrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimePrime: boolean;\n  let isPrimePrimePrimePrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimePrimePrime: boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n  let\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimeFibonacci: boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrime:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFibonacci: boolean;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFibonacci:\
    \ boolean;\n  let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp27r9ivkz.ts(31,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp27r9ivkz.ts(49,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let fib_index: number[] = [];\n  let prime_index:\
    \ number[] = [];\n  let fib_index2: number[] = [];\n  let prime_index2: number[]\
    \ = [];\n  let fib_index3: number[] = [];\n  let prime_index3: number[] = [];\n\
    \  let fib_index4: number[] = [];\n  let prime_index4: number[] = [];\n  let fib_index5:\
    \ number[] = [];\n  let prime_index5: number[] = [];\n  let fib_index6: number[]\
    \ = [];\n  let prime_index6: number[] = [];\n  let fib_index7: number[] = [];\n\
    \  let prime_index7: number[] = [];\n  let fib_index8: number[] = [];\n  let prime_index8:\
    \ number[] = [];\n  let fib_index9: number[] = [];\n  let prime_index9: number[]\
    \ = [];\n  let fib_index10: number[] = [];\n  let prime_index10: number[] = [];\n\
    \  let fib_index11: number[] = [];\n  let prime_index11: number[] = [];\n  let\
    \ fib_index12: number[] = [];\n  let prime_index12: number[] = [];\n  let fib_index13:\
    \ number[] = [];\n  let prime_index13: number[] = [];\n  let fib_index14: number[]\
    \ = [];\n  let prime_index14: number[] = [];\n  let fib_index15: number[] = [];\n\
    \  let prime_index15: number[] = [];\n  let fib_index16: number[] = [];\n  let\
    \ prime_index16: number[] = [];\n  let fib_index17: number[] = [];\n  let prime_index17:\
    \ number[] = [];\n  let fib_index18: number[] = [];\n  let prime_index18: number[]\
    \ = [];\n  let fib_index19: number[] = [];\n  let prime_index19: number[] = [];\n\
    \  let fib_index20: number[] = [];\n  let prime_index20: number[] = [];\n  let\
    \ fib_index21: number[] = [];\n  let prime_index21: number[] = [];\n  let fib_index22:\
    \ number[] = [];\n  let prime_index22: number[] = [];\n  let fib_index23: number[]\
    \ = [];\n  let prime_index23: number[] = [];\n  let fib_index24: number[] = [];\n\
    \  let prime_index24: number[] = [];\n  let fib_index25: number[] = [];\n  let\
    \ prime_index25: number[] = [];\n  let fib_index26: number[] = [];\n  let prime_index26:\
    \ number[] = [];\n  let fib_index27: number[] = [];\n  let prime_index27: number[]\
    \ = [];\n  let fib_index28: number[] = [];\n  let prime_index28: number[] = [];\n\
    \  let fib_index29\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp83x2zvru.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return\
    \ 3;\n  }\n  if (n % 2 === 1) {\n    return prime_fib(n - 1) + 1;\n  }\n  if (n\
    \ % 3 === 2) {\n    return prime_fib(n - 2) + 1;\n  }\n  if (n % 5 === 3) {\n\
    \    return prime_fib(n - 3) + 1;\n  }\n  return prime_fib(n - 5) + 1;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpus985ore.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpus985ore.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpqgppkm0d.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqgppkm0d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let isPrime: boolean;\n  let isFibonacci: boolean;\n\
    \  let isPrimeFibonacci: boolean;\n  let isPrimeFibonacciPrime: boolean;\n  let\
    \ isPrimeFibonacciPrimeFibonacci: boolean;\n  let isPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacci: boolean;\n  let\
    \ isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime: boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps3qtx82y.ts(38,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let counter: number = 0;\n  while (counter < n) {\n    fib.push(counter);\n\
    \    counter++;\n  }\n  for (let i = 0; i < fib.length; i++) {\n    if (fib[i]\
    \ % 2 === 0) {\n      return fib[i];\n    }\n  }\n  return -1;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpr6v58dz9.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr6v58dz9.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014988
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let counter: number = 0;\n  let prime_counter:\
    \ number = 0;\n  let is_prime: boolean = false;\n  let is_prime_counter: number\
    \ = 0;\n  let is_prime_counter2: number = 0;\n  let is_prime_counter3: number\
    \ = 0;\n  let is_prime_counter4: number = 0;\n  let is_prime_counter5: number\
    \ = 0;\n  let is_prime_counter6: number = 0;\n  let is_prime_counter7: number\
    \ = 0;\n  let is_prime_counter8: number = 0;\n  let is_prime_counter9: number\
    \ = 0;\n  let is_prime_counter10: number = 0;\n  let is_prime_counter11: number\
    \ = 0;\n  let is_prime_counter12: number = 0;\n  let is_prime_counter13: number\
    \ = 0;\n  let is_prime_counter14: number = 0;\n  let is_prime_counter15: number\
    \ = 0;\n  let is_prime_counter16: number = 0;\n  let is_prime_counter17: number\
    \ = 0;\n  let is_prime_counter18: number = 0;\n  let is_prime_counter19: number\
    \ = 0;\n  let is_prime_counter20: number = 0;\n  let is_prime_counter21: number\
    \ = 0;\n  let is_prime_counter22: number = 0;\n  let is_prime_counter23: number\
    \ = 0;\n  let is_prime_counter24: number = 0;\n  let is_prime_counter25: number\
    \ = 0;\n  let is_prime_counter26: number = 0;\n  let is_prime_counter27: number\
    \ = 0;\n  let is_prime_counter28: number = 0;\n  let is_prime_counter29: number\
    \ = 0;\n  let is_prime_counter30: number = 0;\n  let is_prime_counter31: number\
    \ = 0;\n  let is_prime_counter32: number = 0;\n  let is_prime_counter33: number\
    \ = 0;\n  let is_prime_counter34: number = 0;\n  let is_prime_counter35: number\
    \ = 0;\n  let is_prime_counter36: number = 0;\n  let is_prime_counter37: number\
    \ = 0;\n  let is_prime_counter38: number = 0;\n  let is_prime_counter39: number\
    \ = 0;\n  let is_prime_counter40: number = 0;\n  let is_prime_counter41: number\
    \ = 0;\n  let is_prime_counter42: number = 0;\n  let is_prime_counter43: number\
    \ = 0;\n  let is_prime_counter44: number = 0;\n  let is_prime_counter45: number\
    \ = 0;\n  let is_prime_counter46: number = 0;\n  let is_prime_counter47: number\
    \ = 0;\n  let is_prime_counter48: number = 0;\n  let is_prime\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3l6bpwjt.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let counter: number = 0;\n  let prime_counter:\
    \ number = 0;\n  let prime_counter2: number = 0;\n  let prime_counter3: number\
    \ = 0;\n  let prime_counter4: number = 0;\n  let prime_counter5: number = 0;\n\
    \  let prime_counter6: number = 0;\n  let prime_counter7: number = 0;\n  let prime_counter8:\
    \ number = 0;\n  let prime_counter9: number = 0;\n  let prime_counter10: number\
    \ = 0;\n  let prime_counter11: number = 0;\n  let prime_counter12: number = 0;\n\
    \  let prime_counter13: number = 0;\n  let prime_counter14: number = 0;\n  let\
    \ prime_counter15: number = 0;\n  let prime_counter16: number = 0;\n  let prime_counter17:\
    \ number = 0;\n  let prime_counter18: number = 0;\n  let prime_counter19: number\
    \ = 0;\n  let prime_counter20: number = 0;\n  let prime_counter21: number = 0;\n\
    \  let prime_counter22: number = 0;\n  let prime_counter23: number = 0;\n  let\
    \ prime_counter24: number = 0;\n  let prime_counter25: number = 0;\n  let prime_counter26:\
    \ number = 0;\n  let prime_counter27: number = 0;\n  let prime_counter28: number\
    \ = 0;\n  let prime_counter29: number = 0;\n  let prime_counter30: number = 0;\n\
    \  let prime_counter31: number = 0;\n  let prime_counter32: number = 0;\n  let\
    \ prime_counter33: number = 0;\n  let prime_counter34: number = 0;\n  let prime_counter35:\
    \ number = 0;\n  let prime_counter36: number = 0;\n  let prime_counter37: number\
    \ = 0;\n  let prime_counter38: number = 0;\n  let prime_counter39: number = 0;\n\
    \  let prime_counter40: number = 0;\n  let prime_counter41: number = 0;\n  let\
    \ prime_counter42: number = 0;\n  let prime_counter43: number = 0;\n  let prime_counter44:\
    \ number = 0;\n  let prime_counter45: number = 0;\n  let prime_counter46: number\
    \ = 0;\n  let prime_counter47: number = 0;\n  let prime_counter48: number = 0;\n\
    \  let prime_counter49: number = 0;\n  let prime_counter50: number = 0;\n  let\
    \ prime_counter51: number = 0;\n  let prime_counter52: number = 0;\n  let prime_counter53:\
    \ number = 0;\n  let prime_counter54: number = 0;\n  let prime_counter55: number\
    \ = 0;\n  let prime\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg35u0g9x.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let prime_number: number[] = [];\n  let i: number;\n\
    \  let j: number;\n  let k: number;\n  let l: number;\n  let m: number;\n  let\
    \ n: number;\n  let o: number;\n  let p: number;\n  let q: number;\n  let r: number;\n\
    \  let s: number;\n  let t: number;\n  let u: number;\n  let v: number;\n  let\
    \ w: number;\n  let x: number;\n  let y: number;\n  let z: number;\n  let a: number;\n\
    \  let b: number;\n  let c: number;\n  let d: number;\n  let e: number;\n  let\
    \ f: number;\n  let g: number;\n  let h: number;\n  let i: number;\n  let j: number;\n\
    \  let k: number;\n  let l: number;\n  let m: number;\n  let n: number;\n  let\
    \ o: number;\n  let p: number;\n  let q: number;\n  let r: number;\n  let s: number;\n\
    \  let t: number;\n  let u: number;\n  let v: number;\n  let w: number;\n  let\
    \ x: number;\n  let y: number;\n  let z: number;\n  let a: number;\n  let b: number;\n\
    \  let c: number;\n  let d: number;\n  let e: number;\n  let f: number;\n  let\
    \ g: number;\n  let h: number;\n  let i: number;\n  let j: number;\n  let k: number;\n\
    \  let l: number;\n  let m: number;\n  let n: number;\n  let o: number;\n  let\
    \ p: number;\n  let q: number;\n  let r: number;\n  let s: number;\n  let t: number;\n\
    \  let u: number;\n  let v: number;\n  let w: number;\n  let x: number;\n  let\
    \ y: number;\n  let z: number;\n  let a: number;\n  let b: number;\n  let c: number;\n\
    \  let d: number;\n  let e: number;\n  let f: number;\n  let g: number;\n  let\
    \ h: number;\n  let i: number;\n  let j: number;\n  let k: number;\n  let l: number;\n\
    \  let m: number;\n  let n: number;\n  let o: number;\n  let p: number;\n  let\
    \ q: number;\n  let r: number;\n  let s: number;\n  let t: number;\n  let u: number;\n\
    \  let v: number;\n  let w: number;\n  let x: number;\n  let y: number;\n  let\
    \ z: number;\n  let a: number;\n  let b: number;\n  let c: number;\n  let d: number;\n\
    \  let e: number;\n  let f: number;\n  let g: number;\n  let h: number;\n  let\
    \ i: number;\n  let j: number;\n  let k: number;\n  let l: number;\n  let m: number;\n\
    \  let n: number;\n  let o: number;\n  let p: number;\n  let q: number;\n  let\
    \ r: number;\n  let s: number;\n  let t: number;\n  let u: number;\n  let v: number;\n\
    \  let w: number;\n  let x: number;\n  let y: number;\n  let z: number;\n  let\
    \ \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvr6x6haw.ts(129,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpvr6x6haw.ts(147,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n === 0 || n === 1) {\n\
    \    return n;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n % 2 === 0)\
    \ {\n    return prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1)\
    \ {\n    return prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmprd7r8enl.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprd7r8enl.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n === 0 || n === 1) {\n\
    \    return n;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n % 2 === 0)\
    \ {\n    return prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1)\
    \ {\n    return prime_fib(n - 2);\n  }\n  return prime_fib(n - 3) + prime_fib(n\
    \ - 4);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpj8wzohms.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj8wzohms.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 == 0) return 3;\n  if (n % 3 == 0) return 4;\n\
    \  if (n % 5 == 0) return 5;\n  if (n % 7 == 0) return 6;\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsv688smj.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsv688smj.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let fib_index: number[] = [];\n  let fib_index2: number[] = [];\n  let fib_index3:\
    \ number[] = [];\n  let fib_index4: number[] = [];\n  let fib_index5: number[]\
    \ = [];\n  let fib_index6: number[] = [];\n  let fib_index7: number[] = [];\n\
    \  let fib_index8: number[] = [];\n  let fib_index9: number[] = [];\n  let fib_index10:\
    \ number[] = [];\n  let fib_index11: number[] = [];\n  let fib_index12: number[]\
    \ = [];\n  let fib_index13: number[] = [];\n  let fib_index14: number[] = [];\n\
    \  let fib_index15: number[] = [];\n  let fib_index16: number[] = [];\n  let fib_index17:\
    \ number[] = [];\n  let fib_index18: number[] = [];\n  let fib_index19: number[]\
    \ = [];\n  let fib_index20: number[] = [];\n  let fib_index21: number[] = [];\n\
    \  let fib_index22: number[] = [];\n  let fib_index23: number[] = [];\n  let fib_index24:\
    \ number[] = [];\n  let fib_index25: number[] = [];\n  let fib_index26: number[]\
    \ = [];\n  let fib_index27: number[] = [];\n  let fib_index28: number[] = [];\n\
    \  let fib_index29: number[] = [];\n  let fib_index30: number[] = [];\n  let fib_index31:\
    \ number[] = [];\n  let fib_index32: number[] = [];\n  let fib_index33: number[]\
    \ = [];\n  let fib_index34: number[] = [];\n  let fib_index35: number[] = [];\n\
    \  let fib_index36: number[] = [];\n  let fib_index37: number[] = [];\n  let fib_index38:\
    \ number[] = [];\n  let fib_index39: number[] = [];\n  let fib_index40: number[]\
    \ = [];\n  let fib_index41: number[] = [];\n  let fib_index42: number[] = [];\n\
    \  let fib_index43: number[] = [];\n  let fib_index44: number[] = [];\n  let fib_index45:\
    \ number[] = [];\n  let fib_index46: number[] = [];\n  let fib_index47: number[]\
    \ = [];\n  let fib_index48: number[] = [];\n  let fib_index49: number[] = [];\n\
    \  let fib_index50: number[] = [];\n  let fib_index51: number[] = [];\n  let fib_index52:\
    \ number[] = [];\n  let fib_index53: number[] = [];\n  let fib_index54: number[]\
    \ = [];\n  let fib_index55: number[] = [];\n  let fib_index56: number[] = [];\n\
    \  let fib_index57: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpupbqdh4t.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 === 0) return 1;\n  if (n % 3 === 0) return\
    \ 2;\n  if (n % 5 === 0) return 3;\n  if (n % 7 === 0) return 5;\n  if (n % 9\
    \ === 0) return 7;\n  if (n % 11 === 0) return 9;\n  if (n % 13 === 0) return\
    \ 11;\n  if (n % 17 === 0) return 13;\n  if (n % 19 === 0) return 17;\n  if (n\
    \ % 23 === 0) return 19;\n  if (n % 29 === 0) return 23;\n  if (n % 31 === 0)\
    \ return 29;\n  if (n % 37 === 0) return 31;\n  if (n % 43 === 0) return 37;\n\
    \  if (n % 53 === 0) return 43;\n  if (n % 63 === 0) return 53;\n  if (n % 73\
    \ === 0) return 63;\n  if (n % 83 === 0) return 83;\n  if (n % 93 === 0) return\
    \ 93;\n  if (n % 103 === 0) return 103;\n  if (n % 113 === 0) return 113;\n  if\
    \ (n % 123 === 0) return 123;\n  if (n % 143 === 0) return 143;\n  if (n % 153\
    \ === 0) return 153;\n  if (n % 163 === 0) return 163;\n  if (n % 173 === 0) return\
    \ 173;\n  if (n % 183 === 0) return 183;\n  if (n % 193 === 0) return 193;\n \
    \ if (n % 203 === 0) return 203;\n  if (n % 213 === 0) return 213;\n  if (n %\
    \ 223 === 0) return 223;\n  if (n % 233 === 0) return 233;\n  if (n % 243 ===\
    \ 0) return 243;\n  if (n % 253 === 0) return 253;\n  if (n % 263 === 0) return\
    \ 263;\n  if (n % 273 === 0) return 273;\n  if (n % 283 === 0) return 283;\n \
    \ if (n % 293 === 0) return 293;\n  if (n % 303 === 0) return 303;\n  if (n %\
    \ 313 === 0) return 313;\n  if (n % 323 === 0) return 323;\n  if (n % 333 ===\
    \ 0) return 333;\n  if (n % 343 === 0) return 343;\n  if (n % 353 === 0) return\
    \ 353;\n  if (n % 363 === 0) return 363;\n  if (n % 373 === 0) return 373;\n \
    \ if (n % 383 === 0) return 383;\n  if (n % 393 === 0) return 393;\n  if (n %\
    \ 403 === 0) return 403;\n  if (n % 413 === 0) return 413;\n  if (n % 423 ===\
    \ 0) return 423;\n  if (n % 433 === 0) return 433;\n  if (n % 443 === \ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6t0wb93t.ts(58,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmp6t0wb93t.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return\
    \ 4;\n  if (n % 5 === 0) return 5;\n  if (n % 7 === 0) return 6;\n  if (n % 11\
    \ === 0) return 7;\n  if (n % 13 === 0) return 8;\n  if (n % 17 === 0) return\
    \ 9;\n  if (n % 19 === 0) return 10;\n  if (n % 23 === 0) return 11;\n  if (n\
    \ % 29 === 0) return 12;\n  if (n % 31 === 0) return 13;\n  if (n % 37 === 0)\
    \ return 14;\n  if (n % 43 === 0) return 15;\n  if (n % 53 === 0) return 16;\n\
    \  if (n % 59 === 0) return 17;\n  if (n % 63 === 0) return 18;\n  if (n % 69\
    \ === 0) return 19;\n  if (n % 71 === 0) return 20;\n  if (n % 79 === 0) return\
    \ 21;\n  if (n % 87 === 0) return 22;\n  if (n % 97 === 0) return 23;\n  if (n\
    \ % 103 === 0) return 24;\n  if (n % 109 === 0) return 25;\n  if (n % 113 ===\
    \ 0) return 26;\n  if (n % 125 === 0) return 27;\n  if (n % 129 === 0) return\
    \ 28;\n  if (n % 131 === 0) return 29;\n  if (n % 139 === 0) return 30;\n  if\
    \ (n % 143 === 0) return 31;\n  if (n % 147 === 0) return 32;\n  if (n % 151 ===\
    \ 0) return 33;\n  if (n % 157 === 0) return 34;\n  if (n % 163 === 0) return\
    \ 35;\n  if (n % 169 === 0) return 36;\n  if (n % 173 === 0) return 37;\n  if\
    \ (n % 179 ===0) return 38;\n  if (n % 183 === 0) return 39;\n  if (n % 191 ===\
    \ 0) return 40;\n  if (n % 197 === 0) return 41;\n  if (n % 203 === 0) return\
    \ 42;\n  if (n % 209 === 0) return 43;\n  if (n % 217 === 0) return 44;\n  if\
    \ (n % 225 === 0) return 45;\n  if (n % 227 === 0) return 46;\n  if (n % 229 ===\
    \ 0) return 47;\n  if (n % 233 === 0) return 48;\n  if (n % 239 === 0) return\
    \ 49;\n  if (n % 243 === 0) return 50;\n  if (n % 247 === 0) return 51;\n  if\
    \ (n % 251 === 0) return 52;\n  if (n % 257 === 0) return 53;\n  if (n % 263 ===\
    \ 0) return 54;\n  if (n % 269 === 0) return 55;\n  if (n % 273 === 0) return\
    \ 56;\n  if (n % 279 === 0) return 57\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr49qi5gk.ts(78,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n === 0 || n === 1) {\n\
    \    return n;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n % 2 === 0)\
    \ {\n    return prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1)\
    \ {\n    return prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 1);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmppaxgrn6c.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppaxgrn6c.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpi8tf534w.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpi8tf534w.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [];\n\
    \    let prime: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        fib.push(i);\n\
    \    }\n    for (let i = 0; i <= n; i++) {\n        if (fib[i] % 2 === 0) {\n\
    \            prime[i] = 1;\n        } else {\n            prime[i] = 0;\n    \
    \    }\n    }\n    for (let i = 0; i <= n; i++) {\n        if (prime[i] === 1)\
    \ {\n            return fib[i];\n        }\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmptvoztihk.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptvoztihk.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014988
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let fib_index: number[] = [];\n  let prime_index:\
    \ number[] = [];\n  let i: number;\n  let j: number;\n  let k: number;\n  let\
    \ fib_index2: number[] = [];\n  let prime_index2: number[] = [];\n  let fib_index3:\
    \ number[] = [];\n  let prime_index3: number[] = [];\n  let fib_index4: number[]\
    \ = [];\n  let prime_index4: number[] = [];\n  let fib_index5: number[] = [];\n\
    \  let prime_index5: number[] = [];\n  let fib_index6: number[] = [];\n  let prime_index6:\
    \ number[] = [];\n  let fib_index7: number[] = [];\n  let prime_index7: number[]\
    \ = [];\n  let fib_index8: number[] = [];\n  let prime_index8: number[] = [];\n\
    \  let fib_index9: number[] = [];\n  let prime_index9: number[] = [];\n  let fib_index10:\
    \ number[] = [];\n  let prime_index10: number[] = [];\n  let fib_index11: number[]\
    \ = [];\n  let prime_index11: number[] = [];\n  let fib_index12: number[] = [];\n\
    \  let prime_index12: number[] = [];\n  let fib_index13: number[] = [];\n  let\
    \ prime_index13: number[] = [];\n  let fib_index14: number[] = [];\n  let prime_index14:\
    \ number[] = [];\n  let fib_index15: number[] = [];\n  let prime_index15: number[]\
    \ = [];\n  let fib_index16: number[] = [];\n  let prime_index16: number[] = [];\n\
    \  let fib_index17: number[] = [];\n  let prime_index17: number[] = [];\n  let\
    \ fib_index18: number[] = [];\n  let prime_index18: number[] = [];\n  let fib_index19:\
    \ number[] = [];\n  let prime_index19: number[] = [];\n  let fib_index20: number[]\
    \ = [];\n  let prime_index20: number[] = [];\n  let fib_index21: number[] = [];\n\
    \  let prime_index21: number[] = [];\n  let fib_index22: number[] = [];\n  let\
    \ prime_index22: number[] = [];\n  let fib_index23: number[] = [];\n  let prime_index23:\
    \ number[] = [];\n  let fib_index24: number[] = [];\n  let prime_index24: number[]\
    \ = [];\n  let fib_index25: number[] = [];\n  let prime_index25: number[] = [];\n\
    \  let fib_index26: number[] = [];\n  let prime_index26: number[] = [];\n  let\
    \ fib_index27: number[] = [];\n  let prime_index27: number[] = [];\n  let fib_index28:\
    \ number[] = [];\n  let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpamqmdd9v.ts(64,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpamqmdd9v.ts(82,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 == 0) return 3;\n  if (n % 3 == 0) return 4;\n\
    \  if (n % 5 == 0) return 5;\n  if (n % 7 == 0) return 6;\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsv688smj.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsv688smj.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let isPrime: boolean[] = [];\n  let isFibonacci:\
    \ boolean[] = [];\n  let isPrimeFibonacci: boolean[] = [];\n  let isPrimeFibonacciPrime:\
    \ boolean[] = [];\n  let isPrimeFibonacciPrimeFibonacci: boolean[] = [];\n  let\
    \ isPrimeFibonacciPrimeFibonacciPrime: boolean[] = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean[] = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime: boolean[]\
    \ = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci: boolean[]\
    \ = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean[] = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean[] = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean[] = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean[] = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean[] = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean[] = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean[] = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0hodqf69.ts(40,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prev = 0;\n  let curr = 1;\n  for (let i = 1; i <= n; i++) {\n    fib[i]\
    \ = curr;\n    prev = curr;\n    curr = prev + curr;\n  }\n  return fib[n];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpffw0bafl.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpffw0bafl.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + 2;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmppxj5gqku.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppxj5gqku.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [];\n\
    \    fib[0] = 0;\n    fib[1] = 1;\n    for (let i = 2; i <= n; i++) {\n      \
    \  fib[i] = fib[i - 1] + fib[i - 2];\n    }\n    return fib[n];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp32042q3k.js:14:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp32042q3k.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    if (n < 2) return 1;\n\
    \    if (n < 5) return prime_fib(n - 1) + prime_fib(n - 2);\n    if (n % 2 ==\
    \ 0) return prime_fib(n - 1) + prime_fib(n - 3);\n    if (n % 3 == 0) return prime_fib(n\
    \ - 2) + prime_fib(n - 4);\n    if (n % 5 == 0) return prime_fib(n - 3) + prime_fib(n\
    \ - 5);\n    return prime_fib(n - 5) + prime_fib(n - 6);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp6njux13s.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6njux13s.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014988
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let isPrime: boolean;\n  let isFibonacci: boolean;\n\
    \  let isPrimeFibonacci: boolean;\n  let isPrimePrime: boolean;\n  let isPrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrime: boolean;\n  let isPrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePrime: boolean;\n  let isPrimePrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePrimePrime: boolean;\n  let isPrimePrimePrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimePrime: boolean;\n  let isPrimePrimePrimePrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimePrimePrime: boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n  let\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimeFibonacci: boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrime:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFibonacci: boolean;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFibonacci: boolean;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePri\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf_09wnir.ts(49,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 1);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpujclwi2t.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpujclwi2t.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014988
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let counter: number = 0;\n  let prime: boolean;\n  let prime_counter: number\
    \ = 0;\n  let prime_fib_counter: number = 0;\n\n  while (counter < n) {\n    prime\
    \ = true;\n    prime_counter = 0;\n    prime_fib_counter = 0;\n\n    while (prime\
    \ === true) {\n      prime_counter++;\n      prime = prime_fib(prime_counter);\n\
    \    }\n\n    prime_fib_counter++;\n    fib.push(prime_fib_counter);\n    counter++;\n\
    \  }\n\n  return fib[n];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvuydsjzi.ts(16,7): error TS2322: Type ''number''
    is not assignable to type ''boolean''.

    '
  timestamp: 1660014990
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpucod6rrh.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpucod6rrh.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let a: number = 0;\n  let b: number = 1;\n  for (let i = 0; i <= n; i++) {\n\
    \    fib.push(a);\n    a = b;\n    b = a + b;\n  }\n  return fib[n];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmps0mu4ylx.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps0mu4ylx.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let counter: number = 0;\n  let prime_counter:\
    \ number = 0;\n  let prime_counter2: number = 0;\n  let prime_counter3: number\
    \ = 0;\n  let prime_counter4: number = 0;\n  let prime_counter5: number = 0;\n\
    \  let prime_counter6: number = 0;\n  let prime_counter7: number = 0;\n  let prime_counter8:\
    \ number = 0;\n  let prime_counter9: number = 0;\n  let prime_counter10: number\
    \ = 0;\n  let prime_counter11: number = 0;\n  let prime_counter12: number = 0;\n\
    \  let prime_counter13: number = 0;\n  let prime_counter14: number = 0;\n  let\
    \ prime_counter15: number = 0;\n  let prime_counter16: number = 0;\n  let prime_counter17:\
    \ number = 0;\n  let prime_counter18: number = 0;\n  let prime_counter19: number\
    \ = 0;\n  let prime_counter20: number = 0;\n  let prime_counter21: number = 0;\n\
    \  let prime_counter22: number = 0;\n  let prime_counter23: number = 0;\n  let\
    \ prime_counter24: number = 0;\n  let prime_counter25: number = 0;\n  let prime_counter26:\
    \ number = 0;\n  let prime_counter27: number = 0;\n  let prime_counter28: number\
    \ = 0;\n  let prime_counter29: number = 0;\n  let prime_counter30: number = 0;\n\
    \  let prime_counter31: number = 0;\n  let prime_counter32: number = 0;\n  let\
    \ prime_counter33: number = 0;\n  let prime_counter34: number = 0;\n  let prime_counter35:\
    \ number = 0;\n  let prime_counter36: number = 0;\n  let prime_counter37: number\
    \ = 0;\n  let prime_counter38: number = 0;\n  let prime_counter39: number = 0;\n\
    \  let prime_counter40: number = 0;\n  let prime_counter41: number = 0;\n  let\
    \ prime_counter42: number = 0;\n  let prime_counter43: number = 0;\n  let prime_counter44:\
    \ number = 0;\n  let prime_counter45: number = 0;\n  let prime_counter46: number\
    \ = 0;\n  let prime_counter47: number = 0;\n  let prime_counter48: number = 0;\n\
    \  let prime_counter49: number = 0;\n  let prime_counter50: number = 0;\n  let\
    \ prime_counter51: number = 0;\n  let prime_counter52: number = 0;\n  let prime_counter53:\
    \ number = 0;\n  let prime_counter54: number = 0;\n  let prime_counter55: number\
    \ = 0;\n  let prime\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg35u0g9x.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return\
    \ 3;\n  }\n  if (n % 2 === 1) {\n    return prime_fib(n - 1) + prime_fib(n - 2);\n\
    \  }\n  if (n % 3 === 2) {\n    return prime_fib(n - 3) + prime_fib(n - 4);\n\
    \  }\n  if (n % 5 === 3) {\n    return prime_fib(n - 5) + prime_fib(n - 6);\n\
    \  }\n  if (n % 7 === 5) {\n    return prime_fib(n - 7) + prime_fib(n - 8);\n\
    \  }\n  return prime_fib(n - 9);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp_lesi_fz.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_lesi_fz.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let a = 0;\n  let b = 0;\n  for (let i = 0; i < n; i++) {\n    fib[i] = a +\
    \ b;\n    a = b;\n    b = fib[i];\n  }\n  return fib[n];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n2\n    at test (/tmp/tmpwyio7fhz.js:16:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwyio7fhz.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    if (n < 2) {\n        return\
    \ 1;\n    }\n    if (n === 2) {\n        return 2;\n    }\n    if (n % 2 === 0)\
    \ {\n        return prime_fib(n - 1) + prime_fib(n - 2);\n    }\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp0mp2ys5p.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0mp2ys5p.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n < 5) return prime_fib(n - 1) + prime_fib(n - 2);\n  if (n % 2 == 0) return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  if (n % 3 == 0) return prime_fib(n -\
    \ 1) + prime_fib(n - 2) + prime_fib(n - 3);\n  if (n % 5 == 0) return prime_fib(n\
    \ - 1) + prime_fib(n - 2) + prime_fib(n - 3) + prime_fib(n - 5);\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2) + prime_fib(n - 3) + prime_fib(n - 5) + prime_fib(n\
    \ - 6);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpmnmcy1bg.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmnmcy1bg.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    if (n < 2) {\n        return\
    \ 1;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    if (n % 2 === 0)\
    \ {\n        return prime_fib(n - 1) + prime_fib(n - 2);\n    }\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp15yzle8m.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp15yzle8m.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let fib_index: number[] = [];\n  let fib_index2: number[] = [];\n  let fib_index3:\
    \ number[] = [];\n  let fib_index4: number[] = [];\n  let fib_index5: number[]\
    \ = [];\n  let fib_index6: number[] = [];\n  let fib_index7: number[] = [];\n\
    \  let fib_index8: number[] = [];\n  let fib_index9: number[] = [];\n  let fib_index10:\
    \ number[] = [];\n  let fib_index11: number[] = [];\n  let fib_index12: number[]\
    \ = [];\n  let fib_index13: number[] = [];\n  let fib_index14: number[] = [];\n\
    \  let fib_index15: number[] = [];\n  let fib_index16: number[] = [];\n  let fib_index17:\
    \ number[] = [];\n  let fib_index18: number[] = [];\n  let fib_index19: number[]\
    \ = [];\n  let fib_index20: number[] = [];\n  let fib_index21: number[] = [];\n\
    \  let fib_index22: number[] = [];\n  let fib_index23: number[] = [];\n  let fib_index24:\
    \ number[] = [];\n  let fib_index25: number[] = [];\n  let fib_index26: number[]\
    \ = [];\n  let fib_index27: number[] = [];\n  let fib_index28: number[] = [];\n\
    \  let fib_index29: number[] = [];\n  let fib_index30: number[] = [];\n  let fib_index31:\
    \ number[] = [];\n  let fib_index32: number[] = [];\n  let fib_index33: number[]\
    \ = [];\n  let fib_index34: number[] = [];\n  let fib_index35: number[] = [];\n\
    \  let fib_index36: number[] = [];\n  let fib_index37: number[] = [];\n  let fib_index38:\
    \ number[] = [];\n  let fib_index39: number[] = [];\n  let fib_index40: number[]\
    \ = [];\n  let fib_index41: number[] = [];\n  let fib_index42: number[] = [];\n\
    \  let fib_index43: number[] = [];\n  let fib_index44: number[] = [];\n  let fib_index45:\
    \ number[] = [];\n  let fib_index46: number[] = [];\n  let fib_index47: number[]\
    \ = [];\n  let fib_index48: number[] = [];\n  let fib_index49: number[] = [];\n\
    \  let fib_index50: number[] = [];\n  let fib_index51: number[] = [];\n  let fib_index52:\
    \ number[] = [];\n  let fib_index53: number[] = [];\n  let fib_index54: number[]\
    \ = [];\n  let fib_index55: number[] = [];\n  let fib_index56: number[] = [];\n\
    \  let fib_index57: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpupbqdh4t.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n < 4) return 2;\n  if (n < 7) return 3;\n  if (n < 9) return 5;\n  if (n <\
    \ 12) return 8;\n  if (n < 16) return 10;\n  if (n < 20) return 15;\n  if (n <\
    \ 30) return 20;\n  if (n < 40) return 25;\n  if (n < 50) return 30;\n  if (n\
    \ < 60) return 40;\n  if (n < 70) return 50;\n  if (n < 80) return 60;\n  if (n\
    \ < 90) return 70;\n  if (n < 100) return 80;\n  if (n < 110) return 90;\n  if\
    \ (n < 120) return 100;\n  if (n < 130) return 110;\n  if (n < 140) return 120;\n\
    \  if (n < 150) return 130;\n  if (n < 160) return 140;\n  if (n < 170) return\
    \ 150;\n  if (n < 180) return 160;\n  if (n < 190) return 170;\n  if (n < 200)\
    \ return 180;\n  if (n < 210) return 190;\n  if (n < 220) return 200;\n  if (n\
    \ < 230) return 210;\n  if (n < 240) return 220;\n  if (n < 250) return 230;\n\
    \  if (n < 260) return 240;\n  if (n < 270) return 250;\n  if (n < 280) return\
    \ 260;\n  if (n < 290) return 270;\n  if (n < 300) return 280;\n  if (n < 310)\
    \ return 290;\n  if (n < 320) return 300;\n  if (n < 330) return 310;\n  if (n\
    \ < 340) return 320;\n  if (n < 350) return 330;\n  if (n < 360) return 340;\n\
    \  if (n < 370) return 350;\n  if (n < 380) return 360;\n  if (n < 390) return\
    \ 370;\n  if (n < 400) return 380;\n  if (n < 410) return 390;\n  if (n < 420)\
    \ return 400;\n  if (n < 430) return 410;\n  if (n < 440) return 420;\n  if (n\
    \ < 450) return 430;\n  if (n < 460) return 440;\n  if (n < 470) return 450;\n\
    \  if (n < 480) return 460;\n  if (n < 490) return 470;\n  if (n < 500) return\
    \ 480;\n  if (n < 510) return 490;\n  if (n < 520) return 500;\n  if (n < 530)\
    \ return 510;\n  if (n < 540) return 520;\n  if (n < 550) return 530;\n  if (n\
    \ < 560) return 540;\n  if (n < 570) return 550;\n  if (n < 580) return 560;\n\
    \  if (n < 590) return 570;\n  if (n < 600) return 580;\n  if (n < 610) return\
    \ 590;\n  if (n < 620) return 600;\n  if (n < 630) return 610;\n  if (n < 640)\
    \ return 620;\n  if (n < 650\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl95sv5v1.ts(73,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpl95sv5v1.ts(91,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [];\n\
    \    let fib_index = 0;\n    let prime: boolean;\n    for (let i = 0; i <= n;\
    \ i++) {\n        if (fib_index === 0 || fib_index === 1) {\n            fib.push(1);\n\
    \            fib_index++;\n        } else {\n            fib.push(fib[fib_index\
    \ - 1] + fib[fib_index - 2]);\n            fib_index++;\n        }\n    }\n  \
    \  for (let i = 0; i <= n; i++) {\n        if (fib[i] === 1) {\n            prime\
    \ = true;\n            break;\n        }\n    }\n    return prime ? fib[n - 1]\
    \ : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp3n6qsaq0.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3n6qsaq0.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 === 0) return 1;\n  if (n % 3 === 0) return\
    \ 2;\n  //if n is even, return fibonacci of n divided by 2\n  if (n % 2 === 0)\
    \ {\n    return prime_fib(n / 2);\n  }\n  //if n is odd, return fibonacci of n\
    \ divided by 3\n  return prime_fib(n / 3);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp5uwyw_or.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5uwyw_or.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    if (n <= 1) {\n       \
    \ return 1;\n    }\n    return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpcrfft35m.js:11:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcrfft35m.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    if (n <= 1) {\n       \
    \ return 1;\n    }\n    return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpcrfft35m.js:11:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcrfft35m.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let isPrime: boolean;\n  let isFibonacci: boolean;\n\
    \  let isPrimeFibonacci: boolean;\n  let isPrimeFibonacciPrime: boolean;\n  let\
    \ isPrimeFibonacciPrimeFibonacci: boolean;\n  let isPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacci: boolean;\n  let\
    \ isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime: boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonac\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpho38pjj4.ts(39,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014991
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let fib_index: number[] = [];\n  let fib_index2: number[] = [];\n  let fib_index3:\
    \ number[] = [];\n  let fib_index4: number[] = [];\n  let fib_index5: number[]\
    \ = [];\n  let fib_index6: number[] = [];\n  let fib_index7: number[] = [];\n\
    \  let fib_index8: number[] = [];\n  let fib_index9: number[] = [];\n  let fib_index10:\
    \ number[] = [];\n  let fib_index11: number[] = [];\n  let fib_index12: number[]\
    \ = [];\n  let fib_index13: number[] = [];\n  let fib_index14: number[] = [];\n\
    \  let fib_index15: number[] = [];\n  let fib_index16: number[] = [];\n  let fib_index17:\
    \ number[] = [];\n  let fib_index18: number[] = [];\n  let fib_index19: number[]\
    \ = [];\n  let fib_index20: number[] = [];\n  let fib_index21: number[] = [];\n\
    \  let fib_index22: number[] = [];\n  let fib_index23: number[] = [];\n  let fib_index24:\
    \ number[] = [];\n  let fib_index25: number[] = [];\n  let fib_index26: number[]\
    \ = [];\n  let fib_index27: number[] = [];\n  let fib_index28: number[] = [];\n\
    \  let fib_index29: number[] = [];\n  let fib_index30: number[] = [];\n  let fib_index31:\
    \ number[] = [];\n  let fib_index32: number[] = [];\n  let fib_index33: number[]\
    \ = [];\n  let fib_index34: number[] = [];\n  let fib_index35: number[] = [];\n\
    \  let fib_index36: number[] = [];\n  let fib_index37: number[] = [];\n  let fib_index38:\
    \ number[] = [];\n  let fib_index39: number[] = [];\n  let fib_index40: number[]\
    \ = [];\n  let fib_index41: number[] = [];\n  let fib_index42: number[] = [];\n\
    \  let fib_index43: number[] = [];\n  let fib_index44: number[] = [];\n  let fib_index45:\
    \ number[] = [];\n  let fib_index46: number[] = [];\n  let fib_index47: number[]\
    \ = [];\n  let fib_index48: number[] = [];\n  let fib_index49: number[] = [];\n\
    \  let fib_index50: number[] = [];\n  let fib_index51: number[] = [];\n  let fib_index52:\
    \ number[] = [];\n  let fib_index53: number[] = [];\n  let fib_index54: number[]\
    \ = [];\n  let fib_index55: number[] = [];\n  let fib_index56: number[] = [];\n\
    \  let fib_index57: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpupbqdh4t.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let i: number;\n  let j: number;\n  let k: number;\n\
    \  let l: number;\n  let m: number;\n  let n: number;\n  let o: number;\n  let\
    \ p: number;\n  let q: number;\n  let r: number;\n  let s: number;\n  let t: number;\n\
    \  let u: number;\n  let v: number;\n  let w: number;\n  let x: number;\n  let\
    \ y: number;\n  let z: number;\n  let a: number;\n  let b: number;\n  let c: number;\n\
    \  let d: number;\n  let e: number;\n  let f: number;\n  let g: number;\n  let\
    \ h: number;\n  let i: number;\n  let j: number;\n  let k: number;\n  let l: number;\n\
    \  let m: number;\n  let n: number;\n  let o: number;\n  let p: number;\n  let\
    \ q: number;\n  let r: number;\n  let s: number;\n  let t: number;\n  let u: number;\n\
    \  let v: number;\n  let w: number;\n  let x: number;\n  let y: number;\n  let\
    \ z: number;\n  let a: number;\n  let b: number;\n  let c: number;\n  let d: number;\n\
    \  let e: number;\n  let f: number;\n  let g: number;\n  let h: number;\n  let\
    \ i: number;\n  let j: number;\n  let k: number;\n  let l: number;\n  let m: number;\n\
    \  let n: number;\n  let o: number;\n  let p: number;\n  let q: number;\n  let\
    \ r: number;\n  let s: number;\n  let t: number;\n  let u: number;\n  let v: number;\n\
    \  let w: number;\n  let x: number;\n  let y: number;\n  let z: number;\n  let\
    \ a: number;\n  let b: number;\n  let c: number;\n  let d: number;\n  let e: number;\n\
    \  let f: number;\n  let g: number;\n  let h: number;\n  let i: number;\n  let\
    \ j: number;\n  let k: number;\n  let l: number;\n  let m: number;\n  let n: number;\n\
    \  let o: number;\n  let p: number;\n  let q: number;\n  let r: number;\n  let\
    \ s: number;\n  let t: number;\n  let u: number;\n  let v: number;\n  let w: number;\n\
    \  let x: number;\n  let y: number;\n  let z: number;\n  let a: number;\n  let\
    \ b: number;\n  let c: number;\n  let d: number;\n  let e: number;\n  let f: number;\n\
    \  let g: number;\n  let h: number;\n  let i: number;\n  let j: number;\n  let\
    \ k: number;\n  let l: number;\n  let m: number;\n  let n: number;\n  let o: number;\n\
    \  let p: number;\n  let q: number;\n  let r: number;\n  let s: number;\n  let\
    \ t: number;\n  let u: number;\n  let v: number;\n  let w: number;\n  let x: number;\n\
    \  let y: number;\n  let z: number;\n  let a: number;\n  let b: number;\n  let\
    \ c: \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8grwwyfe.ts(130,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp8grwwyfe.ts(148,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n < 5) return prime_fib(n - 1) + prime_fib(n - 2);\n  if (n % 2 == 0) return\
    \ prime_fib(n - 1) + prime_fib(n - 3);\n  if (n % 3 == 0) return prime_fib(n -\
    \ 2) + prime_fib(n - 4);\n  if (n % 5 == 0) return prime_fib(n - 3) + prime_fib(n\
    \ - 5);\n  return prime_fib(n - 5) + prime_fib(n - 6);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpeahitldk.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpeahitldk.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 1);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpujclwi2t.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpujclwi2t.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014988
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let fib_index: number[] = [];\n  let fib_index2: number[] = [];\n  let fib_index3:\
    \ number[] = [];\n  let fib_index4: number[] = [];\n  let fib_index5: number[]\
    \ = [];\n  let fib_index6: number[] = [];\n  let fib_index7: number[] = [];\n\
    \  let fib_index8: number[] = [];\n  let fib_index9: number[] = [];\n  let fib_index10:\
    \ number[] = [];\n  let fib_index11: number[] = [];\n  let fib_index12: number[]\
    \ = [];\n  let fib_index13: number[] = [];\n  let fib_index14: number[] = [];\n\
    \  let fib_index15: number[] = [];\n  let fib_index16: number[] = [];\n  let fib_index17:\
    \ number[] = [];\n  let fib_index18: number[] = [];\n  let fib_index19: number[]\
    \ = [];\n  let fib_index20: number[] = [];\n  let fib_index21: number[] = [];\n\
    \  let fib_index22: number[] = [];\n  let fib_index23: number[] = [];\n  let fib_index24:\
    \ number[] = [];\n  let fib_index25: number[] = [];\n  let fib_index26: number[]\
    \ = [];\n  let fib_index27: number[] = [];\n  let fib_index28: number[] = [];\n\
    \  let fib_index29: number[] = [];\n  let fib_index30: number[] = [];\n  let fib_index31:\
    \ number[] = [];\n  let fib_index32: number[] = [];\n  let fib_index33: number[]\
    \ = [];\n  let fib_index34: number[] = [];\n  let fib_index35: number[] = [];\n\
    \  let fib_index36: number[] = [];\n  let fib_index37: number[] = [];\n  let fib_index38:\
    \ number[] = [];\n  let fib_index39: number[] = [];\n  let fib_index40: number[]\
    \ = [];\n  let fib_index41: number[] = [];\n  let fib_index42: number[] = [];\n\
    \  let fib_index43: number[] = [];\n  let fib_index44: number[] = [];\n  let fib_index45:\
    \ number[] = [];\n  let fib_index46: number[] = [];\n  let fib_index47: number[]\
    \ = [];\n  let fib_index48: number[] = [];\n  let fib_index49: number[] = [];\n\
    \  let fib_index50: number[] = [];\n  let fib_index51: number[] = [];\n  let fib_index52:\
    \ number[] = [];\n  let fib_index53: number[] = [];\n  let fib_index54: number[]\
    \ = [];\n  let fib_index55: number[] = [];\n  let fib_index56: number[] = [];\n\
    \  let fib_index57: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpupbqdh4t.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + 2;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmppxj5gqku.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppxj5gqku.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let counter: number = 0;\n\n  while (counter <\
    \ n) {\n    fib.push(counter);\n    counter++;\n  }\n\n  for (let i = 0; i < fib.length;\
    \ i++) {\n    if (fib[i] % 2 === 0) {\n      prime[i] = fib[i];\n    }\n  }\n\n\
    \  return prime[prime.length - 1];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp5_6xeqgc.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5_6xeqgc.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return\
    \ 3;\n  }\n  if (n % 2 === 0) {\n    return prime_fib(n - 1) + prime_fib(n - 2);\n\
    \  }\n  if (n % 3 === 0) {\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3);\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3)\
    \ + prime_fib(n - 4);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpdvlu7vdi.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdvlu7vdi.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let counter: number = 0;\n  let prime: number = 0;\n\n  while (counter < n)\
    \ {\n    fib.push(counter);\n    counter++;\n  }\n\n  for (let i = 0; i < fib.length;\
    \ i++) {\n    if (fib[i] % 2 === 0) {\n      prime = fib[i];\n      break;\n \
    \   }\n  }\n\n  return prime;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpv4zlgvky.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv4zlgvky.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 === 0) return 1;\n  if (n % 3 === 0) return\
    \ 2;\n  if (n % 5 === 0) return 3;\n  if (n % 7 === 0) return 4;\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpn5l4ghf3.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn5l4ghf3.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let counter: number = 0;\n\n  while (counter <\
    \ n) {\n    fib.push(counter);\n    counter++;\n  }\n\n  for (let i = 0; i < fib.length;\
    \ i++) {\n    if (fib[i] % 2 === 0) {\n      prime[i] = fib[i];\n    } else {\n\
    \      prime[i] = fib[i] - 1;\n    }\n  }\n\n  return prime[prime.length - 1];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpfyvegeu6.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfyvegeu6.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [];\n\
    \    let prime: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        fib.push(i);\n\
    \    }\n    for (let i = 0; i <= n; i++) {\n        if (fib[i] % 2 === 0) {\n\
    \            prime = fib.slice();\n            fib.splice(i, 1);\n           \
    \ break;\n        }\n    }\n    return prime[prime.length - 1];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp0o6vvcwp.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0o6vvcwp.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return\
    \ 3;\n  }\n  if (n === 5) {\n    return 5;\n  }\n  if (n === 7) {\n    return\
    \ 7;\n  }\n  if (n === 11) {\n    return 11;\n  }\n  if (n === 13) {\n    return\
    \ 13;\n  }\n  if (n === 17) {\n    return 17;\n  }\n  if (n === 19) {\n    return\
    \ 19;\n  }\n  if (n === 23) {\n    return 23;\n  }\n  if (n === 29) {\n    return\
    \ 29;\n  }\n  if (n === 31) {\n    return 31;\n  }\n  if (n === 37) {\n    return\
    \ 37;\n  }\n  if (n === 41) {\n    return 41;\n  }\n  if (n === 43) {\n    return\
    \ 43;\n  }\n  if (n === 47) {\n    return 47;\n  }\n  if (n === 53) {\n    return\
    \ 53;\n  }\n  if (n === 59) {\n    return 59;\n  }\n  if (n === 61) {\n    return\
    \ 61;\n  }\n  if (n === 67) {\n    return 67;\n  }\n  if (n === 71) {\n    return\
    \ 71;\n  }\n  if (n === 73) {\n    return 73;\n  }\n  if (n === 79) {\n    return\
    \ 79;\n  }\n  if (n === 81) {\n    return 81;\n  }\n  if (n === 89) {\n    return\
    \ 89;\n  }\n  if (n === 97) {\n    return 97;\n  }\n  return prime_fib(n - 1)\
    \ + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpd5ewoe4d.js:86:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd5ewoe4d.js:97:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpqgppkm0d.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqgppkm0d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    if (n === 0 || n === 1)\
    \ {\n        return n;\n    }\n    if (n === 2) {\n        return 1;\n    }\n\
    \    if (n % 2 === 0) {\n        return prime_fib(n - 1) + prime_fib(n - 2);\n\
    \    }\n    if (n % 2 === 1) {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n    }\n    return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmplo6hivb5.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplo6hivb5.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [];\n\
    \    fib[0] = 0;\n    fib[1] = 1;\n    for (let i = 2; i < n; i++) {\n       \
    \ fib[i] = fib[i - 1] + fib[i - 2];\n    }\n    return fib[n];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpghg62nxh.js:14:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpghg62nxh.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 === 0) return 1;\n  if (n % 3 === 0) return\
    \ 2;\n  if (n % 5 === 0) return 3;\n  if (n % 7 === 0) return 5;\n  if (n % 11\
    \ === 0) return 7;\n  if (n % 13 === 0) return 11;\n  if (n % 17 === 0) return\
    \ 13;\n  if (n % 19 === 0) return 17;\n  if (n % 23=== 0) return 19;\n  if (n\
    \ % 29 === 0) return 23;\n  if (n % 31 === 0) return 29;\n  if (n % 37 === 0)\
    \ return 37;\n  if (n % 43 === 0) return 43;\n  if (n % 53 === 0) return 53;\n\
    \  if (n % 63 === 0) return 63;\n  if (n % 73 === 0) return 73;\n  if (n % 83\
    \ === 0) return 83;\n  if (n % 93 === 0) return 93;\n  return n;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpf6u9t1jo.js:48:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpf6u9t1jo.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014992
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let isPrime: boolean;\n  let isFibonacci: boolean;\n\
    \  let isPrimeFibonacci: boolean;\n  let isPrimePrime: boolean;\n  let isPrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrime: boolean;\n  let isPrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePrime: boolean;\n  let isPrimePrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePrimePrime: boolean;\n  let isPrimePrimePrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimePrime: boolean;\n  let isPrimePrimePrimePrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimePrimePrime: boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n  let\
    \ isPrimePrimePrimePrimePrimePrimePrimePrimeFibonacci: boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrime:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFibonacci: boolean;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFibonacci: boolean;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime: boolean;\n\
    \  let isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFibonacci:\
    \ boolean;\n  let isPrimePrimePrimePri\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf_09wnir.ts(49,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [];\n\
    \    let prime: number[] = [];\n    let prime_number: number[] = [];\n    let\
    \ fib_index: number[] = [];\n    let fib_index2: number[] = [];\n    let fib_index3:\
    \ number[] = [];\n    let fib_index4: number[] = [];\n    let fib_index5: number[]\
    \ = [];\n    let fib_index6: number[] = [];\n    let fib_index7: number[] = [];\n\
    \    let fib_index8: number[] = [];\n    let fib_index9: number[] = [];\n    let\
    \ fib_index10: number[] = [];\n    let fib_index11: number[] = [];\n    let fib_index12:\
    \ number[] = [];\n    let fib_index13: number[] = [];\n    let fib_index14: number[]\
    \ = [];\n    let fib_index15: number[] = [];\n    let fib_index16: number[] =\
    \ [];\n    let fib_index17: number[] = [];\n    let fib_index18: number[] = [];\n\
    \    let fib_index19: number[] = [];\n    let fib_index20: number[] = [];\n  \
    \  let fib_index21: number[] = [];\n    let fib_index22: number[] = [];\n    let\
    \ fib_index23: number[] = [];\n    let fib_index24: number[] = [];\n    let fib_index25:\
    \ number[] = [];\n    let fib_index26: number[] = [];\n    let fib_index27: number[]\
    \ = [];\n    let fib_index28: number[] = [];\n    let fib_index29: number[] =\
    \ [];\n    let fib_index30: number[] = [];\n    let fib_index31: number[] = [];\n\
    \    let fib_index32: number[] = [];\n    let fib_index33: number[] = [];\n  \
    \  let fib_index34: number[] = [];\n    let fib_index35: number[] = [];\n    let\
    \ fib_index36: number[] = [];\n    let fib_index37: number[] = [];\n    let fib_index38:\
    \ number[] = [];\n    let fib_index39: number[] = [];\n    let fib_index40: number[]\
    \ = [];\n    let fib_index41: number[] = [];\n    let fib_index42: number[] =\
    \ [];\n    let fib_index43: number[] = [];\n    let fib_index44: number[] = [];\n\
    \    let fib_index45: number[] = [];\n    let fib_index46: number[] = [];\n  \
    \  let fib_index47: number[] = [];\n    let fib_index48: number[] = [];\n    let\
    \ fib_index49: number[] = [];\n    let fib_index50: number[] = [];\n    let fib_index51:\
    \ number[] = [];\n    let fib_index52: number[] = [];\n    let fib_index53: number[]\
    \ = [];\n    let fib_index54: number[] = [];\n    let fib_index55: number[] =\
    \ [];\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpllyq7bhq.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014993
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 == 0) return 3;\n  if (n % 3 == 0) return 4;\n\
    \  if (n % 5 == 0) return 5;\n  if (n % 7 == 0) return 6;\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsv688smj.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsv688smj.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    if (n < 2) {\n        return\
    \ 1;\n    }\n    if (n === 2) {\n        return 2;\n    }\n    if (n % 2 === 0)\
    \ {\n        return prime_fib(n - 1) + prime_fib(n - 2);\n    }\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp0mp2ys5p.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0mp2ys5p.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n < 5) return prime_fib(n - 1) + prime_fib(n - 2);\n  if (n % 2 == 0) return\
    \ prime_fib(n - 1) + prime_fib(n - 3);\n  if (n % 3 == 0) return prime_fib(n -\
    \ 2) + prime_fib(n - 4);\n  if (n % 5 == 0) return prime_fib(n - 3) + prime_fib(n\
    \ - 5);\n  return prime_fib(n - 5) + prime_fib(n - 6);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpeahitldk.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpeahitldk.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [];\n\
    \    let prime: number[] = [];\n    let counter: number = 0;\n    let temp: number\
    \ = 0;\n    let result: number = 0;\n    let prime_counter: number = 0;\n    let\
    \ prime_counter2: number = 0;\n    let prime_counter3: number = 0;\n    let prime_counter4:\
    \ number = 0;\n    let prime_counter5: number = 0;\n    let prime_counter6: number\
    \ = 0;\n    let prime_counter7: number = 0;\n    let prime_counter8: number =\
    \ 0;\n    let prime_counter9: number = 0;\n    let prime_counter10: number = 0;\n\
    \    let prime_counter11: number = 0;\n    let prime_counter12: number = 0;\n\
    \    let prime_counter13: number = 0;\n    let prime_counter14: number = 0;\n\
    \    let prime_counter15: number = 0;\n    let prime_counter16: number = 0;\n\
    \    let prime_counter17: number = 0;\n    let prime_counter18: number = 0;\n\
    \    let prime_counter19: number = 0;\n    let prime_counter20: number = 0;\n\
    \    let prime_counter21: number = 0;\n    let prime_counter22: number = 0;\n\
    \    let prime_counter23: number = 0;\n    let prime_counter24: number = 0;\n\
    \    let prime_counter25: number = 0;\n    let prime_counter26: number = 0;\n\
    \    let prime_counter27: number = 0;\n    let prime_counter28: number = 0;\n\
    \    let prime_counter29: number = 0;\n    let prime_counter30: number = 0;\n\
    \    let prime_counter31: number = 0;\n    let prime_counter32: number = 0;\n\
    \    let prime_counter33: number = 0;\n    let prime_counter34: number = 0;\n\
    \    let prime_counter35: number = 0;\n    let prime_counter36: number = 0;\n\
    \    let prime_counter37: number = 0;\n    let prime_counter38: number = 0;\n\
    \    let prime_counter39: number = 0;\n    let prime_counter40: number = 0;\n\
    \    let prime_counter41: number = 0;\n    let prime_counter42: number = 0;\n\
    \    let prime_counter43: number = 0;\n    let prime_counter44: number = 0;\n\
    \    let prime_counter45: number = 0;\n    let prime_counter46: number = 0;\n\
    \    let prime_counter47: number = 0;\n    let prime_counter48: number = 0;\n\
    \    let prime_counter49: number = 0;\n    let prime_counter50: number = 0;\n\
    \    let prime_counter51: number = 0;\n    let prime_counter52: number = 0;\n\
    \    let prime_counter53: number = 0;\n    let prime_counter54: number = 0;\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnsd85_2a.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014993
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 1);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpujclwi2t.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpujclwi2t.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let counter: number = 0;\n  while (counter < n) {\n    fib.push(counter);\n\
    \    counter++;\n  }\n  let prime: number[] = [];\n  for (let i = 0; i < fib.length;\
    \ i++) {\n    let temp: number = fib[i];\n    for (let j = i + 1; j < fib.length;\
    \ j++) {\n      if (fib[j] % temp === 0) {\n        prime = fib.slice(i);\n  \
    \      break;\n      }\n    }\n  }\n  return prime[prime.length - 1];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n2\n    at test (/tmp/tmpegn9w_2s.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpegn9w_2s.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014993
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let prime_number: number[] = [];\n  let fib_index:\
    \ number[] = [];\n  let fib_index2: number[] = [];\n  let fib_index3: number[]\
    \ = [];\n  let fib_index4: number[] = [];\n  let fib_index5: number[] = [];\n\
    \  let fib_index6: number[] = [];\n  let fib_index7: number[] = [];\n  let fib_index8:\
    \ number[] = [];\n  let fib_index9: number[] = [];\n  let fib_index10: number[]\
    \ = [];\n  let fib_index11: number[] = [];\n  let fib_index12: number[] = [];\n\
    \  let fib_index13: number[] = [];\n  let fib_index14: number[] = [];\n  let fib_index15:\
    \ number[] = [];\n  let fib_index16: number[] = [];\n  let fib_index17: number[]\
    \ = [];\n  let fib_index18: number[] = [];\n  let fib_index19: number[] = [];\n\
    \  let fib_index20: number[] = [];\n  let fib_index21: number[] = [];\n  let fib_index22:\
    \ number[] = [];\n  let fib_index23: number[] = [];\n  let fib_index24: number[]\
    \ = [];\n  let fib_index25: number[] = [];\n  let fib_index26: number[] = [];\n\
    \  let fib_index27: number[] = [];\n  let fib_index28: number[] = [];\n  let fib_index29:\
    \ number[] = [];\n  let fib_index30: number[] = [];\n  let fib_index31: number[]\
    \ = [];\n  let fib_index32: number[] = [];\n  let fib_index33: number[] = [];\n\
    \  let fib_index34: number[] = [];\n  let fib_index35: number[] = [];\n  let fib_index36:\
    \ number[] = [];\n  let fib_index37: number[] = [];\n  let fib_index38: number[]\
    \ = [];\n  let fib_index39: number[] = [];\n  let fib_index40: number[] = [];\n\
    \  let fib_index41: number[] = [];\n  let fib_index42: number[] = [];\n  let fib_index43:\
    \ number[] = [];\n  let fib_index44: number[] = [];\n  let fib_index45: number[]\
    \ = [];\n  let fib_index46: number[] = [];\n  let fib_index47: number[] = [];\n\
    \  let fib_index48: number[] = [];\n  let fib_index49: number[] = [];\n  let fib_index50:\
    \ number[] = [];\n  let fib_index51: number[] = [];\n  let fib_index52: number[]\
    \ = [];\n  let fib_index53: number[] = [];\n  let fib_index54: number[] = [];\n\
    \  let fib_index55: number[] = [];\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9qq20_id.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014993
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return\
    \ 3;\n  }\n  if (n % 2 === 0) {\n    return prime_fib(n - 1) + prime_fib(n - 2);\n\
    \  }\n  if (n % 3 === 0) {\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3);\n  }\n  throw new Error(\"Not a Fibonacci number\");\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpu3xeqb18.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu3xeqb18.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014993
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let counter: number = 0;\n  let prime_counter:\
    \ number = 0;\n  let prime_counter2: number = 0;\n  let prime_counter3: number\
    \ = 0;\n  let prime_counter4: number = 0;\n  let prime_counter5: number = 0;\n\
    \  let prime_counter6: number = 0;\n  let prime_counter7: number = 0;\n  let prime_counter8:\
    \ number = 0;\n  let prime_counter9: number = 0;\n  let prime_counter10: number\
    \ = 0;\n  let prime_counter11: number = 0;\n  let prime_counter12: number = 0;\n\
    \  let prime_counter13: number = 0;\n  let prime_counter14: number = 0;\n  let\
    \ prime_counter15: number = 0;\n  let prime_counter16: number = 0;\n  let prime_counter17:\
    \ number = 0;\n  let prime_counter18: number = 0;\n  let prime_counter19: number\
    \ = 0;\n  let prime_counter20: number = 0;\n  let prime_counter21: number = 0;\n\
    \  let prime_counter22: number = 0;\n  let prime_counter23: number = 0;\n  let\
    \ prime_counter24: number = 0;\n  let prime_counter25: number = 0;\n  let prime_counter26:\
    \ number = 0;\n  let prime_counter27: number = 0;\n  let prime_counter28: number\
    \ = 0;\n  let prime_counter29: number = 0;\n  let prime_counter30: number = 0;\n\
    \  let prime_counter31: number = 0;\n  let prime_counter32: number = 0;\n  let\
    \ prime_counter33: number = 0;\n  let prime_counter34: number = 0;\n  let prime_counter35:\
    \ number = 0;\n  let prime_counter36: number = 0;\n  let prime_counter37: number\
    \ = 0;\n  let prime_counter38: number = 0;\n  let prime_counter39: number = 0;\n\
    \  let prime_counter40: number = 0;\n  let prime_counter41: number = 0;\n  let\
    \ prime_counter42: number = 0;\n  let prime_counter43: number = 0;\n  let prime_counter44:\
    \ number = 0;\n  let prime_counter45: number = 0;\n  let prime_counter46: number\
    \ = 0;\n  let prime_counter47: number = 0;\n  let prime_counter48: number = 0;\n\
    \  let prime_counter49: number = 0;\n  let prime_counter50: number = 0;\n  let\
    \ prime_counter51: number = 0;\n  let prime_counter52: number = 0;\n  let prime_counter53:\
    \ number = 0;\n  let prime_counter54: number = 0;\n  let prime_counter55: number\
    \ = 0;\n  let prime\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg35u0g9x.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [];\n\
    \    let prime: number[] = [];\n    for (let i = 0; i <= n; i++) {\n        fib.push(i);\n\
    \    }\n    for (let i = 0; i <= n; i++) {\n        if (fib[i] % 2 === 0) {\n\
    \            prime = fib.slice();\n            fib.splice(i, 1);\n        }\n\
    \    }\n    return prime[n - 1];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpvsdxdhl_.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvsdxdhl_.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014993
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 === 0) return 1;\n  if (n % 3 === 0) return\
    \ 5;\n  if (n % 5 === 0) return 9;\n  return prime_fib(Math.sqrt(n));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpb2no4x_b.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpb2no4x_b.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014993
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpqgppkm0d.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqgppkm0d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpi8tf534w.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpi8tf534w.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [];\n\
    \    fib[0] = 0;\n    fib[1] = 1;\n    for (let i = 2; i < n; i++) {\n       \
    \ fib[i] = fib[i - 1] + fib[i - 2];\n    }\n    return fib[n];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpghg62nxh.js:14:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpghg62nxh.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 2) + prime_fib(n - 1);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmplz76pf1a.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplz76pf1a.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let fib_index = 0;\n  let prime: boolean;\n  let prime_index = 0;\n  let prime_number:\
    \ number = 0;\n  let prime_number_index = 0;\n  let prime_number_array: number[]\
    \ = [];\n  let prime_number_array_index = 0;\n  let prime_number_array_length:\
    \ number = 0;\n  let prime_number_array_length_temp: number = 0;\n  let prime_number_array_length_temp_2:\
    \ number = 0;\n  let prime_number_array_length_temp_3: number = 0;\n  let prime_number_array_length_temp_4:\
    \ number = 0;\n  let prime_number_array_length_temp_5: number = 0;\n  let prime_number_array_length_temp_6:\
    \ number = 0;\n  let prime_number_array_length_temp_7: number = 0;\n  let prime_number_array_length_temp_8:\
    \ number = 0;\n  let prime_number_array_length_temp_9: number = 0;\n  let prime_number_array_length_temp_10:\
    \ number = 0;\n  let prime_number_array_length_temp_11: number = 0;\n  let prime_number_array_length_temp_12:\
    \ number = 0;\n  let prime_number_array_length_temp_13: number = 0;\n  let prime_number_array_length_temp_14:\
    \ number = 0;\n  let prime_number_array_length_temp_15: number = 0;\n  let prime_number_array_length_temp_16:\
    \ number = 0;\n  let prime_number_array_length_temp_17: number = 0;\n  let prime_number_array_length_temp_18:\
    \ number = 0;\n  let prime_number_array_length_temp_19: number = 0;\n  let prime_number_array_length_temp_20:\
    \ number = 0;\n  let prime_number_array_length_temp_21: number = 0;\n  let prime_number_array_length_temp_22:\
    \ number = 0;\n  let prime_number_array_length_temp_23: number = 0;\n  let prime_number_array_length_temp_24:\
    \ number = 0;\n  let prime_number_array_length_temp_25: number = 0;\n  let prime_number_array_length_temp_26:\
    \ number = 0;\n  let prime_number_array_length_temp_27: number = 0;\n  let prime_number_array_length_temp_28:\
    \ number = 0;\n  let prime_number_array_length_temp_29: number = 0;\n  let prime_number_array_length_temp_30:\
    \ number = 0;\n  let prime_number_array_length_temp_31: number = 0;\n  let prime_number_array_length_temp_32:\
    \ number = 0;\n  let prime_number_array_length_temp_33: number = 0;\n  let prime_number_array_length_temp_34:\
    \ number = 0;\n  let prime_number_array_length_temp_35: number = 0;\n  let prime_number_array_length_temp_36:\
    \ number = 0;\n  let prime_number_array_length_temp_37: number = 0;\n  let prime_number_array_length_temp_38\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf0_5nvg6.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014993
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  let i = 2;\n  while (i < n) {\n\
    \    const a = prime_fib(i - 1);\n    const b = prime_fib(i - 2);\n    if (a ===\
    \ b) {\n      return b;\n    }\n    if (a > b) {\n      i = i + 1;\n    }\n  }\n\
    \  return prime_fib(n - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpnjvaiopb.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnjvaiopb.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014993
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 1);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpujclwi2t.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpujclwi2t.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return\
    \ 4;\n  if (n % 5 === 0) return 5;\n  if (n % 7 === 0) return 6;\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp5zkw3ted.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5zkw3ted.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return\
    \ 4;\n  if (n % 5 === 0) return 5;\n\n  const fib_n_th = prime_fib(n - 1);\n \
    \ const fib_n_th_prime = prime_fib(n - 2);\n\n  return fib_n_th + fib_n_th_prime;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpgcxxk617.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgcxxk617.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014993
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n < 4) return 1;\n  if (n % 2 == 0) return prime_fib(n - 1) + prime_fib(n -\
    \ 2);\n  if (n % 3 == 0) return prime_fib(n - 3) + prime_fib(n - 4);\n  return\
    \ prime_fib(n - 5) + prime_fib(n - 6);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp77i8_ob7.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp77i8_ob7.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014994
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let fib_index: number[] = [];\n  let prime_index:\
    \ number[] = [];\n  let fib_index2: number[] = [];\n  let prime_index2: number[]\
    \ = [];\n  let fib_index3: number[] = [];\n  let prime_index3: number[] = [];\n\
    \  let fib_index4: number[] = [];\n  let prime_index4: number[] = [];\n  let fib_index5:\
    \ number[] = [];\n  let prime_index5: number[] = [];\n  let fib_index6: number[]\
    \ = [];\n  let prime_index6: number[] = [];\n  let fib_index7: number[] = [];\n\
    \  let prime_index7: number[] = [];\n  let fib_index8: number[] = [];\n  let prime_index8:\
    \ number[] = [];\n  let fib_index9: number[] = [];\n  let prime_index9: number[]\
    \ = [];\n  let fib_index10: number[] = [];\n  let prime_index10: number[] = [];\n\
    \  let fib_index11: number[] = [];\n  let prime_index11: number[] = [];\n  let\
    \ fib_index12: number[] = [];\n  let prime_index12: number[] = [];\n  let fib_index13:\
    \ number[] = [];\n  let prime_index13: number[] = [];\n  let fib_index14: number[]\
    \ = [];\n  let prime_index14: number[] = [];\n  let fib_index15: number[] = [];\n\
    \  let prime_index15: number[] = [];\n  let fib_index16: number[] = [];\n  let\
    \ prime_index16: number[] = [];\n  let fib_index17: number[] = [];\n  let prime_index17:\
    \ number[] = [];\n  let fib_index18: number[] = [];\n  let prime_index18: number[]\
    \ = [];\n  let fib_index19: number[] = [];\n  let prime_index19: number[] = [];\n\
    \  let fib_index20: number[] = [];\n  let prime_index20: number[] = [];\n  let\
    \ fib_index21: number[] = [];\n  let prime_index21: number[] = [];\n  let fib_index22:\
    \ number[] = [];\n  let prime_index22: number[] = [];\n  let fib_index23: number[]\
    \ = [];\n  let prime_index23: number[] = [];\n  let fib_index24: number[] = [];\n\
    \  let prime_index24: number[] = [];\n  let fib_index25: number[] = [];\n  let\
    \ prime_index25: number[] = [];\n  let fib_index26: number[] = [];\n  let prime_index26:\
    \ number[] = [];\n  let fib_index27: number[] = [];\n  let prime_index27: number[]\
    \ = [];\n  let fib_index28: number[] = [];\n  let prime_index28: number[] = [];\n\
    \  let fib_index29\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp83x2zvru.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n < 5) return prime_fib(n - 1) + prime_fib(n - 2);\n  if (n === 5) return 2;\n\
    \  if (n === 7) return 3;\n  if (n % 2 === 0) return prime_fib(3 * n + 1); //\
    \ n is even\n  if (n % 3 === 0) return prime_fib(2 * n + 1); // n is odd\n  if\
    \ (n % 5 === 0) return prime_fib(5 * n + 1); // n is divisible by 5\n  if (n %\
    \ 7 === 0) return prime_fib(7 * n + 1); // n is divisible by 7\n  return prime_fib(Math.sqrt(n));\
    \ // n is square root\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp1h5qax_7.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1h5qax_7.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014993
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let prime_number: number[] = [];\n  let fib_index:\
    \ number[] = [];\n  let fib_index2: number[] = [];\n  let fib_index3: number[]\
    \ = [];\n  let fib_index4: number[] = [];\n  let fib_index5: number[] = [];\n\
    \  let fib_index6: number[] = [];\n  let fib_index7: number[] = [];\n  let fib_index8:\
    \ number[] = [];\n  let fib_index9: number[] = [];\n  let fib_index10: number[]\
    \ = [];\n  let fib_index11: number[] = [];\n  let fib_index12: number[] = [];\n\
    \  let fib_index13: number[] = [];\n  let fib_index14: number[] = [];\n  let fib_index15:\
    \ number[] = [];\n  let fib_index16: number[] = [];\n  let fib_index17: number[]\
    \ = [];\n  let fib_index18: number[] = [];\n  let fib_index19: number[] = [];\n\
    \  let fib_index20: number[] = [];\n  let fib_index21: number[] = [];\n  let fib_index22:\
    \ number[] = [];\n  let fib_index23: number[] = [];\n  let fib_index24: number[]\
    \ = [];\n  let fib_index25: number[] = [];\n  let fib_index26: number[] = [];\n\
    \  let fib_index27: number[] = [];\n  let fib_index28: number[] = [];\n  let fib_index29:\
    \ number[] = [];\n  let fib_index30: number[] = [];\n  let fib_index31: number[]\
    \ = [];\n  let fib_index32: number[] = [];\n  let fib_index33: number[] = [];\n\
    \  let fib_index34: number[] = [];\n  let fib_index35: number[] = [];\n  let fib_index36:\
    \ number[] = [];\n  let fib_index37: number[] = [];\n  let fib_index38: number[]\
    \ = [];\n  let fib_index39: number[] = [];\n  let fib_index40: number[] = [];\n\
    \  let fib_index41: number[] = [];\n  let fib_index42: number[] = [];\n  let fib_index43:\
    \ number[] = [];\n  let fib_index44: number[] = [];\n  let fib_index45: number[]\
    \ = [];\n  let fib_index46: number[] = [];\n  let fib_index47: number[] = [];\n\
    \  let fib_index48: number[] = [];\n  let fib_index49: number[] = [];\n  let fib_index50:\
    \ number[] = [];\n  let fib_index51: number[] = [];\n  let fib_index52: number[]\
    \ = [];\n  let fib_index53: number[] = [];\n  let fib_index54: number[] = [];\n\
    \  let fib_index55: number[] = [];\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9qq20_id.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014993
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let fib_index: number[] = [];\n  let prime_index:\
    \ number[] = [];\n  let fib_index2: number[] = [];\n  let prime_index2: number[]\
    \ = [];\n  let fib_index3: number[] = [];\n  let prime_index3: number[] = [];\n\
    \  let fib_index4: number[] = [];\n  let prime_index4: number[] = [];\n  let fib_index5:\
    \ number[] = [];\n  let prime_index5: number[] = [];\n  let fib_index6: number[]\
    \ = [];\n  let prime_index6: number[] = [];\n  let fib_index7: number[] = [];\n\
    \  let prime_index7: number[] = [];\n  let fib_index8: number[] = [];\n  let prime_index8:\
    \ number[] = [];\n  let fib_index9: number[] = [];\n  let prime_index9: number[]\
    \ = [];\n  let fib_index10: number[] = [];\n  let prime_index10: number[] = [];\n\
    \  let fib_index11: number[] = [];\n  let prime_index11: number[] = [];\n  let\
    \ fib_index12: number[] = [];\n  let prime_index12: number[] = [];\n  let fib_index13:\
    \ number[] = [];\n  let prime_index13: number[] = [];\n  let fib_index14: number[]\
    \ = [];\n  let prime_index14: number[] = [];\n  let fib_index15: number[] = [];\n\
    \  let prime_index15: number[] = [];\n  let fib_index16: number[] = [];\n  let\
    \ prime_index16: number[] = [];\n  let fib_index17: number[] = [];\n  let prime_index17:\
    \ number[] = [];\n  let fib_index18: number[] = [];\n  let prime_index18: number[]\
    \ = [];\n  let fib_index19: number[] = [];\n  let prime_index19: number[] = [];\n\
    \  let fib_index20: number[] = [];\n  let prime_index20: number[] = [];\n  let\
    \ fib_index21: number[] = [];\n  let prime_index21: number[] = [];\n  let fib_index22:\
    \ number[] = [];\n  let prime_index22: number[] = [];\n  let fib_index23: number[]\
    \ = [];\n  let prime_index23: number[] = [];\n  let fib_index24: number[] = [];\n\
    \  let prime_index24: number[] = [];\n  let fib_index25: number[] = [];\n  let\
    \ prime_index25: number[] = [];\n  let fib_index26: number[] = [];\n  let prime_index26:\
    \ number[] = [];\n  let fib_index27: number[] = [];\n  let prime_index27: number[]\
    \ = [];\n  let fib_index28: number[] = [];\n  let prime_index28: number[] = [];\n\
    \  let fib_index29\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp83x2zvru.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp1jz65vto.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1jz65vto.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014993
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let counter: number = 0;\n  while (counter < n) {\n    fib.push(counter);\n\
    \    counter++;\n  }\n  let prime: number[] = [];\n  for (let i = 0; i < fib.length;\
    \ i++) {\n    let temp: number = fib[i];\n    for (let j = i; j < fib.length;\
    \ j++) {\n      if (fib[j] > temp) {\n        temp = fib[j];\n      }\n    }\n\
    \    if (temp === 1) {\n      prime.push(temp);\n    }\n  }\n  return prime[prime.indexOf(Math.max(...prime))];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n2\n    at test (/tmp/tmp40ywdrdz.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp40ywdrdz.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014994
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 == 0) return 3;\n  if (n % 3 == 0) return 4;\n\
    \  if (n % 5 == 0) return 5;\n  if (n % 7 == 0) return 6;\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsv688smj.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsv688smj.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n < 5) return prime_fib(n - 1) + prime_fib(n - 2);\n  if (n % 2 == 0) return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  if (n % 3 == 0) return prime_fib(n -\
    \ 1) + prime_fib(n - 2) + prime_fib(n - 3);\n  if (n % 5 == 0) return prime_fib(n\
    \ - 1) + prime_fib(n - 2) + prime_fib(n - 3) + prime_fib(n - 5);\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2) + prime_fib(n - 3) + prime_fib(n - 5) + prime_fib(n\
    \ - 6);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpmnmcy1bg.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmnmcy1bg.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let fib_index: number[] = [];\n  let prime_index:\
    \ number[] = [];\n  let fib_index2: number[] = [];\n  let prime_index2: number[]\
    \ = [];\n  let fib_index3: number[] = [];\n  let prime_index3: number[] = [];\n\
    \  let fib_index4: number[] = [];\n  let prime_index4: number[] = [];\n  let fib_index5:\
    \ number[] = [];\n  let prime_index5: number[] = [];\n  let fib_index6: number[]\
    \ = [];\n  let prime_index6: number[] = [];\n  let fib_index7: number[] = [];\n\
    \  let prime_index7: number[] = [];\n  let fib_index8: number[] = [];\n  let prime_index8:\
    \ number[] = [];\n  let fib_index9: number[] = [];\n  let prime_index9: number[]\
    \ = [];\n  let fib_index10: number[] = [];\n  let prime_index10: number[] = [];\n\
    \  let fib_index11: number[] = [];\n  let prime_index11: number[] = [];\n  let\
    \ fib_index12: number[] = [];\n  let prime_index12: number[] = [];\n  let fib_index13:\
    \ number[] = [];\n  let prime_index13: number[] = [];\n  let fib_index14: number[]\
    \ = [];\n  let prime_index14: number[] = [];\n  let fib_index15: number[] = [];\n\
    \  let prime_index15: number[] = [];\n  let fib_index16: number[] = [];\n  let\
    \ prime_index16: number[] = [];\n  let fib_index17: number[] = [];\n  let prime_index17:\
    \ number[] = [];\n  let fib_index18: number[] = [];\n  let prime_index18: number[]\
    \ = [];\n  let fib_index19: number[] = [];\n  let prime_index19: number[] = [];\n\
    \  let fib_index20: number[] = [];\n  let prime_index20: number[] = [];\n  let\
    \ fib_index21: number[] = [];\n  let prime_index21: number[] = [];\n  let fib_index22:\
    \ number[] = [];\n  let prime_index22: number[] = [];\n  let fib_index23: number[]\
    \ = [];\n  let prime_index23: number[] = [];\n  let fib_index24: number[] = [];\n\
    \  let prime_index24: number[] = [];\n  let fib_index25: number[] = [];\n  let\
    \ prime_index25: number[] = [];\n  let fib_index26: number[] = [];\n  let prime_index26:\
    \ number[] = [];\n  let fib_index27: number[] = [];\n  let prime_index27: number[]\
    \ = [];\n  let fib_index28: number[] = [];\n  let prime_index28: number[] = [];\n\
    \  let fib_index29\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp83x2zvru.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 === 0) return 1;\n  if (n % 3 === 0) return\
    \ 2;\n  if (n % 5 === 0) return 3;\n  if (n % 7 === 0) return 5;\n  if (n % 11\
    \ === 0) return 7;\n  if (n % 13 === 0) return 11;\n  if (n % 17 === 0) return\
    \ 13;\n  if (n % 19 === 0) return 17;\n  if (n % 23=== 0) return 19;\n  if (n\
    \ % 29 === 0) return 23;\n  if (n % 31 === 0) return 29;\n  if (n % 37 === 0)\
    \ return 37;\n  if (n % 43 === 0) return 43;\n  if (n % 51 === 0) return 51;\n\
    \  if (n % 59 === 0) return 59;\n  if (n % 61 === 0) return 61;\n  if (n % 73\
    \ === 0) return 73;\n  if (n % 83 === 0) return 83;\n  if (n % 95 === 0) return\
    \ 95;\n  if (n % 111 === 0) return 111;\n  if (n % 131 === 0) return 131;\n  if\
    \ (n % 143 === 0) return 143;\n  if (n % 151 === 0) return 151;\n  if (n % 163\
    \ === 0) return 163;\n  if (n % 177 === 0) return 177;\n  if (n % 189 === 0) return\
    \ 189;\n  if (n % 193 === 0) return 193;\n  if (n % 211 === 0) return 211;\n \
    \ if (n % 223 === 0) return 223;\n  if (n % 227 === 0) return 227;\n  if (n %\
    \ 239 === 0) return 239;\n  if (n % 243 === 0) return 243;\n  if (n % 251 ===\
    \ 0) return 251;\n  if (n % 263 === 0) return 263;\n  if (n % 271 === 0) return\
    \ 271;\n  if (n % 283 === 0) return 283;\n  if (n % 293 === 0) return 293;\n \
    \ if (n % 307 === 0) return 307;\n  if (n % 311 === 0) return 311;\n  if (n %\
    \ 323 === 0) return 323;\n  if (n % 337 === 0) return 337;\n  if (n % 343 ===\
    \ 0) return 343;\n  if (n % 351 === 0) return 351;\n  if (n % 369 === 0) return\
    \ 369;\n  if (n % 373 === 0) return 373;\n  if (n % 379 === 0) return 379;\n \
    \ if (n % 383 === 0) return 383;\n  if (n % 389 === 0) return 389;\n  if (n %\
    \ 393 === 0) return 393;\n  if (n % 401 === 0) return 401;\n  if (n % 407 ===\
    \ 0) return 407;\n  if (n % 413 === 0) return 413;\n  if (n % 419 === 0) return\
    \ 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp46mzha39.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014993
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [];\n\
    \    let prime: number[] = [];\n    let prime_number: number[] = [];\n    let\
    \ prime_number_prime: number[] = [];\n    let prime_number_prime_prime: number[]\
    \ = [];\n    let prime_number_prime_prime_prime: number[] = [];\n    let prime_number_prime_prime_prime_prime:\
    \ number[] = [];\n    let prime_number_prime_prime_prime_prime_prime: number[]\
    \ = [];\n    let prime_number_prime_prime_prime_prime_prime_prime: number[] =\
    \ [];\n    let prime_number_prime_prime_prime_prime_prime_prime_prime: number[]\
    \ = [];\n    let prime_number_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ number[] = [];\n    let prime_number_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ number[] = [];\n    let prime_number_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ number[] = [];\n    let prime_number_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ number[] = [];\n    let prime_number_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ number[] = [];\n    let prime_number_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ number[] = [];\n    let prime_number_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ number[] = [];\n    let prime_number_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ number[] = [];\n    let prime_number_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ number[] = [];\n    let prime_number_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime:\
    \ number[] = [];\n    let prime_number_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw638w6cb.ts(42,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014993
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    if (n === 0 || n === 1)\
    \ {\n        return n;\n    }\n    if (n === 2) {\n        return 1;\n    }\n\
    \    if (n % 2 === 0) {\n        return prime_fib(n - 1) + prime_fib(n - 2);\n\
    \    }\n    if (n % 2 === 1) {\n        return prime_fib(n - 2) + prime_fib(n\
    \ - 1);\n    }\n    return prime_fib(n - 3) + prime_fib(n - 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp1n_xfthg.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1n_xfthg.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014994
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let fib_index = 0;\n  let prime_index = 0;\n  let prime_number: number = 0;\n\
    \  let is_prime: boolean = false;\n\n  while (fib_index < n) {\n    fib.push(fib_index);\n\
    \    fib_index += 1;\n  }\n\n  for (let i = 0; i < fib.length; i++) {\n    if\
    \ (fib[i] % 2 === 0) {\n      prime_index += 1;\n      prime_number = fib[i];\n\
    \      is_prime = true;\n    }\n  }\n\n  if (is_prime === false) {\n    prime_number\
    \ = fib[prime_index];\n  }\n\n  return prime_number;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpqygwpv_t.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqygwpv_t.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014994
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    if (n < 2) {\n        return\
    \ 1;\n    }\n    if (n === 2) {\n        return 2;\n    }\n    if (n % 2 === 0)\
    \ {\n        return prime_fib(n - 1) + prime_fib(n - 2);\n    }\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp0mp2ys5p.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0mp2ys5p.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let counter: number = 0;\n  while (counter < n) {\n    fib.push(counter);\n\
    \    counter++;\n  }\n  let prime: number[] = [];\n  for (let i = 0; i < fib.length;\
    \ i++) {\n    if (fib[i] % 2 === 0) {\n      prime = fib.slice(i);\n      break;\n\
    \    }\n  }\n  return prime[prime.length - 1];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpvmkobayj.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvmkobayj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014994
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpqgppkm0d.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqgppkm0d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let fib_index: number[] = [];\n  let prime_index:\
    \ number[] = [];\n  let fib_index2: number[] = [];\n  let prime_index2: number[]\
    \ = [];\n  let fib_index3: number[] = [];\n  let prime_index3: number[] = [];\n\
    \  let fib_index4: number[] = [];\n  let prime_index4: number[] = [];\n  let fib_index5:\
    \ number[] = [];\n  let prime_index5: number[] = [];\n  let fib_index6: number[]\
    \ = [];\n  let prime_index6: number[] = [];\n  let fib_index7: number[] = [];\n\
    \  let prime_index7: number[] = [];\n  let fib_index8: number[] = [];\n  let prime_index8:\
    \ number[] = [];\n  let fib_index9: number[] = [];\n  let prime_index9: number[]\
    \ = [];\n  let fib_index10: number[] = [];\n  let prime_index10: number[] = [];\n\
    \  let fib_index11: number[] = [];\n  let prime_index11: number[] = [];\n  let\
    \ fib_index12: number[] = [];\n  let prime_index12: number[] = [];\n  let fib_index13:\
    \ number[] = [];\n  let prime_index13: number[] = [];\n  let fib_index14: number[]\
    \ = [];\n  let prime_index14: number[] = [];\n  let fib_index15: number[] = [];\n\
    \  let prime_index15: number[] = [];\n  let fib_index16: number[] = [];\n  let\
    \ prime_index16: number[] = [];\n  let fib_index17: number[] = [];\n  let prime_index17:\
    \ number[] = [];\n  let fib_index18: number[] = [];\n  let prime_index18: number[]\
    \ = [];\n  let fib_index19: number[] = [];\n  let prime_index19: number[] = [];\n\
    \  let fib_index20: number[] = [];\n  let prime_index20: number[] = [];\n  let\
    \ fib_index21: number[] = [];\n  let prime_index21: number[] = [];\n  let fib_index22:\
    \ number[] = [];\n  let prime_index22: number[] = [];\n  let fib_index23: number[]\
    \ = [];\n  let prime_index23: number[] = [];\n  let fib_index24: number[] = [];\n\
    \  let prime_index24: number[] = [];\n  let fib_index25: number[] = [];\n  let\
    \ prime_index25: number[] = [];\n  let fib_index26: number[] = [];\n  let prime_index26:\
    \ number[] = [];\n  let fib_index27: number[] = [];\n  let prime_index27: number[]\
    \ = [];\n  let fib_index28: number[] = [];\n  let prime_index28: number[] = [];\n\
    \  let fib_index29\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp83x2zvru.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let fib_index: number[] = [];\n  let fib_index2: number[] = [];\n  let fib_index3:\
    \ number[] = [];\n  let fib_index4: number[] = [];\n  let fib_index5: number[]\
    \ = [];\n  let fib_index6: number[] = [];\n  let fib_index7: number[] = [];\n\
    \  let fib_index8: number[] = [];\n  let fib_index9: number[] = [];\n  let fib_index10:\
    \ number[] = [];\n  let fib_index11: number[] = [];\n  let fib_index12: number[]\
    \ = [];\n  let fib_index13: number[] = [];\n  let fib_index14: number[] = [];\n\
    \  let fib_index15: number[] = [];\n  let fib_index16: number[] = [];\n  let fib_index17:\
    \ number[] = [];\n  let fib_index18: number[] = [];\n  let fib_index19: number[]\
    \ = [];\n  let fib_index20: number[] = [];\n  let fib_index21: number[] = [];\n\
    \  let fib_index22: number[] = [];\n  let fib_index23: number[] = [];\n  let fib_index24:\
    \ number[] = [];\n  let fib_index25: number[] = [];\n  let fib_index26: number[]\
    \ = [];\n  let fib_index27: number[] = [];\n  let fib_index28: number[] = [];\n\
    \  let fib_index29: number[] = [];\n  let fib_index30: number[] = [];\n  let fib_index31:\
    \ number[] = [];\n  let fib_index32: number[] = [];\n  let fib_index33: number[]\
    \ = [];\n  let fib_index34: number[] = [];\n  let fib_index35: number[] = [];\n\
    \  let fib_index36: number[] = [];\n  let fib_index37: number[] = [];\n  let fib_index38:\
    \ number[] = [];\n  let fib_index39: number[] = [];\n  let fib_index40: number[]\
    \ = [];\n  let fib_index41: number[] = [];\n  let fib_index42: number[] = [];\n\
    \  let fib_index43: number[] = [];\n  let fib_index44: number[] = [];\n  let fib_index45:\
    \ number[] = [];\n  let fib_index46: number[] = [];\n  let fib_index47: number[]\
    \ = [];\n  let fib_index48: number[] = [];\n  let fib_index49: number[] = [];\n\
    \  let fib_index50: number[] = [];\n  let fib_index51: number[] = [];\n  let fib_index52:\
    \ number[] = [];\n  let fib_index53: number[] = [];\n  let fib_index54: number[]\
    \ = [];\n  let fib_index55: number[] = [];\n  let fib_index56: number[] = [];\n\
    \  let fib_index57: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpupbqdh4t.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let fib_index: number[] = [];\n  let fib_index2: number[] = [];\n  let fib_index3:\
    \ number[] = [];\n  let fib_index4: number[] = [];\n  let fib_index5: number[]\
    \ = [];\n  let fib_index6: number[] = [];\n  let fib_index7: number[] = [];\n\
    \  let fib_index8: number[] = [];\n  let fib_index9: number[] = [];\n  let fib_index10:\
    \ number[] = [];\n  let fib_index11: number[] = [];\n  let fib_index12: number[]\
    \ = [];\n  let fib_index13: number[] = [];\n  let fib_index14: number[] = [];\n\
    \  let fib_index15: number[] = [];\n  let fib_index16: number[] = [];\n  let fib_index17:\
    \ number[] = [];\n  let fib_index18: number[] = [];\n  let fib_index19: number[]\
    \ = [];\n  let fib_index20: number[] = [];\n  let fib_index21: number[] = [];\n\
    \  let fib_index22: number[] = [];\n  let fib_index23: number[] = [];\n  let fib_index24:\
    \ number[] = [];\n  let fib_index25: number[] = [];\n  let fib_index26: number[]\
    \ = [];\n  let fib_index27: number[] = [];\n  let fib_index28: number[] = [];\n\
    \  let fib_index29: number[] = [];\n  let fib_index30: number[] = [];\n  let fib_index31:\
    \ number[] = [];\n  let fib_index32: number[] = [];\n  let fib_index33: number[]\
    \ = [];\n  let fib_index34: number[] = [];\n  let fib_index35: number[] = [];\n\
    \  let fib_index36: number[] = [];\n  let fib_index37: number[] = [];\n  let fib_index38:\
    \ number[] = [];\n  let fib_index39: number[] = [];\n  let fib_index40: number[]\
    \ = [];\n  let fib_index41: number[] = [];\n  let fib_index42: number[] = [];\n\
    \  let fib_index43: number[] = [];\n  let fib_index44: number[] = [];\n  let fib_index45:\
    \ number[] = [];\n  let fib_index46: number[] = [];\n  let fib_index47: number[]\
    \ = [];\n  let fib_index48: number[] = [];\n  let fib_index49: number[] = [];\n\
    \  let fib_index50: number[] = [];\n  let fib_index51: number[] = [];\n  let fib_index52:\
    \ number[] = [];\n  let fib_index53: number[] = [];\n  let fib_index54: number[]\
    \ = [];\n  let fib_index55: number[] = [];\n  let fib_index56: number[] = [];\n\
    \  let fib_index57: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpupbqdh4t.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 2) + prime_fib(n - 1);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmplz76pf1a.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplz76pf1a.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return\
    \ 3;\n  }\n  if (n % 2 === 0) {\n    return prime_fib(n - 1) + prime_fib(n - 2);\n\
    \  }\n  if (n % 3 === 0) {\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3);\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3)\
    \ + prime_fib(n - 4);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpdvlu7vdi.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdvlu7vdi.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let counter: number = 0;\n\n  while (counter <\
    \ n) {\n    fib.push(counter);\n    counter++;\n  }\n\n  for (let i = 0; i < fib.length;\
    \ i++) {\n    if (fib[i] % 2 === 0) {\n      prime[i] = 0;\n    } else {\n   \
    \   prime[i] = 1;\n    }\n  }\n\n  for (let i = 0; i < fib.length; i++) {\n  \
    \  if (fib[i] % 2 === 0) {\n      prime[i] = 0;\n    } else {\n      prime[i]\
    \ = 1;\n    }\n  }\n\n  for (let i = 0; i < fib.length; i++) {\n    if (fib[i]\
    \ % 2 === 0) {\n      prime[i] = 0;\n    } else {\n      prime[i] = 1;\n    }\n\
    \  }\n\n  for (let i = 0; i < fib.length; i++) {\n    if (fib[i] % 2 === 0) {\n\
    \      prime[i] = 0;\n    } else {\n      prime[i] = 1;\n    }\n  }\n\n  for (let\
    \ i = 0; i < fib.length; i++) {\n    if (fib[i] % 2 === 0) {\n      prime[i] =\
    \ 0;\n    } else {\n      prime[i] = 1;\n    }\n  }\n\n  for (let i = 0; i < fib.length;\
    \ i++) {\n    if (fib[i] % 2 === 0) {\n      prime[i] = 0;\n    } else {\n   \
    \   prime[i] = 1;\n    }\n  }\n\n  for (let i = 0; i < fib.length; i++) {\n  \
    \  if (fib[i] % 2 === 0) {\n      prime[i] = 0;\n    } else {\n      prime[i]\
    \ = 1;\n    }\n  }\n\n  for (let i = 0; i < fib.length; i++) {\n    if (fib[i]\
    \ % 2 === 0) {\n      prime[i] = 0;\n    } else {\n      prime[i] = 1;\n    }\n\
    \  }\n\n  for (let i = 0; i < fib.length; i++) {\n    if (fib[i] % 2 === 0) {\n\
    \      prime[i] = 0;\n    } else {\n      prime[i] = 1;\n    }\n  }\n\n  for (let\
    \ i = 0; i < fib.length; i++) {\n    if (fib[i] % 2 === 0) {\n      prime[i] =\
    \ 0;\n    } else {\n      prime[i] = 1;\n    }\n  }\n\n  for (let i = 0; i < fib.length;\
    \ i++) {\n    if (fib[i] % 2 === 0) {\n      prime[i] = 0;\n    } else {\n   \
    \   prime[i] = 1;\n    }\n  }\n\n  for (let i = 0; i < fib.length; i++) {\n  \
    \  if (fib[i] % 2 === 0) {\n      prime[i] = 0;\n    } else {\n      prime[i]\
    \ = 1;\n    }\n  }\n\n  for (let i = 0; i < fib.length; i++) {\n    if (fib[i]\
    \ % 2 === 0) {\n      prime[i] = 0;\n    } else {\n      prime[i] = 1;\n    }\n\
    \  }\n\n  for (let i = 0; i < fib.length; i++) {\n    if (fib[i] % 2 === 0) {\n\
    \      prime[i] = 0;\n    } else {\n      prime[i] = 1;\n    }\n  }\n\n  for (let\
    \ i = 0; i < fib.length; i++) {\n    if (fib[i] % 2 === 0) {\n      prime[i] =\
    \ 0;\n    } else {\n      prime[i] = 1;\n    }\n  }\n\n  for (let i = 0; i < fib.length;\
    \ i++) {\n    if (fib[i] % 2 === 0) {\n      prime[i] = 0;\n    } else {\n   \
    \   prime[i] = 1;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqckg1vhe.ts(156,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014994
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 === 0) return 1;\n  if (n % 3 === 0) return\
    \ 2;\n  if (n % 5 === 0) return 3;\n  if (n % 7 === 0) return 5;\n  if (n % 11\
    \ === 0) return 7;\n  if (n % 13 === 0) return 11;\n  if (n % 17 === 0) return\
    \ 13;\n  if (n % 19 === 0) return 17;\n  if (n % 23=== 0) return 19;\n  if (n\
    \ % 29 === 0) return 23;\n  if (n % 31 === 0) return 29;\n  if (n % 37 === 0)\
    \ return 37;\n  if (n % 43 === 0) return 43;\n  if (n % 51 === 0) return 51;\n\
    \  if (n % 59 === 0) return 59;\n  if (n % 61 === 0) return 61;\n  if (n % 67\
    \ === 0) return 67;\n  if (n % 73 === 0) return 73;\n  if (n % 83 === 0) return\
    \ 83;\n  if (n % 91 === 0) return 91;\n  if (n % 103 === 0) return 103;\n  if\
    \ (n % 111 === 0) return 111;\n  if (n % 127 === 0) return 127;\n  if (n % 143\
    \ === 0) return 143;\n  if (n % 151 === 0) return 151;\n  if (n % 163 === 0) return\
    \ 163;\n  if (n % 179 ===0) return 179;\n  if (n % 185 === 0) return 185;\n  if\
    \ (n % 191 === 0) return 191;\n  if (n % 199 === 0) return 199;\n  if (n % 231\
    \ === 0) return 231;\n  if (n % 247 === 0) return 247;\n  if (n % 263 === 0) return\
    \ 263;\n  if (n % 271 === 0) return 271;\n  if (n % 279 === 0) return 279;\n \
    \ if (n % 283 === 0) return 283;\n  if (n % 291 === 0) return 291;\n  if (n %\
    \ 303 === 0) return 303;\n  if (n % 309 ===0) return 309;\n  if (n % 311 ===0)\
    \ return 311;\n  if (n % 313 ===0) return 313;\n  if (n % 315 ===0) return 315;\n\
    \  if (n % 317 ===0) return 317;\n  if (n % 319 ===0) return 319;\n  if (n % 323\
    \ === 0) return 323;\n  if (n % 329 ===0) return 329;\n  if (n % 331 ===0) return\
    \ 331;\n  if (n % 337 ===0) return 337;\n  if (n % 343 ===0) return 343;\n  if\
    \ (n % 349 ===0) return 349;\n  if (n % 353 ===0) return 353;\n  if (n % 359 ===0)\
    \ return 359;\n  if (n % 363 \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw2ox293w.ts(58,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpw2ox293w.ts(76,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014993
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n < 4) return prime_fib(n - 1) + prime_fib(n - 2);\n  if (n < 9) return prime_fib(n\
    \ - 3) + prime_fib(n - 5) + prime_fib(n - 7);\n  if (n < 18) return prime_fib(n\
    \ - 7) + prime_fib(n - 11) + prime_fib(n - 19);\n  return prime_fib(n - 15) +\
    \ prime_fib(n - 23);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp51yod4b3.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp51yod4b3.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014994
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpqgppkm0d.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqgppkm0d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let fib_index: number[] = [];\n  let prime_index:\
    \ number[] = [];\n  let fib_index2: number[] = [];\n  let prime_index2: number[]\
    \ = [];\n  let fib_index3: number[] = [];\n  let prime_index3: number[] = [];\n\
    \  let fib_index4: number[] = [];\n  let prime_index4: number[] = [];\n  let fib_index5:\
    \ number[] = [];\n  let prime_index5: number[] = [];\n  let fib_index6: number[]\
    \ = [];\n  let prime_index6: number[] = [];\n  let fib_index7: number[] = [];\n\
    \  let prime_index7: number[] = [];\n  let fib_index8: number[] = [];\n  let prime_index8:\
    \ number[] = [];\n  let fib_index9: number[] = [];\n  let prime_index9: number[]\
    \ = [];\n  let fib_index10: number[] = [];\n  let prime_index10: number[] = [];\n\
    \  let fib_index11: number[] = [];\n  let prime_index11: number[] = [];\n  let\
    \ fib_index12: number[] = [];\n  let prime_index12: number[] = [];\n  let fib_index13:\
    \ number[] = [];\n  let prime_index13: number[] = [];\n  let fib_index14: number[]\
    \ = [];\n  let prime_index14: number[] = [];\n  let fib_index15: number[] = [];\n\
    \  let prime_index15: number[] = [];\n  let fib_index16: number[] = [];\n  let\
    \ prime_index16: number[] = [];\n  let fib_index17: number[] = [];\n  let prime_index17:\
    \ number[] = [];\n  let fib_index18: number[] = [];\n  let prime_index18: number[]\
    \ = [];\n  let fib_index19: number[] = [];\n  let prime_index19: number[] = [];\n\
    \  let fib_index20: number[] = [];\n  let prime_index20: number[] = [];\n  let\
    \ fib_index21: number[] = [];\n  let prime_index21: number[] = [];\n  let fib_index22:\
    \ number[] = [];\n  let prime_index22: number[] = [];\n  let fib_index23: number[]\
    \ = [];\n  let prime_index23: number[] = [];\n  let fib_index24: number[] = [];\n\
    \  let prime_index24: number[] = [];\n  let fib_index25: number[] = [];\n  let\
    \ prime_index25: number[] = [];\n  let fib_index26: number[] = [];\n  let prime_index26:\
    \ number[] = [];\n  let fib_index27: number[] = [];\n  let prime_index27: number[]\
    \ = [];\n  let fib_index28: number[] = [];\n  let prime_index28: number[] = [];\n\
    \  let fib_index29\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp83x2zvru.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 === 0) return 1;\n  if (n % 3 === 0) return\
    \ 5;\n  if (n % 5 === 0) return 7;\n  if (n % 7 === 0) return 9;\n\n  // Divisors\
    \ of 5 are only needed for even numbers.\n  if (n % 2 === 1) return 2;\n  if (n\
    \ % 4 === 0) return 3;\n  if (n % 6 === 0) return 5;\n\n  // Divisors of 7 are\
    \ only needed for odd numbers.\n  if (n % 2 === 1) return 3;\n  if (n % 4 ===\
    \ 0) return 6;\n  if (n % 6 === 0) return 8;\n\n  // Divisors of 9 are only needed\
    \ for even numbers.\n  if (n % 2 === 1) return 4;\n  if (n % 4 === 0) return 8;\n\
    \  if (n % 6 === 0) return 12;\n\n  // Divisors of 15 are only needed for odd\
    \ numbers.\n  if (n % 2 === 1) return 6;\n  if (n % 4 === 0) return 12;\n  if\
    \ (n % 6 === 0) return 24;\n\n  // Divisors of 21 are only needed for even numbers.\n\
    \  if (n % 2 === 1) return 8;\n  if (n % 4 === 0) return 24;\n  if (n % 6 ===\
    \ 0) return 48;\n\n  // Divisors of 28 are only needed for odd numbers.\n  if\
    \ (n % 2 === 1) return 12;\n  if (n % 4 === 0) return 48;\n  if (n % 6 === 0)\
    \ return 72;\n\n  // Divisors of 30 are only needed for even numbers.\n  if (n\
    \ % 2 === 1) return 24;\n  if (n % 4 === 0) return 72;\n  if (n % 6 === 0) return\
    \ 144;\n\n  // Divisors of 31 are only needed for odd numbers.\n  if (n % 2 ===\
    \ 1) return 48;\n  if (n % 4 === 0) return 144;\n  if (n % 6 === 0) return 168;\n\
    \n  // Divisors of 32 are only needed for even numbers.\n  if (n % 2 === 1) return\
    \ 72;\n  if (n % 4 === 0) return 144;\n  if (n % 6 === 0) return 168;\n\n  //\
    \ Divisors of 33 are only needed for odd numbers.\n  if (n % 2 === 1) return 144;\n\
    \  if (n % 4 === 0) return 168;\n  if (n % 6 === 0) return 272;\n\n  // Divisors\
    \ of 34 are only needed for even numbers.\n  if (n % 2 === 1) return 168;\n  if\
    \ (n % 4 === 0) return 272;\n  if (n % 6 === 0) return 560;\n\n  // Divisors of\
    \ 35 are only needed for odd numbers.\n  if (n % 2 === 1) return 272;\n  if (n\
    \ % 4 === 0) return 560;\n  if (n % 6 === 0) return 768;\n\n  // Divisors of 36\
    \ are only needed for even numbers.\n  if (n % 2 === 1) return 560;\n  if (n %\
    \ 4 === \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvn3lq4cb.ts(73,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmpvn3lq4cb.ts(91,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014994
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let counter: number = 0;\n  while (counter < n) {\n    fib.push(counter);\n\
    \    counter++;\n  }\n  let prime: number[] = [];\n  for (let i = 0; i < fib.length;\
    \ i++) {\n    let temp: number = fib[i];\n    for (let j = i + 1; j < fib.length;\
    \ j++) {\n      if (fib[j] % temp === 0) {\n        temp = fib[j];\n      }\n\
    \    }\n    if (temp === 1) {\n      prime.push(temp);\n    }\n  }\n  return prime[prime.indexOf(Math.max(...prime))];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n2\n    at test (/tmp/tmpo8303a0k.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo8303a0k.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014995
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 == 0) return 3;\n  if (n % 3 == 0) return 4;\n\
    \  if (n % 5 == 0) return 5;\n  if (n % 7 == 0) return 6;\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsv688smj.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsv688smj.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let fib_index: number[] = [];\n  let prime_index:\
    \ number[] = [];\n  let fib_index2: number[] = [];\n  let prime_index2: number[]\
    \ = [];\n  let fib_index3: number[] = [];\n  let prime_index3: number[] = [];\n\
    \  let fib_index4: number[] = [];\n  let prime_index4: number[] = [];\n  let fib_index5:\
    \ number[] = [];\n  let prime_index5: number[] = [];\n  let fib_index6: number[]\
    \ = [];\n  let prime_index6: number[] = [];\n  let fib_index7: number[] = [];\n\
    \  let prime_index7: number[] = [];\n  let fib_index8: number[] = [];\n  let prime_index8:\
    \ number[] = [];\n  let fib_index9: number[] = [];\n  let prime_index9: number[]\
    \ = [];\n  let fib_index10: number[] = [];\n  let prime_index10: number[] = [];\n\
    \  let fib_index11: number[] = [];\n  let prime_index11: number[] = [];\n  let\
    \ fib_index12: number[] = [];\n  let prime_index12: number[] = [];\n  let fib_index13:\
    \ number[] = [];\n  let prime_index13: number[] = [];\n  let fib_index14: number[]\
    \ = [];\n  let prime_index14: number[] = [];\n  let fib_index15: number[] = [];\n\
    \  let prime_index15: number[] = [];\n  let fib_index16: number[] = [];\n  let\
    \ prime_index16: number[] = [];\n  let fib_index17: number[] = [];\n  let prime_index17:\
    \ number[] = [];\n  let fib_index18: number[] = [];\n  let prime_index18: number[]\
    \ = [];\n  let fib_index19: number[] = [];\n  let prime_index19: number[] = [];\n\
    \  let fib_index20: number[] = [];\n  let prime_index20: number[] = [];\n  let\
    \ fib_index21: number[] = [];\n  let prime_index21: number[] = [];\n  let fib_index22:\
    \ number[] = [];\n  let prime_index22: number[] = [];\n  let fib_index23: number[]\
    \ = [];\n  let prime_index23: number[] = [];\n  let fib_index24: number[] = [];\n\
    \  let prime_index24: number[] = [];\n  let fib_index25: number[] = [];\n  let\
    \ prime_index25: number[] = [];\n  let fib_index26: number[] = [];\n  let prime_index26:\
    \ number[] = [];\n  let fib_index27: number[] = [];\n  let prime_index27: number[]\
    \ = [];\n  let fib_index28: number[] = [];\n  let prime_index28: number[] = [];\n\
    \  let fib_index29\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp83x2zvru.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    let fib: number[] = [];\n\
    \    for (let i = 0; i <= n; i++) {\n        fib.push(i);\n    }\n    let prime:\
    \ number[] = [];\n    for (let i = 0; i <= n; i++) {\n        if (fib[i] % 2 ===\
    \ 0) {\n            prime = fib.slice();\n            fib.splice(i, 1);\n    \
    \        break;\n        }\n    }\n    return prime[prime.length - 1];\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmplcz93ntz.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplcz93ntz.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014995
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let counter: number = 0;\n  let prime_counter:\
    \ number = 0;\n  let prime_fib: number = 0;\n  let prime_fib_counter: number =\
    \ 0;\n  let prime_fib_counter2: number = 0;\n  let prime_fib_counter3: number\
    \ = 0;\n  let prime_fib_counter4: number = 0;\n  let prime_fib_counter5: number\
    \ = 0;\n  let prime_fib_counter6: number = 0;\n  let prime_fib_counter7: number\
    \ = 0;\n  let prime_fib_counter8: number = 0;\n  let prime_fib_counter9: number\
    \ = 0;\n  let prime_fib_counter10: number = 0;\n  let prime_fib_counter11: number\
    \ = 0;\n  let prime_fib_counter12: number = 0;\n  let prime_fib_counter13: number\
    \ = 0;\n  let prime_fib_counter14: number = 0;\n  let prime_fib_counter15: number\
    \ = 0;\n  let prime_fib_counter16: number = 0;\n  let prime_fib_counter17: number\
    \ = 0;\n  let prime_fib_counter18: number = 0;\n  let prime_fib_counter19: number\
    \ = 0;\n  let prime_fib_counter20: number = 0;\n  let prime_fib_counter21: number\
    \ = 0;\n  let prime_fib_counter22: number = 0;\n  let prime_fib_counter23: number\
    \ = 0;\n  let prime_fib_counter24: number = 0;\n  let prime_fib_counter25: number\
    \ = 0;\n  let prime_fib_counter26: number = 0;\n  let prime_fib_counter27: number\
    \ = 0;\n  let prime_fib_counter28: number = 0;\n  let prime_fib_counter29: number\
    \ = 0;\n  let prime_fib_counter30: number = 0;\n  let prime_fib_counter31: number\
    \ = 0;\n  let prime_fib_counter32: number = 0;\n  let prime_fib_counter33: number\
    \ = 0;\n  let prime_fib_counter34: number = 0;\n  let prime_fib_counter35: number\
    \ = 0;\n  let prime_fib_counter36: number = 0;\n  let prime_fib_counter37: number\
    \ = 0;\n  let prime_fib_counter38: number = 0;\n  let prime_fib_counter39: number\
    \ = 0;\n  let prime_fib_counter40: number = 0;\n  let prime_fib_counter41: number\
    \ = 0;\n  let prime_fib_counter42: number = 0;\n  let prime_fib_counter43: number\
    \ = 0;\n  let prime_fib_counter44: \ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr0yzvkug.ts(52,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpr0yzvkug.ts(70,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014995
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let counter: number = 0;\n  while (counter < n)\
    \ {\n    fib.push(counter);\n    counter++;\n  }\n  for (let i = 0; i < fib.length;\
    \ i++) {\n    let temp: number = fib[i];\n    for (let j = i + 1; j < fib.length;\
    \ j++) {\n      if (fib[j] > temp) {\n        temp = fib[j];\n      }\n    }\n\
    \    prime.push(temp);\n  }\n  return prime[prime.length - 1];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpbj3768ry.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbj3768ry.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014995
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let prime_flag: boolean = false;\n  let fib_index:\
    \ number = 0;\n  let fib_index2: number = 0;\n  let fib_index3: number = 0;\n\
    \  let fib_index4: number = 0;\n  let fib_index5: number = 0;\n  let fib_index6:\
    \ number = 0;\n  let fib_index7: number = 0;\n  let fib_index8: number = 0;\n\
    \  let fib_index9: number = 0;\n  let fib_index10: number = 0;\n  let fib_index11:\
    \ number = 0;\n  let fib_index12: number = 0;\n  let fib_index13: number = 0;\n\
    \  let fib_index14: number = 0;\n  let fib_index15: number = 0;\n  let fib_index16:\
    \ number = 0;\n  let fib_index17: number = 0;\n  let fib_index18: number = 0;\n\
    \  let fib_index19: number = 0;\n  let fib_index20: number = 0;\n  let fib_index21:\
    \ number = 0;\n  let fib_index22: number = 0;\n  let fib_index23: number = 0;\n\
    \  let fib_index24: number = 0;\n  let fib_index25: number = 0;\n  let fib_index26:\
    \ number = 0;\n  let fib_index27: number = 0;\n  let fib_index28: number = 0;\n\
    \  let fib_index29: number = 0;\n  let fib_index30: number = 0;\n  let fib_index31:\
    \ number = 0;\n  let fib_index32: number = 0;\n  let fib_index33: number = 0;\n\
    \  let fib_index34: number = 0;\n  let fib_index35: number = 0;\n  let fib_index36:\
    \ number = 0;\n  let fib_index37: number = 0;\n  let fib_index38: number = 0;\n\
    \  let fib_index39: number = 0;\n  let fib_index40: number = 0;\n  let fib_index41:\
    \ number = 0;\n  let fib_index42: number = 0;\n  let fib_index43: number = 0;\n\
    \  let fib_index44: number = 0;\n  let fib_index45: number = 0;\n  let fib_index46:\
    \ number = 0;\n  let fib_index47: number = 0;\n  let fib_index48: number = 0;\n\
    \  let fib_index49: number = 0;\n  let fib_index50: number = 0;\n  let fib_index51:\
    \ number = 0;\n  let fib_index52: number = 0;\n  let fib_index53: number = 0;\n\
    \  let fib_index54: number = 0;\n  let fib_index55: number = 0;\n  let fib_index56:\
    \ number = 0;\n  let fib_index57: number = 0;\n  let fib_index58: number = 0;\n\
    \  let fib_index59: number = 0;\n  let fib_index60: number = 0;\n  let fib_index61:\
    \ number = 0;\n  let fib_index62: number = 0;\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp33fp1cpx.ts(87,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014995
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n === 2) return 2;\n  if (n % 2 == 0) return 3;\n  if (n % 3 == 0) return 4;\n\
    \  if (n % 5 == 0) return 5;\n  if (n % 7 == 0) return 6;\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsv688smj.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsv688smj.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n    if (n < 2) {\n        return\
    \ 1;\n    }\n    if (n === 2) {\n        return 2;\n    }\n    if (n % 2 === 0)\
    \ {\n        return prime_fib(n - 1) + prime_fib(n - 2);\n    }\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp0mp2ys5p.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0mp2ys5p.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014991
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let isPrime: boolean;\n  let isFibonacci: boolean;\n\
    \  let isPrimeFibonacci: boolean;\n  let isPrimeFibonacciPrime: boolean;\n  let\
    \ isPrimeFibonacciPrimeFibonacci: boolean;\n  let isPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacci: boolean;\n  let\
    \ isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime: boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjan1sxri.ts(40,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014995
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpqgppkm0d.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqgppkm0d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpqgppkm0d.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqgppkm0d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let counter: number = 0;\n  let prime_counter:\
    \ number = 0;\n  let prime_counter2: number = 0;\n  let prime_counter3: number\
    \ = 0;\n  let prime_counter4: number = 0;\n  let prime_counter5: number = 0;\n\
    \  let prime_counter6: number = 0;\n  let prime_counter7: number = 0;\n  let prime_counter8:\
    \ number = 0;\n  let prime_counter9: number = 0;\n  let prime_counter10: number\
    \ = 0;\n  let prime_counter11: number = 0;\n  let prime_counter12: number = 0;\n\
    \  let prime_counter13: number = 0;\n  let prime_counter14: number = 0;\n  let\
    \ prime_counter15: number = 0;\n  let prime_counter16: number = 0;\n  let prime_counter17:\
    \ number = 0;\n  let prime_counter18: number = 0;\n  let prime_counter19: number\
    \ = 0;\n  let prime_counter20: number = 0;\n  let prime_counter21: number = 0;\n\
    \  let prime_counter22: number = 0;\n  let prime_counter23: number = 0;\n  let\
    \ prime_counter24: number = 0;\n  let prime_counter25: number = 0;\n  let prime_counter26:\
    \ number = 0;\n  let prime_counter27: number = 0;\n  let prime_counter28: number\
    \ = 0;\n  let prime_counter29: number = 0;\n  let prime_counter30: number = 0;\n\
    \  let prime_counter31: number = 0;\n  let prime_counter32: number = 0;\n  let\
    \ prime_counter33: number = 0;\n  let prime_counter34: number = 0;\n  let prime_counter35:\
    \ number = 0;\n  let prime_counter36: number = 0;\n  let prime_counter37: number\
    \ = 0;\n  let prime_counter38: number = 0;\n  let prime_counter39: number = 0;\n\
    \  let prime_counter40: number = 0;\n  let prime_counter41: number = 0;\n  let\
    \ prime_counter42: number = 0;\n  let prime_counter43: number = 0;\n  let prime_counter44:\
    \ number = 0;\n  let prime_counter45: number = 0;\n  let prime_counter46: number\
    \ = 0;\n  let prime_counter47: number = 0;\n  let prime_counter48: number = 0;\n\
    \  let prime_counter49: number = 0;\n  let prime_counter50: number = 0;\n  let\
    \ prime_counter51: number = 0;\n  let prime_counter52: number = 0;\n  let prime_counter53:\
    \ number = 0;\n  let prime_counter54: number = 0;\n  let prime_counter55: number\
    \ = 0;\n  let prime\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg35u0g9x.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  if (n % 2 === 1) {\n    return\
    \ prime_fib(n - 1) + 1;\n  }\n  return prime_fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpqgppkm0d.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqgppkm0d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n < 4) return n;\n  if (n % 2 == 0) return prime_fib(n - 1) + prime_fib(n -\
    \ 2);\n  if (n % 3 == 0) return prime_fib(n - 3) + prime_fib(n - 4);\n  return\
    \ prime_fib(n - 5) + prime_fib(n - 6);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpcypscobp.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcypscobp.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return\
    \ 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp79rfvh_6.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp79rfvh_6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let fib_index: number[] = [];\n  let fib_index2: number[] = [];\n  let fib_index3:\
    \ number[] = [];\n  let fib_index4: number[] = [];\n  let fib_index5: number[]\
    \ = [];\n  let fib_index6: number[] = [];\n  let fib_index7: number[] = [];\n\
    \  let fib_index8: number[] = [];\n  let fib_index9: number[] = [];\n  let fib_index10:\
    \ number[] = [];\n  let fib_index11: number[] = [];\n  let fib_index12: number[]\
    \ = [];\n  let fib_index13: number[] = [];\n  let fib_index14: number[] = [];\n\
    \  let fib_index15: number[] = [];\n  let fib_index16: number[] = [];\n  let fib_index17:\
    \ number[] = [];\n  let fib_index18: number[] = [];\n  let fib_index19: number[]\
    \ = [];\n  let fib_index20: number[] = [];\n  let fib_index21: number[] = [];\n\
    \  let fib_index22: number[] = [];\n  let fib_index23: number[] = [];\n  let fib_index24:\
    \ number[] = [];\n  let fib_index25: number[] = [];\n  let fib_index26: number[]\
    \ = [];\n  let fib_index27: number[] = [];\n  let fib_index28: number[] = [];\n\
    \  let fib_index29: number[] = [];\n  let fib_index30: number[] = [];\n  let fib_index31:\
    \ number[] = [];\n  let fib_index32: number[] = [];\n  let fib_index33: number[]\
    \ = [];\n  let fib_index34: number[] = [];\n  let fib_index35: number[] = [];\n\
    \  let fib_index36: number[] = [];\n  let fib_index37: number[] = [];\n  let fib_index38:\
    \ number[] = [];\n  let fib_index39: number[] = [];\n  let fib_index40: number[]\
    \ = [];\n  let fib_index41: number[] = [];\n  let fib_index42: number[] = [];\n\
    \  let fib_index43: number[] = [];\n  let fib_index44: number[] = [];\n  let fib_index45:\
    \ number[] = [];\n  let fib_index46: number[] = [];\n  let fib_index47: number[]\
    \ = [];\n  let fib_index48: number[] = [];\n  let fib_index49: number[] = [];\n\
    \  let fib_index50: number[] = [];\n  let fib_index51: number[] = [];\n  let fib_index52:\
    \ number[] = [];\n  let fib_index53: number[] = [];\n  let fib_index54: number[]\
    \ = [];\n  let fib_index55: number[] = [];\n  let fib_index56: number[] = [];\n\
    \  let fib_index57: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpupbqdh4t.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let isPrime: boolean = false;\n  let isFibonacci:\
    \ boolean = false;\n  let isPrimeFibonacci: boolean = false;\n  let isPrimeFibonacciPrime:\
    \ boolean = false;\n  let isPrimeFibonacciPrimeFibonacci: boolean = false;\n \
    \ let isPrimeFibonacciPrimeFibonacciPrime: boolean = false;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean = false;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime: boolean\
    \ = false;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean = false;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean = false;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean = false;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean = false;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean = false;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean = false;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean = false;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean = false;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean = false;\n  let isPrimeFibonacciPri\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp410ccqbz.ts(41,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014995
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let isPrime: boolean[] = [];\n  let isFibonacci:\
    \ boolean[] = [];\n  let isPrimeFibonacci: boolean[] = [];\n  let isPrimeFibonacciPrime:\
    \ boolean[] = [];\n  let isPrimeFibonacciPrimeFibonacci: boolean[] = [];\n  let\
    \ isPrimeFibonacciPrimeFibonacciPrime: boolean[] = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean[] = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime: boolean[]\
    \ = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci: boolean[]\
    \ = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean[] = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean[] = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean[] = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean[] = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean[] = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean[] = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean[] = [];\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0hodqf69.ts(40,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n < 4) return prime_fib(n - 1) + prime_fib(n - 2);\n  if (n % 2 == 0) return\
    \ prime_fib(n / 2);\n  if (n % 3 == 0) return prime_fib(n / 3) + prime_fib(n /\
    \ 3);\n  return prime_fib(n / 3) + prime_fib(n / 5) + prime_fib(n / 7);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpttkgwi57.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpttkgwi57.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014995
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  if (n < 2) return 1;\n  if\
    \ (n < 4) return n;\n  if (n % 2 == 0) return prime_fib(n - 1) + prime_fib(n -\
    \ 2);\n  if (n % 3 == 0) return prime_fib(n - 3) + prime_fib(n - 4);\n  return\
    \ prime_fib(n - 5) + prime_fib(n - 6);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prime_fib;\n\
    \  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n\
    \  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
    \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
    \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
    \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpcypscobp.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcypscobp.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014986
- exit_code: 1
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let a = 0;\n  let b = 1;\n  for (let i = 1; i <= n; i++) {\n    fib.push(a);\n\
    \    a = b;\n    b = a + b;\n  }\n  return fib[fib.length - 1];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
    \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n \
    \ assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp4unlk8tc.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4unlk8tc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014995
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let isPrime: boolean;\n  let isFibonacci: boolean;\n\
    \  let isPrimeFibonacci: boolean;\n  let isPrimeFibonacciPrime: boolean;\n  let\
    \ isPrimeFibonacciPrimeFibonacci: boolean;\n  let isPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacci: boolean;\n  let\
    \ isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime: boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ boolean;\n  let isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps3qtx82y.ts(38,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let fib_index: number[] = [];\n  let fib_index2: number[] = [];\n  let fib_index3:\
    \ number[] = [];\n  let fib_index4: number[] = [];\n  let fib_index5: number[]\
    \ = [];\n  let fib_index6: number[] = [];\n  let fib_index7: number[] = [];\n\
    \  let fib_index8: number[] = [];\n  let fib_index9: number[] = [];\n  let fib_index10:\
    \ number[] = [];\n  let fib_index11: number[] = [];\n  let fib_index12: number[]\
    \ = [];\n  let fib_index13: number[] = [];\n  let fib_index14: number[] = [];\n\
    \  let fib_index15: number[] = [];\n  let fib_index16: number[] = [];\n  let fib_index17:\
    \ number[] = [];\n  let fib_index18: number[] = [];\n  let fib_index19: number[]\
    \ = [];\n  let fib_index20: number[] = [];\n  let fib_index21: number[] = [];\n\
    \  let fib_index22: number[] = [];\n  let fib_index23: number[] = [];\n  let fib_index24:\
    \ number[] = [];\n  let fib_index25: number[] = [];\n  let fib_index26: number[]\
    \ = [];\n  let fib_index27: number[] = [];\n  let fib_index28: number[] = [];\n\
    \  let fib_index29: number[] = [];\n  let fib_index30: number[] = [];\n  let fib_index31:\
    \ number[] = [];\n  let fib_index32: number[] = [];\n  let fib_index33: number[]\
    \ = [];\n  let fib_index34: number[] = [];\n  let fib_index35: number[] = [];\n\
    \  let fib_index36: number[] = [];\n  let fib_index37: number[] = [];\n  let fib_index38:\
    \ number[] = [];\n  let fib_index39: number[] = [];\n  let fib_index40: number[]\
    \ = [];\n  let fib_index41: number[] = [];\n  let fib_index42: number[] = [];\n\
    \  let fib_index43: number[] = [];\n  let fib_index44: number[] = [];\n  let fib_index45:\
    \ number[] = [];\n  let fib_index46: number[] = [];\n  let fib_index47: number[]\
    \ = [];\n  let fib_index48: number[] = [];\n  let fib_index49: number[] = [];\n\
    \  let fib_index50: number[] = [];\n  let fib_index51: number[] = [];\n  let fib_index52:\
    \ number[] = [];\n  let fib_index53: number[] = [];\n  let fib_index54: number[]\
    \ = [];\n  let fib_index55: number[] = [];\n  let fib_index56: number[] = [];\n\
    \  let fib_index57: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpupbqdh4t.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014986
- exit_code: 2
  program: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\nfunction prime_fib(n: number): number {\n  let fib: number[] = [];\n\
    \  let prime: number[] = [];\n  let counter: number = 0;\n  let prime_counter:\
    \ number = 0;\n  let prime_counter2: number = 0;\n  let prime_counter3: number\
    \ = 0;\n  let prime_counter4: number = 0;\n  let prime_counter5: number = 0;\n\
    \  let prime_counter6: number = 0;\n  let prime_counter7: number = 0;\n  let prime_counter8:\
    \ number = 0;\n  let prime_counter9: number = 0;\n  let prime_counter10: number\
    \ = 0;\n  let prime_counter11: number = 0;\n  let prime_counter12: number = 0;\n\
    \  let prime_counter13: number = 0;\n  let prime_counter14: number = 0;\n  let\
    \ prime_counter15: number = 0;\n  let prime_counter16: number = 0;\n  let prime_counter17:\
    \ number = 0;\n  let prime_counter18: number = 0;\n  let prime_counter19: number\
    \ = 0;\n  let prime_counter20: number = 0;\n  let prime_counter21: number = 0;\n\
    \  let prime_counter22: number = 0;\n  let prime_counter23: number = 0;\n  let\
    \ prime_counter24: number = 0;\n  let prime_counter25: number = 0;\n  let prime_counter26:\
    \ number = 0;\n  let prime_counter27: number = 0;\n  let prime_counter28: number\
    \ = 0;\n  let prime_counter29: number = 0;\n  let prime_counter30: number = 0;\n\
    \  let prime_counter31: number = 0;\n  let prime_counter32: number = 0;\n  let\
    \ prime_counter33: number = 0;\n  let prime_counter34: number = 0;\n  let prime_counter35:\
    \ number = 0;\n  let prime_counter36: number = 0;\n  let prime_counter37: number\
    \ = 0;\n  let prime_counter38: number = 0;\n  let prime_counter39: number = 0;\n\
    \  let prime_counter40: number = 0;\n  let prime_counter41: number = 0;\n  let\
    \ prime_counter42: number = 0;\n  let prime_counter43: number = 0;\n  let prime_counter44:\
    \ number = 0;\n  let prime_counter45: number = 0;\n  let prime_counter46: number\
    \ = 0;\n  let prime_counter47: number = 0;\n  let prime_counter48: number = 0;\n\
    \  let prime_counter49: number = 0;\n  let prime_counter50: number = 0;\n  let\
    \ prime_counter51: number = 0;\n  let prime_counter52: number = 0;\n  let prime_counter53:\
    \ number = 0;\n  let prime_counter54: number = 0;\n  let prime_counter55: number\
    \ = 0;\n  let prime\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
    \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
    \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n\
    \  assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
    \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg35u0g9x.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014988
