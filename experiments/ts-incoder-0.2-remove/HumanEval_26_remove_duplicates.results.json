{
  "language": "ts",
  "name": "HumanEval_26_remove_duplicates",
  "results": [
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n    }\n    seen.add(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmptric7yiy.js:20:12)\n    at Object.<anonymous> (/tmp/tmptric7yiy.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    let result: number[] = [];\n    let seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            seen.push(numbers[i]);\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,javascript |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnf2490h6.ts(14,2): error TS1110: Type expected.\n../../../../tmp/tmpnf2490h6.ts(14,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpnf2490h6.ts(15,2): error TS1109: Expression expected.\n../../../../tmp/tmpnf2490h6.ts(15,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpnf2490h6.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmpnf2490h6.ts(16,6): error TS1005: ';' expected.\n../../../../tmp/tmpnf2490h6.ts(16,16): error TS1109: Expression expected.\n../../../../tmp/tmpnf2490h6.ts(18,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) > -1) {\n            continue;\n        }\n        result.push(numbers[i]);\n        seen.push(numbers[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpof4fby52.js:20:12)\n    at Object.<anonymous> (/tmp/tmpof4fby52.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n  const result: number[] = [];\n  const seen: Set<number> = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n    }\n    seen.add(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmptric7yiy.js:20:12)\n    at Object.<anonymous> (/tmp/tmptric7yiy.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach(number => {\n        if (seen.has(number)) {\n            return;\n        }\n        seen.add(number);\n        result.push(number);\n    });\n    return result;\n}\n</code>\n<|/ a tags=typescript,javascript,arrays |>\n<| a dscore=2 |>\n<code>\nvar arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpi88jg_b2.ts(15,2): error TS1110: Type expected.\n../../../../tmp/tmpi88jg_b2.ts(15,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpi88jg_b2.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmpi88jg_b2.ts(16,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpi88jg_b2.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmpi88jg_b2.ts(17,6): error TS1005: ';' expected.\n../../../../tmp/tmpi88jg_b2.ts(17,16): error TS1109: Expression expected.\n../../../../tmp/tmpi88jg_b2.ts(19,1): error TS1109: Expression expected.\n../../../../tmp/tmpi88jg_b2.ts(20,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((number) => {\n        if (seen.indexOf(number) === -1) {\n            seen.push(number);\n            uniqueNumbers.push(number);\n        }\n    });\n    return uniqueNumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpaaxgvoms.js:19:12)\n    at Object.<anonymous> (/tmp/tmpaaxgvoms.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    let seen = {};\n    for (let i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n        if (seen[number]) {\n            continue;\n        }\n        seen[number] = true;\n        result.push(number);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpdj7tr4bq.js:21:12)\n    at Object.<anonymous> (/tmp/tmpdj7tr4bq.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    let result: number[] = [];\n    let seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            seen.push(numbers[i]);\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp6m4xsl8l.js:19:12)\n    at Object.<anonymous> (/tmp/tmp6m4xsl8l.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp5901nkvo.js:20:12)\n    at Object.<anonymous> (/tmp/tmp5901nkvo.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const numberSet = new Set(numbers);\n    numbers.forEach((num) => {\n        if (numberSet.has(num)) {\n            numberSet.delete(num);\n        } else {\n            uniqueNumbers.push(num);\n        }\n    });\n    return uniqueNumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpi8ykecsy.js:20:12)\n    at Object.<anonymous> (/tmp/tmpi8ykecsy.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpuhj24_c5.js:20:12)\n    at Object.<anonymous> (/tmp/tmpuhj24_c5.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const numberSet = new Set<number>();\n\n    for (const num of numbers) {\n        if (numberSet.has(num)) {\n            continue;\n        }\n\n        numberSet.add(num);\n        uniqueNumbers.push(num);\n    }\n\n    return uniqueNumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpmrnmdg4t.js:20:12)\n    at Object.<anonymous> (/tmp/tmpmrnmdg4t.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp5901nkvo.js:20:12)\n    at Object.<anonymous> (/tmp/tmp5901nkvo.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            result.push(numbers[i]);\n            seen.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp0lfa6h7l.js:19:12)\n    at Object.<anonymous> (/tmp/tmp0lfa6h7l.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpytqsq9jj.js:20:12)\n    at Object.<anonymous> (/tmp/tmpytqsq9jj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            result.push(numbers[i]);\n            seen.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp0lfa6h7l.js:19:12)\n    at Object.<anonymous> (/tmp/tmp0lfa6h7l.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            seen.push(numbers[i]);\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,typescript,javascript |>\n<| c |>\nThis doesn't work if you have duplicate numbers in the array.\n<|/ c |>\n<| c |>\nYes, it does. I added a test case to my answer.\n<|/ c |>\n<| c |>\nThis doesn't work if you have duplicate numbers in the array.\n<|/ c |>\n<| c |>\nYes, it does. I added a test case to my answer.\n<|/ c |>\n<| c |>\nThis doesn't work if you have duplicate numbers in the array.\n<|/ c |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_bi3s40j.ts(14,2): error TS1110: Type expected.\n../../../../tmp/tmp_bi3s40j.ts(14,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp_bi3s40j.ts(15,2): error TS1109: Expression expected.\n../../../../tmp/tmp_bi3s40j.ts(15,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp_bi3s40j.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmp_bi3s40j.ts(16,7): error TS1109: Expression expected.\n../../../../tmp/tmp_bi3s40j.ts(17,6): error TS1005: ';' expected.\n../../../../tmp/tmp_bi3s40j.ts(17,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp_bi3s40j.ts(17,62): error TS1002: Unterminated string literal.\n../../../../tmp/tmp_bi3s40j.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmp_bi3s40j.ts(18,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp_bi3s40j.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmp_bi3s40j.ts(19,7): error TS1109: Expression expected.\n../../",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n        if (seen.indexOf(number) === -1) {\n            seen.push(number);\n            result.push(number);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpv7lkbj_5.js:20:12)\n    at Object.<anonymous> (/tmp/tmpv7lkbj_5.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const duplicateNumbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n            uniqueNumbers.push(numbers[i]);\n        } else {\n            duplicateNumbers.push(numbers[i]);\n        }\n    }\n    return uniqueNumbers.concat(duplicateNumbers);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpjy2p_rm3.js:21:12)\n    at Object.<anonymous> (/tmp/tmpjy2p_rm3.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 3, 4,\n    5, 2, 3\n  ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const numberSet = new Set<number>();\n    numbers.forEach((num) => {\n        if (numberSet.has(num)) {\n            return;\n        }\n        numberSet.add(num);\n        uniqueNumbers.push(num);\n    });\n    return uniqueNumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpk3qzi74v.js:20:12)\n    at Object.<anonymous> (/tmp/tmpk3qzi74v.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) !== -1) {\n            continue;\n        }\n        result.push(numbers[i]);\n        seen.push(numbers[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmps1zrjuxb.js:20:12)\n    at Object.<anonymous> (/tmp/tmps1zrjuxb.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const unique: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            seen.push(numbers[i]);\n            unique.push(numbers[i]);\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp36umsbz0.js:19:12)\n    at Object.<anonymous> (/tmp/tmp36umsbz0.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    let unique: number[] = [];\n    let seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            seen.push(numbers[i]);\n            unique.push(numbers[i]);\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp8mo1nsuv.js:19:12)\n    at Object.<anonymous> (/tmp/tmp8mo1nsuv.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    let seen = {};\n    numbers.forEach((n) => {\n        if (seen[n]) {\n            return;\n        }\n        seen[n] = true;\n        result.push(n);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpbfhi_gtk.js:20:12)\n    at Object.<anonymous> (/tmp/tmpbfhi_gtk.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    let result: number[] = [];\n    let seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            seen.push(numbers[i]);\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp6m4xsl8l.js:19:12)\n    at Object.<anonymous> (/tmp/tmp6m4xsl8l.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const unique: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((num) => {\n        if (seen.indexOf(num) === -1) {\n            seen.push(num);\n            unique.push(num);\n        }\n    });\n    return unique;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphgcwr5er.ts(14,2): error TS1110: Type expected.\n../../../../tmp/tmphgcwr5er.ts(14,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmphgcwr5er.ts(15,2): error TS1109: Expression expected.\n../../../../tmp/tmphgcwr5er.ts(15,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmphgcwr5er.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmphgcwr5er.ts(16,6): error TS1005: ';' expected.\n../../../../tmp/tmphgcwr5er.ts(16,16): error TS1109: Expression expected.\n../../../../tmp/tmphgcwr5er.ts(18,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp4l_fsff1.js:20:12)\n    at Object.<anonymous> (/tmp/tmp4l_fsff1.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const seen = new Set<number>();\n    const result = [];\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpeohnip5z.js:20:12)\n    at Object.<anonymous> (/tmp/tmpeohnip5z.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334542
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    let seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n        if (seen.indexOf(number) >= 0) {\n            continue;\n        }\n        seen.push(number);\n        result.push(number);\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,javascript,typescript |>\n<| a tags=arrays,javascript,typescript |>\n<code>\nconst removeDuplicates = (arr) => {\n  const result = [];\n  arr.forEach((item) => {\n    if (result.indexOf(item) < 0) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nconst removeDuplicates = (arr) => {\n  const result = [];\n  arr.forEach((item) => {\n    if (result.indexOf(item) < 0) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n</code>\n<|/ a tags=arrays,javascript,typescript |>\n<| a |>\n<code>\nconst removeDuplicates = (arr) => {\n  let result = [];\n  arr.forEach((item) => {\n    if (result.indexOf(item) < 0) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n</code>\n<|/ a tags=arrays,javascript,typescript dscore=1 |>\n<| a tags=arrays,javascript,typescript |>\n<code>\nconst removeDuplicates = (arr) => {\n  let result = [];\n  arr.forEach((item) => {\n    if (result.indexOf(item) < 0) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nconst removeDuplicates = (arr) => {\n  const result = [];\n  arr.forEach((item) => {\n    if (result.indexOf(item) < 0) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n</code>\n<|/ a tags=arrays,javascript,typescript |>\n<| a dscore=1 |>\n<code>\nconst removeDuplicates = (arr) => {\n  const result = [];\n  arr.forEach((item) => {\n    if (result.indexOf(item) < 0) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n</code>\n<|/ a tags=arrays,javascript,typescript |>\n<| a tags=arrays,javascript,typescript |>\n<code>\nconst removeDuplicates = (arr) => {\n  const result = [];\n  arr.forEach((item) => {\n    if (result.indexOf(item) < 0) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n</code>\n<|/ a \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphdfv8nho.ts(16,2): error TS1110: Type expected.\n../../../../tmp/tmphdfv8nho.ts(16,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmphdfv8nho.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmphdfv8nho.ts(17,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmphdfv8nho.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmphdfv8nho.ts(18,6): error TS1005: ';' expected.\n../../../../tmp/tmphdfv8nho.ts(18,41): error TS1109: Expression expected.\n../../../../tmp/tmphdfv8nho.ts(20,1): error TS1109: Expression expected.\n../../../../tmp/tmphdfv8nho.ts(29,2): error TS1110: Type expected.\n../../../../tmp/tmphdfv8nho.ts(29,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmphdfv8nho.ts(30,2): error TS1109: Expression expected.\n../../../../tmp/tmphdfv8nho.ts(30,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmphdfv8nho.ts(31,2): error TS1109: Expression expected.\n../../../../t",
      "timestamp": 1660334542
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((num) => {\n        if (seen.indexOf(num) === -1) {\n            seen.push(num);\n            result.push(num);\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp_wbpjboe.js:19:12)\n    at Object.<anonymous> (/tmp/tmp_wbpjboe.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334542
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const numSet = new Set<number>();\n    for (const num of numbers) {\n        if (numSet.has(num)) {\n            continue;\n        }\n        uniqueNumbers.push(num);\n        numSet.add(num);\n    }\n    return uniqueNumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpzmfv7q1f.js:20:12)\n    at Object.<anonymous> (/tmp/tmpzmfv7q1f.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334542
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) !== -1) {\n            continue;\n        }\n        result.push(numbers[i]);\n        seen.push(numbers[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmps1zrjuxb.js:20:12)\n    at Object.<anonymous> (/tmp/tmps1zrjuxb.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    let unique: number[] = [];\n    let duplicates: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (unique.indexOf(numbers[i]) === -1) {\n            unique.push(numbers[i]);\n        } else {\n            duplicates.push(numbers[i]);\n        }\n    }\n    return unique.concat(duplicates);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpgqbrtqp1.js:21:12)\n    at Object.<anonymous> (/tmp/tmpgqbrtqp1.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 3, 4,\n    5, 2, 3\n  ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334542
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const numberSet = new Set(numbers);\n    numbers.forEach(number => {\n        if (numberSet.has(number)) {\n            numberSet.delete(number);\n        } else {\n            uniqueNumbers.push(number);\n        }\n    });\n    return uniqueNumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp1ffbl7oy.js:20:12)\n    at Object.<anonymous> (/tmp/tmp1ffbl7oy.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: Set<number> = new Set();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        result.push(num);\n        seen.add(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp25zztq4a.js:20:12)\n    at Object.<anonymous> (/tmp/tmp25zztq4a.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334542
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((number) => {\n        if (seen.indexOf(number) === -1) {\n            seen.push(number);\n            result.push(number);\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpsvzla27x.js:19:12)\n    at Object.<anonymous> (/tmp/tmpsvzla27x.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334542
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    let seen = {};\n    for (let i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n        if (seen[number]) {\n            continue;\n        }\n        seen[number] = true;\n        result.push(number);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpdj7tr4bq.js:21:12)\n    at Object.<anonymous> (/tmp/tmpdj7tr4bq.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpytqsq9jj.js:20:12)\n    at Object.<anonymous> (/tmp/tmpytqsq9jj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const numSet = new Set<number>();\n    for (const num of numbers) {\n        if (numSet.has(num)) {\n            continue;\n        }\n        uniqueNumbers.push(num);\n        numSet.add(num);\n    }\n    return uniqueNumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpzmfv7q1f.js:20:12)\n    at Object.<anonymous> (/tmp/tmpzmfv7q1f.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334542
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    let seen = {};\n    numbers.forEach((num) => {\n        if (seen[num]) {\n            return;\n        }\n        seen[num] = true;\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpzu1xufai.js:20:12)\n    at Object.<anonymous> (/tmp/tmpzu1xufai.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    let seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            result.push(numbers[i]);\n            seen.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpxf7u_sid.js:19:12)\n    at Object.<anonymous> (/tmp/tmpxf7u_sid.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const output: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) !== -1) {\n            continue;\n        }\n        seen.push(numbers[i]);\n        output.push(numbers[i]);\n    }\n    return output;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpw7yuygx4.js:20:12)\n    at Object.<anonymous> (/tmp/tmpw7yuygx4.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp5901nkvo.js:20:12)\n    at Object.<anonymous> (/tmp/tmp5901nkvo.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const unique: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) !== -1) {\n            continue;\n        }\n        seen.push(numbers[i]);\n        unique.push(numbers[i]);\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpog05tt7k.js:20:12)\n    at Object.<anonymous> (/tmp/tmpog05tt7k.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            result.push(numbers[i]);\n            seen.push(numbers[i]);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4gkeynit.ts(14,2): error TS1110: Type expected.\n../../../../tmp/tmp4gkeynit.ts(14,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp4gkeynit.ts(15,2): error TS1109: Expression expected.\n../../../../tmp/tmp4gkeynit.ts(15,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp4gkeynit.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmp4gkeynit.ts(16,6): error TS1005: ';' expected.\n../../../../tmp/tmp4gkeynit.ts(16,16): error TS1109: Expression expected.\n../../../../tmp/tmp4gkeynit.ts(18,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334542
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpytqsq9jj.js:20:12)\n    at Object.<anonymous> (/tmp/tmpytqsq9jj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n  const result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpxwaaeq2f.js:21:12)\n    at Object.<anonymous> (/tmp/tmpxwaaeq2f.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach(n => {\n        if (seen.has(n)) {\n            return;\n        }\n        seen.add(n);\n        result.push(n);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp8b5n9jy0.js:20:12)\n    at Object.<anonymous> (/tmp/tmp8b5n9jy0.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    let seen = {};\n    for (let i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n        if (seen[number]) {\n            continue;\n        }\n        seen[number] = true;\n        result.push(number);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpdj7tr4bq.js:21:12)\n    at Object.<anonymous> (/tmp/tmpdj7tr4bq.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const numberSet = new Set<number>();\n    numbers.forEach((number) => {\n        if (numberSet.has(number)) {\n            uniqueNumbers.push(number);\n        }\n        numberSet.add(number);\n    });\n    return uniqueNumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpkv9p0o10.js:18:12)\n    at Object.<anonymous> (/tmp/tmpkv9p0o10.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const output: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            output.push(numbers[i]);\n            seen.push(numbers[i]);\n        }\n    }\n    return output;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp4aacmi5f.js:19:12)\n    at Object.<anonymous> (/tmp/tmp4aacmi5f.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            result.push(numbers[i]);\n            seen.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp0lfa6h7l.js:19:12)\n    at Object.<anonymous> (/tmp/tmp0lfa6h7l.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            result.push(numbers[i]);\n            seen.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp0lfa6h7l.js:19:12)\n    at Object.<anonymous> (/tmp/tmp0lfa6h7l.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpuhj24_c5.js:20:12)\n    at Object.<anonymous> (/tmp/tmpuhj24_c5.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set();\n    numbers.forEach((n) => {\n        if (seen.has(n)) {\n            return;\n        }\n        seen.add(n);\n        result.push(n);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpjo68zavx.js:20:12)\n    at Object.<anonymous> (/tmp/tmpjo68zavx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            seen.push(numbers[i]);\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if you have duplicate numbers in the input array. For example, `[1, 1, 2, 2, 3]` would return `[1, 1, 3]` instead of `[1, 2, 3]`.\n<|/ c |>\n<| c |>\nYes, I see that now. I'll update my answer shortly.\n<|/ c |>\n<| c |>\nThanks for your answer. I've updated my question to include a case where duplicate numbers are in the input array. Your answer doesn't handle that case.\n<|/ c |>\n<| c |>\nI updated my answer with a new solution that handles duplicate numbers in the input array.\n<|/ c |>\n<| c |>\nThanks for your answer. I've updated my question to include a case where duplicate numbers are in the input array. Your answer doesn't handle that case.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0pqjd1y1.ts(14,2): error TS1110: Type expected.\n../../../../tmp/tmp0pqjd1y1.ts(14,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0pqjd1y1.ts(15,2): error TS1109: Expression expected.\n../../../../tmp/tmp0pqjd1y1.ts(15,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0pqjd1y1.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmp0pqjd1y1.ts(16,7): error TS1109: Expression expected.\n../../../../tmp/tmp0pqjd1y1.ts(17,6): error TS1005: ';' expected.\n../../../../tmp/tmp0pqjd1y1.ts(17,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp0pqjd1y1.ts(17,148): error TS1002: Unterminated string literal.\n../../../../tmp/tmp0pqjd1y1.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmp0pqjd1y1.ts(18,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0pqjd1y1.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmp0pqjd1y1.ts(19,7): error TS1109: Expression expected.\n../..",
      "timestamp": 1660334542
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpytqsq9jj.js:20:12)\n    at Object.<anonymous> (/tmp/tmpytqsq9jj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((n) => {\n        if (seen.has(n)) {\n            return;\n        }\n        seen.add(n);\n        result.push(n);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpoo8zp_wc.js:20:12)\n    at Object.<anonymous> (/tmp/tmpoo8zp_wc.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const output: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            output.push(numbers[i]);\n            seen.push(numbers[i]);\n        }\n    }\n    return output;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp4aacmi5f.js:19:12)\n    at Object.<anonymous> (/tmp/tmp4aacmi5f.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (const num of numbers) {\n        if (seen.indexOf(num) === -1) {\n            seen.push(num);\n            result.push(num);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpwla3kszu.js:19:12)\n    at Object.<anonymous> (/tmp/tmpwla3kszu.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const duplicateNumbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n            uniqueNumbers.push(numbers[i]);\n        } else {\n            duplicateNumbers.push(numbers[i]);\n        }\n    }\n    return uniqueNumbers.concat(duplicateNumbers);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpjy2p_rm3.js:21:12)\n    at Object.<anonymous> (/tmp/tmpjy2p_rm3.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 3, 4,\n    5, 2, 3\n  ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) !== -1) {\n            continue;\n        }\n        seen.push(numbers[i]);\n        result.push(numbers[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp3kdrgq36.js:20:12)\n    at Object.<anonymous> (/tmp/tmp3kdrgq36.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    let seen = {};\n    numbers.forEach((num) => {\n        if (seen[num]) {\n            return;\n        }\n        seen[num] = true;\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpzu1xufai.js:20:12)\n    at Object.<anonymous> (/tmp/tmpzu1xufai.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    let seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            result.push(numbers[i]);\n            seen.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpuzislgen.js:19:12)\n    at Object.<anonymous> (/tmp/tmpuzislgen.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const unique: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n        if (seen.indexOf(number) !== -1) {\n            continue;\n        }\n        seen.push(number);\n        unique.push(number);\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpnrdmyal3.js:21:12)\n    at Object.<anonymous> (/tmp/tmpnrdmyal3.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334545
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((num) => {\n        if (seen.indexOf(num) === -1) {\n            seen.push(num);\n            result.push(num);\n        }\n    });\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if there are duplicates in the input array. For example, `[1, 1, 2, 3]` returns `[1, 2, 3]` instead of `[1, 3]`.\n<|/ c |>\n<| c |>\nI added a version that works with duplicates.\n<|/ c |>\n<| a tags=arrays,javascript,typescript |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0miu421w.ts(14,2): error TS1110: Type expected.\n../../../../tmp/tmp0miu421w.ts(14,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0miu421w.ts(15,2): error TS1109: Expression expected.\n../../../../tmp/tmp0miu421w.ts(15,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0miu421w.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmp0miu421w.ts(16,7): error TS1109: Expression expected.\n../../../../tmp/tmp0miu421w.ts(17,6): error TS1005: ';' expected.\n../../../../tmp/tmp0miu421w.ts(17,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp0miu421w.ts(17,131): error TS1002: Unterminated string literal.\n../../../../tmp/tmp0miu421w.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmp0miu421w.ts(18,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0miu421w.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmp0miu421w.ts(19,7): error TS1109: Expression expected.\n../../../../tmp/tmp0miu421w.ts(20,3): error TS1005: ';' expected.\n../../../../tmp/tmp0miu421w.ts(20,9): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp0miu421w.ts(20,11): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp0miu421w.ts(20,19): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp0miu421w.ts(20,24): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp0miu421w.ts(20,35): error TS1005: '(' expected.\n../../../../tmp/tmp0miu421w.ts(21,1): error TS1003: Identifier expected.\n../../../../tmp/tmp0miu421w.ts(21,2): error TS1109: Expression expected.\n../../../../tmp/tmp0miu421w.ts(21,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp0miu421w.ts(22,2): error TS1109: Expression expected.\n../../../../tmp/tmp0miu421w.ts(22,6): error TS1005: ')' expected.\n../../../../tmp/tmp0miu421w.ts(22,41): error TS1109: Expression expected.\n../../../../tmp/tmp0miu421w.ts(24,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334545
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.has(numbers[i])) {\n            continue;\n        }\n        seen.add(numbers[i]);\n        result.push(numbers[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpbj3evbri.js:20:12)\n    at Object.<anonymous> (/tmp/tmpbj3evbri.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334546
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const numberSet = new Set<number>();\n\n    for (const num of numbers) {\n        if (numberSet.has(num)) {\n            continue;\n        }\n\n        numberSet.add(num);\n        uniqueNumbers.push(num);\n    }\n\n    return uniqueNumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpmrnmdg4t.js:20:12)\n    at Object.<anonymous> (/tmp/tmpmrnmdg4t.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    let numberIndex = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n            uniqueNumbers.push(numbers[i]);\n        }\n    }\n    return uniqueNumbers;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk6pmdqs1.ts(13,2): error TS1110: Type expected.\n../../../../tmp/tmpk6pmdqs1.ts(13,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpk6pmdqs1.ts(14,2): error TS1109: Expression expected.\n../../../../tmp/tmpk6pmdqs1.ts(14,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpk6pmdqs1.ts(15,2): error TS1109: Expression expected.\n../../../../tmp/tmpk6pmdqs1.ts(15,6): error TS1005: ';' expected.\n../../../../tmp/tmpk6pmdqs1.ts(15,16): error TS1109: Expression expected.\n../../../../tmp/tmpk6pmdqs1.ts(17,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334546
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    let seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) !== -1) {\n            continue;\n        }\n        seen.push(numbers[i]);\n        result.push(numbers[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp83uxg71f.js:20:12)\n    at Object.<anonymous> (/tmp/tmp83uxg71f.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334546
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            result.push(numbers[i]);\n            seen.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp0lfa6h7l.js:19:12)\n    at Object.<anonymous> (/tmp/tmp0lfa6h7l.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set();\n    numbers.forEach(n => {\n        if (seen.has(n)) {\n            return;\n        }\n        seen.add(n);\n        result.push(n);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp04taifvc.js:20:12)\n    at Object.<anonymous> (/tmp/tmp04taifvc.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334546
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (const num of numbers) {\n        if (seen.indexOf(num) >= 0) {\n            continue;\n        }\n        result.push(num);\n        seen.push(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpwm743o2z.js:20:12)\n    at Object.<anonymous> (/tmp/tmpwm743o2z.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334546
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            seen.push(numbers[i]);\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis solution doesn't preserve the order of the original array\n<|/ c |>\n<| c |>\nIt does preserve the order of the original array. `seen` keeps track of what values have already been seen, and `result` keeps track of what values have not yet been seen. `seen` will contain all unique values from the original array, and `result` will contain all unique values from the original array that have not yet been seen.\n<|/ c |>\n<| c |>\nI see what you mean. My bad.\n<|/ c |>\n<| a dscore=1 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpckm7xzp5.ts(14,2): error TS1110: Type expected.\n../../../../tmp/tmpckm7xzp5.ts(14,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpckm7xzp5.ts(15,2): error TS1109: Expression expected.\n../../../../tmp/tmpckm7xzp5.ts(15,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpckm7xzp5.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmpckm7xzp5.ts(16,7): error TS1109: Expression expected.\n../../../../tmp/tmpckm7xzp5.ts(17,6): error TS1005: ';' expected.\n../../../../tmp/tmpckm7xzp5.ts(17,15): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpckm7xzp5.ts(17,63): error TS1002: Unterminated string literal.\n../../../../tmp/tmpckm7xzp5.ts(18,2): error TS1109: Expression expected.\n../../../../tmp/tmpckm7xzp5.ts(18,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpckm7xzp5.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmpckm7xzp5.ts(19,7): error TS1109: Expression expected.\n../..",
      "timestamp": 1660334546
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| a tags=javascript,arrays |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt1vim7ee.ts(15,2): error TS1110: Type expected.\n../../../../tmp/tmpt1vim7ee.ts(15,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpt1vim7ee.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmpt1vim7ee.ts(16,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpt1vim7ee.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmpt1vim7ee.ts(17,6): error TS1005: ';' expected.\n../../../../tmp/tmpt1vim7ee.ts(17,30): error TS1109: Expression expected.\n../../../../tmp/tmpt1vim7ee.ts(19,1): error TS1109: Expression expected.\n../../../../tmp/tmpt1vim7ee.ts(20,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334546
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp4l_fsff1.js:20:12)\n    at Object.<anonymous> (/tmp/tmp4l_fsff1.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    let result = [];\n    let seen = {};\n    for (let i = 0; i < numbers.length; i++) {\n        let number = numbers[i];\n        if (seen[number]) {\n            continue;\n        }\n        seen[number] = true;\n        result.push(number);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp98q4kpgf.js:21:12)\n    at Object.<anonymous> (/tmp/tmp98q4kpgf.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334546
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpytqsq9jj.js:20:12)\n    at Object.<anonymous> (/tmp/tmpytqsq9jj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const numberSet = new Set<number>();\n    numbers.forEach((num) => {\n        if (numberSet.has(num)) {\n            return;\n        }\n        numberSet.add(num);\n        uniqueNumbers.push(num);\n    });\n    return uniqueNumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpk3qzi74v.js:20:12)\n    at Object.<anonymous> (/tmp/tmpk3qzi74v.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const duplicates: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n            uniqueNumbers.push(numbers[i]);\n        } else {\n            duplicates.push(numbers[i]);\n        }\n    }\n    return uniqueNumbers.concat(duplicates);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpxsl6r7sj.js:21:12)\n    at Object.<anonymous> (/tmp/tmpxsl6r7sj.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 3, 4,\n    5, 2, 3\n  ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334546
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const seen: Set<number> = new Set();\n    numbers.forEach((number) => {\n        if (seen.has(number)) {\n            return;\n        }\n        seen.add(number);\n        uniqueNumbers.push(number);\n    });\n    return uniqueNumbers;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if the input array is `[1, 1, 2, 3]`\n<|/ c |>\n<| c |>\nIt does work. `remove_duplicates([1, 1, 2, 3])` returns `[1, 2, 3]`\n<|/ c |>\n<| c |>\nYes, it does. But it also returns `[1, 1, 2, 3]` which is not what the OP asked for\n<|/ c |>\n<| c |>\nAh, I see what you mean. I'll edit my answer.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that doesn't require a set or an additional array.\n<|/ c |>\n<| a tags=javascript,arrays |>\nYou can use the filter method of arrays:\n<code>\nconst arr = [1, 2, 3, 1, 2, 3];\nconst unique = arr.filter((value, index, self) => self.indexOf(value) === index);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nYou can use Array#filter and Array#includes to achieve this:\n\n<code>\nconst arr = [1, 2, 3, 1, 2, 3];\n\nconst unique = arr.filter((value, index, self) => self.indexOf(value) === index);\n\nconsole.log(unique);</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=1 |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3];\nconst unique = arr.filter((value, index, self) => self.indexOf(value) === index);\nconsole.log(unique);</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3];\nconst unique = arr.filter((value, index, self) => self.indexOf(value) === index);\nconsole.log(unique);</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3];\nconst unique = arr.filter((value, index, self) => self.indexOf(value) === index);\nconsole.log(unique);</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=1 |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3];\nconst unique = arr.filter((value, index, self) => self.indexOf(value) === index);\nconsole.log(unique);</code>\n<|/ a tag\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnqkrjnri.ts(15,2): error TS1110: Type expected.\n../../../../tmp/tmpnqkrjnri.ts(15,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpnqkrjnri.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmpnqkrjnri.ts(16,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpnqkrjnri.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmpnqkrjnri.ts(17,7): error TS1109: Expression expected.\n../../../../tmp/tmpnqkrjnri.ts(18,6): error TS1005: ';' expected.\n../../../../tmp/tmpnqkrjnri.ts(18,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpnqkrjnri.ts(18,55): error TS1002: Unterminated string literal.\n../../../../tmp/tmpnqkrjnri.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmpnqkrjnri.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpnqkrjnri.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpnqkrjnri.ts(20,7): error TS1109: Expression expected.\n../../",
      "timestamp": 1660334546
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const seen = new Set<number>();\n    const result = [];\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp6voolye5.js:20:12)\n    at Object.<anonymous> (/tmp/tmp6voolye5.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334546
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpytqsq9jj.js:20:12)\n    at Object.<anonymous> (/tmp/tmpytqsq9jj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            result.push(numbers[i]);\n            seen.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp0lfa6h7l.js:19:12)\n    at Object.<anonymous> (/tmp/tmp0lfa6h7l.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((n) => {\n        if (seen.has(n)) {\n            return;\n        }\n        seen.add(n);\n        result.push(n);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpoo8zp_wc.js:20:12)\n    at Object.<anonymous> (/tmp/tmpoo8zp_wc.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((num) => {\n        if (seen.indexOf(num) >= 0) {\n            return;\n        }\n        seen.push(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp3kuykuia.js:20:12)\n    at Object.<anonymous> (/tmp/tmp3kuykuia.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334546
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((number) => {\n        if (seen.indexOf(number) === -1) {\n            seen.push(number);\n            result.push(number);\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpsvzla27x.js:19:12)\n    at Object.<anonymous> (/tmp/tmpsvzla27x.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334542
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    let seen = {};\n    numbers.forEach((num) => {\n        if (seen[num]) {\n            return;\n        }\n        seen[num] = true;\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpzu1xufai.js:20:12)\n    at Object.<anonymous> (/tmp/tmpzu1xufai.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: Set<number> = new Set();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpe_yeys3x.js:20:12)\n    at Object.<anonymous> (/tmp/tmpe_yeys3x.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334546
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpytqsq9jj.js:20:12)\n    at Object.<anonymous> (/tmp/tmpytqsq9jj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const unique: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) > -1) {\n            continue;\n        }\n        seen.push(numbers[i]);\n        unique.push(numbers[i]);\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpo4l3w7iw.js:20:12)\n    at Object.<anonymous> (/tmp/tmpo4l3w7iw.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334546
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp4l_fsff1.js:20:12)\n    at Object.<anonymous> (/tmp/tmp4l_fsff1.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set();\n    numbers.forEach((n) => {\n        if (seen.has(n)) {\n            return;\n        }\n        seen.add(n);\n        result.push(n);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpjo68zavx.js:20:12)\n    at Object.<anonymous> (/tmp/tmpjo68zavx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp5901nkvo.js:20:12)\n    at Object.<anonymous> (/tmp/tmp5901nkvo.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const output: number[] = [];\n    const seen: Set<number> = new Set();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n        output.push(num);\n    }\n    return output;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp9ncaolqc.js:20:12)\n    at Object.<anonymous> (/tmp/tmp9ncaolqc.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334546
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    let seen = {};\n    for (let i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n        if (seen[number]) {\n            continue;\n        }\n        seen[number] = true;\n        result.push(number);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpdj7tr4bq.js:21:12)\n    at Object.<anonymous> (/tmp/tmpdj7tr4bq.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const output: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            output.push(numbers[i]);\n            seen.push(numbers[i]);\n        }\n    }\n    return output;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp4aacmi5f.js:19:12)\n    at Object.<anonymous> (/tmp/tmp4aacmi5f.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const seen: Set<number> = new Set();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        uniqueNumbers.push(num);\n    });\n    return uniqueNumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp747kx08s.js:20:12)\n    at Object.<anonymous> (/tmp/tmp747kx08s.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334546
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpytqsq9jj.js:20:12)\n    at Object.<anonymous> (/tmp/tmpytqsq9jj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const unique: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) !== -1) {\n            continue;\n        }\n        seen.push(numbers[i]);\n        unique.push(numbers[i]);\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpog05tt7k.js:20:12)\n    at Object.<anonymous> (/tmp/tmpog05tt7k.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach(n => {\n        if (!seen.has(n)) {\n            result.push(n);\n            seen.add(n);\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpgouf1dfh.js:19:12)\n    at Object.<anonymous> (/tmp/tmpgouf1dfh.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334547
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) > -1) {\n            continue;\n        }\n        result.push(numbers[i]);\n        seen.push(numbers[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpof4fby52.js:20:12)\n    at Object.<anonymous> (/tmp/tmpof4fby52.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const unique: number[] = [];\n    numbers.forEach((num) => {\n        if (unique.indexOf(num) === -1) {\n            unique.push(num);\n        }\n    });\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp_c219d7a.js:17:12)\n    at Object.<anonymous> (/tmp/tmp_c219d7a.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334546
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    let seen: number[] = [];\n    numbers.forEach((num) => {\n        if (seen.indexOf(num) === -1) {\n            seen.push(num);\n            result.push(num);\n        }\n    });\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,javascript |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique = arr.reduce((acc, cur) => {\n  if (acc.indexOf(cur) === -1) {\n    acc.push(cur);\n  }\n  return acc;\n}, []);\nconsole.log(unique);</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique = arr.reduce((acc, cur) => {\n  if (acc.indexOf(cur) === -1) {\n    acc.push(cur);\n  }\n  return acc;\n}, []);\nconsole.log(unique);</code>\n<|/ a tags=arrays,javascript |>\n<| a dscore=2 |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique = arr.reduce((acc, cur) => {\n  if (acc.indexOf(cur) === -1) {\n    acc.push(cur);\n  }\n  return acc;\n}, []);\nconsole.log(unique);</code>\n<|/ a tags=arrays,javascript |>\n<| a |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique = arr.reduce((acc, cur) => {\n  if (acc.indexOf(cur) === -1) {\n    acc.push(cur);\n  }\n  return acc;\n}, []);\nconsole.log(unique);</code>\n<|/ a tags=arrays,javascript dscore=1 |>\n<| a tags=arrays,javascript |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique = arr.reduce((acc, cur) => {\n  if (acc.indexOf(cur) === -1) {\n    acc.push(cur);\n  }\n  return acc;\n}, []);\nconsole.log(unique);</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,javascript |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique = arr.reduce((acc, cur) => {\n  if (acc.indexOf(cur) === -1) {\n    acc.push(cur);\n  }\n  return acc;\n}, []);\nconsole.log(unique);</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,javascript |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique = arr.reduce((acc, cur) => {\n  if (\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp45al1ypv.ts(14,2): error TS1110: Type expected.\n../../../../tmp/tmp45al1ypv.ts(14,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp45al1ypv.ts(15,2): error TS1109: Expression expected.\n../../../../tmp/tmp45al1ypv.ts(15,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp45al1ypv.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmp45al1ypv.ts(16,6): error TS1005: ';' expected.\n../../../../tmp/tmp45al1ypv.ts(16,30): error TS1109: Expression expected.\n../../../../tmp/tmp45al1ypv.ts(18,1): error TS1109: Expression expected.\n../../../../tmp/tmp45al1ypv.ts(25,22): error TS1110: Type expected.\n../../../../tmp/tmp45al1ypv.ts(25,23): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp45al1ypv.ts(26,2): error TS1109: Expression expected.\n../../../../tmp/tmp45al1ypv.ts(26,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp45al1ypv.ts(27,2): error TS1109: Expression expected.\n../../../..",
      "timestamp": 1660334546
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const numberSet = new Set(numbers);\n    numbers.forEach((num) => {\n        if (numberSet.has(num)) {\n            numberSet.delete(num);\n        } else {\n            uniqueNumbers.push(num);\n        }\n    });\n    return uniqueNumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpi8ykecsy.js:20:12)\n    at Object.<anonymous> (/tmp/tmpi8ykecsy.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((n) => {\n        if (seen.has(n)) {\n            return;\n        }\n        seen.add(n);\n        result.push(n);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpoo8zp_wc.js:20:12)\n    at Object.<anonymous> (/tmp/tmpoo8zp_wc.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    let seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            seen.push(numbers[i]);\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp69dq6dcw.js:19:12)\n    at Object.<anonymous> (/tmp/tmp69dq6dcw.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334546
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        result.push(num);\n        seen.add(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp5a8f85y5.js:20:12)\n    at Object.<anonymous> (/tmp/tmp5a8f85y5.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334547
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) !== -1) {\n            continue;\n        }\n        result.push(numbers[i]);\n        seen.push(numbers[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmps1zrjuxb.js:20:12)\n    at Object.<anonymous> (/tmp/tmps1zrjuxb.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    let seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            seen.push(numbers[i]);\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp30_f_t_i.js:19:12)\n    at Object.<anonymous> (/tmp/tmp30_f_t_i.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334549
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((num) => {\n        if (seen.indexOf(num) === -1) {\n            seen.push(num);\n            result.push(num);\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp_wbpjboe.js:19:12)\n    at Object.<anonymous> (/tmp/tmp_wbpjboe.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334542
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    let seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            seen.push(numbers[i]);\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmptgijxge4.ts(14,2): error TS1110: Type expected.\n../../../../tmp/tmptgijxge4.ts(14,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmptgijxge4.ts(15,2): error TS1109: Expression expected.\n../../../../tmp/tmptgijxge4.ts(15,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmptgijxge4.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmptgijxge4.ts(16,6): error TS1005: ';' expected.\n../../../../tmp/tmptgijxge4.ts(16,16): error TS1109: Expression expected.\n../../../../tmp/tmptgijxge4.ts(18,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334548
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    let result: number[] = [];\n    let seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            result.push(numbers[i]);\n            seen.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpvzponvno.js:19:12)\n    at Object.<anonymous> (/tmp/tmpvzponvno.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334549
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const unique: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            seen.push(numbers[i]);\n            unique.push(numbers[i]);\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp36umsbz0.js:19:12)\n    at Object.<anonymous> (/tmp/tmp36umsbz0.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const unique: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n        if (seen.indexOf(number) !== -1) {\n            continue;\n        }\n        seen.push(number);\n        unique.push(number);\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpnrdmyal3.js:21:12)\n    at Object.<anonymous> (/tmp/tmpnrdmyal3.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334545
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const duplicateNumbers: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n            uniqueNumbers.push(numbers[i]);\n        } else {\n            duplicateNumbers.push(numbers[i]);\n        }\n    }\n    return uniqueNumbers.concat(duplicateNumbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique = arr.reduce((acc, val) => {\n  if (acc.indexOf(val) === -1) {\n    acc.push(val);\n  }\n  return acc;\n}, []);\nconsole.log(unique);</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique = arr.reduce((acc, val) => {\n  if (acc.indexOf(val) === -1) {\n    acc.push(val);\n  }\n  return acc;\n}, []);\nconsole.log(unique);</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique = arr.reduce((acc, val) => {\n  if (acc.indexOf(val) === -1) {\n    acc.push(val);\n  }\n  return acc;\n}, []);\nconsole.log(unique);</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique = arr.reduce((acc, val) => {\n  if (acc.indexOf(val) === -1) {\n    acc.push(val);\n  }\n  return acc;\n}, []);\nconsole.log(unique);</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique = arr.reduce((acc, val) => {\n  if (acc.indexOf(val) === -1) {\n    acc.push(val);\n  }\n  return acc;\n}, []);\nconsole.log(unique);</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique = arr.reduce((acc, val) => {\n  if (acc.indexOf(val) === -1) {\n    acc.push(val);\n  }\n  return acc;\n}, []);\nconsole.log(unique);\n</code>\n<|/ a tags=javascript,arrays |>\n<| a tags=javascript,arrays |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps739b9n9.ts(15,2): error TS1110: Type expected.\n../../../../tmp/tmps739b9n9.ts(15,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmps739b9n9.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmps739b9n9.ts(16,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmps739b9n9.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmps739b9n9.ts(17,6): error TS1005: ';' expected.\n../../../../tmp/tmps739b9n9.ts(17,30): error TS1109: Expression expected.\n../../../../tmp/tmps739b9n9.ts(19,1): error TS1109: Expression expected.\n../../../../tmp/tmps739b9n9.ts(26,22): error TS1110: Type expected.\n../../../../tmp/tmps739b9n9.ts(26,23): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmps739b9n9.ts(27,2): error TS1109: Expression expected.\n../../../../tmp/tmps739b9n9.ts(27,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmps739b9n9.ts(28,2): error TS1109: Expression expected.\n../../../..",
      "timestamp": 1660334549
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set();\n    numbers.forEach((n) => {\n        if (seen.has(n)) {\n            return;\n        }\n        seen.add(n);\n        result.push(n);\n    });\n    return result;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpuq8jdc5d.ts(15,2): error TS1110: Type expected.\n../../../../tmp/tmpuq8jdc5d.ts(15,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpuq8jdc5d.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmpuq8jdc5d.ts(16,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpuq8jdc5d.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmpuq8jdc5d.ts(17,6): error TS1005: ';' expected.\n../../../../tmp/tmpuq8jdc5d.ts(17,16): error TS1109: Expression expected.\n../../../../tmp/tmpuq8jdc5d.ts(19,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334549
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    for (let i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n        if (seen.has(number)) {\n            continue;\n        }\n        seen.add(number);\n        result.push(number);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpm6xkvxz2.js:21:12)\n    at Object.<anonymous> (/tmp/tmpm6xkvxz2.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    let seen = {};\n    numbers.forEach((n) => {\n        if (seen[n]) {\n            return;\n        }\n        seen[n] = true;\n        result.push(n);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpbfhi_gtk.js:20:12)\n    at Object.<anonymous> (/tmp/tmpbfhi_gtk.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const unique: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (unique.indexOf(numbers[i]) === -1) {\n            unique.push(numbers[i]);\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpb_jnlh64.js:17:12)\n    at Object.<anonymous> (/tmp/tmpb_jnlh64.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const unique: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (unique.indexOf(numbers[i]) === -1) {\n            unique.push(numbers[i]);\n        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpb_jnlh64.js:17:12)\n    at Object.<anonymous> (/tmp/tmpb_jnlh64.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            seen.push(numbers[i]);\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpwga2qr_b.js:19:12)\n    at Object.<anonymous> (/tmp/tmpwga2qr_b.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: Set<number> = new Set();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpe_yeys3x.js:20:12)\n    at Object.<anonymous> (/tmp/tmpe_yeys3x.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334546
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    let result: number[] = [];\n    let seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            seen.push(numbers[i]);\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp6m4xsl8l.js:19:12)\n    at Object.<anonymous> (/tmp/tmp6m4xsl8l.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const unique: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((num) => {\n        if (seen.indexOf(num) === -1) {\n            seen.push(num);\n            unique.push(num);\n        }\n    });\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmphudypy2_.js:19:12)\n    at Object.<anonymous> (/tmp/tmphudypy2_.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334550
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const numberSet = new Set(numbers);\n    for (const num of numberSet) {\n        if (uniqueNumbers.indexOf(num) === -1) {\n            uniqueNumbers.push(num);\n        }\n    }\n    return uniqueNumbers;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,typescript |>\n<code>\nconst numbers = [1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst uniqueNumbers = Array.from(new Set(numbers));\nconsole.log(uniqueNumbers);</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst numbers = [1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst uniqueNumbers = Array.from(new Set(numbers));\nconsole.log(uniqueNumbers);</code>\n<|/ a tags=javascript,typescript |>\n<| a |>\n<code>\nconst numbers = [1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst uniqueNumbers = Array.from(new Set(numbers));\nconsole.log(uniqueNumbers);</code>\n<|/ a dscore=0 tags=javascript,typescript |>\n<| a |>\n<code>\nconst numbers = [1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst uniqueNumbers = Array.from(new Set(numbers));\nconsole.log(uniqueNumbers);\n</code>\n<|/ a dscore=0 tags=javascript,typescript |>\n<| a dscore=0 |>\n<code>\nconst numbers = [1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst uniqueNumbers = Array.from(new Set(numbers));\nconsole.log(uniqueNumbers);\n</code>\n<|/ a tags=javascript,typescript |>\n<| a dscore=0 |>\n<code>\nconst numbers = [1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst uniqueNumbers = Array.from(new Set(numbers));\nconsole.log(uniqueNumbers);\n</code>\n<|/ a tags=javascript,typescript |>\n<| a tags=javascript,typescript |>\n<code>\nconst numbers = [1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst uniqueNumbers = Array.from(new Set(numbers));\nconsole.log(uniqueNumbers);\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,typescript |>\n<code>\nconst numbers = [1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst uniqueNumbers = Array.from(new Set(numbers));\nconsole.log(uniqueNumbers);\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,typescript |>\n<code>\nconst numbers = [1, 2, 3, 1, 2, 3, 1, 2, 3];\nconst unique\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpn67xobz2.ts(13,2): error TS1110: Type expected.\n../../../../tmp/tmpn67xobz2.ts(13,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpn67xobz2.ts(14,2): error TS1109: Expression expected.\n../../../../tmp/tmpn67xobz2.ts(14,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpn67xobz2.ts(15,2): error TS1109: Expression expected.\n../../../../tmp/tmpn67xobz2.ts(15,6): error TS1005: ';' expected.\n../../../../tmp/tmpn67xobz2.ts(15,34): error TS1109: Expression expected.\n../../../../tmp/tmpn67xobz2.ts(17,1): error TS1109: Expression expected.\n../../../../tmp/tmpn67xobz2.ts(19,29): error TS1110: Type expected.\n../../../../tmp/tmpn67xobz2.ts(19,30): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpn67xobz2.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpn67xobz2.ts(20,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpn67xobz2.ts(21,2): error TS1109: Expression expected.\n../../../..",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    let result: number[] = [];\n    let seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            seen.push(numbers[i]);\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp6m4xsl8l.js:19:12)\n    at Object.<anonymous> (/tmp/tmp6m4xsl8l.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            result.push(numbers[i]);\n            seen.push(numbers[i]);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| a tags=arrays,javascript,sorting |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbqj_ohui.ts(14,2): error TS1110: Type expected.\n../../../../tmp/tmpbqj_ohui.ts(14,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpbqj_ohui.ts(15,2): error TS1109: Expression expected.\n../../../../tmp/tmpbqj_ohui.ts(15,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpbqj_ohui.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmpbqj_ohui.ts(16,6): error TS1005: ';' expected.\n../../../../tmp/tmpbqj_ohui.ts(16,38): error TS1109: Expression expected.\n../../../../tmp/tmpbqj_ohui.ts(18,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set();\n    for (let i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n        if (seen.has(number)) {\n            continue;\n        }\n        seen.add(number);\n        result.push(number);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpzr5gmdxj.js:21:12)\n    at Object.<anonymous> (/tmp/tmpzr5gmdxj.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const numSet = new Set<number>();\n    numbers.forEach((num) => {\n        if (numSet.has(num)) {\n            return;\n        }\n        numSet.add(num);\n        uniqueNumbers.push(num);\n    });\n    return uniqueNumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpj3_69z74.js:20:12)\n    at Object.<anonymous> (/tmp/tmpj3_69z74.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp4l_fsff1.js:20:12)\n    at Object.<anonymous> (/tmp/tmp4l_fsff1.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) > -1) {\n            continue;\n        }\n        result.push(numbers[i]);\n        seen.push(numbers[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpof4fby52.js:20:12)\n    at Object.<anonymous> (/tmp/tmpof4fby52.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set();\n    numbers.forEach((n) => {\n        if (seen.has(n)) {\n            return;\n        }\n        seen.add(n);\n        result.push(n);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpjo68zavx.js:20:12)\n    at Object.<anonymous> (/tmp/tmpjo68zavx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const numberSet = new Set<number>();\n    numbers.forEach((number) => {\n        if (numberSet.has(number)) {\n            return;\n        }\n        numberSet.add(number);\n        uniqueNumbers.push(number);\n    });\n    return uniqueNumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpab31h2fz.js:20:12)\n    at Object.<anonymous> (/tmp/tmpab31h2fz.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    let seen = {};\n    numbers.forEach((n) => {\n        if (seen[n]) {\n            return;\n        }\n        seen[n] = true;\n        result.push(n);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpbfhi_gtk.js:20:12)\n    at Object.<anonymous> (/tmp/tmpbfhi_gtk.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp5901nkvo.js:20:12)\n    at Object.<anonymous> (/tmp/tmp5901nkvo.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpytqsq9jj.js:20:12)\n    at Object.<anonymous> (/tmp/tmpytqsq9jj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp4l_fsff1.js:20:12)\n    at Object.<anonymous> (/tmp/tmp4l_fsff1.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n</code>\n<|/ a tags=arrays,javascript,typescript |>\n<| a dscore=0 |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpw8me3m2m.ts(15,2): error TS1110: Type expected.\n../../../../tmp/tmpw8me3m2m.ts(15,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpw8me3m2m.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmpw8me3m2m.ts(16,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpw8me3m2m.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmpw8me3m2m.ts(17,6): error TS1005: ';' expected.\n../../../../tmp/tmpw8me3m2m.ts(17,16): error TS1109: Expression expected.\n../../../../tmp/tmpw8me3m2m.ts(19,9): error TS1005: ';' expected.\n",
      "timestamp": 1660334550
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const numberSet = new Set(numbers);\n    numbers.forEach((number) => {\n        if (numberSet.has(number)) {\n            numberSet.delete(number);\n        } else {\n            uniqueNumbers.push(number);\n        }\n    });\n    return uniqueNumbers;\n}\n</code>\n<|/ a tags=arrays,javascript,typescript |>\n<| a tags=arrays,javascript,typescript |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpxhgdqb5g.ts(15,2): error TS1110: Type expected.\n../../../../tmp/tmpxhgdqb5g.ts(15,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpxhgdqb5g.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmpxhgdqb5g.ts(16,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpxhgdqb5g.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmpxhgdqb5g.ts(17,6): error TS1005: ';' expected.\n../../../../tmp/tmpxhgdqb5g.ts(17,41): error TS1109: Expression expected.\n../../../../tmp/tmpxhgdqb5g.ts(19,1): error TS1109: Expression expected.\n../../../../tmp/tmpxhgdqb5g.ts(20,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set();\n    numbers.forEach((n) => {\n        if (seen.has(n)) {\n            return;\n        }\n        result.push(n);\n        seen.add(n);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp7go1541a.js:20:12)\n    at Object.<anonymous> (/tmp/tmp7go1541a.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((number) => {\n        if (seen.indexOf(number) === -1) {\n            seen.push(number);\n            result.push(number);\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpsvzla27x.js:19:12)\n    at Object.<anonymous> (/tmp/tmpsvzla27x.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334542
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set();\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.has(numbers[i])) {\n            continue;\n        }\n        seen.add(numbers[i]);\n        result.push(numbers[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp40higw5s.js:20:12)\n    at Object.<anonymous> (/tmp/tmp40higw5s.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((num) => {\n        if (seen.indexOf(num) === -1) {\n            seen.push(num);\n            result.push(num);\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp_wbpjboe.js:19:12)\n    at Object.<anonymous> (/tmp/tmp_wbpjboe.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334542
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    let result: number[] = [];\n    let seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            result.push(numbers[i]);\n            seen.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpvzponvno.js:19:12)\n    at Object.<anonymous> (/tmp/tmpvzponvno.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334549
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n  const result = [];\n  const seen = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n    }\n    seen.add(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp7dtl27tr.js:20:12)\n    at Object.<anonymous> (/tmp/tmp7dtl27tr.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const unique: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        const num = numbers[i];\n        if (seen.indexOf(num) >= 0) {\n            continue;\n        }\n        seen.push(num);\n        unique.push(num);\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp_taw868_.js:21:12)\n    at Object.<anonymous> (/tmp/tmp_taw868_.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const unique: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        const num = numbers[i];\n        if (seen.indexOf(num) >= 0) {\n            continue;\n        }\n        seen.push(num);\n        unique.push(num);\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp_taw868_.js:21:12)\n    at Object.<anonymous> (/tmp/tmp_taw868_.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    let seen = {};\n    for (let i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n        if (seen[number]) {\n            continue;\n        }\n        seen[number] = true;\n        result.push(number);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpdj7tr4bq.js:21:12)\n    at Object.<anonymous> (/tmp/tmpdj7tr4bq.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const unique: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) !== -1) {\n            continue;\n        }\n        seen.push(numbers[i]);\n        unique.push(numbers[i]);\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpog05tt7k.js:20:12)\n    at Object.<anonymous> (/tmp/tmpog05tt7k.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        result.push(num);\n        seen.add(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp1u7ggbcd.js:20:12)\n    at Object.<anonymous> (/tmp/tmp1u7ggbcd.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const numberSet = new Set<number>();\n    numbers.forEach((num) => {\n        if (numberSet.has(num)) {\n            return;\n        }\n        numberSet.add(num);\n        uniqueNumbers.push(num);\n    });\n    return uniqueNumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpk3qzi74v.js:20:12)\n    at Object.<anonymous> (/tmp/tmpk3qzi74v.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const numberSet = new Set<number>();\n    numbers.forEach((number) => {\n        if (numberSet.has(number)) {\n            return;\n        }\n        numberSet.add(number);\n        uniqueNumbers.push(number);\n    });\n    return uniqueNumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpab31h2fz.js:20:12)\n    at Object.<anonymous> (/tmp/tmpab31h2fz.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        result.push(num);\n        seen.add(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp1u7ggbcd.js:20:12)\n    at Object.<anonymous> (/tmp/tmp1u7ggbcd.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpytqsq9jj.js:20:12)\n    at Object.<anonymous> (/tmp/tmpytqsq9jj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((n) => {\n        if (seen.has(n)) {\n            return;\n        }\n        seen.add(n);\n        result.push(n);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpoo8zp_wc.js:20:12)\n    at Object.<anonymous> (/tmp/tmpoo8zp_wc.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const seen = new Set<number>();\n    const result = [];\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpeohnip5z.js:20:12)\n    at Object.<anonymous> (/tmp/tmpeohnip5z.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334542
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const output: number[] = [];\n    const seen: Set<number> = new Set();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n        output.push(num);\n    }\n    return output;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp9ncaolqc.js:20:12)\n    at Object.<anonymous> (/tmp/tmp9ncaolqc.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334546
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach(n => {\n        if (seen.has(n)) {\n            return;\n        }\n        seen.add(n);\n        result.push(n);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp8b5n9jy0.js:20:12)\n    at Object.<anonymous> (/tmp/tmp8b5n9jy0.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    let seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            seen.push(numbers[i]);\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp30_f_t_i.js:19:12)\n    at Object.<anonymous> (/tmp/tmp30_f_t_i.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334549
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: Set<number> = new Set();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if the input array is `[1, 1, 2, 3]`\n<|/ c |>\n<| c |>\nIt does work, try it out. `[1, 1, 2, 3]` becomes `[1, 2, 3]`\n<|/ c |>\n<| c |>\nIt doesn't work if you put `[1, 1, 2, 3]` into your code. Try it out and see.\n<|/ c |>\n<| c |>\nIt does work. Try it out and see. `[1, 1, 2, 3]` becomes `[1, 2, 3]`\n<|/ c |>\n<| c |>\nIt does work. Try it out and see. `[1, 1, 2, 3]` becomes `[1, 2, 3]`\n<|/ c |>\n<| a |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp3__6fula.ts(15,2): error TS1110: Type expected.\n../../../../tmp/tmp3__6fula.ts(15,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp3__6fula.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmp3__6fula.ts(16,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp3__6fula.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmp3__6fula.ts(17,7): error TS1109: Expression expected.\n../../../../tmp/tmp3__6fula.ts(18,6): error TS1005: ';' expected.\n../../../../tmp/tmp3__6fula.ts(18,6): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmp3__6fula.ts(18,55): error TS1002: Unterminated string literal.\n../../../../tmp/tmp3__6fula.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmp3__6fula.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp3__6fula.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmp3__6fula.ts(20,7): error TS1109: Expression expected.\n../../",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpytqsq9jj.js:20:12)\n    at Object.<anonymous> (/tmp/tmpytqsq9jj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const seen = new Set<number>();\n    const result = [];\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpeohnip5z.js:20:12)\n    at Object.<anonymous> (/tmp/tmpeohnip5z.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334542
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpytqsq9jj.js:20:12)\n    at Object.<anonymous> (/tmp/tmpytqsq9jj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const unique: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) !== -1) {\n            continue;\n        }\n        seen.push(numbers[i]);\n        unique.push(numbers[i]);\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpog05tt7k.js:20:12)\n    at Object.<anonymous> (/tmp/tmpog05tt7k.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((n) => {\n        if (!seen.has(n)) {\n            seen.add(n);\n            result.push(n);\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp3a43a058.js:19:12)\n    at Object.<anonymous> (/tmp/tmp3a43a058.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    let result = [];\n    let seen = {};\n    for (let i = 0; i < numbers.length; i++) {\n        let number = numbers[i];\n        if (seen[number]) {\n            continue;\n        }\n        seen[number] = true;\n        result.push(number);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp98q4kpgf.js:21:12)\n    at Object.<anonymous> (/tmp/tmp98q4kpgf.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334546
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp4l_fsff1.js:20:12)\n    at Object.<anonymous> (/tmp/tmp4l_fsff1.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp4l_fsff1.js:20:12)\n    at Object.<anonymous> (/tmp/tmp4l_fsff1.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            result.push(numbers[i]);\n            seen.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp0lfa6h7l.js:19:12)\n    at Object.<anonymous> (/tmp/tmp0lfa6h7l.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set();\n    numbers.forEach(n => {\n        if (seen.has(n)) {\n            return;\n        }\n        seen.add(n);\n        result.push(n);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp04taifvc.js:20:12)\n    at Object.<anonymous> (/tmp/tmp04taifvc.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334546
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n  const result = [];\n  const seen = new Set<number>();\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n    }\n    seen.add(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp_l8qh3ua.js:20:12)\n    at Object.<anonymous> (/tmp/tmp_l8qh3ua.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334551
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            result.push(numbers[i]);\n            seen.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp0lfa6h7l.js:19:12)\n    at Object.<anonymous> (/tmp/tmp0lfa6h7l.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    let seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            seen.push(numbers[i]);\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp69dq6dcw.js:19:12)\n    at Object.<anonymous> (/tmp/tmp69dq6dcw.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334546
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.has(numbers[i])) {\n            continue;\n        }\n        result.push(numbers[i]);\n        seen.add(numbers[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpqw1kgkzy.js:20:12)\n    at Object.<anonymous> (/tmp/tmpqw1kgkzy.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334551
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        const number = numbers[i];\n        if (seen.indexOf(number) >= 0) {\n            continue;\n        }\n        seen.push(number);\n        result.push(number);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpblpbmn1d.js:21:12)\n    at Object.<anonymous> (/tmp/tmpblpbmn1d.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334552
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis solution doesn't preserve the order of the original array\n<|/ c |>\n<| c |>\nYes, it does not. But the OP didn't ask for that. He asked for \"remove all elements that occur more than once\"\n<|/ c |>\n<| c |>\nYes, I missed that part. Sorry\n<|/ c |>\n<| a dscore=2 |>\n<code>\nconst numbers = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpb6po8a75.ts(15,2): error TS1110: Type expected.\n../../../../tmp/tmpb6po8a75.ts(15,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpb6po8a75.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmpb6po8a75.ts(16,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpb6po8a75.ts(17,2): error TS1109: Expression expected.\n../../../../tmp/tmpb6po8a75.ts(17,7): error TS1109: Expression expected.\n../../../../tmp/tmpb6po8a75.ts(18,6): error TS1005: ';' expected.\n../../../../tmp/tmpb6po8a75.ts(18,15): error TS1434: Unexpected keyword or identifier.\n../../../../tmp/tmpb6po8a75.ts(18,63): error TS1002: Unterminated string literal.\n../../../../tmp/tmpb6po8a75.ts(19,2): error TS1109: Expression expected.\n../../../../tmp/tmpb6po8a75.ts(19,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmpb6po8a75.ts(20,2): error TS1109: Expression expected.\n../../../../tmp/tmpb6po8a75.ts(20,7): error TS1109: Expression expected.\n../..",
      "timestamp": 1660334552
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp4l_fsff1.js:20:12)\n    at Object.<anonymous> (/tmp/tmp4l_fsff1.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp4l_fsff1.js:20:12)\n    at Object.<anonymous> (/tmp/tmp4l_fsff1.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const seen: number[] = [];\n    const result: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            seen.push(numbers[i]);\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp2rsad5az.js:19:12)\n    at Object.<anonymous> (/tmp/tmp2rsad5az.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334552
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    let seen = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) !== -1) {\n            continue;\n        }\n        seen.push(numbers[i]);\n        result.push(numbers[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpd4bjr2hn.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd4bjr2hn.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334552
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpytqsq9jj.js:20:12)\n    at Object.<anonymous> (/tmp/tmpytqsq9jj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp4l_fsff1.js:20:12)\n    at Object.<anonymous> (/tmp/tmp4l_fsff1.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    numbers.forEach((num) => {\n        if (seen.indexOf(num) === -1) {\n            seen.push(num);\n            result.push(num);\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp_wbpjboe.js:19:12)\n    at Object.<anonymous> (/tmp/tmp_wbpjboe.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334542
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const seen: Set<number> = new Set();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        uniqueNumbers.push(num);\n    });\n    return uniqueNumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp747kx08s.js:20:12)\n    at Object.<anonymous> (/tmp/tmp747kx08s.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334546
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((n) => {\n        if (seen.has(n)) {\n            return;\n        }\n        seen.add(n);\n        result.push(n);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpoo8zp_wc.js:20:12)\n    at Object.<anonymous> (/tmp/tmpoo8zp_wc.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const numberSet = new Set<number>();\n    numbers.forEach((number) => {\n        if (numberSet.has(number)) {\n            return;\n        }\n        numberSet.add(number);\n        uniqueNumbers.push(number);\n    });\n    return uniqueNumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpab31h2fz.js:20:12)\n    at Object.<anonymous> (/tmp/tmpab31h2fz.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const seen = new Set<number>();\n    const result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.has(numbers[i])) {\n            continue;\n        }\n        seen.add(numbers[i]);\n        result.push(numbers[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmppm2wdych.js:20:12)\n    at Object.<anonymous> (/tmp/tmppm2wdych.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334552
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp5901nkvo.js:20:12)\n    at Object.<anonymous> (/tmp/tmp5901nkvo.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 2,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    let result: number[] = [];\n    let seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            result.push(numbers[i]);\n            seen.push(numbers[i]);\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,javascript,typescript |>\n<| a dscore=1 |>\n<code>\nconst arr = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp1n2dqeqj.ts(14,2): error TS1110: Type expected.\n../../../../tmp/tmp1n2dqeqj.ts(14,3): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp1n2dqeqj.ts(15,2): error TS1109: Expression expected.\n../../../../tmp/tmp1n2dqeqj.ts(15,4): error TS1161: Unterminated regular expression literal.\n../../../../tmp/tmp1n2dqeqj.ts(16,2): error TS1109: Expression expected.\n../../../../tmp/tmp1n2dqeqj.ts(16,6): error TS1005: ';' expected.\n../../../../tmp/tmp1n2dqeqj.ts(16,16): error TS1109: Expression expected.\n../../../../tmp/tmp1n2dqeqj.ts(18,1): error TS1109: Expression expected.\n../../../../tmp/tmp1n2dqeqj.ts(19,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334552
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const uniqueNumbers: number[] = [];\n    const numberSet = new Set(numbers);\n    for (const num of numberSet) {\n        if (uniqueNumbers.indexOf(num) === -1) {\n            uniqueNumbers.push(num);\n        }\n    }\n    return uniqueNumbers;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpsbja1oa2.js:18:12)\n    at Object.<anonymous> (/tmp/tmpsbja1oa2.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334552
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        seen.add(num);\n        result.push(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp4l_fsff1.js:20:12)\n    at Object.<anonymous> (/tmp/tmp4l_fsff1.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((num) => {\n        if (seen.has(num)) {\n            return;\n        }\n        seen.add(num);\n        result.push(num);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpytqsq9jj.js:20:12)\n    at Object.<anonymous> (/tmp/tmpytqsq9jj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set();\n    numbers.forEach((n) => {\n        if (!seen.has(n)) {\n            seen.add(n);\n            result.push(n);\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpbwjh5gij.js:19:12)\n    at Object.<anonymous> (/tmp/tmpbwjh5gij.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334552
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: Set<number> = new Set();\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.has(numbers[i])) {\n            continue;\n        }\n        result.push(numbers[i]);\n        seen.add(numbers[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpm8nzywpd.js:20:12)\n    at Object.<anonymous> (/tmp/tmpm8nzywpd.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334552
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach((n) => {\n        if (seen.has(n)) {\n            return;\n        }\n        seen.add(n);\n        result.push(n);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpoo8zp_wc.js:20:12)\n    at Object.<anonymous> (/tmp/tmpoo8zp_wc.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334543
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    for (const num of numbers) {\n        if (seen.has(num)) {\n            continue;\n        }\n        result.push(num);\n        seen.add(num);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp1u7ggbcd.js:20:12)\n    at Object.<anonymous> (/tmp/tmp1u7ggbcd.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334550
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n  const result = [];\n  const seen = new Set();\n  for (const num of numbers) {\n    if (seen.has(num)) {\n      continue;\n    }\n    seen.add(num);\n    result.push(num);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpeqma1icz.js:20:12)\n    at Object.<anonymous> (/tmp/tmpeqma1icz.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334552
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result = [];\n    const seen = new Set<number>();\n    numbers.forEach(n => {\n        if (seen.has(n)) {\n            return;\n        }\n        result.push(n);\n        seen.add(n);\n    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmpyv_rigi2.js:20:12)\n    at Object.<anonymous> (/tmp/tmpyv_rigi2.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334552
    },
    {
      "exit_code": 1,
      "program": "//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\nfunction remove_duplicates(numbers: number[]): number[] {\n    const result: number[] = [];\n    const seen: number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.indexOf(numbers[i]) === -1) {\n            result.push(numbers[i]);\n            seen.push(numbers[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  4,\n  5\n]\n    at test (/tmp/tmp0lfa6h7l.js:19:12)\n    at Object.<anonymous> (/tmp/tmp0lfa6h7l.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3, 4, 5 ],\n  expected: [ 1, 4, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660334539
    }
  ]
}