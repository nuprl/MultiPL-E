language: ts
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_right = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let\
    \ vowels_count_from_right_to_middle_to_left = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right\
    \ = vowels_count - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy2w6x2qc.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountRight = vowelsCount - 1;\n    let vowelsCountLeft\
    \ = vowelsCount - 2;\n    let vowelsCountBoth = vowelsCount - 3;\n    let vowelsCountBothRight\
    \ = vowelsCountBoth - 1;\n    let vowelsCountBothLeft = vowelsCountBoth - 2;\n\
    \    let vowelsCountBothBoth = vowelsCountBoth - 3;\n    let vowelsCountBothBothRight\
    \ = vowelsCountBothBoth - 1;\n    let vowelsCountBothBothLeft = vowelsCountBothBoth\
    \ - 2;\n    let vowelsCountBothBothBoth = vowelsCountBothBoth - 3;\n    let vowelsCountBothBothBothRight\
    \ = vowelsCountBothBothBoth - 1;\n    let vowelsCountBothBothBothLeft = vowelsCountBothBothBoth\
    \ - 2;\n    let vowelsCountBothBothBoth = vowelsCountBothBothBoth - 3;\n    let\
    \ vowelsCountBothBothBothBothRight = vowelsCountBothBothBothBoth - 1;\n    let\
    \ vowelsCountBothBothBothBothLeft = vowelsCountBothBothBothBoth - 2;\n    let\
    \ vowelsCountBothBothBothBoth = vowelsCountBothBothBothBoth - 3;\n    let vowelsCountBothBothBothBothBothRight\
    \ = vowelsCountBothBothBothBothBoth - 1;\n    let vowelsCountBothBothBothBothLeft\
    \ = vowelsCountBothBothBothBoth - 2;\n    let vowelsCountBothBothBothBoth = vowelsCountBothBothBothBoth\
    \ - 3;\n    let vowelsCountBothBothBothBothBothRight = vowelsCountBothBothBothBothBoth\
    \ - 1;\n    let vowelsCountBothBothBothBothLeft = vowelsCountBothBothBothBoth\
    \ - 2;\n    let vowelsCountBothBothBothBoth = vowelsCountBothBothBothBoth - 3;\n\
    \    let vowelsCountBothBothBothBothBothRight = vowelsCountBothBothBothBothBoth\
    \ - 1;\n    let vowelsCountBothBothBothBothLeft = vowelsCountBothBothBothBoth\
    \ - 2;\n    let vowelsCountBothBothBothBoth = vowelsCountBothBothBothBoth - 3;\n\
    \    let vowelsCountBothBothBothBothBothRight = vowelsCountBothBothBothBothBoth\
    \ - 1;\n    let vowelsCountBothBothBothBothLeft = vowelsCountBothBothBothBoth\
    \ - 2;\n    let vowelsCountBothBothBothBoth = vowelsCountBothBothBothBoth - 3;\n\
    \    let vowelsCountBothBothBothBothBothRight = vowelsCountBothBothBothBothBoth\
    \ - \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp__5dwqof.ts(38,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp__5dwqof.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle_right = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle_left = vowels_count - 8;\n \
    \   let vowels_count_from_middle_to_left_to_right = vowels_count - 9;\n    let\
    \ vowels_count_from_left_to_middle_right_to_left = vowels_count - 10;\n    let\
    \ vowels_count_from_right_to_middle_left_to_right = vowels_count - 11;\n    let\
    \ vowels_count_from_middle_to_left_to_right_to_left = vowels_count - 12;\n   \
    \ let vowels_count_from_left_to_middle_right_to_left_to_right = vowels_count -\
    \ 13;\n    let vowels_count_from_right_to_middle_left_to_right_to_left = vowels_count\
    \ - 14;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right =\
    \ vowels_count - 15;\n    let vowels_count_from_left_to_middle_right_to_left_to_right_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_middle_left_to_right_to_left_to_right\
    \ = vowels_count - 17;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_middle_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_middle_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_middle_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_middle_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_middle_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_middle_left_to_right_to_left_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_e7cbp33.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtgm6hsc.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3\
    \ = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5\
    \ = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7\
    \ = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9\
    \ = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11\
    \ = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13\
    \ = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15\
    \ = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17\
    \ = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19\
    \ = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21\
    \ = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23\
    \ = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25\
    \ = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27\
    \ = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29\
    \ = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31\
    \ = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33\
    \ = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35\
    \ = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37\
    \ = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39\
    \ = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41\
    \ = vowelsCount - 40;\n    let vowels\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvwysex3k.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtgm6hsc.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n\
    \    let consonantsIndex = 0;\n    let consonantsCountIndex = 0;\n    let consonantsCount\
    \ = 0;\n    let consonantsCountMax = word.length - 1;\n    let consonantsCountMin\
    \ = 0;\n    let consonantsCountMaxIndex = 0;\n    let consonantsCountMinIndex\
    \ = 0;\n    let consonantsCountMaxVowels = 0;\n    let consonantsCountMinVowels\
    \ = 0;\n    let consonantsCountMaxVowelsIndex = 0;\n    let consonantsCountMinVowelsIndex\
    \ = 0;\n    let consonantsCountMaxVowelsCount = 0;\n    let consonantsCountMinVowelsCount\
    \ = 0;\n    let consonantsCountMaxVowelsCountIndex = 0;\n    let consonantsCountMinVowelsCountIndex\
    \ = 0;\n    let consonantsCountMaxVowelsCountMax = 0;\n    let consonantsCountMinVowelsCountMax\
    \ = 0;\n    let consonantsCountMaxVowelsCountMaxIndex = 0;\n    let consonantsCountMinVowelsCountMaxIndex\
    \ = 0;\n    let consonantsCountMaxVowelsCountMin = 0;\n    let consonantsCountMinVowelsCountMin\
    \ = 0;\n    let consonantsCountMaxVowelsCountMinIndex = 0;\n    let consonantsCountMinVowelsCountMinIndex\
    \ = 0;\n    let consonantsCountMaxVowelsCountMinMax = 0;\n    let consonantsCountMinVowelsCountMinMax\
    \ = 0;\n    let consonantsCountMaxVowelsCountMinMaxIndex = 0;\n    let consonantsCountMinVowelsCountMinMaxIndex\
    \ = 0;\n    let consonantsCountMaxVowelsCountMinMin = 0;\n    let consonantsCountMinVowelsCountMinMin\
    \ = 0;\n    let consonantsCountMaxVowelsCountMinMinIndex = 0;\n    let consonantsCountMinVowelsCountMinMinIndex\
    \ = 0;\n    let consonantsCountMaxVowelsCountMinMinMax = 0;\n    let consonantsCountMinVowelsCountMinMinMax\
    \ = 0;\n    let consonantsCountMaxVowelsCountMinMinMaxIndex = 0;\n    let consonantsCountMinVowelsCountMinMinMaxIndex\
    \ = 0;\n    let consonantsCountMaxVowelsCountMinMin\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_77enm5i.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count\
    \ = vowels.length;\n    let vowel_count_from_right = vowel_count - 1;\n    let\
    \ vowel_count_from_left = vowel_count - 2;\n    let vowel_count_from_middle =\
    \ vowel_count - 3;\n    let vowel_count_from_left_to_right = vowel_count_from_right\
    \ - 1;\n    let vowel_count_from_right_to_left = vowel_count_from_left - 1;\n\
    \    let vowel_count_from_middle_to_right = vowel_count_from_right - 2;\n    let\
    \ vowel_count_from_left_to_middle = vowel_count_from_middle - 1;\n    let vowel_count_from_right_to_middle\
    \ = vowel_count_from_middle - 2;\n    let vowel_count_from_middle_to_left = vowel_count_from_left\
    \ - 2;\n    let vowel_count_from_left_to_left_to_right = vowel_count_from_left_to_right\
    \ - 1;\n    let vowel_count_from_right_to_left_to_middle = vowel_count_from_right_to_middle\
    \ - 1;\n    let vowel_count_from_middle_to_right_to_left = vowel_count_from_middle_to_left\
    \ - 1;\n    let vowel_count_from_left_to_right_to_middle = vowel_count_from_right_to_middle\
    \ - 2;\n    let vowel_count_from_right_to_right_to_middle = vowel_count_from_middle_to_right\
    \ - 2;\n    let vowel_count_from_middle_to_left_to_right = vowel_count_from_left_to_right\
    \ - 3;\n    let vowel_count_from_left_to_middle_to_right = vowel_count_from_middle_to_right\
    \ - 3;\n    let vowel_count_from_right_to_middle_to_left = vowel_count_from_right_to_middle\
    \ - 3;\n    let vowel_count_from_middle_to_left_to_middle = vowel_count_from_middle_to_left\
    \ - 3;\n    let vowel_count_from_left_to_right_to_middle_to_left = vowel_count_from_left_to_middle_to_left\
    \ - 3;\n    let vowel_count_from_right_to_middle_to_right_to_middle = vowel_count_from_right_to_middle_to_right\
    \ - 3;\n    let vowel_count_from_middle_to_left_to_right_to_middle_to_left = vowel_count_from_middle_to_left_to_right_to_middle_to_left\
    \ - 3;\n    let vowel_count_from_right_to_middle_to_right_to_middle_to_right =\
    \ vowel_count_from_middle_to_right_to_middle_to_right - 3;\n    let vowel_count_from_middle_to_left_to_right_to_middle_to_right_to_middle\
    \ = vowel_count_from_middle_to_left_to_right_to_middle_to_right - 3;\n    let\
    \ vowel_count_from_right_to_middle_to_right_to_middle_to_right_to_middle = vowel_count_from_middle_to_right_to_middle_to_right_to_middle\
    \ - 3;\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpquhi91fo.ts(35,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpquhi91fo.ts(56,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtgm6hsc.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_right = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n\
    \    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count -\
    \ 15;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_middle =\
    \ vowels_count - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiap07frt.ts(36,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpiap07frt.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_right = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let\
    \ vowels_count_from_right_to_middle_to_left = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right\
    \ = vowels_count - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_right_to_left_to_right_to_middle\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt4krfvb0.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count\
    \ = 0;\n    let consonants = 'bcdfghjklmnpqrstvwxyz';\n    let consonant_count\
    \ = 0;\n    let vowel_position = 0;\n    let consonant_position = 0;\n    let\
    \ vowel_found = false;\n    let consonant_found = false;\n    let vowel_positions\
    \ = [];\n    let consonant_positions = [];\n    \n    for (let i = 0; i < word.length;\
    \ i++) {\n        if (vowels.includes(word[i])) {\n            vowel_found = true;\n\
    \            vowel_positions.push(vowel_position);\n            vowel_count++;\n\
    \        }\n        if (consonants.includes(word[i])) {\n            consonant_found\
    \ = true;\n            consonant_positions.push(consonant_position);\n       \
    \     consonant_count++;\n        }\n        vowel_position++;\n        consonant_position++;\n\
    \    }\n    \n    if (vowel_count === 0 && consonant_count === 0) {\n        return\
    \ '';\n    }\n    \n    if (vowel_count > consonant_count) {\n        vowel_positions.sort((a,\
    \ b) => a - b);\n        vowel_positions.reverse();\n        vowel_positions.forEach((position)\
    \ => {\n            if (vowel_positions[position] === vowel_position) {\n    \
    \            vowel_found = true;\n                vowel_position = position;\n\
    \            }\n        });\n    }\n    else {\n        consonant_positions.sort((a,\
    \ b) => a - b);\n        consonant_positions.reverse();\n        consonant_positions.forEach((position)\
    \ => {\n            if (consonant_positions[position] === consonant_position)\
    \ {\n                consonant_found = true;\n                consonant_position\
    \ = position;\n            }\n        });\n    }\n    \n    if (vowel_found &&\
    \ consonant_found) {\n        return word[vowel_positions[vowel_position - 1]\
    \ + consonant_positions[consonant_position - 1]];\n    }\n    else {\n       \
    \ return '';\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwco625k2.ts(20,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    ../../../../../tmp/tmpwco625k2.ts(25,24): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3\
    \ = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5\
    \ = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7\
    \ = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9\
    \ = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11\
    \ = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13\
    \ = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15\
    \ = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17\
    \ = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19\
    \ = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21\
    \ = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23\
    \ = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25\
    \ = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27\
    \ = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29\
    \ = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31\
    \ = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33\
    \ = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35\
    \ = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37\
    \ = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39\
    \ = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41\
    \ = vowelsCount - 40;\n    let vowels\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvwysex3k.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count\
    \ = vowels.filter(v => word.endsWith(v)).map(v => v).length;\n    let consonant_count\
    \ = word.match(/[b-df-hj-np-tv-z]/g).length;\n    let vowel_pos = word.lastIndexOf('e');\n\
    \    let consonant_pos = word.lastIndexOf('z');\n    let vowel_pos = word.lastIndexOf('e');\n\
    \    let consonant_pos = word.lastIndexOf('z');\n    let vowel_pos = word.lastIndexOf('e');\n\
    \    let consonant_pos = word.lastIndexOf('z');\n    let vowel_pos = word.lastIndexOf('e');\n\
    \    let consonant_pos = word.lastIndexOf('z');\n    let vowel_pos = word.lastIndexOf('e');\n\
    \    let consonant_pos = word.lastIndexOf('z');\n    let vowel_pos = word.lastIndexOf('e');\n\
    \    let consonant_pos = word.lastIndexOf('z');\n    let vowel_pos = word.lastIndexOf('e');\n\
    \    let consonant_pos = word.lastIndexOf('z');\n    let vowel_pos = word.lastIndexOf('e');\n\
    \    let consonant_pos = word.lastIndexOf('z');\n    let vowel_pos = word.lastIndexOf('e');\n\
    \    let consonant_pos = word.lastIndexOf('z');\n    let vowel_pos = word.lastIndexOf('e');\n\
    \    let consonant_pos = word.lastIndexOf('z');\n    let vowel_pos = word.lastIndexOf('e');\n\
    \    let consonant_pos = word.lastIndexOf('z');\n    let vowel_pos = word.lastIndexOf('e');\n\
    \    let consonant_pos = word.lastIndexOf('z');\n    let vowel_pos = word.lastIndexOf('e');\n\
    \    let consonant_pos = word.lastIndexOf('z');\n    let vowel_pos = word.lastIndexOf('e');\n\
    \    let consonant_pos = word.lastIndexOf('z');\n    let vowel_pos = word.lastIndexOf('e');\n\
    \    let consonant_pos = word.lastIndexOf('z');\n    let vowel_pos = word.lastIndexOf('e');\n\
    \    let consonant_pos = word.lastIndexOf('z');\n    let vowel_pos = word.lastIndexOf('e');\n\
    \    let consonant_pos = word.lastIndexOf('z');\n    let vowel_pos = word.lastIndexOf('e');\n\
    \    let consonant_pos = word.lastIndexOf('z');\n    let vowel_pos = word.lastIndexOf('e');\n\
    \    let consonant_pos = word.lastIndexOf('z');\n    let vowel_pos = word.lastIndexOf('e');\n\
    \    let consonant_pos = word.lastIndexOf\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7iahem6o.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromLeftAndRight = vowelsCount - 4;\n    let vowelsCountFromRightAndLeftAndUp\
    \ = vowelsCount - 5;\n    let vowelsCountFromLeftAndRightAndUp = vowelsCount -\
    \ 6;\n    let vowelsCountFromRightAndLeftAndUpAndDown = vowelsCount - 7;\n   \
    \ let vowelsCountFromLeftAndRightAndUpAndDown = vowelsCount - 8;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDown\
    \ = vowelsCount - 9;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndDown\
    \ = vowelsCount - 10;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 11;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 12;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 13;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 14;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 15;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 16;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 17;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 18;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 19;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndDownAndDownAndDownAndDownAndDown\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkyajjnnu.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromRightAndLeftAndUpper = vowelsCount - 4;\n    let vowelsCountFromRightAndLeftAndUpperAndLowers\
    \ = vowelsCount - 5;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbers\
    \ = vowelsCount - 6;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuation\
    \ = vowelsCount - 7;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthers\
    \ = vowelsCount - 8;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthers\
    \ = vowelsCount - 9;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthers\
    \ = vowelsCount - 10;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 11;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 12;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 13;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 14;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 15;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 16;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 17;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowel\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaprg27p4.ts(49,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_right = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let\
    \ vowels_count_from_right_to_middle_to_left = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right\
    \ = vowels_count - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_middle_to_right_to_left_to_middle_to_right\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2_lfk8ml.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n\
    \    let vowelsCountMin = vowelsCount;\n    let vowelsCountMax = vowelsCount;\n\
    \    let vowelsCountSum = 0;\n    let vowelsCountSumMin = vowelsCount;\n    let\
    \ vowelsCountSumMax = vowelsCount;\n    let vowelsCountSumSum = 0;\n    let vowelsCountSumSumMin\
    \ = vowelsCount;\n    let vowelsCountSumSumMax = vowelsCount;\n    let vowelsCountSumSumSum\
    \ = 0;\n    let vowelsCountSumSumSumMin = vowelsCount;\n    let vowelsCountSumSumSumMax\
    \ = vowelsCount;\n    let vowelsCountSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumMin\
    \ = vowelsCount;\n    let vowelsCountSumSumSumSumMax = vowelsCount;\n    let vowelsCountSumSumSumSumSum\
    \ = 0;\n    let vowelsCountSumSumSumSumSumMin = vowelsCount;\n    let vowelsCountSumSumSumSumSumMax\
    \ = vowelsCount;\n    let vowelsCountSumSumSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumSumSumMin\
    \ = vowelsCount;\n    let vowelsCountSumSumSumSumSumMax = vowelsCount;\n    let\
    \ vowelsCountSumSumSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumSumSumMin\
    \ = vowelsCount;\n    let vowelsCountSumSumSumSumSumSumMax = vowelsCount;\n  \
    \  let vowelsCountSumSumSumSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumSumSumMin\
    \ = vowelsCount;\n    let vowelsCountSumSumSumSumSumSumMax = vowelsCount;\n  \
    \  let vowelsCountSumSumSumSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumSumSumMin\
    \ = vowelsCount;\n    let vowelsCountSumSumSumSumSumSumMax = vowelsCount;\n  \
    \  let vowelsCountSumSumSumSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumSumSumMin\
    \ = vowelsCount;\n    let vowelsCountSumSumSumSumSumSumMax = vowelsCount;\n  \
    \  let vowelsCountSumSumSumSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumSumSumSumMin\
    \ = vowelsCount;\n    let vowelsCountSumSumSumSumSumSum\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpggsy2tp5.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    for (let i = 0; i < vowelsCount;\
    \ i++) {\n        let index = word.indexOf(vowels[i]);\n        if (index > -1)\
    \ {\n            vowelsIndex.push(index);\n        }\n    }\n    let vowelsIndex\
    \ = vowelsIndex.sort((a, b) => a - b);\n    let vowelsCount = vowelsIndex.length;\n\
    \    let vowelsIndexLast = vowelsIndex[vowelsCount - 1];\n    let vowelsIndexFirst\
    \ = vowelsIndex[0];\n    let vowelsIndexMiddle = vowelsIndex[vowelsCount / 2];\n\
    \    let vowelsIndexMiddle2 = vowelsIndex[vowelsCount / 2 - 1];\n    let vowelsIndexMiddle3\
    \ = vowelsIndex[vowelsCount / 2 - 2];\n    let vowelsIndexMiddle4 = vowelsIndex[vowelsCount\
    \ / 2 - 3];\n    let vowelsIndexMiddle5 = vowelsIndex[vowelsCount / 2 - 4];\n\
    \    let vowelsIndexMiddle6 = vowelsIndex[vowelsCount / 2 - 5];\n    let vowelsIndexMiddle7\
    \ = vowelsIndex[vowelsCount / 2 - 6];\n    let vowelsIndexMiddle8 = vowelsIndex[vowelsCount\
    \ / 2 - 7];\n    let vowelsIndexMiddle9 = vowelsIndex[vowelsCount / 2 - 8];\n\
    \    let vowelsIndexMiddle10 = vowelsIndex[vowelsCount / 2 - 9];\n    let vowelsIndexMiddle11\
    \ = vowelsIndex[vowelsCount / 2 - 10];\n    let vowelsIndexMiddle12 = vowelsIndex[vowelsCount\
    \ / 2 - 11];\n    let vowelsIndexMiddle13 = vowelsIndex[vowelsCount / 2 - 12];\n\
    \    let vowelsIndexMiddle14 = vowelsIndex[vowelsCount / 2 - 13];\n    let vowelsIndexMiddle15\
    \ = vowelsIndex[vowelsCount / 2 - 14];\n    let vowelsIndexMiddle16 = vowelsIndex[vowelsCount\
    \ / 2 - 15];\n    let vowelsIndexMiddle17 = vowelsIndex[vowelsCount / 2 - 16];\n\
    \    let vowelsIndexMiddle18 = vowelsIndex[vowelsCount / 2 - 17];\n    let vowelsIndexMiddle19\
    \ = vowelsIndex[vowelsCount / 2 - 18];\n    let vowelsIndexMiddle20 = vowelsIndex[vowelsCount\
    \ / 2 - 19];\n    let vowelsIndexMiddle21 = vowelsIndex[vowelsCount / 2 - 20];\n\
    \    let vowelsIndexMiddle22 = vowelsIndex[vowelsCount / 2 - 21];\n    let vowel\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp22hyaj0.ts(65,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count\
    \ = vowels.length;\n    let vowel_index = 0;\n    let vowel_found = false;\n \
    \   let consonant_index = word.length - 1;\n    let consonant_found = false;\n\
    \    while (vowel_found === false && consonant_found === false) {\n        if\
    \ (word[vowel_index] === word[vowel_index + 1]) {\n            vowel_found = true;\n\
    \            vowel_index++;\n        }\n        if (word[consonant_index] ===\
    \ word[consonant_index - 1]) {\n            consonant_found = true;\n        \
    \    consonant_index--;\n        }\n        if (vowel_found === true && consonant_found\
    \ === true) {\n            break;\n        }\n    }\n    if (vowel_found === true)\
    \ {\n        return word[vowel_index];\n    }\n    if (consonant_found === true)\
    \ {\n        return word[consonant_index];\n    }\n    return '';\n}\nget_closest_vowel(\"\
    hello\"); // returns 'o'\nget_closest_vowel(\"hey\"); // returns ''\nget_closest_vowel(\"\
    heyhey\"); // returns ''\nget_closest_vowel(\"heyheyhey\"); // returns ''\nget_closest_vowel(\"\
    heyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyheyhey\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp250v5qzw.ts(39,437): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmp250v5qzw.ts(40,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp250v5qzw.ts(40,9): error TS1005: '','' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromLeftAndRight = vowelsCount - 4;\n    let vowelsCountFromLeftAndRightAndLeft\
    \ = vowelsCount - 5;\n    let vowelsCountFromLeftAndRightAndLeftAndRight = vowelsCount\
    \ - 6;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeft = vowelsCount\
    \ - 7;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRight = vowelsCount\
    \ - 8;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 9;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 10;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 11;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 12;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 13;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 14;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 15;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 16;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 17;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 18;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAnd\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkjmq6gtl.ts(50,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromBoth = vowelsCount - 3;\n    let\
    \ vowelsCountFromBothAndRight = vowelsCount - 4;\n    let vowelsCountFromBothAndLeft\
    \ = vowelsCount - 5;\n    let vowelsCountFromBothAndBoth = vowelsCount - 6;\n\
    \    let vowelsCountFromBothAndBothAndRight = vowelsCount - 7;\n    let vowelsCountFromBothAndBothAndLeft\
    \ = vowelsCount - 8;\n    let vowelsCountFromBothAndBothAndBoth = vowelsCount\
    \ - 9;\n    let vowelsCountFromBothAndBothAndBothAndRight = vowelsCount - 10;\n\
    \    let vowelsCountFromBothAndBothAndBothAndLeft = vowelsCount - 11;\n    let\
    \ vowelsCountFromBothAndBothAndBothAndBoth = vowelsCount - 12;\n    let vowelsCountFromBothAndBothAndBothAndBothAndRight\
    \ = vowelsCount - 13;\n    let vowelsCountFromBothAndBothAndBothAndBothAndLeft\
    \ = vowelsCount - 14;\n    let vowelsCountFromBothAndBothAndBothAndBothAndBoth\
    \ = vowelsCount - 15;\n    let vowelsCountFromBothAndBothAndBothAndBothAndBothAndRight\
    \ = vowelsCount - 16;\n    let vowelsCountFromBothAndBothAndBothAndBothAndBothAndLeft\
    \ = vowelsCount - 17;\n    let vowelsCountFromBothAndBothAndBothAndBothAndBothAndBoth\
    \ = vowelsCount - 18;\n    let vowelsCountFromBothAndBothAndBothAndBothAndBothAndBothAndRight\
    \ = vowelsCount - 19;\n    let vowelsCountFromBothAndBothAndBothAndBothAndBothAndBothAndLeft\
    \ = vowelsCount - 20;\n    let vowelsCountFromBothAndBothAndBothAndBothAndBothAndBothAndBoth\
    \ = vowelsCount - 21;\n    let vowelsCountFromBothAndBothAndBothAndBothAndBothAndBothAndBothAndRight\
    \ = vowelsCount - 22;\n    let vowelsCountFromBothAndBothAndBothAndBothAndBothAndBothAndBothAndBothAndLeft\
    \ = vowelsCount - 23;\n    let vowelsCountFromBothAndBothAndBothAndBothAndBothAndBothAndBothAndBothAndBoth\
    \ = vowelsCount - 24;\n    let vowelsCountFromBothAndBothAndBoth\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnenhbyhl.ts(56,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountInWord = word.length;\n    let vowelsCountInWordInReverse\
    \ = word.length + 1 - vowelsCountInWord;\n    let vowelsCountInWordInReverseInReverse\
    \ = vowelsCountInWordInReverse + 1 - vowelsCountInWord;\n    let vowelsCountInWordInReverseInReverseInReverse\
    \ = vowelsCountInWordInReverseInReverse + 1 - vowelsCountInWordInReverse;\n  \
    \  let vowelsCountInWordInReverseInReverseInReverseInReverse = vowelsCountInWordInReverseInReverseInReverse\
    \ + 1 - vowelsCountInWordInReverseInReverse;\n    let vowelsCountInWordInReverseInReverseInReverseInReverseInReverse\
    \ = vowelsCountInWordInReverseInReverseInReverseInReverse + 1 - vowelsCountInWordInReverseInReverseInReverseInReverse;\n\
    \    let vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverse\
    \ = vowelsCountInWordInReverseInReverseInReverseInReverseInReverse + 1 - vowelsCountInWordInReverseInReverseInReverseInReverseInReverse;\n\
    \    let vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverseInReverse\
    \ = vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverse +\
    \ 1 - vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverse;\n\
    \    let vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverseInReverse\
    \ = vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverse +\
    \ 1 - vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverse;\n\
    \    let vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverseInReverse\
    \ = vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverse +\
    \ 1 - vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverse;\n\
    \    let vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverseInReverse\
    \ = vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverse +\
    \ 1 - vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverse;\n\
    \    let vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverseIn\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsmaz8hg0.ts(43,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count\
    \ = vowels.length;\n    let vowel_count_from_right = vowel_count - 1;\n    let\
    \ vowel_count_from_left = vowel_count - 2;\n    let vowel_count_from_middle =\
    \ vowel_count - 3;\n    let vowel_count_from_left_to_right = vowel_count_from_right\
    \ - 1;\n    let vowel_count_from_right_to_left = vowel_count_from_left - 1;\n\
    \    let vowel_count_from_middle_to_left = vowel_count_from_left - 2;\n    let\
    \ vowel_count_from_middle_to_right = vowel_count_from_right - 2;\n    let vowel_count_from_left_to_middle\
    \ = vowel_count_from_middle - 1;\n    let vowel_count_from_right_to_middle = vowel_count_from_middle\
    \ - 2;\n    let vowel_count_from_middle_to_middle = vowel_count_from_middle -\
    \ 3;\n    let vowel_count_from_left_to_right_to_middle = vowel_count_from_right_to_middle\
    \ - 1;\n    let vowel_count_from_right_to_left_to_middle = vowel_count_from_left_to_middle\
    \ - 1;\n    let vowel_count_from_middle_to_left_to_middle = vowel_count_from_left_to_middle\
    \ - 2;\n    let vowel_count_from_middle_to_right_to_middle = vowel_count_from_right_to_middle\
    \ - 2;\n    let vowel_count_from_left_to_middle_to_middle = vowel_count_from_middle_to_middle\
    \ - 1;\n    let vowel_count_from_right_to_middle_to_middle = vowel_count_from_middle_to_middle\
    \ - 2;\n    let vowel_count_from_middle_to_left_to_middle_to_middle = vowel_count_from_left_to_middle_to_middle\
    \ - 3;\n    let vowel_count_from_middle_to_right_to_middle_to_middle = vowel_count_from_right_to_middle_to_middle\
    \ - 3;\n    let vowel_count_from_left_to_right_to_middle_to_middle = vowel_count_from_middle_to_right_to_middle\
    \ - 3;\n    let vowel_count_from_right_to_left_to_middle_to_middle = vowel_count_from_left_to_middle_to_middle\
    \ - 3;\n    let vowel_count_from_middle_to_left_to_right_to_middle_to_middle =\
    \ vowel_count_from_right_to_left_to_middle_to_middle - 3;\n    let vowel_count_from_middle_to_right_to_left_to_middle_to_middle\
    \ = vowel_count_from_middle_to_left_to_right_to_middle_to_middle - 3;\n    let\
    \ vowel_count_from_middle_to_left_to_right_to_middle_to_middle = vowel_count_from_middle_to_right_to_left_to_middle_to_middle\
    \ - 3;\n    let vowel_count_from_middle_to_right_to_left_to_middle_to_middle =\
    \ vowel_count_from_middle_to_left_to_right_\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxsx6gta3.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - word.length;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_left + vowels_count_from_left;\n    let vowels_count_from_left_to_right_to_left\
    \ = vowels_count_from_right_to_left + vowels_count_from_left_to_right;\n    let\
    \ vowels_count_from_right_to_left_to_right = vowels_count_from_left_to_right_to_left\
    \ + vowels_count_from_right_to_right;\n    let vowels_count_from_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right + vowels_count_from_left_to_right_to_left;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left = vowels_count_from_left_to_right_to_left_to_right\
    \ + vowels_count_from_right_to_left_to_right;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right_to_left + vowels_count_from_left_to_right_to_left_to_right;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right = vowels_count_from_left_to_right_to_left_to_right_to_left\
    \ + vowels_count_from_right_to_left_to_right_to_left;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left + vowels_count_from_left_to_right_to_left_to_right_to_left;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ + vowels_count_from_right_to_left_to_right_to_left_to_right_to_left;\n    let\
    \ vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ + vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ + vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_pmi3snh.ts(46,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n\
    \    let vowelsCountMinusOne = vowelsCount - 1;\n    let vowelsCountMinusTwo =\
    \ vowelsCount - 2;\n    let vowelsCountMinusThree = vowelsCount - 3;\n    let\
    \ vowelsCountMinusFour = vowelsCount - 4;\n    let vowelsCountMinusFive = vowelsCount\
    \ - 5;\n    let vowelsCountMinusSix = vowelsCount - 6;\n    let vowelsCountMinusSeven\
    \ = vowelsCount - 7;\n    let vowelsCountMinusEight = vowelsCount - 8;\n    let\
    \ vowelsCountMinusNine = vowelsCount - 9;\n    let vowelsCountMinusTen = vowelsCount\
    \ - 10;\n    let vowelsCountMinusEleven = vowelsCount - 11;\n    let vowelsCountMinusTwelve\
    \ = vowelsCount - 12;\n    let vowelsCountMinusThirteen = vowelsCount - 13;\n\
    \    let vowelsCountMinusFourteen = vowelsCount - 14;\n    let vowelsCountMinusFifteen\
    \ = vowelsCount - 15;\n    let vowelsCountMinusSixteen = vowelsCount - 16;\n \
    \   let vowelsCountMinusSeventeen = vowelsCount - 17;\n    let vowelsCountMinusEighteen\
    \ = vowelsCount - 18;\n    let vowelsCountMinusNineteen = vowelsCount - 19;\n\
    \    let vowelsCountMinusTwenty = vowelsCount - 20;\n    let vowelsCountMinusTwentyOne\
    \ = vowelsCount - 21;\n    let vowelsCountMinusTwentyTwo = vowelsCount - 22;\n\
    \    let vowelsCountMinusTwentyThree = vowelsCount - 23;\n    let vowelsCountMinusTwentyFour\
    \ = vowelsCount - 24;\n    let vowelsCountMinusTwentyFive = vowelsCount - 25;\n\
    \    let vowelsCountMinusTwentySix = vowelsCount - 26;\n    let vowelsCountMinusTwentySeven\
    \ = vowelsCount - 27;\n    let vowelsCountMinusTwentyEight = vowelsCount - 28;\n\
    \    let vowelsCountMinusTwentyNine = vowelsCount - 29;\n    let vowelsCountMinusTwentyTen\
    \ = \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqyg5o5rg.ts(42,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpqyg5o5rg.ts(63,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtgm6hsc.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtgm6hsc.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3\
    \ = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5\
    \ = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7\
    \ = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9\
    \ = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11\
    \ = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13\
    \ = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15\
    \ = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17\
    \ = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19\
    \ = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21\
    \ = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23\
    \ = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25\
    \ = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27\
    \ = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29\
    \ = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31\
    \ = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33\
    \ = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35\
    \ = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37\
    \ = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39\
    \ = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41\
    \ = vowelsCount - 40;\n    let vowels\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvwysex3k.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtgm6hsc.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtgm6hsc.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left_to_right = vowels_count - 5;\n\
    \    let vowels_count_from_left_to_right_to_left = vowels_count - 6;\n    let\
    \ vowels_count_from_right_to_left_to_right_to_left = vowels_count - 7;\n    let\
    \ vowels_count_from_left_to_right_to_left_to_right = vowels_count - 8;\n    let\
    \ vowels_count_from_right_to_left_to_right_to_left_to_right = vowels_count - 9;\n\
    \    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 11;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 12;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 13;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 14;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 17;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 18;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 20;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgahkg9s6.ts(53,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014905
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtgm6hsc.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromLeftAndRight = vowelsCount - 4;\n    let vowelsCountFromLeftAndRightAndLeft\
    \ = vowelsCount - 5;\n    let vowelsCountFromLeftAndRightAndLeftAndRight = vowelsCount\
    \ - 6;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeft = vowelsCount\
    \ - 7;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRight = vowelsCount\
    \ - 8;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 9;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 10;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 11;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 12;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 13;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 14;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 15;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 16;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 17;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 18;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAnd\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkjmq6gtl.ts(50,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count\
    \ = 0;\n    let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    let consonant_count\
    \ = 0;\n    let vowel_found = false;\n    let consonant_found = false;\n    let\
    \ vowel_position = 0;\n    let consonant_position = 0;\n    let vowel_found =\
    \ false;\n    let consonant_found = false;\n    let vowel_position = 0;\n    let\
    \ consonant_position = 0;\n    let vowel_found = false;\n    let consonant_found\
    \ = false;\n    let vowel_position = 0;\n    let consonant_position = 0;\n   \
    \ let vowel_found = false;\n    let consonant_found = false;\n    let vowel_position\
    \ = 0;\n    let consonant_position = 0;\n    let vowel_found = false;\n    let\
    \ consonant_found = false;\n    let vowel_position = 0;\n    let consonant_position\
    \ = 0;\n    let vowel_found = false;\n    let consonant_found = false;\n    let\
    \ vowel_position = 0;\n    let consonant_position = 0;\n    let vowel_found =\
    \ false;\n    let consonant_found = false;\n    let vowel_position = 0;\n    let\
    \ consonant_position = 0;\n    let vowel_found = false;\n    let consonant_found\
    \ = false;\n    let vowel_position = 0;\n    let consonant_position = 0;\n   \
    \ let vowel_found = false;\n    let consonant_found = false;\n    let vowel_position\
    \ = 0;\n    let consonant_position = 0;\n    let vowel_found = false;\n    let\
    \ consonant_found = false;\n    let vowel_position = 0;\n    let consonant_position\
    \ = 0;\n    let vowel_found = false;\n    let consonant_found = false;\n    let\
    \ vowel_position = 0;\n    let consonant_position = 0;\n    let vowel_found =\
    \ false;\n    let consonant_found = false;\n    let vowel_position = 0;\n    let\
    \ consonant_position = 0;\n    let vowel_found = false;\n    let consonant_found\
    \ = false;\n    let vowel_position = 0;\n    let consonant_position = 0;\n   \
    \ let vowel_found = false;\n    let consonant_found = false;\n    let vowel_position\
    \ = 0;\n    let consonant_position = 0;\n    let vowel_found = false;\n    let\
    \ consonant_found = false;\n    let vowel_position = 0;\n    let consonant_position\
    \ = 0;\n    let vowel_found = false;\n    let consonant_found = false;\n    let\
    \ vowel_position = 0;\n    let consonant_position = 0;\n    let vowel_found =\
    \ false;\n    let consonant_found = false;\n    let vowel_position = 0;\n    let\
    \ consonant_position = 0;\n    let vowel_found = false;\n    let consonant_found\
    \ = false;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkmgm8kza.ts(104,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014905
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    for (let i = 0; i < vowelsCount;\
    \ i++) {\n        vowelsIndex.push(i);\n    }\n    let vowelsCount = vowelsIndex.length;\n\
    \    let vowelsIndexReverse = [];\n    for (let i = 0; i < vowelsCount; i++) {\n\
    \        vowelsIndexReverse.push(vowelsIndex.length - i);\n    }\n    let vowelsCount\
    \ = vowelsIndexReverse.length;\n    let vowelsIndexReverseCount = vowelsIndexReverse.length;\n\
    \    let vowelsIndexReverseCount2 = vowelsIndexReverseCount - 1;\n    let vowelsIndexReverseCount3\
    \ = vowelsIndexReverseCount - 2;\n    let vowelsIndexReverseCount4 = vowelsIndexReverseCount\
    \ - 3;\n    let vowelsIndexReverseCount5 = vowelsIndexReverseCount - 4;\n    let\
    \ vowelsIndexReverseCount6 = vowelsIndexReverseCount - 5;\n    let vowelsIndexReverseCount7\
    \ = vowelsIndexReverseCount - 6;\n    let vowelsIndexReverseCount8 = vowelsIndexReverseCount\
    \ - 7;\n    let vowelsIndexReverseCount9 = vowelsIndexReverseCount - 8;\n    let\
    \ vowelsIndexReverseCount10 = vowelsIndexReverseCount - 9;\n    let vowelsIndexReverseCount11\
    \ = vowelsIndexReverseCount - 10;\n    let vowelsIndexReverseCount12 = vowelsIndexReverseCount\
    \ - 11;\n    let vowelsIndexReverseCount13 = vowelsIndexReverseCount - 12;\n \
    \   let vowelsIndexReverseCount14 = vowelsIndexReverseCount - 13;\n    let vowelsIndexReverseCount15\
    \ = vowelsIndexReverseCount - 14;\n    let vowelsIndexReverseCount16 = vowelsIndexReverseCount\
    \ - 15;\n    let vowelsIndexReverseCount17 = vowelsIndexReverseCount - 16;\n \
    \   let vowelsIndexReverseCount18 = vowelsIndexReverseCount - 17;\n    let vowelsIndexReverseCount19\
    \ = vowelsIndexReverseCount - 18;\n    let vowelsIndexReverseCount20 = vowelsIndexReverseCount\
    \ - 19;\n    let vowelsIndexReverseCount21 = vowelsIndexReverseCount - 20;\n \
    \   let vowelsIndexReverseCount22 = vowelsIndexReverseCount - 21;\n    let vowelsIndexReverseCount23\
    \ = vowelsIndexReverseCount - 22;\n    let vowelsIndexReverseCount24 = vowelsIndexReverseCount\
    \ - 23;\n    let vowelsIndexReverseCount25 = vowelsIndexReverseCount - 24;\n \
    \   let vowelsIndexReverseCount26 = vowelsIndexReverseCount - 25;\n    let vowelsIndexReverseCount27\
    \ = vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpusj9eb99.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014905
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n\
    \    let vowelsCountIndex2 = 0;\n    let vowelsCountIndex3 = 0;\n    let vowelsCountIndex4\
    \ = 0;\n    let vowelsCountIndex5 = 0;\n    let vowelsCountIndex6 = 0;\n    let\
    \ vowelsCountIndex7 = 0;\n    let vowelsCountIndex8 = 0;\n    let vowelsCountIndex9\
    \ = 0;\n    let vowelsCountIndex10 = 0;\n    let vowelsCountIndex11 = 0;\n   \
    \ let vowelsCountIndex12 = 0;\n    let vowelsCountIndex13 = 0;\n    let vowelsCountIndex14\
    \ = 0;\n    let vowelsCountIndex15 = 0;\n    let vowelsCountIndex16 = 0;\n   \
    \ let vowelsCountIndex17 = 0;\n    let vowelsCountIndex18 = 0;\n    let vowelsCountIndex19\
    \ = 0;\n    let vowelsCountIndex20 = 0;\n    let vowelsCountIndex21 = 0;\n   \
    \ let vowelsCountIndex22 = 0;\n    let vowelsCountIndex23 = 0;\n    let vowelsCountIndex24\
    \ = 0;\n    let vowelsCountIndex25 = 0;\n    let vowelsCountIndex26 = 0;\n   \
    \ let vowelsCountIndex27 = 0;\n    let vowelsCountIndex28 = 0;\n    let vowelsCountIndex29\
    \ = 0;\n    let vowelsCountIndex30 = 0;\n    let vowelsCountIndex31 = 0;\n   \
    \ let vowelsCountIndex32 = 0;\n    let vowelsCountIndex33 = 0;\n    let vowelsCountIndex34\
    \ = 0;\n    let vowelsCountIndex35 = 0;\n    let vowelsCountIndex36 = 0;\n   \
    \ let vowelsCountIndex37 = 0;\n    let vowelsCountIndex38 = 0;\n    let vowelsCountIndex39\
    \ = 0;\n    let vowelsCountIndex40 = 0;\n    let vowelsCountIndex41 = 0;\n   \
    \ let vowelsCountIndex42 = 0;\n    let vowelsCountIndex43 = 0;\n    let vowelsCountIndex44\
    \ = 0;\n    let vowelsCountIndex45 = 0;\n    let vowelsCountIndex46 = 0;\n   \
    \ let vowelsCountIndex47 = 0;\n    let vowelsCountIndex48 = 0;\n    let vowelsCountIndex49\
    \ = 0;\n    let vowelsCountIndex50 = 0;\n    let vowelsCountIndex51 = 0;\n   \
    \ let vowelsCountIndex52 = 0;\n    let vowelsCountIndex53 = 0;\n    let vowelsCountIndex54\
    \ = 0;\n    let vowelsCountIndex55 = 0;\n    let vowelsCountIndex56 = 0;\n   \
    \ let vowelsCountIndex57 = 0;\n    let vowelsCountIndex58 = 0;\n    let vowelsCountIndex59\
    \ = 0;\n    let vowelsCountIndex60 = 0;\n    let vowelsCountIndex61 = 0;\n   \
    \ let vowelsCount\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzlhgjz5w.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_index = 0;\n    let vowels_index_count = 0;\n\
    \    let vowels_index_count_2 = 0;\n    let vowels_index_count_3 = 0;\n    let\
    \ vowels_index_count_4 = 0;\n    let vowels_index_count_5 = 0;\n    let vowels_index_count_6\
    \ = 0;\n    let vowels_index_count_7 = 0;\n    let vowels_index_count_8 = 0;\n\
    \    let vowels_index_count_9 = 0;\n    let vowels_index_count_10 = 0;\n    let\
    \ vowels_index_count_11 = 0;\n    let vowels_index_count_12 = 0;\n    let vowels_index_count_13\
    \ = 0;\n    let vowels_index_count_14 = 0;\n    let vowels_index_count_15 = 0;\n\
    \    let vowels_index_count_16 = 0;\n    let vowels_index_count_17 = 0;\n    let\
    \ vowels_index_count_18 = 0;\n    let vowels_index_count_19 = 0;\n    let vowels_index_count_20\
    \ = 0;\n    let vowels_index_count_21 = 0;\n    let vowels_index_count_22 = 0;\n\
    \    let vowels_index_count_23 = 0;\n    let vowels_index_count_24 = 0;\n    let\
    \ vowels_index_count_25 = 0;\n    let vowels_index_count_26 = 0;\n    let vowels_index_count_27\
    \ = 0;\n    let vowels_index_count_28 = 0;\n    let vowels_index_count_29 = 0;\n\
    \    let vowels_index_count_30 = 0;\n    let vowels_index_count_31 = 0;\n    let\
    \ vowels_index_count_32 = 0;\n    let vowels_index_count_33 = 0;\n    let vowels_index_count_34\
    \ = 0;\n    let vowels_index_count_35 = 0;\n    let vowels_index_count_36 = 0;\n\
    \    let vowels_index_count_37 = 0;\n    let vowels_index_count_38 = 0;\n    let\
    \ vowels_index_count_39 = 0;\n    let vowels_index_count_40 = 0;\n    let vowels_index_count_41\
    \ = 0;\n    let vowels_index_count_42 = 0;\n    let vowels_index_count_43 = 0;\n\
    \    let vowels_index_count_44 = 0;\n    let vowels_index_count_45 = 0;\n    let\
    \ vowels_index_count_46 = 0;\n    let vowels_index_count_47 = 0;\n    let vowels_index_count_48\
    \ = 0;\n    let vowels_index_count_49 = 0;\n    let vowels_index_count_50 = 0;\n\
    \    let vowels_index_count_51 = 0;\n    let vowels_index_count_52 = 0;\n    let\
    \ vowels_index_count_53 = 0;\n    let vowels_index_count_54 = 0;\n    let vowels_index_count_55\
    \ = 0;\n    let vowels_index_count_56 = 0;\n    let vowels_index_count_57 = 0;\n\
    \    let vowels_index_count_58 = 0;\n    let vowels_index_count_59 = 0;\n    let\
    \ vowels_index_count_60 = 0;\n    let vowels_index_count_61 = 0;\n    let vowels_index_count_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl0xc265d.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_left = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_right_to_left = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n\
    \    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    let vowels_count_from_middle_to_right_to_left_to_middle = vowels_count -\
    \ 15;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_middle =\
    \ vowels_count - 17;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_bhaz2i6.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_right = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let\
    \ vowels_count_from_right_to_middle_to_left = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right\
    \ = vowels_count - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 22;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 27;\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkvgbji7t.ts(38,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpkvgbji7t.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014905
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_index = 0;\n    let vowels_found = false;\n\
    \    let vowels_found_index = 0;\n    let vowels_found_count = 1;\n    let vowels_found_index\
    \ = 0;\n    let vowels_found_index2 = 0;\n    let vowels_found_index3 = 0;\n \
    \   let vowels_found_index4 = 0;\n    let vowels_found_index5 = 0;\n    let vowels_found_index6\
    \ = 0;\n    let vowels_found_index7 = 0;\n    let vowels_found_index8 = 0;\n \
    \   let vowels_found_index9 = 0;\n    let vowels_found_index10 = 0;\n    let vowels_found_index11\
    \ = 0;\n    let vowels_found_index12 = 0;\n    let vowels_found_index13 = 0;\n\
    \    let vowels_found_index14 = 0;\n    let vowels_found_index15 = 0;\n    let\
    \ vowels_found_index16 = 0;\n    let vowels_found_index17 = 0;\n    let vowels_found_index18\
    \ = 0;\n    let vowels_found_index19 = 0;\n    let vowels_found_index20 = 0;\n\
    \    let vowels_found_index21 = 0;\n    let vowels_found_index22 = 0;\n    let\
    \ vowels_found_index23 = 0;\n    let vowels_found_index24 = 0;\n    let vowels_found_index25\
    \ = 0;\n    let vowels_found_index26 = 0;\n    let vowels_found_index27 = 0;\n\
    \    let vowels_found_index28 = 0;\n    let vowels_found_index29 = 0;\n    let\
    \ vowels_found_index30 = 0;\n    let vowels_found_index31 = 0;\n    let vowels_found_index32\
    \ = 0;\n    let vowels_found_index33 = 0;\n    let vowels_found_index34 = 0;\n\
    \    let vowels_found_index35 = 0;\n    let vowels_found_index36 = 0;\n    let\
    \ vowels_found_index37 = 0;\n    let vowels_found_index38 = 0;\n    let vowels_found_index39\
    \ = 0;\n    let vowels_found_index40 = 0;\n    let vowels_found_index41 = 0;\n\
    \    let vowels_found_index42 = 0;\n    let vowels_found_index43 = 0;\n    let\
    \ vowels_found_index44 = 0;\n    let vowels_found_index45 = 0;\n    let vowels_found_index46\
    \ = 0;\n    let vowels_found_index47 = 0;\n    let vowels_found_index48 = 0;\n\
    \    let vowels_found_index49 = 0;\n    let vowels_found_index50 = 0;\n    let\
    \ vowels_found_index51 = 0;\n    let vowels_found_index52 = 0;\n    let vowels_found_index53\
    \ = 0;\n    let vowels_found_index54 = 0;\n    let vowels_found_index55 = 0;\n\
    \    let vowels_found_index56 = 0;\n    let vowels_found_index57 = 0;\n    let\
    \ vowels_found_index58 = 0;\n    let vowels_found_index59 = 0;\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp86g3q_56.ts(95,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromRightAndLeftAndUpper = vowelsCount - 4;\n    let vowelsCountFromRightAndLeftAndUpperAndUpper\
    \ = vowelsCount - 5;\n    let vowelsCountFromRightAndLeftAndUpperAndUpperAndUpper\
    \ = vowelsCount - 6;\n    let vowelsCountFromRightAndLeftAndUpperAndUpperAndUpperAndUpper\
    \ = vowelsCount - 7;\n    let vowelsCountFromRightAndLeftAndUpperAndUpperAndUpperAndUpperAndUpper\
    \ = vowelsCount - 8;\n    let vowelsCountFromRightAndLeftAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper\
    \ = vowelsCount - 9;\n    let vowelsCountFromRightAndLeftAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper\
    \ = vowelsCount - 10;\n    let vowelsCountFromRightAndLeftAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper\
    \ = vowelsCount - 11;\n    let vowelsCountFromRightAndLeftAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper\
    \ = vowelsCount - 12;\n    let vowelsCountFromRightAndLeftAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper\
    \ = vowelsCount - 13;\n    let vowelsCountFromRightAndLeftAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper\
    \ = vowelsCount - 14;\n    let vowelsCountFromRightAndLeftAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper\
    \ = vowelsCount - 15;\n    let vowelsCountFromRightAndLeftAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper\
    \ = vowelsCount - 16;\n    let vowelsCountFromRightAndLeftAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper\
    \ = vowelsCount - 17;\n    let vowelsCountFromRightAndLeftAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpperAndUpper\
    \ = vowelsCount - 18;\n    let vowel\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppo_775zh.ts(50,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014905
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left_to_right = vowels_count - 5;\n\
    \    let vowels_count_from_left_to_right_to_left = vowels_count - 6;\n    let\
    \ vowels_count_from_right_to_left_to_right_to_left = vowels_count - 7;\n    let\
    \ vowels_count_from_left_to_right_to_left_to_right_to_left = vowels_count - 8;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left = vowels_count\
    \ - 9;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 11;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 12;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 13;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 14;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 17;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 18;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdz7o7no1.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountInWord = vowels.filter(v => word.includes(v)).length;\n\
    \    let vowelsCountInWordInReverse = vowels.filter(v => word.includes(v)).slice().reverse();\n\
    \    let vowelsCountInWordInReverseReverse = vowelsCountInWordInReverse.reverse();\n\
    \    let vowelsCountInWordInReverseReverseReverse = vowelsCountInWordInReverseReverse.reverse();\n\
    \    let vowelsCountInWordInReverseReverseReverseReverse = vowelsCountInWordInReverseReverseReverse.reverse();\n\
    \    let vowelsCountInWordInReverseReverseReverseReverseReverse = vowelsCountInWordInReverseReverseReverseReverse.reverse();\n\
    \    let vowelsCountInWordInReverseReverseReverseReverseReverseReverse = vowelsCountInWordInReverseReverseReverseReverseReverseReverse.reverse();\n\
    \    let vowelsCountInWordInReverseReverseReverseReverseReverseReverseReverse\
    \ = vowelsCountInWordInReverseReverseReverseReverseReverseReverseReverse.reverse();\n\
    \    let vowelsCountInWordInReverseReverseReverseReverseReverseReverseReverse\
    \ = vowelsCountInWordInReverseReverseReverseReverseReverseReverseReverse.reverse();\n\
    \    let vowelsCountInWordInReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = vowelsCountInWordInReverseReverseReverseReverseReverseReverseReverseReverse.reverse();\n\
    \    let vowelsCountInWordInReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = vowelsCountInWordInReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.reverse();\n\
    \    let vowelsCountInWordInReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = vowelsCountInWordInReverseReverseReverseReverseReverseReverseReverseReverseReverse.reverse();\n\
    \    let vowelsCountInWordInReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = vowelsCountInWordInReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.reverse();\n\
    \    let vowelsCountInWordInReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = vowelsCountInWordInReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.reverse();\n\
    \    let vowelsCountInWordInReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = vowelsCountInWordInReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.reverse();\n\
    \    let vowelsCountInWordInReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = vowelsCountInWordInReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.reverse();\n\
    \    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2znt2pnj.ts(27,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp2znt2pnj.ts(48,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_right = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let\
    \ vowels_count_from_right_to_middle_to_left = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right\
    \ = vowels_count - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy2w6x2qc.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtgm6hsc.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountLeft = vowelsCount - 1;\n    let vowelsCountRight\
    \ = vowelsCount - 2;\n    let vowelsCountRightLeft = vowelsCount - 3;\n    let\
    \ vowelsCountRightRight = vowelsCount - 4;\n    let vowelsCountRightLeft = vowelsCount\
    \ - 5;\n    let vowelsCountRightRightLeft = vowelsCount - 6;\n    let vowelsCountRightRightRight\
    \ = vowelsCount - 7;\n    let vowelsCountRightRightLeftRight = vowelsCount - 8;\n\
    \    let vowelsCountRightRightRightLeft = vowelsCount - 9;\n    let vowelsCountRightRightRightRight\
    \ = vowelsCount - 10;\n    let vowelsCountRightRightRightLeftRight = vowelsCount\
    \ - 11;\n    let vowelsCountRightRightRightRightLeft = vowelsCount - 12;\n   \
    \ let vowelsCountRightRightRightRightRight = vowelsCount - 13;\n    let vowelsCountRightRightRightRightLeftRight\
    \ = vowelsCount - 14;\n    let vowelsCountRightRightRightRightRightLeft = vowelsCount\
    \ - 15;\n    let vowelsCountRightRightRightRightRightRight = vowelsCount - 16;\n\
    \    let vowelsCountRightRightRightRightRightLeftRight = vowelsCount - 17;\n \
    \   let vowelsCountRightRightRightRightRightRightLeft = vowelsCount - 18;\n  \
    \  let vowelsCountRightRightRightRightRightRightRight = vowelsCount - 19;\n  \
    \  let vowelsCountRightRightRightRightRightRightLeftRight = vowelsCount - 20;\n\
    \    let vowelsCountRightRightRightRightRightRightRightLeft = vowelsCount - 21;\n\
    \    let vowelsCountRightRightRightRightRightRightRightRight = vowelsCount - 22;\n\
    \    let vowelsCountRightRightRightRightRightRightRightLeftRight = vowelsCount\
    \ - 23;\n    let vowelsCountRightRightRightRightRightRightRightRightLeft = vowelsCount\
    \ - 24;\n    let vowelsCountRightRightRightRightRightRightRightRightRight = vowelsCount\
    \ - 25;\n    let vowelsCountRightRightRightRightRightRightRightRightLeftRight\
    \ = vowelsCount - 26;\n    let vowelsCountRightRightRightRightRightRightRightRightRightLeftRight\
    \ = vowelsCount - 27;\n    let vowelsCountRightRightRightRightRightRightRightRightRightLeftRight\
    \ = vowelsCount - 28;\n    let vowelsCountRightRightRightRightRightRightRightRightRightLeftRightRight\
    \ = vowelsCount - \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy7j6q8t6.ts(39,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpy7j6q8t6.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count\
    \ = vowels.length;\n    let vowel_count_from_right = vowel_count - 1;\n    let\
    \ vowel_count_from_left = vowel_count - 2;\n    let vowel_count_from_middle =\
    \ vowel_count - 3;\n    let vowel_count_from_left_to_right = vowel_count - 4;\n\
    \    let vowel_count_from_right_to_left = vowel_count - 5;\n    let vowel_count_from_middle_to_left\
    \ = vowel_count - 6;\n    let vowel_count_from_left_to_middle = vowel_count -\
    \ 7;\n    let vowel_count_from_right_to_middle = vowel_count - 8;\n    let vowel_count_from_middle_to_right\
    \ = vowel_count - 9;\n    let vowel_count_from_left_to_right_to_middle = vowel_count\
    \ - 10;\n    let vowel_count_from_right_to_left_to_middle = vowel_count - 11;\n\
    \    let vowel_count_from_middle_to_left_to_right = vowel_count - 12;\n    let\
    \ vowel_count_from_left_to_right_to_middle = vowel_count - 13;\n    let vowel_count_from_right_to_left_to_middle\
    \ = vowel_count - 14;\n    let vowel_count_from_middle_to_left_to_right_to_middle\
    \ = vowel_count - 15;\n    let vowel_count_from_left_to_right_to_middle_to_left\
    \ = vowel_count - 16;\n    let vowel_count_from_right_to_left_to_middle_to_right\
    \ = vowel_count - 17;\n    let vowel_count_from_middle_to_left_to_right_to_middle_to_left\
    \ = vowel_count - 18;\n    let vowel_count_from_left_to_right_to_middle_to_right_to_left\
    \ = vowel_count - 19;\n    let vowel_count_from_right_to_left_to_middle_to_right_to_left_to_middle\
    \ = vowel_count - 20;\n    let vowel_count_from_middle_to_left_to_right_to_right_to_middle_to_left\
    \ = vowel_count - 21;\n    let vowel_count_from_left_to_right_to_middle_to_right_to_left_to_middle_to_right\
    \ = vowel_count - 22;\n    let vowel_count_from_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left\
    \ = vowel_count - 23;\n    let vowel_count_from_middle_to_left_to_right_to_right_to_middle_to_right_to_left_to_middle_to_right_to_left\
    \ = vowel_count - 24;\n    let vowel_count_from_left_to_right_to_middle_to_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left_to_middle\
    \ = vowel_count - 25;\n    let vowel_count_from_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left_to_middle_to_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpchpk7e8s.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n\
    \    let consonantsCount = 0;\n    let consonantsIndex = 0;\n    let consonantsCountIndex\
    \ = 0;\n    let consonantsCountIndex2 = 0;\n    let consonantsIndex2 = 0;\n  \
    \  let consonantsCountIndex2 = 0;\n    let consonantsCountIndex3 = 0;\n    let\
    \ consonantsIndex3 = 0;\n    let consonantsCountIndex4 = 0;\n    let consonantsIndex4\
    \ = 0;\n    let consonantsCountIndex5 = 0;\n    let consonantsIndex5 = 0;\n  \
    \  let consonantsCountIndex6 = 0;\n    let consonantsIndex6 = 0;\n    let consonantsCountIndex7\
    \ = 0;\n    let consonantsIndex7 = 0;\n    let consonantsCountIndex8 = 0;\n  \
    \  let consonantsIndex8 = 0;\n    let consonantsCountIndex9 = 0;\n    let consonantsIndex9\
    \ = 0;\n    let consonantsCountIndex10 = 0;\n    let consonantsIndex10 = 0;\n\
    \    let consonantsCountIndex11 = 0;\n    let consonantsIndex11 = 0;\n    let\
    \ consonantsCountIndex12 = 0;\n    let consonantsIndex12 = 0;\n    let consonantsCountIndex13\
    \ = 0;\n    let consonantsIndex13 = 0;\n    let consonantsCountIndex14 = 0;\n\
    \    let consonantsIndex14 = 0;\n    let consonantsCountIndex15 = 0;\n    let\
    \ consonantsIndex15 = 0;\n    let consonantsCountIndex16 = 0;\n    let consonantsIndex16\
    \ = 0;\n    let consonantsCountIndex17 = 0;\n    let consonantsIndex17 = 0;\n\
    \    let consonantsCountIndex18 = 0;\n    let consonantsIndex18 = 0;\n    let\
    \ consonantsCountIndex19 = 0;\n    let consonantsIndex19 = 0;\n    let consonantsCountIndex20\
    \ = 0;\n    let consonantsIndex20 = 0;\n    let consonantsCountIndex21 = 0;\n\
    \    let consonantsIndex21 = 0;\n    let consonantsCountIndex22 = 0;\n    let\
    \ consonantsIndex22 = 0;\n    let consonantsCountIndex23 = 0;\n    let consonantsIndex23\
    \ = 0;\n    let consonantsCountIndex24 = 0;\n    let consonantsIndex24 = 0;\n\
    \    let consonantsCountIndex25 = 0;\n    let consonantsIndex25 = 0;\n    let\
    \ consonantsCountIndex26 = 0;\n    let consonantsIndex26 = 0;\n    let consonantsCountIndex27\
    \ = 0;\n    let consonantsIndex27 = 0;\n    let consonantsCountIndex28 = 0;\n\
    \    let consonantsIndex28 = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6r54ygjy.ts(91,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromLeftAndRight = vowelsCount - 4;\n    let vowelsCountFromRightAndLeftAndUp\
    \ = vowelsCount - 5;\n    let vowelsCountFromLeftAndRightAndUp = vowelsCount -\
    \ 6;\n    let vowelsCountFromRightAndLeftAndUpAndDown = vowelsCount - 7;\n   \
    \ let vowelsCountFromLeftAndRightAndUpAndDown = vowelsCount - 8;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDown\
    \ = vowelsCount - 9;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndUp\
    \ = vowelsCount - 10;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDownAndUpAndDown\
    \ = vowelsCount - 11;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndUpAndDownAndUp\
    \ = vowelsCount - 12;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDownAndUpAndDownAndUpAndDown\
    \ = vowelsCount - 13;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndUpAndDownAndUpAndDownAndUp\
    \ = vowelsCount - 14;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDownAndUpAndDownAndUpAndDownAndUpAndDown\
    \ = vowelsCount - 15;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp\
    \ = vowelsCount - 16;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDown\
    \ = vowelsCount - 17;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp\
    \ = vowelsCount - 18;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDown\
    \ = vowelsCount - 19;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndUpAndDownAndUpAndDownAndUp\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5bfkh3av.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromLeftAndRight = vowelsCount - 4;\n    let vowelsCountFromLeftAndRightAndLeft\
    \ = vowelsCount - 5;\n    let vowelsCountFromLeftAndRightAndLeftAndRight = vowelsCount\
    \ - 6;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeft = vowelsCount\
    \ - 7;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRight = vowelsCount\
    \ - 8;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 9;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 10;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 11;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 12;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 13;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 14;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 15;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 16;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 17;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 18;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAnd\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkjmq6gtl.ts(50,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountInWord = word.length;\n    let vowelsCountInWordInReverse\
    \ = word.length + vowelsCountInWord;\n    let vowelsCountInWordInReverseInReverse\
    \ = vowelsCountInWordInReverse * vowelsCountInWord;\n    let vowelsCountInWordInReverseInReverseInReverse\
    \ = vowelsCountInWordInReverseInReverse * vowelsCountInWordInReverse;\n    let\
    \ vowelsCountInWordInReverseInReverseInReverseInReverse = vowelsCountInWordInReverseInReverseInReverse\
    \ * vowelsCountInWordInReverseInReverse;\n    let vowelsCountInWordInReverseInReverseInReverseInReverseInReverse\
    \ = vowelsCountInWordInReverseInReverseInReverseInReverse * vowelsCountInWordInReverseInReverseInReverseInReverse;\n\
    \    let vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverse\
    \ = vowelsCountInWordInReverseInReverseInReverseInReverseInReverse * vowelsCountInWordInReverseInReverseInReverseInReverseInReverse;\n\
    \    let vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverseInReverse\
    \ = vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverse *\
    \ vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverse;\n \
    \   let vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverseInReverse\
    \ = vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverse *\
    \ vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverse;\n \
    \   let vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverseInReverse\
    \ = vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverse *\
    \ vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverse;\n \
    \   let vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverseInReverse\
    \ = vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverse *\
    \ vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverse;\n \
    \   let vowelsCountInWordInReverseInReverseInReverseInReverseInReverseInReverseInReverse\
    \ = vowelsCountInWordInReverseIn\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy7urfx9c.ts(43,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n\
    \    let vowelsCountMin = vowelsCount;\n    let vowelsCountMax = vowelsCount;\n\
    \    let vowelsCountMinIndex = 0;\n    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexMin\
    \ = 0;\n    let vowelsCountMaxIndexMax = 0;\n    let vowelsCountMinIndexMax =\
    \ 0;\n    let vowelsCountMaxIndexMin = 0;\n    let vowelsCountMinIndexMinIndex\
    \ = 0;\n    let vowelsCountMaxIndexMaxIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMinIndexMinIndex = 0;\n    let vowelsCountMaxIndexMaxIndex\
    \ = 0;\n    let vowelsCountMinIndexMaxIndex = 0;\n    let vowelsCountMinIndexMinIndex\
    \ = 0;\n    let vowelsCountMaxIndexMaxIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMinIndexMinIndex = 0;\n    let vowelsCountMaxIndexMaxIndex\
    \ = 0;\n    let vowelsCountMinIndexMaxIndex = 0;\n    let vowelsCountMinIndexMinIndex\
    \ = 0;\n    let vowelsCountMaxIndexMaxIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMinIndexMinIndex = 0;\n    let vowelsCountMaxIndexMaxIndex\
    \ = 0;\n    let vowelsCountMinIndexMaxIndex = 0;\n    let vowelsCountMinIndexMinIndex\
    \ = 0;\n    let vowelsCountMaxIndexMaxIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMinIndexMinIndex = 0;\n    let vowelsCountMaxIndexMaxIndex\
    \ = 0;\n    let vowelsCountMinIndexMaxIndex = 0;\n    let vowelsCountMinIndexMinIndex\
    \ = 0;\n    let vowelsCountMaxIndexMaxIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMinIndexMinIndex = 0;\n    let vowelsCountMaxIndexMaxIndex\
    \ = 0;\n    let vowelsCountMinIndexMaxIndex = 0;\n    let vowelsCountMinIndexMinIndex\
    \ = 0;\n    let vowelsCountMaxIndexMaxIndex = 0;\n    let vowelsCountMinIndexMaxIndex\
    \ = 0;\n    let vowelsCountMinIndexMinIndex = 0;\n    let vowelsCountMaxIndexMaxIndex\
    \ = 0;\n    let vowelsCountMinIndexMaxIndex = 0;\n    let vowelsCountMinIndexMinIndex\
    \ = 0;\n    let vowelsCountMaxIndexMaxIndex = 0;\n    let vowelsCountMinIndexMaxIndex\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_lfcmmwt.ts(82,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtgm6hsc.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n\
    \    let vowelsCountMin = vowelsCount - 1;\n    let vowelsCountMax = vowelsCount;\n\
    \    let vowelsCountMinIndex = 0;\n    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa199jp4o.ts(87,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtgm6hsc.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_right = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n\
    \    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count -\
    \ 15;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right =\
    \ vowels_count - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmsv__d7l.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromLeftAndRight = vowelsCount - 4;\n    let vowelsCountFromLeftAndRightAndLeft\
    \ = vowelsCount - 5;\n    let vowelsCountFromLeftAndRightAndLeftAndRight = vowelsCount\
    \ - 6;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeft = vowelsCount\
    \ - 7;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRight = vowelsCount\
    \ - 8;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 9;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 10;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 11;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 12;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 13;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 14;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 15;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 16;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 17;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 18;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAnd\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkjmq6gtl.ts(50,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtgm6hsc.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtgm6hsc.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountLeft = vowels.filter(v => word.endsWith(v)).length;\n\
    \    let vowelsCountRight = vowels.filter(v => word.startsWith(v)).length;\n \
    \   let vowelsCountMiddle = vowelsCountLeft + vowelsCountRight;\n    let vowelsCountTotal\
    \ = vowelsCountLeft + vowelsCountRight + vowelsCountMiddle;\n    let vowelsCountTotalLeft\
    \ = vowelsCountLeft + vowelsCountMiddle;\n    let vowelsCountTotalRight = vowelsCountRight\
    \ + vowelsCountMiddle;\n    let vowelsCountTotalMiddle = vowelsCountTotalLeft\
    \ + vowelsCountTotalRight;\n    let vowelsCountTotalTotal = vowelsCountTotalLeft\
    \ + vowelsCountTotalRight + vowelsCountTotalMiddle;\n    let vowelsCountTotalTotalLeft\
    \ = vowelsCountTotalLeft + vowelsCountTotalMiddle;\n    let vowelsCountTotalTotalRight\
    \ = vowelsCountTotalRight + vowelsCountTotalMiddle;\n    let vowelsCountTotalTotalMiddle\
    \ = vowelsCountTotalTotalLeft + vowelsCountTotalTotalRight;\n    let vowelsCountTotalTotalTotal\
    \ = vowelsCountTotalTotalLeft + vowelsCountTotalTotalRight + vowelsCountTotalTotalMiddle;\n\
    \    let vowelsCountTotalTotalTotalLeft = vowelsCountTotalTotalLeft + vowelsCountTotalTotalMiddle;\n\
    \    let vowelsCountTotalTotalTotalRight = vowelsCountTotalTotalRight + vowelsCountTotalTotalMiddle;\n\
    \    let vowelsCountTotalTotalTotalMiddle = vowelsCountTotalTotalTotalLeft + vowelsCountTotalTotalTotalRight;\n\
    \    let vowelsCountTotalTotalTotalTotal = vowelsCountTotalTotalTotalLeft + vowelsCountTotalTotalTotalRight\
    \ + vowelsCountTotalTotalTotalMiddle;\n    let vowelsCountTotalTotalTotalTotalLeft\
    \ = vowelsCountTotalTotalTotalLeft + vowelsCountTotalTotalMiddle;\n    let vowelsCountTotalTotalTotalTotalRight\
    \ = vowelsCountTotalTotalTotalRight + vowelsCountTotalTotalMiddle;\n    let vowelsCountTotalTotalTotalTotalMiddle\
    \ = vowelsCountTotalTotalTotalTotalLeft + vowelsCountTotalTotalTotalRight;\n \
    \   let vowelsCountTotalTotalTotalTotal = vowelsCountTotalTotalTotalLeft + vowelsCountTotalTotalTotalRight\
    \ + vowelsCountTotalTotalTotalMiddle;\n    let vowelsCountTotalTotalTotalTotalLeft\
    \ = vowelsCountTotalTotalTotalLeft + vowelsCountTotalTotalMiddle;\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprbca8z9w.ts(52,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowel\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgxnfna_c.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3\
    \ = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5\
    \ = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7\
    \ = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9\
    \ = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11\
    \ = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13\
    \ = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15\
    \ = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17\
    \ = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19\
    \ = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21\
    \ = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23\
    \ = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25\
    \ = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27\
    \ = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29\
    \ = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31\
    \ = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33\
    \ = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35\
    \ = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37\
    \ = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39\
    \ = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41\
    \ = vowelsCount - 40;\n    let vowels\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvwysex3k.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n\
    \    let vowelsCountMinusOne = vowelsCount - 1;\n    let vowelsCountMinusTwo =\
    \ vowelsCount - 2;\n    let vowelsCountMinusThree = vowelsCount - 3;\n    let\
    \ vowelsCountMinusFour = vowelsCount - 4;\n    let vowelsCountMinusFive = vowelsCount\
    \ - 5;\n    let vowelsCountMinusSix = vowelsCount - 6;\n    let vowelsCountMinusSeven\
    \ = vowelsCount - 7;\n    let vowelsCountMinusEight = vowelsCount - 8;\n    let\
    \ vowelsCountMinusNine = vowelsCount - 9;\n    let vowelsCountMinusTen = vowelsCount\
    \ - 10;\n    let vowelsCountMinusEleven = vowelsCount - 11;\n    let vowelsCountMinusTwelve\
    \ = vowelsCount - 12;\n    let vowelsCountMinusThirteen = vowelsCount - 13;\n\
    \    let vowelsCountMinusFourteen = vowelsCount - 14;\n    let vowelsCountMinusFifteen\
    \ = vowelsCount - 15;\n    let vowelsCountMinusSixteen = vowelsCount - 16;\n \
    \   let vowelsCountMinusSeventeen = vowelsCount - 17;\n    let vowelsCountMinusEighteen\
    \ = vowelsCount - 18;\n    let vowelsCountMinusNineteen = vowelsCount - 19;\n\
    \    let vowelsCountMinusTwenty = vowelsCount - 20;\n    let vowelsCountMinusTwentyOne\
    \ = vowelsCount - 21;\n    let vowelsCountMinusTwentyTwo = vowelsCount - 22;\n\
    \    let vowelsCountMinusTwentyThree = vowelsCount - 23;\n    let vowelsCountMinusTwentyFour\
    \ = vowelsCount - 24;\n    let vowelsCountMinusTwentyFive = vowelsCount - 25;\n\
    \    let vowelsCountMinusTwentySix = vowelsCount - 26;\n    let vowelsCountMinusTwentySeven\
    \ = vowelsCount - 27;\n    let vowelsCountMinusTwentyEight = vowelsCount - 28;\n\
    \    let vowelsCountMinusTwentyNine = vowelsCount - 29;\n    let vowelsCountMinusThirty\
    \ = vowels\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo6q8jrll.ts(63,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n\
    \    let vowelsCountMin = vowelsCount - 1;\n    let vowelsCountMax = vowelsCount;\n\
    \    let vowelsCountMinIndex = 0;\n    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinMax\
    \ = vowelsCountMax - 1;\n    let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex\
    \ = 0;\n    let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex =\
    \ 0;\n    let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex = 0;\n\
    \    let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex = 0;\n  \
    \  let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex = 0;\n    let\
    \ vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex\
    \ = 0;\n    let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex =\
    \ 0;\n    let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex = 0;\n\
    \    let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex = 0;\n  \
    \  let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex = 0;\n    let\
    \ vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex\
    \ = 0;\n    let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex =\
    \ 0;\n    let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex = 0;\n\
    \    let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex = 0;\n  \
    \  let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex = 0;\n    let\
    \ vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex\
    \ = 0;\n    let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex =\
    \ 0;\n    let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex = 0;\n\
    \    let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex = 0;\n  \
    \  let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex = 0;\n    let\
    \ vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex = 0;\n    let vowelsCountMinMaxIndex\
    \ = 0;\n    let vowelsCountMinMaxIndex = 0;\n    let vowelsCount\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxzk60n45.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_right = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let\
    \ vowels_count_from_right_to_middle_to_left = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right\
    \ = vowels_count - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_left_to_right_to_middle\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp94y175v9.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count\
    \ = vowels.length;\n    let vowel_count_from_right = vowels.filter(v => word.endsWith(v));\n\
    \    let vowel_count_from_left = vowels.filter(v => word.startsWith(v));\n   \
    \ let vowel_count_from_both = vowels.filter(v => word.includes(v));\n    let vowel_count_from_both_unique\
    \ = vowels.filter(v => word.includes(v) && word.lastIndexOf(v) === word.length\
    \ - 1);\n    let vowel_count_from_both_unique2 = vowels.filter(v => word.includes(v)\
    \ && word.indexOf(v) === 0);\n    let vowel_count_from_both_unique3 = vowels.filter(v\
    \ => word.includes(v) && word.indexOf(v) === 1);\n    let vowel_count_from_both_unique4\
    \ = vowels.filter(v => word.includes(v) && word.indexOf(v) === 2);\n    let vowel_count_from_both_unique5\
    \ = vowels.filter(v => word.includes(v) && word.indexOf(v) === 3);\n    let vowel_count_from_both_unique6\
    \ = vowels.filter(v => word.includes(v) && word.indexOf(v) === 4);\n    let vowel_count_from_both_unique7\
    \ = vowels.filter(v => word.includes(v) && word.indexOf(v) === 5);\n    let vowel_count_from_both_unique8\
    \ = vowels.filter(v => word.includes(v) && word.indexOf(v) === 6);\n    let vowel_count_from_both_unique9\
    \ = vowels.filter(v => word.includes(v) && word.indexOf(v) === 7);\n    let vowel_count_from_both_unique10\
    \ = vowels.filter(v => word.includes(v) && word.indexOf(v) === 8);\n    let vowel_count_from_both_unique11\
    \ = vowels.filter(v => word.includes(v) && word.indexOf(v) === 9);\n    let vowel_count_from_both_unique12\
    \ = vowels.filter(v => word.includes(v) && word.indexOf(v) === 10);\n    let vowel_count_from_both_unique13\
    \ = vowels.filter(v => word.includes(v) && word.indexOf(v) === 11);\n    let vowel_count_from_both_unique14\
    \ = vowels.filter(v => word.includes(v) && word.indexOf(v) === 12);\n    let vowel_count_from_both_unique15\
    \ = vowels.filter(v => word.includes(v) && word.indexOf(v) === 13);\n    let vowel_count_from_both_unique16\
    \ = vowels.filter(v => word.includes(v) && word.indexOf(v) === 14);\n    let vowel_count_from_both_unique17\
    \ = vowels.filter(v => word.includes(v) && word.indexOf(v) === 15);\n    let vowel_count_from_both_unique\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo31prkgj.ts(52,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    for (let i = 0; i < vowelsCount;\
    \ i++) {\n        vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max(...vowelsIndex);\n    let vowelsIndexMin =\
    \ Math.min(...vowelsIndex);\n    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxVowel\
    \ = vowelsIndex[vowelsIndexMaxIndex];\n    let vowelsIndexMinVowel = vowelsIndex[vowelsIndexMinIndex];\n\
    \    let vowelsIndexMaxConsonant = vowelsIndex.indexOf(vowelsIndexMaxVowel) +\
    \ 1;\n    let vowelsIndexMinConsonant = vowelsIndex.indexOf(vowelsIndexMinVowel)\
    \ - 1;\n    let vowelsIndexMaxConsonantIndex = vowelsIndex.indexOf(vowelsIndexMaxConsonant);\n\
    \    let vowelsIndexMinConsonantIndex = vowelsIndex.indexOf(vowelsIndexMinConsonant);\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxConsonantVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxConsonant)\
    \ + 1;\n    let vowelsIndexMinConsonantVowelIndex = vowelsIndex.indexOf(vowelsIndexMinConsonant)\
    \ - 1;\n    let vowelsIndexMaxConsonantConsonantIndex = vowelsIndex.indexOf(vowelsIndexMaxConsonantVowelIndex);\n\
    \    let vowelsIndexMinConsonantConsonantIndex = vowelsIndex.indexOf(vowelsIndexMinConsonantVowelIndex);\n\
    \    let vowelsIndexMaxConsonantVowelConsonantIndex = vowelsIndex.indexOf(vowelsIndexMaxConsonantConsonantIndex);\n\
    \    let vowelsIndexMinConsonantVowelConsonantIndex = vowelsIndex.indexOf(vowelsIndexMinConsonantConsonantIndex);\n\
    \    let vowelsIndexMaxConsonantConsonantVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxConsonantConsonantVowelIndex);\n\
    \    let vowelsIndexMinConsonantConson\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaqow3ybv.ts(56,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountLeft = word.length - vowelsCount;\n   \
    \ let vowelsCountRight = word.length - 1;\n    let vowelsCountRightLeft = word.length\
    \ - 2;\n    let vowelsCountRightRight = word.length - 3;\n    let vowelsCountRightLeft\
    \ = word.length - 4;\n    let vowelsCountRightRightLeft = word.length - 5;\n \
    \   let vowelsCountRightRightRight = word.length - 6;\n    let vowelsCountRightRightRightLeft\
    \ = word.length - 7;\n    let vowelsCountRightRightRightRight = word.length -\
    \ 8;\n    let vowelsCountRightRightRightRightLeft = word.length - 9;\n    let\
    \ vowelsCountRightRightRightRightRight = word.length - 10;\n    let vowelsCountRightRightRightRightRightLeft\
    \ = word.length - 11;\n    let vowelsCountRightRightRightRightRightRight = word.length\
    \ - 12;\n    let vowelsCountRightRightRightRightRightRightLeft = word.length -\
    \ 13;\n    let vowelsCountRightRightRightRightRightRightRight = word.length -\
    \ 14;\n    let vowelsCountRightRightRightRightRightRightRightLeft = word.length\
    \ - 15;\n    let vowelsCountRightRightRightRightRightRightRightRight = word.length\
    \ - 16;\n    let vowelsCountRightRightRightRightRightRightRightRightLeft = word.length\
    \ - 17;\n    let vowelsCountRightRightRightRightRightRightRightRightRight = word.length\
    \ - 18;\n    let vowelsCountRightRightRightRightRightRightRightRightRightLeft\
    \ = word.length - 19;\n    let vowelsCountRightRightRightRightRightRightRightRightRight\
    \ = word.length - 20;\n    let vowelsCountRightRightRightRightRightRightRightRightRightLeft\
    \ = word.length - 11;\n    let vowelsCountRightRightRightRightRightRightRightRightRightRight\
    \ = word.length - 22;\n    let vowelsCountRightRightRightRightRightRightRightRightRightRightLeft\
    \ = word.length - 23;\n    let vowelsCountRightRightRightRightRightRightRightRightRightRightRight\
    \ = word.length - 24;\n    let vowelsCountRightRightRightRightRightRightRightRightRightRightLeft\
    \ = word.length - 25;\n    let vowelsCountRightRightRightRightRightRightRightRightRightRightRight\
    \ = word.length - 26;\n    let vowelsCountRightRightRightRightRightRightRightRightRightRightRightLeft\
    \ = word.length - 27;\n    let vowelsCountRightRightRightRightRightRightRightRightRightRightRightRight\
    \ = word.length - 28;\n    let vowelsCountRightRightRightRightRightRightRightRightRightRightRightRightLeft\
    \ = word.length - 29;\n    let vowelsCountRightRightRightRightRightRightRightRight\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5a00rqcb.ts(62,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    for (let i = 0; i < vowelsCount;\
    \ i++) {\n        let index = word.indexOf(vowels[i]);\n        if (index > -1)\
    \ {\n            vowelsIndex.push(index);\n        }\n    }\n    let vowelsIndex\
    \ = vowelsIndex.reverse();\n    let vowelsCount = vowelsIndex.length;\n    let\
    \ vowelsIndexMin = vowelsIndex[0];\n    let vowelsIndexMax = vowelsIndex[vowelsCount\
    \ - 1];\n    let vowelsIndexMinIndex = 0;\n    let vowelsIndexMaxIndex = 0;\n\
    \    let vowelsIndexMinIndexIndex = 0;\n    let vowelsIndexMaxIndexIndex = 0;\n\
    \    for (let i = 0; i < vowelsCount; i++) {\n        if (vowelsIndex[i] > vowelsIndexMin)\
    \ {\n            vowelsIndexMinIndex = i;\n            vowelsIndexMin = vowelsIndex[i];\n\
    \        }\n        if (vowelsIndex[i] < vowelsIndexMax) {\n            vowelsIndexMaxIndex\
    \ = i;\n            vowelsIndexMax = vowelsIndex[i];\n        }\n    }\n    if\
    \ (vowelsIndexMin > vowelsIndexMax) {\n        return \"\";\n    }\n    let vowelsIndexMinIndexInt\
    \ = parseInt(vowelsIndexMinIndex);\n    let vowelsIndexMaxIndexInt = parseInt(vowelsIndexMaxIndex);\n\
    \    let vowelsIndexMinIndexInt = parseInt(vowelsIndexMinIndex) + 1;\n    let\
    \ vowelsIndexMaxIndexInt = parseInt(vowelsIndexMaxIndex) - 1;\n    let vowelsIndexMinIndexInt\
    \ = parseInt(vowelsIndexMinIndex) - 1;\n    let vowelsIndexMaxIndexInt = parseInt(vowelsIndexMaxIndex)\
    \ + 1;\n    let vowelsIndexMinIndexInt = parseInt(vowelsIndexMinIndex);\n    let\
    \ vowelsIndexMaxIndexInt = parseInt(vowelsIndexMaxIndex);\n    let vowelsIndexMinIndexInt\
    \ = parseInt(vowelsIndexMinIndex);\n    let vowelsIndexMaxIndexInt = parseInt(vowelsIndexMaxIndex);\n\
    \    let vowelsIndexMinIndexInt = parseInt(vowelsIndexMinIndex);\n    let vowelsIndexMaxIndexInt\
    \ = parseInt(vowelsIndexMaxIndex);\n    let vowelsIndexMinIndexInt = parseInt(vowelsIndexMinIndex);\n\
    \    let vowelsIndexMaxIndexInt = parseInt(vowelsIndexMaxIndex);\n    let vowelsIndexMinIndexInt\
    \ = parseInt(vowelsIndexMinIndex);\n    let vowelsIndexMaxIndexInt = parseInt(vowelsIndexMaxIndex);\n\
    \    let vowelsIndexMinIndexInt = parseInt(vowelsIndexMinIndex);\n    let vowelsIndexMaxIndexInt\
    \ = parseInt(vowelsIndexMaxIndex);\n    let vowelsIndex\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxkdi71gs.ts(78,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromRightAndLeftAndUpper = vowelsCount - 4;\n    let vowelsCountFromRightAndLeftAndUpperAndLowers\
    \ = vowelsCount - 5;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbers\
    \ = vowelsCount - 6;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuation\
    \ = vowelsCount - 7;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndNumbers\
    \ = vowelsCount - 8;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndNumbersAndPunctuation\
    \ = vowelsCount - 9;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbers\
    \ = vowelsCount - 10;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbersAndPunctuation\
    \ = vowelsCount - 11;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbers\
    \ = vowelsCount - 12;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbersAndPunctuation\
    \ = vowelsCount - 13;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbers\
    \ = vowelsCount - 14;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbersAndPunctuation\
    \ = vowelsCount - 15;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbers\
    \ = vowelsCount - 16;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbersAndPunctuation\
    \ = vowelsCount - 17;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumbersAndPunctuationAndNumber\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1rtaf5rm.ts(49,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle_to_right = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle_to_left = vowels_count - 8;\n\
    \    let vowels_count_from_middle_to_left_to_right = vowels_count - 9;\n    let\
    \ vowels_count_from_left_to_right_to_middle = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle\
    \ = vowels_count - 11;\n    let vowels_count_from_middle_to_right_to_left = vowels_count\
    \ - 12;\n    let vowels_count_from_left_to_middle_to_right_to_left = vowels_count\
    \ - 13;\n    let vowels_count_from_right_to_middle_to_left_to_right = vowels_count\
    \ - 14;\n    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count\
    \ - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right =\
    \ vowels_count - 16;\n    let vowels_count_from_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 25;\n    let vowels_count_from_\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0tnsrpbo.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_index = 0;\n    let vowels_index_count = 0;\n\
    \    let vowels_index_count_2 = 0;\n    let vowels_index_count_3 = 0;\n    let\
    \ vowels_index_count_4 = 0;\n    let vowels_index_count_5 = 0;\n    let vowels_index_count_6\
    \ = 0;\n    let vowels_index_count_7 = 0;\n    let vowels_index_count_8 = 0;\n\
    \    let vowels_index_count_9 = 0;\n    let vowels_index_count_10 = 0;\n    let\
    \ vowels_index_count_11 = 0;\n    let vowels_index_count_12 = 0;\n    let vowels_index_count_13\
    \ = 0;\n    let vowels_index_count_14 = 0;\n    let vowels_index_count_15 = 0;\n\
    \    let vowels_index_count_16 = 0;\n    let vowels_index_count_17 = 0;\n    let\
    \ vowels_index_count_18 = 0;\n    let vowels_index_count_19 = 0;\n    let vowels_index_count_20\
    \ = 0;\n    let vowels_index_count_21 = 0;\n    let vowels_index_count_22 = 0;\n\
    \    let vowels_index_count_23 = 0;\n    let vowels_index_count_24 = 0;\n    let\
    \ vowels_index_count_25 = 0;\n    let vowels_index_count_26 = 0;\n    let vowels_index_count_27\
    \ = 0;\n    let vowels_index_count_28 = 0;\n    let vowels_index_count_29 = 0;\n\
    \    let vowels_index_count_30 = 0;\n    let vowels_index_count_31 = 0;\n    let\
    \ vowels_index_count_32 = 0;\n    let vowels_index_count_33 = 0;\n    let vowels_index_count_34\
    \ = 0;\n    let vowels_index_count_35 = 0;\n    let vowels_index_count_36 = 0;\n\
    \    let vowels_index_count_37 = 0;\n    let vowels_index_count_38 = 0;\n    let\
    \ vowels_index_count_39 = 0;\n    let vowels_index_count_40 = 0;\n    let vowels_index_count_41\
    \ = 0;\n    let vowels_index_count_42 = 0;\n    let vowels_index_count_43 = 0;\n\
    \    let vowels_index_count_44 = 0;\n    let vowels_index_count_45 = 0;\n    let\
    \ vowels_index_count_46 = 0;\n    let vowels_index_count_47 = 0;\n    let vowels_index_count_48\
    \ = 0;\n    let vowels_index_count_49 = 0;\n    let vowels_index_count_50 = 0;\n\
    \    let vowels_index_count_51 = 0;\n    let vowels_index_count_52 = 0;\n    let\
    \ vowels_index_count_53 = 0;\n    let vowels_index_count_54 = 0;\n    let vowels_index_count_55\
    \ = 0;\n    let vowels_index_count_56 = 0;\n    let vowels_index_count_57 = 0;\n\
    \    let vowels_index_count_58 = 0;\n    let vowels_index_count_59 = 0;\n    let\
    \ vowels_index_count_60 = 0;\n    let vowels_index_count_61 = 0;\n    let vowels_index_count_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl0xc265d.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count\
    \ = vowels.length;\n    let vowel_index = 0;\n    let vowel_found = false;\n \
    \   let vowel_found_index = 0;\n    let vowel_found_index2 = 0;\n    let vowel_found_index3\
    \ = 0;\n    let vowel_found_index4 = 0;\n    let vowel_found_index5 = 0;\n   \
    \ let vowel_found_index6 = 0;\n    let vowel_found_index7 = 0;\n    let vowel_found_index8\
    \ = 0;\n    let vowel_found_index9 = 0;\n    let vowel_found_index10 = 0;\n  \
    \  let vowel_found_index11 = 0;\n    let vowel_found_index12 = 0;\n    let vowel_found_index13\
    \ = 0;\n    let vowel_found_index14 = 0;\n    let vowel_found_index15 = 0;\n \
    \   let vowel_found_index16 = 0;\n    let vowel_found_index17 = 0;\n    let vowel_found_index18\
    \ = 0;\n    let vowel_found_index19 = 0;\n    let vowel_found_index20 = 0;\n \
    \   let vowel_found_index21 = 0;\n    let vowel_found_index22 = 0;\n    let vowel_found_index23\
    \ = 0;\n    let vowel_found_index24 = 0;\n    let vowel_found_index25 = 0;\n \
    \   let vowel_found_index26 = 0;\n    let vowel_found_index27 = 0;\n    let vowel_found_index28\
    \ = 0;\n    let vowel_found_index29 = 0;\n    let vowel_found_index30 = 0;\n \
    \   let vowel_found_index31 = 0;\n    let vowel_found_index32 = 0;\n    let vowel_found_index33\
    \ = 0;\n    let vowel_found_index34 = 0;\n    let vowel_found_index35 = 0;\n \
    \   let vowel_found_index36 = 0;\n    let vowel_found_index37 = 0;\n    let vowel_found_index38\
    \ = 0;\n    let vowel_found_index39 = 0;\n    let vowel_found_index40 = 0;\n \
    \   let vowel_found_index41 = 0;\n    let vowel_found_index42 = 0;\n    let vowel_found_index43\
    \ = 0;\n    let vowel_found_index44 = 0;\n    let vowel_found_index45 = 0;\n \
    \   let vowel_found_index46 = 0;\n    let vowel_found_index47 = 0;\n    let vowel_found_index48\
    \ = 0;\n    let vowel_found_index49 = 0;\n    let vowel_found_index50 = 0;\n \
    \   let vowel_found_index51 = 0;\n    let vowel_found_index52 = 0;\n    let vowel_found_index53\
    \ = 0;\n    let vowel_found_index54 = 0;\n    let vowel_found_index55 = 0;\n \
    \   let vowel_found_index56 = 0;\n    let vowel_found_index57 = 0;\n    let vowel_found_index58\
    \ = 0;\n    let vowel_found_index59 = 0;\n    let vowel_found_index60 = 0;\n \
    \   let vowel_found_index61 = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiayaon4t.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_right = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let\
    \ vowels_count_from_right_to_middle_to_left = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right\
    \ = vowels_count - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy2w6x2qc.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_left = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_right_to_left = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n\
    \    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    let vowels_count_from_middle_to_right_to_left_to_middle = vowels_count -\
    \ 15;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_middle =\
    \ vowels_count - 17;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_bhaz2i6.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3\
    \ = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5\
    \ = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7\
    \ = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9\
    \ = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11\
    \ = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13\
    \ = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15\
    \ = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17\
    \ = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19\
    \ = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21\
    \ = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23\
    \ = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25\
    \ = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27\
    \ = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29\
    \ = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31\
    \ = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33\
    \ = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35\
    \ = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37\
    \ = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39\
    \ = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41\
    \ = vowelsCount - 40;\n    let vowels\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvwysex3k.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_left = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_right_to_left = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n\
    \    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    let vowels_count_from_middle_to_right_to_left_to_middle = vowels_count -\
    \ 15;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_middle =\
    \ vowels_count - 17;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_bhaz2i6.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtgm6hsc.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromLeftAndRight = vowelsCount - 4;\n    let vowelsCountFromLeftAndRightAndLeft\
    \ = vowelsCount - 5;\n    let vowelsCountFromLeftAndRightAndLeftAndRight = vowelsCount\
    \ - 6;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeft = vowelsCount\
    \ - 7;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRight = vowelsCount\
    \ - 8;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 9;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 10;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 11;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 12;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 13;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 14;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 15;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 16;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 17;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 18;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAnd\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkjmq6gtl.ts(50,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_right = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n\
    \    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count -\
    \ 15;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_middle =\
    \ vowels_count - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_right_to_middle\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_right_to_middle_to_left_to_right_to_right_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_right_to_middle_to_left_to_right_to_right_to_middle_to_left_to_right_to_right_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeudvyu0y.ts(56,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3\
    \ = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5\
    \ = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7\
    \ = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9\
    \ = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11\
    \ = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13\
    \ = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15\
    \ = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17\
    \ = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19\
    \ = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21\
    \ = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23\
    \ = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25\
    \ = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27\
    \ = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29\
    \ = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31\
    \ = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33\
    \ = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35\
    \ = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37\
    \ = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39\
    \ = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41\
    \ = vowelsCount - 40;\n    let vowels\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvwysex3k.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count\
    \ = vowels.length;\n    let vowel_count_from_right = vowel_count - 1;\n    let\
    \ vowel_count_from_left = vowel_count - 2;\n    let vowel_count_from_middle =\
    \ vowel_count - 3;\n    let vowel_count_from_middle2 = vowel_count - 4;\n    let\
    \ vowel_count_from_middle3 = vowel_count - 5;\n    let vowel_count_from_middle4\
    \ = vowel_count - 6;\n    let vowel_count_from_middle5 = vowel_count - 7;\n  \
    \  let vowel_count_from_middle6 = vowel_count - 8;\n    let vowel_count_from_middle7\
    \ = vowel_count - 9;\n    let vowel_count_from_middle8 = vowel_count - 10;\n \
    \   let vowel_count_from_middle9 = vowel_count - 11;\n    let vowel_count_from_middle10\
    \ = vowel_count - 12;\n    let vowel_count_from_middle11 = vowel_count - 13;\n\
    \    let vowel_count_from_middle12 = vowel_count - 14;\n    let vowel_count_from_middle13\
    \ = vowel_count - 15;\n    let vowel_count_from_middle14 = vowel_count - 16;\n\
    \    let vowel_count_from_middle15 = vowel_count - 17;\n    let vowel_count_from_middle16\
    \ = vowel_count - 18;\n    let vowel_count_from_middle17 = vowel_count - 19;\n\
    \    let vowel_count_from_middle18 = vowel_count - 20;\n    let vowel_count_from_middle19\
    \ = vowel_count - 21;\n    let vowel_count_from_middle20 = vowel_count - 22;\n\
    \    let vowel_count_from_middle21 = vowel_count - 23;\n    let vowel_count_from_middle22\
    \ = vowel_count - 24;\n    let vowel_count_from_middle23 = vowel_count - 25;\n\
    \    let vowel_count_from_middle24 = vowel_count - 26;\n    let vowel_count_from_middle25\
    \ = vowel_count - 27;\n    let vowel_count_from_middle26 = vowel_count - 28;\n\
    \    let vowel_count_from_middle27 = vowel_count - 29;\n    let vowel_count_from_middle28\
    \ = vowel_count - 30;\n    let vowel_count_from_middle29 = vowel_count - 31;\n\
    \    let vowel_count_from_middle30 = vowel_count - 32;\n    let vowel_count_from_middle31\
    \ = vowel_count - 33;\n    let vowel_count_from_middle32 = vowel_count - 34;\n\
    \    let vowel_count_from_middle33 = vowel_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwz5az4g8.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left_to_right = vowels_count - 5;\n\
    \    let vowels_count_from_left_to_right_to_left = vowels_count - 6;\n    let\
    \ vowels_count_from_right_to_left_to_right_to_left = vowels_count - 7;\n    let\
    \ vowels_count_from_left_to_right_to_left_to_right_to_left = vowels_count - 8;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left = vowels_count\
    \ - 9;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 11;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 12;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 13;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 14;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 17;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 18;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdz7o7no1.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left_to_right = vowels_count - 5;\n\
    \    let vowels_count_from_left_to_right_to_left = vowels_count - 6;\n    let\
    \ vowels_count_from_right_to_left_to_right_to_left = vowels_count - 7;\n    let\
    \ vowels_count_from_left_to_right_to_left_to_right_to_left = vowels_count - 8;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right = vowels_count\
    \ - 9;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 11;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 12;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 13;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 14;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 17;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 18;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 20;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmposzwqnxn.ts(53,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromRightAndLeftAndUpper = vowelsCount - 4;\n    let vowelsCountFromRightAndLeftAndUpperAndLower\
    \ = vowelsCount - 5;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapital\
    \ = vowelsCount - 6;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthers\
    \ = vowelsCount - 7;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthers\
    \ = vowelsCount - 8;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthers\
    \ = vowelsCount - 9;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 10;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 11;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 12;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 13;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 14;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 15;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 16;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 17;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 18;\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa5vp4hq6.ts(29,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpa5vp4hq6.ts(50,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromBoth = vowelsCount - 3;\n    let\
    \ vowelsCountFromBothAndRight = vowelsCount - 4;\n    let vowelsCountFromBothAndLeft\
    \ = vowelsCount - 5;\n    let vowelsCountFromBothAndBoth = vowelsCount - 6;\n\
    \    let vowelsCountFromBothAndBothAndRight = vowelsCount - 7;\n    let vowelsCountFromBothAndBothAndLeft\
    \ = vowelsCount - 8;\n    let vowelsCountFromBothAndBothAndBoth = vowelsCount\
    \ - 9;\n    let vowelsCountFromBothAndBothAndBothAndRight = vowelsCount - 10;\n\
    \    let vowelsCountFromBothAndBothAndBothAndLeft = vowelsCount - 11;\n    let\
    \ vowelsCountFromBothAndBothAndBothAndBoth = vowelsCount - 12;\n    let vowelsCountFromBothAndBothAndBothAndBothAndRight\
    \ = vowelsCount - 13;\n    let vowelsCountFromBothAndBothAndBothAndBothAndLeft\
    \ = vowelsCount - 14;\n    let vowelsCountFromBothAndBothAndBothAndBothAndBoth\
    \ = vowelsCount - 15;\n    let vowelsCountFromBothAndBothAndBothAndBothAndBothAndRight\
    \ = vowelsCount - 16;\n    let vowelsCountFromBothAndBothAndBothAndBothAndBothAndLeft\
    \ = vowelsCount - 17;\n    let vowelsCountFromBothAndBothAndBothAndBothAndBothAndBoth\
    \ = vowelsCount - 18;\n    let vowelsCountFromBothAndBothAndBothAndBothAndBothAndBothAndRight\
    \ = vowelsCount - 19;\n    let vowelsCountFromBothAndBothAndBothAndBothAndBothAndBothAndLeft\
    \ = vowelsCount - 20;\n    let vowelsCountFromBothAndBothAndBothAndBothAndBothAndBothAndBoth\
    \ = vowelsCount - 21;\n    let vowelsCountFromBothAndBothAndBothAndBothAndBothAndBothAndBothAndRight\
    \ = vowelsCount - 22;\n    let vowelsCountFromBothAndBothAndBothAndBothAndBothAndBothAndBothAndBothAndLeft\
    \ = vowelsCount - 23;\n    let vowelsCountFromBothAndBothAndBothAndBothAndBothAndBothAndBothAndBothAndBoth\
    \ = vowelsCount - 24;\n    let vowelsCountFromBothAndBothAndBoth\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnenhbyhl.ts(56,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_left = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_right_to_left = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n\
    \    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    let vowels_count_from_middle_to_right_to_left_to_middle = vowels_count -\
    \ 15;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_middle =\
    \ vowels_count - 17;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_bhaz2i6.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_right = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n\
    \    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    let vowels_count_from_middle_to_left_to_right_to_middle = vowels_count -\
    \ 15;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right =\
    \ vowels_count - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmsv__d7l.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_left = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_right_to_left = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n\
    \    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    let vowels_count_from_middle_to_right_to_left_to_middle = vowels_count -\
    \ 15;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_middle =\
    \ vowels_count - 17;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_bhaz2i6.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n\
    \    let vowelsCountMin = vowelsCount;\n    let vowelsCountMax = vowelsCount;\n\
    \    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMaxIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMaxIndexIndex\
    \ = 0;\n    let vowelsCountMinIndexIndex = 0;\n    let vowelsCountMinIndexIndex\
    \ = 0;\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf4mvv5gz.ts(66,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpf4mvv5gz.ts(87,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowel\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgxnfna_c.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left_to_right = vowels_count - 5;\n\
    \    let vowels_count_from_left_to_right_to_left = vowels_count - 6;\n    let\
    \ vowels_count_from_right_to_left_to_right_to_left = vowels_count - 7;\n    let\
    \ vowels_count_from_left_to_right_to_left_to_right = vowels_count - 8;\n    let\
    \ vowels_count_from_right_to_left_to_right_to_left_to_right = vowels_count - 9;\n\
    \    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 11;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 12;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 13;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 14;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 17;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 18;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 20;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgahkg9s6.ts(53,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014905
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_left = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_right_to_left = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n\
    \    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    let vowels_count_from_middle_to_right_to_left_to_middle = vowels_count -\
    \ 15;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_middle =\
    \ vowels_count - 17;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_bhaz2i6.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3\
    \ = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5\
    \ = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7\
    \ = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9\
    \ = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11\
    \ = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13\
    \ = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15\
    \ = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17\
    \ = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19\
    \ = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21\
    \ = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23\
    \ = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25\
    \ = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27\
    \ = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29\
    \ = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31\
    \ = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33\
    \ = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35\
    \ = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37\
    \ = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39\
    \ = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41\
    \ = vowelsCount - 40;\n    let vowels\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvwysex3k.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3\
    \ = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5\
    \ = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7\
    \ = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9\
    \ = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11\
    \ = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13\
    \ = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15\
    \ = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17\
    \ = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19\
    \ = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21\
    \ = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23\
    \ = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25\
    \ = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27\
    \ = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29\
    \ = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31\
    \ = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33\
    \ = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35\
    \ = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37\
    \ = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39\
    \ = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41\
    \ = vowelsCount - 40;\n    let vowels\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvwysex3k.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3\
    \ = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5\
    \ = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7\
    \ = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9\
    \ = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11\
    \ = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13\
    \ = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15\
    \ = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17\
    \ = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19\
    \ = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21\
    \ = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23\
    \ = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25\
    \ = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27\
    \ = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29\
    \ = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31\
    \ = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33\
    \ = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35\
    \ = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37\
    \ = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39\
    \ = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41\
    \ = vowelsCount - 40;\n    let vowels\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvwysex3k.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_index = 0;\n    let vowels_index2 = 0;\n  \
    \  let vowels_index3 = 0;\n    let vowels_index4 = 0;\n    let vowels_index5 =\
    \ 0;\n    let vowels_index6 = 0;\n    let vowels_index7 = 0;\n    let vowels_index8\
    \ = 0;\n    let vowels_index9 = 0;\n    let vowels_index10 = 0;\n    let vowels_index11\
    \ = 0;\n    let vowels_index12 = 0;\n    let vowels_index13 = 0;\n    let vowels_index14\
    \ = 0;\n    let vowels_index15 = 0;\n    let vowels_index16 = 0;\n    let vowels_index17\
    \ = 0;\n    let vowels_index18 = 0;\n    let vowels_index19 = 0;\n    let vowels_index20\
    \ = 0;\n    let vowels_index21 = 0;\n    let vowels_index22 = 0;\n    let vowels_index23\
    \ = 0;\n    let vowels_index24 = 0;\n    let vowels_index25 = 0;\n    let vowels_index26\
    \ = 0;\n    let vowels_index27 = 0;\n    let vowels_index28 = 0;\n    let vowels_index29\
    \ = 0;\n    let vowels_index30 = 0;\n    let vowels_index31 = 0;\n    let vowels_index32\
    \ = 0;\n    let vowels_index33 = 0;\n    let vowels_index34 = 0;\n    let vowels_index35\
    \ = 0;\n    let vowels_index36 = 0;\n    let vowels_index37 = 0;\n    let vowels_index38\
    \ = 0;\n    let vowels_index39 = 0;\n    let vowels_index40 = 0;\n    let vowels_index41\
    \ = 0;\n    let vowels_index42 = 0;\n    let vowels_index43 = 0;\n    let vowels_index44\
    \ = 0;\n    let vowels_index45 = 0;\n    let vowels_index46 = 0;\n    let vowels_index47\
    \ = 0;\n    let vowels_index48 = 0;\n    let vowels_index49 = 0;\n    let vowels_index50\
    \ = 0;\n    let vowels_index51 = 0;\n    let vowels_index52 = 0;\n    let vowels_index53\
    \ = 0;\n    let vowels_index54 = 0;\n    let vowels_index55 = 0;\n    let vowels_index56\
    \ = 0;\n    let vowels_index57 = 0;\n    let vowels_index58 = 0;\n    let vowels_index59\
    \ = 0;\n    let vowels_index60 = 0;\n    let vowels_index61 = 0;\n    let vowels_index62\
    \ = 0;\n    let vowels_index63 = 0;\n    let vowels_index64 = 0;\n    let vowels_index65\
    \ = 0;\n    let vowels_index66 = 0;\n    let vowels_index67 = 0;\n    let vowels_index68\
    \ = 0;\n    let vowels_index69 = 0;\n    let vowels_index70 = 0;\n    let vowels_index71\
    \ = 0;\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvk7vwvao.ts(82,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpvk7vwvao.ts(103,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ > -1) {\n            vowelsIndex.push(i);\n            vowelsIndexCount++;\n\
    \        }\n    }\n    let vowelsIndexMin = Math.min(...vowelsIndex);\n    let\
    \ vowelsIndexMax = Math.max(...vowelsIndex);\n    let vowelsIndexMid = (vowelsIndexMin\
    \ + vowelsIndexMax) / 2;\n    let vowelsIndexMidValue = vowelsIndex[vowelsIndexMid];\n\
    \    let vowelsIndexMidValueIndex = vowelsIndex.indexOf(vowelsIndexMidValue);\n\
    \    let vowelsIndexMidValueCount = vowelsIndex.length - vowelsIndexMidValueIndex;\n\
    \    let vowelsIndexMidValueCountMin = Math.min(...vowelsIndexCount);\n    let\
    \ vowelsIndexMidValueCountMax = Math.max(...vowelsIndexCount);\n    let vowelsIndexMidValueCountMid\
    \ = (vowelsIndexMidValueCountMin + vowelsIndexMidValueCountMax) / 2;\n    let\
    \ vowelsIndexMidValueCountMidValue = vowelsIndexCount[vowelsIndexMidValueCountMid];\n\
    \    let vowelsIndexMidValueCountMidValueIndex = vowelsIndexCount.indexOf(vowelsIndexMidValueCountMidValue);\n\
    \    let vowelsIndexMidValueCountMidValueCount = vowelsIndexCount.length - vowelsIndexMidValueCountMidValueIndex;\n\
    \    let vowelsIndexMidValueCountMidValueCountMin = Math.min(...vowelsIndexMidValueCount);\n\
    \    let vowelsIndexMidValueCountMidValueCountMax = Math.max(...vowelsIndexMidValueCount);\n\
    \    let vowelsIndexMidValueCountMidValueCountMid = (vowelsIndexMidValueCountMidValueCountMin\
    \ + vowelsIndexMidValueCountMidValueCountMax) / 2;\n    let vowelsIndexMidValueCountMidValueCountMidValue\
    \ = vowelsIndexMidValueCount[vowelsIndexMidValueCountMidValueCountMid];\n    let\
    \ vowelsIndexMidValueCountMidValueCountMidValueIndex = vowelsIndexMidValueCount.indexOf(vowelsIndexMidValueCountMidValueCountMidValue);\n\
    \    let vowelsIndexMidValueCountMidValueCountMidValueCount = vowelsIndexMidValueCount.length\
    \ - vowelsIndexMidValueCountMidValueCountMidValueIndex;\n    let vowelsIndexMidValueCountMidValueCountMidValueCountMin\
    \ = Math.min(...vowelsIndexMidValueCountMidValueCount);\n    let vowelsIndexMidValueCountMidValueCountMid\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd_b5p5tl.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - 1;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left_to_right\
    \ = vowels_count_from_right_to_left - vowels_count_from_left_to_right;\n    let\
    \ vowels_count_from_left_to_right_to_left = vowels_count_from_left_to_right -\
    \ vowels_count_from_right_to_left;\n    let vowels_count_from_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right - vowels_count_from_left_to_right_to_left;\n\
    \    let vowels_count_from_left_to_right_to_left_to_right_to_left = vowels_count_from_left_to_right_to_left_to_right_to_left\
    \ - vowels_count_from_right_to_left_to_right_to_left;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left - vowels_count_from_left_to_right_to_right_to_left_to_right_to_left;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ - vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptrepje5i.ts(45,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtgm6hsc.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left_to_right = vowels_count - 5;\n\
    \    let vowels_count_from_left_to_right_to_left = vowels_count - 6;\n    let\
    \ vowels_count_from_right_to_left_to_right_to_left = vowels_count - 7;\n    let\
    \ vowels_count_from_left_to_right_to_left_to_right = vowels_count - 8;\n    let\
    \ vowels_count_from_right_to_left_to_right_to_left_to_right = vowels_count - 9;\n\
    \    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 11;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 12;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 13;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 14;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 17;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 18;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 20;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgahkg9s6.ts(53,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014905
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_right = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let\
    \ vowels_count_from_right_to_middle_to_left = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right\
    \ = vowels_count - 17;\n    let vowels_count_from_middle_to_right_to_left_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_middle\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 27;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpttzl5vrb.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left_to_right = vowels_count - 5;\n\
    \    let vowels_count_from_left_to_right_to_left = vowels_count - 6;\n    let\
    \ vowels_count_from_right_to_left_to_right_to_left = vowels_count - 7;\n    let\
    \ vowels_count_from_left_to_right_to_left_to_right_to_left = vowels_count - 8;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left = vowels_count\
    \ - 9;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 11;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 12;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 13;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 14;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 17;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 18;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdz7o7no1.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_right = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let\
    \ vowels_count_from_right_to_middle_to_left = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right\
    \ = vowels_count - 17;\n    let vowels_count_from_middle_to_right_to_left = vowels_count\
    \ - 18;\n    let vowels_count_from_left_to_middle_to_right_to_middle = vowels_count\
    \ - 19;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_left\
    \ = vowels_count - 21;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle\
    \ = vowels_count - 22;\n    let vowels_count_from_middle_to_right_to_left_to_middle_to_right_to_left_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_left_to_right_to_middle_to_right_to_left_to_middle_to_left\
    \ = vowels_count - 24;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 25;\n    let vowels_count_from_middle_to_left_to_right_to_middle_to_right_to_left_to_middle_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left_to_middle_to_right_to_left_to_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi1m95h4_.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtgm6hsc.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    for (let i = 0; i < vowelsCount;\
    \ i++) {\n        let index = word.indexOf(vowels[i]);\n        if (index > -1)\
    \ {\n            vowelsIndex.push(index);\n        }\n    }\n    let vowelsCount\
    \ = vowelsIndex.length;\n    let vowelsIndexMax = Math.max.apply(null, vowelsIndex);\n\
    \    let vowelsIndexMin = Math.min.apply(null, vowelsIndex);\n    let vowelsIndexMaxIndex\
    \ = vowelsIndex.indexOf(vowelsIndexMax);\n    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n\
    \    let vowelsIndexMaxIndex2 = vowelsIndex.indexOf(vowelsIndexMax, vowelsIndexMaxIndex\
    \ + 1);\n    let vowelsIndexMinIndex2 = vowelsIndex.indexOf(vowelsIndexMin, vowelsIndexMinIndex\
    \ + 1);\n    let vowelsIndexMaxIndex3 = vowelsIndex.indexOf(vowelsIndexMax, vowelsIndexMaxIndex\
    \ + 2);\n    let vowelsIndexMinIndex3 = vowelsIndex.indexOf(vowelsIndexMin, vowelsIndexMinIndex\
    \ + 2);\n    let vowelsIndexMaxIndex4 = vowelsIndex.indexOf(vowelsIndexMax, vowelsIndexMaxIndex\
    \ + 3);\n    let vowelsIndexMinIndex4 = vowelsIndex.indexOf(vowelsIndexMin, vowelsIndexMinIndex\
    \ + 3);\n    let vowelsIndexMaxIndex5 = vowelsIndex.indexOf(vowelsIndexMax, vowelsIndexMaxIndex\
    \ + 4);\n    let vowelsIndexMinIndex5 = vowelsIndex.indexOf(vowelsIndexMin, vowelsIndexMinIndex\
    \ + 4);\n    let vowelsIndexMaxIndex6 = vowelsIndex.indexOf(vowelsIndexMax, vowelsIndexMaxIndex\
    \ + 5);\n    let vowelsIndexMinIndex6 = vowelsIndex.indexOf(vowelsIndexMin, vowelsIndexMinIndex\
    \ + 5);\n    let vowelsIndexMaxIndex7 = vowelsIndex.indexOf(vowelsIndexMax, vowelsIndexMaxIndex\
    \ + 6);\n    let vowelsIndexMinIndex7 = vowelsIndex.indexOf(vowelsIndexMin, vowelsIndexMinIndex\
    \ + 6);\n    let vowelsIndexMaxIndex8 = vowelsIndex.indexOf(vowelsIndexMax, vowelsIndexMaxIndex\
    \ + 7);\n    let vowelsIndexMinIndex8 = vowelsIndex.indexOf(vowelsIndexMin, vowelsIndexMinIndex\
    \ + 7);\n    let vowelsIndexMaxIndex9 = vowelsIndex.indexOf(vowelsIndexMax, vowelsIndexMaxIndex\
    \ + 8);\n    let vowelsIndexMinIndex9 = vowelsIndex.indexOf(vowels\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplsifvh5c.ts(38,1): error TS1005: '','' expected.

    ../../../../../tmp/tmplsifvh5c.ts(38,9): error TS1005: '','' expected.

    ../../../../../tmp/tmplsifvh5c.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromLeftAndRight = vowelsCount - 4;\n    let vowelsCountFromLeftAndRightAndLeft\
    \ = vowelsCount - 5;\n    let vowelsCountFromLeftAndRightAndLeftAndRight = vowelsCount\
    \ - 6;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeft = vowelsCount\
    \ - 7;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRight = vowelsCount\
    \ - 8;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 9;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 10;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 11;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 12;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 13;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 14;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 15;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 16;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 17;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 18;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprgxw4tml.ts(50,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n\
    \    let vowelsCountMinusOne = vowelsCount - 1;\n    let vowelsCountMinusTwo =\
    \ vowelsCount - 2;\n    let vowelsCountMinusThree = vowelsCount - 3;\n    let\
    \ vowelsCountMinusFour = vowelsCount - 4;\n    let vowelsCountMinusFive = vowelsCount\
    \ - 5;\n    let vowelsCountMinusSix = vowelsCount - 6;\n    let vowelsCountMinusSeven\
    \ = vowelsCount - 7;\n    let vowelsCountMinusEight = vowelsCount - 8;\n    let\
    \ vowelsCountMinusNine = vowelsCount - 9;\n    let vowelsCountMinusTen = vowelsCount\
    \ - 10;\n    let vowelsCountMinusEleven = vowelsCount - 11;\n    let vowelsCountMinusTwelve\
    \ = vowelsCount - 12;\n    let vowelsCountMinusThirteen = vowelsCount - 13;\n\
    \    let vowelsCountMinusFourteen = vowelsCount - 14;\n    let vowelsCountMinusFifteen\
    \ = vowelsCount - 15;\n    let vowelsCountMinusSixteen = vowelsCount - 16;\n \
    \   let vowelsCountMinusSeventeen = vowelsCount - 17;\n    let vowelsCountMinusEighteen\
    \ = vowelsCount - 18;\n    let vowelsCountMinusNineteen = vowelsCount - 19;\n\
    \    let vowelsCountMinusTwenty = vowelsCount - 20;\n    let vowelsCountMinusTwentyOne\
    \ = vowelsCount - 21;\n    let vowelsCountMinusTwentyTwo = vowelsCount - 22;\n\
    \    let vowelsCountMinusTwentyThree = vowelsCount - 23;\n    let vowelsCountMinusTwentyFour\
    \ = vowelsCount - 24;\n    let vowelsCountMinusTwentyFive = vowelsCount - 25;\n\
    \    let vowelsCountMinusTwentySix = vowelsCount - 26;\n    let vowelsCountMinusTwentySeven\
    \ = vowelsCount - 27;\n    let vowelsCountMinusTwentyEight = vowelsCount - 28;\n\
    \    let vowelsCountMinusTwentyNine = vowelsCount - 29;\n    let vowelsCountMinusTwentyTen\
    \ = \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqyg5o5rg.ts(42,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpqyg5o5rg.ts(63,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromRightAndLeftAndUp = vowelsCount - 4;\n    let vowelsCountFromRightAndLeftAndDown\
    \ = vowelsCount - 5;\n    let vowelsCountFromRightAndLeftAndDownAndUp = vowelsCount\
    \ - 6;\n    let vowelsCountFromRightAndLeftAndDownAndUpAndDown = vowelsCount -\
    \ 7;\n    let vowelsCountFromRightAndLeftAndDownAndUpAndDownAndUp = vowelsCount\
    \ - 8;\n    let vowelsCountFromRightAndLeftAndDownAndUpAndDownAndUpAndDown = vowelsCount\
    \ - 9;\n    let vowelsCountFromRightAndLeftAndDownAndUpAndDownAndUpAndDownAndUp\
    \ = vowelsCount - 10;\n    let vowelsCountFromRightAndLeftAndDownAndUpAndDownAndUpAndDownAndUpAndDown\
    \ = vowelsCount - 11;\n    let vowelsCountFromRightAndLeftAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp\
    \ = vowelsCount - 12;\n    let vowelsCountFromRightAndLeftAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDown\
    \ = vowelsCount - 13;\n    let vowelsCountFromRightAndLeftAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp\
    \ = vowelsCount - 14;\n    let vowelsCountFromRightAndLeftAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDown\
    \ = vowelsCount - 15;\n    let vowelsCountFromRightAndLeftAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp\
    \ = vowelsCount - 16;\n    let vowelsCountFromRightAndLeftAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDown\
    \ = vowelsCount - 17;\n    let vowelsCountFromRightAndLeftAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUpAndDownAndUp\
    \ = vowelsCount - 18;\n    let vowelsCountFromRightAndLeftAndDownAndUpAndDownAndUp\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv4r_t627.ts(50,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count\
    \ = vowels.length;\n    let vowel_count_from_right = vowel_count - 1;\n    let\
    \ vowel_count_from_left = vowel_count - 2;\n    let vowel_count_from_middle =\
    \ vowel_count - 3;\n    let vowel_count_from_middle2 = vowel_count - 4;\n    let\
    \ vowel_count_from_middle3 = vowel_count - 5;\n    let vowel_count_from_middle4\
    \ = vowel_count - 6;\n    let vowel_count_from_middle5 = vowel_count - 7;\n  \
    \  let vowel_count_from_middle6 = vowel_count - 8;\n    let vowel_count_from_middle7\
    \ = vowel_count - 9;\n    let vowel_count_from_middle8 = vowel_count - 10;\n \
    \   let vowel_count_from_middle9 = vowel_count - 11;\n    let vowel_count_from_middle10\
    \ = vowel_count - 12;\n    let vowel_count_from_middle11 = vowel_count - 13;\n\
    \    let vowel_count_from_middle12 = vowel_count - 14;\n    let vowel_count_from_middle13\
    \ = vowel_count - 15;\n    let vowel_count_from_middle14 = vowel_count - 16;\n\
    \    let vowel_count_from_middle15 = vowel_count - 17;\n    let vowel_count_from_middle16\
    \ = vowel_count - 18;\n    let vowel_count_from_middle17 = vowel_count - 19;\n\
    \    let vowel_count_from_middle18 = vowel_count - 20;\n    let vowel_count_from_middle19\
    \ = vowel_count - 21;\n    let vowel_count_from_middle20 = vowel_count - 22;\n\
    \    let vowel_count_from_middle21 = vowel_count - 23;\n    let vowel_count_from_middle22\
    \ = vowel_count - 24;\n    let vowel_count_from_middle23 = vowel_count - 25;\n\
    \    let vowel_count_from_middle24 = vowel_count - 26;\n    let vowel_count_from_middle25\
    \ = vowel_count - 27;\n    let vowel_count_from_middle26 = vowel_count - 28;\n\
    \    let vowel_count_from_middle27 = vowel_count - 29;\n    let vowel_count_from_middle28\
    \ = vowel_count - 30;\n    let vowel_count_from_middle29 = vowel_count - 31;\n\
    \    let vowel_count_from_middle30 = vowel_count - 32;\n    let vowel_count_from_middle31\
    \ = vowel_count - 33;\n    let vowel_count_from_middle32 = vowel_count - 34;\n\
    \    let vowel_count_from_middle33 = vowel_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwz5az4g8.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountLeft = word.length - vowelsCount;\n   \
    \ let vowelsCountRight = word.length - vowelsCount - 1;\n    let vowelsCountRightLeft\
    \ = word.length - vowelsCount - 2;\n    let vowelsCountRightRight = word.length\
    \ - vowelsCount - 3;\n    let vowelsCountRightLeft = word.length - vowelsCount\
    \ - 4;\n    let vowelsCountRightRightLeft = word.length - vowelsCount - 5;\n \
    \   let vowelsCountRightRightRight = word.length - vowelsCount - 6;\n    let vowelsCountRightRightLeftRight\
    \ = word.length - vowelsCount - 7;\n    let vowelsCountRightRightLeftLeftRight\
    \ = word.length - vowelsCount - 8;\n    let vowelsCountRightRightLeftLeftLeftLeftRight\
    \ = word.length - vowelsCount - 9;\n    let vowelsCountRightRightLeftLeftLeftLeftRight\
    \ = word.length - vowelsCount - 10;\n    let vowelsCountRightRightLeftLeftLeftLeftRightLeft\
    \ = word.length - vowelsCount - 11;\n    let vowelsCountRightRightLeftLeftLeftLeftRightRightRight\
    \ = word.length - vowelsCount - 12;\n    let vowelsCountRightRightLeftLeftLeftLeftRightRightLeftRight\
    \ = word.length - vowelsCount - 13;\n    let vowelsCountRightRightLeftLeftLeftLeftRightRightLeftRightLeft\
    \ = word.length - vowelsCount - 14;\n    let vowelsCountRightRightLeftLeftLeftRightRightLeftRightRightRight\
    \ = word.length - vowelsCount - 15;\n    let vowelsCountRightRightLeftLeftRightRightLeftRightLeftRightLeft\
    \ = word.length - vowelsCount - 16;\n    let vowelsCountRightRightLeftLeftRightLeftRightLeftRightLeftRight\
    \ = word.length - vowelsCount - 17;\n    let vowelsCountRightRightLeftLeftRightLeftRightLeftRightLeftRightLeft\
    \ = word.length - vowelsCount - 18;\n    let vowelsCountRightRightLeftLeftRightLeftRightLeftRightLeftRightRight\
    \ = word.length - vowelsCount - 19;\n    let vowelsCountRightRightLeftLeftRightLeftRightLeftRightLeftRightLeft\
    \ = word.length - vowelsCount - 20;\n    let vowelsCountRightRightLeftLeftRightLeftRightLeftRightLeftRightRight\
    \ = word.length - vowelsCount - 21;\n    let vowelsCountRightRightLeftLeftRightLeftRightLeftRightLeftRightLeftRight\
    \ = word.length - vowelsCount - 22;\n    let vowelsCountRightRightLeftLeftRightLeftRightLeftRightLeftRightLeftRightLeft\
    \ = word.length - vowelsCount - 23;\n    let vowels\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprbu39t9h.ts(56,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtgm6hsc.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountRight = vowelsCount - 1;\n    let vowelsCountLeft\
    \ = vowelsCount - 2;\n    let vowelsCountRightLeft = vowelsCount - 3;\n    let\
    \ vowelsCountRightRight = vowelsCount - 4;\n    let vowelsCountRightLeft = vowelsCount\
    \ - 5;\n    let vowelsCountLeftRight = vowelsCount - 6;\n    let vowelsCountLeftLeft\
    \ = vowelsCount - 7;\n    let vowelsCountLeftRightLeft = vowelsCount - 8;\n  \
    \  let vowelsCountLeftRightRight = vowelsCount - 9;\n    let vowelsCountLeftRightLeft\
    \ = vowelsCount - 10;\n    let vowelsCountLeftLeftRight = vowelsCount - 11;\n\
    \    let vowelsCountLeftLeftLeft = vowelsCount - 12;\n    let vowelsCountLeftLeftRight\
    \ = vowelsCount - 13;\n    let vowelsCountLeftLeftLeftRight = vowelsCount - 14;\n\
    \    let vowelsCountLeftLeftLeftLeft = vowelsCount - 15;\n    let vowelsCountLeftLeftLeftRight\
    \ = vowelsCount - 16;\n    let vowelsCountLeftLeftLeftLeftRight = vowelsCount\
    \ - 17;\n    let vowelsCountLeftLeftLeftLeftLeft = vowelsCount - 18;\n    let\
    \ vowelsCountLeftLeftLeftRight = vowelsCount - 19;\n    let vowelsCountLeftLeftLeftLeftRight\
    \ = vowelsCount - 20;\n    let vowelsCountLeftLeftLeftLeftLeftRight = vowelsCount\
    \ - 21;\n    let vowelsCountLeftLeftLeftLeftLeftRight = vowelsCount - 22;\n  \
    \  let vowelsCountLeftLeftLeftLeftLeftRight = vowelsCount - 23;\n    let vowelsCountLeftLeftLeftLeftLeftLeftRight\
    \ = vowelsCount - 24;\n    let vowelsCountLeftLeftLeftLeftLeftLeftRight = vowelsCount\
    \ - 25;\n    let vowelsCountLeftLeftLeftLeftLeftLeftRight = vowelsCount - 26;\n\
    \    let vowelsCountLeftLeftLeftLeftLeftLeftRight = vowelsCount - 27;\n    let\
    \ vowelsCountLeftLeftLeftLeftLeftLeftRight = vowelsCount - 28;\n    let vowelsCountLeftLeftLeftLeftLeftLeftRight\
    \ = vowelsCount - 29;\n    let vowelsCountLeftLeftLeftLeftLeftLeftRight = vowelsCount\
    \ - 30;\n    let vowelsCountLeftLeftLeftLeftLeftLeftRight = vowelsCount - 31;\n\
    \    let vowelsCountLeftLeftLeftLeftLeftLeftRight = \ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpweic22qe.ts(42,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpweic22qe.ts(63,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014910
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3\
    \ = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5\
    \ = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7\
    \ = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9\
    \ = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11\
    \ = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13\
    \ = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15\
    \ = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17\
    \ = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19\
    \ = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21\
    \ = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23\
    \ = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25\
    \ = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27\
    \ = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29\
    \ = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31\
    \ = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33\
    \ = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35\
    \ = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37\
    \ = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39\
    \ = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41\
    \ = vowelsCount - 40;\n    let vowels\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvwysex3k.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountLeft = vowelsCount - 1;\n    let vowelsCountRight\
    \ = vowelsCount - 2;\n    let vowelsCountRightLeft = vowelsCount - 3;\n    let\
    \ vowelsCountRightRight = vowelsCount - 4;\n    let vowelsCountRightLeft = vowelsCount\
    \ - 5;\n    let vowelsCountRightRightLeft = vowelsCount - 6;\n    let vowelsCountRightRightRight\
    \ = vowelsCount - 7;\n    let vowelsCountRightRightLeftRight = vowelsCount - 8;\n\
    \    let vowelsCountRightRightLeftLeftRight = vowelsCount - 9;\n    let vowelsCountRightRightLeftLeftLeftRight\
    \ = vowelsCount - 10;\n    let vowelsCountRightRightLeftLeftLeftRightLeft = vowelsCount\
    \ - 11;\n    let vowelsCountRightRightLeftLeftLeftRightRight = vowelsCount - 12;\n\
    \    let vowelsCountRightRightLeftLeftLeftRightLeftRight = vowelsCount - 13;\n\
    \    let vowelsCountRightRightLeftLeftLeftRightLeftRightLeft = vowelsCount - 14;\n\
    \    let vowelsCountRightRightLeftLeftLeftRightLeftRightRight = vowelsCount -\
    \ 15;\n    let vowelsCountRightRightLeftLeftLeftRightLeftRightLeftRight = vowelsCount\
    \ - 16;\n    let vowelsCountRightRightLeftLeftRightLeftRightLeftRightLeft = vowelsCount\
    \ - 17;\n    let vowelsCountRightRightLeftLeftRightLeftRightLeftRightRight = vowelsCount\
    \ - 18;\n    let vowelsCountRightRightLeftLeftRightLeftRightLeftRightLeftRight\
    \ = vowelsCount - 19;\n    let vowelsCountRightRightLeftLeftRightLeftRightLeftRightLeftRight\
    \ = vowelsCount - 20;\n    let vowelsCountRightRightLeftLeftRightLeftRightLeftRightLeftRightLeftRight\
    \ = vowelsCount - 21;\n    let vowelsCountRightRightLeftLeftRightLeftRightLeftRightLeftRightLeftRight\
    \ = vowelsCount - 22;\n    let vowelsCountRightRightLeftLeftRightLeftRightLeftRightLeftRightLeftRightLeft\
    \ = vowelsCount - 23;\n    let vowelsCountRightRightLeftLeftRightLeftRightLeftRightLeftRightLeftRightRight\
    \ = vowelsCount - 24;\n    let vowelsCountRightRightLeftLeftRightLeftRightLeftRightLeftRightLeftRightLeftRight\
    \ = vowelsCount - 25;\n    let vowelsCountRightRightLeftLeftRightLeftRightLeftRightLeftRightLeftRightLeftRightLeft\
    \ = vowelsCount - 26;\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpplkwwau0.ts(37,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpplkwwau0.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014910
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - word.length;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpel921_eu.ts(36,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpel921_eu.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014910
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_index = 0;\n    let vowels_index_count = 1;\n\
    \    let vowels_index_count_2 = 1;\n    let vowels_index_count_3 = 1;\n    let\
    \ vowels_index_count_4 = 1;\n    let vowels_index_count_5 = 1;\n    let vowels_index_count_6\
    \ = 1;\n    let vowels_index_count_7 = 1;\n    let vowels_index_count_8 = 1;\n\
    \    let vowels_index_count_9 = 1;\n    let vowels_index_count_10 = 1;\n    let\
    \ vowels_index_count_11 = 1;\n    let vowels_index_count_12 = 1;\n    let vowels_index_count_13\
    \ = 1;\n    let vowels_index_count_14 = 1;\n    let vowels_index_count_15 = 1;\n\
    \    let vowels_index_count_16 = 1;\n    let vowels_index_count_17 = 1;\n    let\
    \ vowels_index_count_18 = 1;\n    let vowels_index_count_19 = 1;\n    let vowels_index_count_20\
    \ = 1;\n    let vowels_index_count_21 = 1;\n    let vowels_index_count_22 = 1;\n\
    \    let vowels_index_count_23 = 1;\n    let vowels_index_count_24 = 1;\n    let\
    \ vowels_index_count_25 = 1;\n    let vowels_index_count_26 = 1;\n    let vowels_index_count_27\
    \ = 1;\n    let vowels_index_count_28 = 1;\n    let vowels_index_count_29 = 1;\n\
    \    let vowels_index_count_30 = 1;\n    let vowels_index_count_31 = 1;\n    let\
    \ vowels_index_count_32 = 1;\n    let vowels_index_count_33 = 1;\n    let vowels_index_count_34\
    \ = 1;\n    let vowels_index_count_35 = 1;\n    let vowels_index_count_36 = 1;\n\
    \    let vowels_index_count_37 = 1;\n    let vowels_index_count_38 = 1;\n    let\
    \ vowels_index_count_39 = 1;\n    let vowels_index_count_40 = 1;\n    let vowels_index_count_41\
    \ = 1;\n    let vowels_index_count_42 = 1;\n    let vowels_index_count_43 = 1;\n\
    \    let vowels_index_count_44 = 1;\n    let vowels_index_count_45 = 1;\n    let\
    \ vowels_index_count_46 = 1;\n    let vowels_index_count_47 = 1;\n    let vowels_index_count_48\
    \ = 1;\n    let vowels_index_count_49 = 1;\n    let vowels_index_count_50 = 1;\n\
    \    let vowels_index_count_51 = 1;\n    let vowels_index_count_52 = 1;\n    let\
    \ vowels_index_count_53 = 1;\n    let vowels_index_count_54 = 1;\n    let vowels_index_count_55\
    \ = 1;\n    let vowels_index_count_56 = 1;\n    let vowels_index_count_57 = 1;\n\
    \    let vowels_index_count_58 = 1;\n    let vowels_index_count_59 = 1;\n    let\
    \ vowels_index_count_60 = 1;\n    let vowels_index_count_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg7uzkxy4.ts(93,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014911
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count\
    \ = vowels.length;\n    let vowel_index = 0;\n    let vowel_found = false;\n \
    \   let vowel_found_index = 0;\n    let vowel_found_index2 = 0;\n    let vowel_found_index3\
    \ = 0;\n    let vowel_found_index4 = 0;\n    let vowel_found_index5 = 0;\n   \
    \ let vowel_found_index6 = 0;\n    let vowel_found_index7 = 0;\n    let vowel_found_index8\
    \ = 0;\n    let vowel_found_index9 = 0;\n    let vowel_found_index10 = 0;\n  \
    \  let vowel_found_index11 = 0;\n    let vowel_found_index12 = 0;\n    let vowel_found_index13\
    \ = 0;\n    let vowel_found_index14 = 0;\n    let vowel_found_index15 = 0;\n \
    \   let vowel_found_index16 = 0;\n    let vowel_found_index17 = 0;\n    let vowel_found_index18\
    \ = 0;\n    let vowel_found_index19 = 0;\n    let vowel_found_index20 = 0;\n \
    \   let vowel_found_index21 = 0;\n    let vowel_found_index22 = 0;\n    let vowel_found_index23\
    \ = 0;\n    let vowel_found_index24 = 0;\n    let vowel_found_index25 = 0;\n \
    \   let vowel_found_index26 = 0;\n    let vowel_found_index27 = 0;\n    let vowel_found_index28\
    \ = 0;\n    let vowel_found_index29 = 0;\n    let vowel_found_index30 = 0;\n \
    \   let vowel_found_index31 = 0;\n    let vowel_found_index32 = 0;\n    let vowel_found_index33\
    \ = 0;\n    let vowel_found_index34 = 0;\n    let vowel_found_index35 = 0;\n \
    \   let vowel_found_index36 = 0;\n    let vowel_found_index37 = 0;\n    let vowel_found_index38\
    \ = 0;\n    let vowel_found_index39 = 0;\n    let vowel_found_index40 = 0;\n \
    \   let vowel_found_index41 = 0;\n    let vowel_found_index42 = 0;\n    let vowel_found_index43\
    \ = 0;\n    let vowel_found_index44 = 0;\n    let vowel_found_index45 = 0;\n \
    \   let vowel_found_index46 = 0;\n    let vowel_found_index47 = 0;\n    let vowel_found_index48\
    \ = 0;\n    let vowel_found_index49 = 0;\n    let vowel_found_index50 = 0;\n \
    \   let vowel_found_index51 = 0;\n    let vowel_found_index52 = 0;\n    let vowel_found_index53\
    \ = 0;\n    let vowel_found_index54 = 0;\n    let vowel_found_index55 = 0;\n \
    \   let vowel_found_index56 = 0;\n    let vowel_found_index57 = 0;\n    let vowel_found_index58\
    \ = 0;\n    let vowel_found_index59 = 0;\n    let vowel_found_index60 = 0;\n \
    \   let vowel_found_index61 = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiayaon4t.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountLeft = word.length - vowelsCount;\n   \
    \ let vowelsCountRight = vowelsCount - 1;\n    let vowelsCountLeftRight = vowelsCountLeft\
    \ + vowelsCountRight;\n    let vowelsCountLeftRightRight = vowelsCountLeft + vowelsCountRight\
    \ + vowelsCount;\n    let vowelsCountLeftRightRightRight = vowelsCountLeft + vowelsCountRight\
    \ + vowelsCount + 1;\n    let vowelsCountLeftRightRightRightRight = vowelsCountLeft\
    \ + vowelsCountRight + vowelsCount + 2;\n    let vowelsCountLeftRightRightRightRightRight\
    \ = vowelsCountLeft + vowelsCountRight + vowelsCount + 3;\n    let vowelsCountLeftRightRightRightRightRightRight\
    \ = vowelsCountLeft + vowelsCountRight + vowelsCount + 4;\n    let vowelsCountLeftRightRightRightRightRightRightRight\
    \ = vowelsCountLeft + vowelsCountRight + vowelsCount + 5;\n    let vowelsCountLeftRightRightRightRightRightRightRightRight\
    \ = vowelsCountLeft + vowelsCountRight + vowelsCount + 6;\n    let vowelsCountLeftRightRightRightRightRightRightRightRightRight\
    \ = vowelsCountLeft + vowelsCountRight + vowelsCount + 7;\n    let vowelsCountLeftRightRightRightRightRightRightRightRightRightRight\
    \ = vowelsCountLeft + vowelsCountRight + vowelsCount + 8;\n    let vowelsCountLeftRightRightRightRightRightRightRightRightRightRightRight\
    \ = vowelsCountLeft + vowelsCountRight + vowelsCount + 9;\n    let vowelsCountLeftRightRightRightRightRightRightRightRightRightRightRight\
    \ = vowelsCountLeft + vowelsCountRight + vowelsCount + 10;\n    let vowelsCountLeftRightRightRightRightRightRightRightRightRightRightRightRight\
    \ = vowelsCountLeft + vowelsCountRight + vowelsCount + 11;\n    let vowelsCountLeftRightRightRightRightRightRightRightRightRightRightRightRight\
    \ = vowelsCountLeft + vowelsCountRight + vowelsCount + 12;\n    let vowelsCountLeftRightRightRightRightRightRightRightRightRightRightRightRight\
    \ = vowelsCountLeft + vowelsCountRight + vowelsCount + 13;\n    let vowelsCountLeftRightRightRightRightRightRightRightRightRightRightRightRightRight\
    \ = vowelsCountLeft + vowelsCountRight + vowelsCoun\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnx7ix0qy.ts(49,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014910
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n\
    \    let vowelsCountMinusOne = vowelsCount - 1;\n    let vowelsCountMinusTwo =\
    \ vowelsCount - 2;\n    let vowelsCountMinusThree = vowelsCount - 3;\n    let\
    \ vowelsCountMinusFour = vowelsCount - 4;\n    let vowelsCountMinusFive = vowelsCount\
    \ - 5;\n    let vowelsCountMinusSix = vowelsCount - 6;\n    let vowelsCountMinusSeven\
    \ = vowelsCount - 7;\n    let vowelsCountMinusEight = vowelsCount - 8;\n    let\
    \ vowelsCountMinusNine = vowelsCount - 9;\n    let vowelsCountMinusTen = vowelsCount\
    \ - 10;\n    let vowelsCountMinusEleven = vowelsCount - 11;\n    let vowelsCountMinusTwelve\
    \ = vowelsCount - 12;\n    let vowelsCountMinusThirteen = vowelsCount - 13;\n\
    \    let vowelsCountMinusFourteen = vowelsCount - 14;\n    let vowelsCountMinusFifteen\
    \ = vowelsCount - 15;\n    let vowelsCountMinusSixteen = vowelsCount - 16;\n \
    \   let vowelsCountMinusSeventeen = vowelsCount - 17;\n    let vowelsCountMinusEighteen\
    \ = vowelsCount - 18;\n    let vowelsCountMinusNineteen = vowelsCount - 19;\n\
    \    let vowelsCountMinusTwenty = vowelsCount - 20;\n    let vowelsCountMinusTwentyOne\
    \ = vowelsCount - 21;\n    let vowelsCountMinusTwentyTwo = vowelsCount - 22;\n\
    \    let vowelsCountMinusTwentyThree = vowelsCount - 23;\n    let vowelsCountMinusTwentyFour\
    \ = vowelsCount - 24;\n    let vowelsCountMinusTwentyFive = vowelsCount - 25;\n\
    \    let vowelsCountMinusTwentySix = vowelsCount - 26;\n    let vowelsCountMinusTwentySeven\
    \ = vowelsCount - 27;\n    let vowelsCountMinusTwentyEight = vowelsCount - 28;\n\
    \    let vowelsCountMinusTwentyNine = vowelsCount - 29;\n    let vowelsCountMinusTwentyTen\
    \ = \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqyg5o5rg.ts(42,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpqyg5o5rg.ts(63,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountLeft = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRight = vowels.filter(v => word.indexOf(v)\
    \ === -1).length;\n    let vowelsCountRightInMiddle = vowels.filter(v => word.indexOf(v)\
    \ === -1).length;\n    let vowelsCountRightInMiddle2 = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRightInMiddle3 = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRightInMiddle4 = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRightInMiddle5 = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRightInMiddle6 = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRightInMiddle7 = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRightInMiddle8 = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRightInMiddle9 = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRightInMiddle10 = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRightInMiddle11 = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRightInMiddle12 = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRightInMiddle13 = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRightInMiddle14 = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRightInMiddle15 = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRightInMiddle16 = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRightInMiddle17 = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRightInMiddle18 = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRightInMiddle19 = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRightInMiddle20 = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRightInMiddle21 = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRightInMiddle22 = vowels.filter(v => word.indexOf(v)\
    \ !== -1).length;\n    let vowelsCountRightInMiddle23\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiak0ot3q.ts(56,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014910
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - 1;\n    let vowels_count_from_left_to_right\
    \ = vowels_count - 2;\n    let vowels_count_from_right_to_left = vowels_count\
    \ - 3;\n    let vowels_count_from_left_to_right_to_left = vowels_count - 4;\n\
    \    let vowels_count_from_right_to_left_to_right = vowels_count - 5;\n    let\
    \ vowels_count_from_left_to_right_to_left_to_right = vowels_count - 6;\n    let\
    \ vowels_count_from_right_to_left_to_right_to_left = vowels_count - 7;\n    let\
    \ vowels_count_from_left_to_right_to_left_to_right_to_left = vowels_count - 8;\n\
    \    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left = vowels_count\
    \ - 9;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 11;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 12;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 13;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 14;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 17;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 18;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 19;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2kkzoplx.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014911
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountLeft = word.length - vowelsCount;\n   \
    \ let vowelsCountRight = word.length - vowelsCount;\n    let vowelsCountRight1\
    \ = word.length - vowelsCount;\n    let vowelsCountRight2 = word.length - vowelsCount;\n\
    \    let vowelsCountRight3 = word.length - vowelsCount;\n    let vowelsCountRight4\
    \ = word.length - vowelsCount;\n    let vowelsCountRight5 = word.length - vowelsCount;\n\
    \    let vowelsCountRight6 = word.length - vowelsCount;\n    let vowelsCountRight7\
    \ = word.length - vowelsCount;\n    let vowelsCountRight8 = word.length - vowelsCount;\n\
    \    let vowelsCountRight9 = word.length - vowelsCount;\n    let vowelsCountRight10\
    \ = word.length - vowelsCount;\n    let vowelsCountRight11 = word.length - vowelsCount;\n\
    \    let vowelsCountRight12 = word.length - vowelsCount;\n    let vowelsCountRight13\
    \ = word.length - vowelsCount;\n    let vowelsCountRight14 = word.length - vowelsCount;\n\
    \    let vowelsCountRight15 = word.length - vowelsCount;\n    let vowelsCountRight16\
    \ = word.length - vowelsCount;\n    let vowelsCountRight17 = word.length - vowelsCount;\n\
    \    let vowelsCountRight18 = word.length - vowelsCount;\n    let vowelsCountRight19\
    \ = word.length - vowelsCount;\n    let vowelsCountRight20 = word.length - vowelsCount;\n\
    \    let vowelsCountRight21 = word.length - vowelsCount;\n    let vowelsCountRight22\
    \ = word.length - vowelsCount;\n    let vowelsCountRight23 = word.length - vowelsCount;\n\
    \    let vowelsCountRight24 = word.length - vowelsCount;\n    let vowelsCountRight25\
    \ = word.length - vowelsCount;\n    let vowelsCountRight26 = word.length - vowelsCount;\n\
    \    let vowelsCountRight27 = word.length - vowelsCount;\n    let vowelsCountRight28\
    \ = word.length - vowelsCount;\n    let vowelsCountRight29 = word.length - vowelsCount;\n\
    \    let vowelsCountRight30 = word.length - vowelsCount;\n    let vowelsCountRight31\
    \ = word.length - vowelsCount;\n    let vowelsCountRight32 = word.length - vowelsCount;\n\
    \    let vowelsCountRight33 = word.length - vowelsCount;\n    let vowelsCountRight34\
    \ = word.length - vowelsCount;\n    let vowelsCount\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm_n99v40.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014911
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count\
    \ = vowels.length;\n    let vowel_count_from_right = vowel_count - 1;\n    let\
    \ vowel_count_from_left = vowel_count - 2;\n    let vowel_count_from_middle =\
    \ vowel_count - 3;\n    let vowel_count_from_left_to_right = vowel_count - 4;\n\
    \    let vowel_count_from_right_to_left = vowel_count - 5;\n    let vowel_count_from_middle_to_left\
    \ = vowel_count - 6;\n    let vowel_count_from_left_to_middle = vowel_count -\
    \ 7;\n    let vowel_count_from_right_to_middle = vowel_count - 8;\n    let vowel_count_from_middle_to_right\
    \ = vowel_count - 9;\n    let vowel_count_from_left_to_right_to_middle = vowel_count\
    \ - 10;\n    let vowel_count_from_right_to_left_to_middle = vowel_count - 11;\n\
    \    let vowel_count_from_middle_to_left_to_right = vowel_count - 12;\n    let\
    \ vowel_count_from_left_to_right_to_middle_to_left = vowel_count - 13;\n    let\
    \ vowel_count_from_right_to_left_to_middle_to_right = vowel_count - 14;\n    let\
    \ vowel_count_from_middle_to_left_to_right_to_middle = vowel_count - 15;\n   \
    \ let vowel_count_from_left_to_right_to_middle_to_left_to_right = vowel_count\
    \ - 16;\n    let vowel_count_from_right_to_left_to_middle_to_left_to_middle =\
    \ vowel_count - 17;\n    let vowel_count_from_middle_to_left_to_right_to_middle_to_left_to_middle\
    \ = vowel_count - 18;\n    let vowel_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowel_count - 19;\n    let vowel_count_from_right_to_left_to_middle_to_left_to_right_to_middle\
    \ = vowel_count - 20;\n    let vowel_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowel_count - 21;\n    let vowel_count_from_left_to_right_to_middle_to_left_to_right_to_right_to_middle\
    \ = vowel_count - 22;\n    let vowel_count_from_right_to_left_to_middle_to_left_to_right_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowel_count - 23;\n    let vowel_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_right_to_middle_to_left_to_right_to_right_to_middle\
    \ = vowel_count - 24;\n    let vowel_count_from_left_to_right_to_middle_to_left_to_right_to_right_to_middle_to_left_to_right_to_right_to_middle_to_left_to_right_to_right_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpur0j075a.ts(56,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014910
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtgm6hsc.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_left = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_right_to_left = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n\
    \    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    let vowels_count_from_middle_to_right_to_left_to_middle = vowels_count -\
    \ 15;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_middle =\
    \ vowels_count - 17;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_bhaz2i6.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count\
    \ = 0;\n    let vowel_position = 0;\n    let consonants = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z'];\n    let consonant_count = 0;\n    let consonant_position = 0;\n    for\
    \ (let i = 0; i < word.length; i++) {\n        if (vowels.includes(word[i])) {\n\
    \            vowel_count++;\n            vowel_position = i;\n        }\n    }\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (consonants.includes(word[i]))\
    \ {\n            consonant_count++;\n            consonant_position = i;\n   \
    \     }\n    }\n    if (vowel_count > 0 && consonant_count > 0) {\n        let\
    \ vowel_position2 = vowel_position - 1;\n        let consonant_position2 = consonant_position\
    \ + 1;\n        if (vowel_position2 >= 0 && consonant_position2 >= 0) {\n    \
    \        if (word[vowel_position2] === word[consonant_position2]) {\n        \
    \        return word[vowel_position2];\n            }\n        }\n    }\n    return\
    \ '';\n}\nconsole.log(get_closest_vowel('hello'));\nconsole.log(get_closest_vowel('hellooo'));\n\
    console.log(get_closest_vowel('helloooo'));\nconsole.log(get_closest_vowel('helloooo'));\n\
    console.log(get_closest_vowel('helloooo'));\nconsole.log(get_closest_vowel('helloooo'));\n\
    console.log(get_closest_vowel('helloooo'));\nconsole.log(get_closest_vowel('helloooo'));\n\
    console.log(get_closest_vowel('helloooo'));\nconsole.log(get_closest_vowel('helloooo'));\n\
    console.log(get_closest_vowel('helloooo'));\nconsole.log(get_closest_vowel('helloooo'));\n\
    console.log(get_closest_vowel('helloooo'));\nconsole.log(get_closest_vowel('helloooo'));\n\
    console.log(get_closest_vowel('helloooo'));\nconsole.log(get_closest_vowel('helloooo'));\n\
    console.log(get_closest_vowel('helloooo'));\nconsole.log(get_closest_vowel('helloooo'));\n\
    console.log(get_closest_vowel('helloooo'));\nconsole.log(get_closest_vowel('helloooo'));\n\
    console.log(get_closest_vowel('helloooo'));\nconsole.log(get_closest_vowel('helloooo'));\n\
    console.log(get_closest_vowel('helloooo'));\nconsole.log(get_closest_vowel('helloooo'));\n\
    console.log(get_closest_vowel('helloooo'));\nconsole.log(get_closest_vowel('helloooo'));\n\
    console.log(get_closest_vowel('helloooo'));\nconsole.log(get_closest_vowel('helloooo'));\n\
    console.log(get_closest_vowel('helloooo\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplh6csocw.ts(65,40): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmplh6csocw.ts(66,1): error TS1005: '','' expected.

    ../../../../../tmp/tmplh6csocw.ts(66,9): error TS1005: '','' expected.

    '
  timestamp: 1660014911
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromLeftAndRight = vowelsCount - 4;\n    let vowelsCountFromRightAndLeftAndUp\
    \ = vowelsCount - 5;\n    let vowelsCountFromLeftAndRightAndUp = vowelsCount -\
    \ 6;\n    let vowelsCountFromRightAndLeftAndUpAndDown = vowelsCount - 7;\n   \
    \ let vowelsCountFromLeftAndRightAndUpAndDown = vowelsCount - 8;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDown\
    \ = vowelsCount - 9;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndDown\
    \ = vowelsCount - 10;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 11;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 12;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 13;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 14;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 15;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 16;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 17;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 18;\n    let vowelsCountFromRightAndLeftAndUpAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDown\
    \ = vowelsCount - 19;\n    let vowelsCountFromLeftAndRightAndUpAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDownAndDown\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsm935_21.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014911
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtgm6hsc.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left_to_right = vowels_count - 5;\n\
    \    let vowels_count_from_left_to_right_to_left = vowels_count - 6;\n    let\
    \ vowels_count_from_right_to_left_to_right_to_left = vowels_count - 7;\n    let\
    \ vowels_count_from_left_to_right_to_left_to_right = vowels_count - 8;\n    let\
    \ vowels_count_from_right_to_left_to_right_to_left_to_right = vowels_count - 9;\n\
    \    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 11;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 12;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 13;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 14;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 17;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 18;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 20;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb2dt_vi6.ts(53,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014911
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexMax = 0;\n    let vowelsIndexMin = 0;\n    let vowelsIndexMaxIndex\
    \ = 0;\n    let vowelsIndexMinIndex = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n    let vowelsIndexMaxIndexCount = 0;\n\
    \    let vowelsIndexMinIndexCount = 0;\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy7b9hsso.ts(88,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014911
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3\
    \ = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5\
    \ = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7\
    \ = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9\
    \ = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11\
    \ = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13\
    \ = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15\
    \ = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17\
    \ = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19\
    \ = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21\
    \ = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23\
    \ = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25\
    \ = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27\
    \ = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29\
    \ = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31\
    \ = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33\
    \ = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35\
    \ = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37\
    \ = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39\
    \ = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41\
    \ = vowelsCount - 40;\n    let vowels\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvwysex3k.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountInWord = vowels.filter(v => word.includes(v)).length;\n\
    \    let vowelsCountInWordInWord = vowels.filter(v => word.includes(v)).filter(w\
    \ => w.includes(word)).length;\n    let vowelsCountInWordInWordInWord = vowels.filter(v\
    \ => word.includes(v)).filter(w => w.includes(word)).filter(w => w.includes(word)).length;\n\
    \    let vowelsCountInWordInWordInWordInWord = vowels.filter(v => word.includes(v)).filter(w\
    \ => w.includes(word)).filter(w => w.includes(word)).filter(w => w.includes(word)).filter(w\
    \ => w.includes(word)).filter(w => w.includes(word)).filter(w => w.includes(word)).filter(w\
    \ => w.includes(word)).filter(w => w.includes(word)).filter(w => w.includes(word)).filter(w\
    \ => w.includes(word)).filter(w => w.includes(word)).filter(w => w.includes(word)).filter(w\
    \ => w.includes(word)).filter(w => w.includes(word)).filter(w => w.includes(word)).filter(w\
    \ => w.includes(word)).filter(w => w.includes(word)).filter(w => w.includes(word)).filter(w\
    \ => w.includes(word)).filter(w => w.includes(word)).filter(w => w.includes(word)).filter(w\
    \ => w.includes(word)).filter(w => w.includes(word)).filter(w => w.includes(word)).filter(w\
    \ => w.includes(word)).filter(w => w.includes(word)).filter(w => w.includes(word)).filter(w\
    \ => w.includes(word)).filter(w => w.includes(word)).filter(w => w.includes(word)).filter(w\
    \ => w.includes(word)).filter(w => w.includes(word)).filter(w => w.includes(word)).filter(w\
    \ => w.includes(word)).filter(w => w.includes(word)).filter(w => w.includes(word)).filter(w\
    \ => w.includes(word)).filter(w => w.includes(word)).filter(w => w.includes(word)).filter(w\
    \ => w.includes(word)).filter(w => w.includes(word)).filter(w => w.includes(word)).filter(w\
    \ => w.includes(word)).filter(w => w.includes(word)).filter(w => w.includes(word)).filter(w\
    \ => w.includes(word)).filter(w => w.includes(word)).filter(w => w.includes(word\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpksrlkhqc.ts(14,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpksrlkhqc.ts(14,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpksrlkhqc.ts(35,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014911
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowel\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgxnfna_c.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n\
    \    let vowelsCountMinusOne = vowelsCount - 1;\n    let vowelsCountMinusTwo =\
    \ vowelsCount - 2;\n    let vowelsCountMinusThree = vowelsCount - 3;\n    let\
    \ vowelsCountMinusFour = vowelsCount - 4;\n    let vowelsCountMinusFive = vowelsCount\
    \ - 5;\n    let vowelsCountMinusSix = vowelsCount - 6;\n    let vowelsCountMinusSeven\
    \ = vowelsCount - 7;\n    let vowelsCountMinusEight = vowelsCount - 8;\n    let\
    \ vowelsCountMinusNine = vowelsCount - 9;\n    let vowelsCountMinusTen = vowelsCount\
    \ - 10;\n    let vowelsCountMinusEleven = vowelsCount - 11;\n    let vowelsCountMinusTwelve\
    \ = vowelsCount - 12;\n    let vowelsCountMinusThirteen = vowelsCount - 13;\n\
    \    let vowelsCountMinusFourteen = vowelsCount - 14;\n    let vowelsCountMinusFifteen\
    \ = vowelsCount - 15;\n    let vowelsCountMinusSixteen = vowelsCount - 16;\n \
    \   let vowelsCountMinusSeventeen = vowelsCount - 17;\n    let vowelsCountMinusEighteen\
    \ = vowelsCount - 18;\n    let vowelsCountMinusNineteen = vowelsCount - 19;\n\
    \    let vowelsCountMinusTwenty = vowelsCount - 20;\n    let vowelsCountMinusTwentyOne\
    \ = vowelsCount - 21;\n    let vowelsCountMinusTwentyTwo = vowelsCount - 22;\n\
    \    let vowelsCountMinusTwentyThree = vowelsCount - 23;\n    let vowelsCountMinusTwentyFour\
    \ = vowelsCount - 24;\n    let vowelsCountMinusTwentyFive = vowelsCount - 25;\n\
    \    let vowelsCountMinusTwentySix = vowelsCount - 26;\n    let vowelsCountMinusTwentySeven\
    \ = vowelsCount - 27;\n    let vowelsCountMinusTwentyEight = vowelsCount - 28;\n\
    \    let vowelsCountMinusTwentyNine = vowelsCount - 29;\n    let vowelsCountMinusThirty\
    \ = vowels\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo6q8jrll.ts(63,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count\
    \ = vowels.length;\n    let vowel_count_from_right = vowel_count - 1;\n    let\
    \ vowel_count_from_left = vowel_count - 2;\n    let vowel_count_from_right_to_left\
    \ = vowel_count_from_right - vowel_count_from_left;\n    let vowel_count_from_left_to_right\
    \ = vowel_count_from_left - vowel_count_from_right;\n    let vowel_count_from_right_to_left\
    \ = vowel_count_from_right - vowel_count_from_left;\n    let vowel_count_from_left_to_right\
    \ = vowel_count_from_left - vowel_count_from_right;\n    let vowel_count_from_right_to_left\
    \ = vowel_count_from_right - vowel_count_from_left;\n    let vowel_count_from_left_to_right\
    \ = vowel_count_from_left - vowel_count_from_right;\n    let vowel_count_from_right_to_left\
    \ = vowel_count_from_right - vowel_count_from_left;\n    let vowel_count_from_left_to_right\
    \ = vowel_count_from_left - vowel_count_from_right;\n    let vowel_count_from_right_to_left\
    \ = vowel_count_from_right - vowel_count_from_left;\n    let vowel_count_from_left_to_right\
    \ = vowel_count_from_left - vowel_count_from_right;\n    let vowel_count_from_right_to_left\
    \ = vowel_count_from_right - vowel_count_from_left;\n    let vowel_count_from_left_to_right\
    \ = vowel_count_from_left - vowel_count_from_right;\n    let vowel_count_from_right_to_left\
    \ = vowel_count_from_right - vowel_count_from_left;\n    let vowel_count_from_left_to_right\
    \ = vowel_count_from_left - vowel_count_from_right;\n    let vowel_count_from_right_to_left\
    \ = vowel_count_from_right - vowel_count_from_left;\n    let vowel_count_from_left_to_right\
    \ = vowel_count_from_left - vowel_count_from_right;\n    let vowel_count_from_right_to_left\
    \ = vowel_count_from_right - vowel_count_from_left;\n    let vowel_count_from_left_to_right\
    \ = vowel_count_from_left - vowel_count_from_right;\n    let vowel_count_from_right_to_left\
    \ = vowel_count_from_right - vowel_count_from_left;\n    let vowel_count_from_left_to_right\
    \ = vowel_count_from_left - vowel_count_from_right;\n    let vowel_count_from_right_to_left\
    \ = vowel_count_from_right - vowel_count_from_left;\n    let vowel_count_from_left_to_right\
    \ = vowel_count_from_left - vowel_count_from_right;\n    let vowel_count_from_right_to_left\
    \ = vowel_count_from_right - vowel_count_from_left;\n    let vowel_count_from_left_to_right\
    \ = vowel\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd_nna7vd.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014911
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowels_count_from_left - vowels_count_from_right;\n    let vowels_count_from_right_to_left\
    \ = vowels_count_from_right - vowels_count_from_left;\n    let vowels_count_from_left_to_right\
    \ = vowel\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgxnfna_c.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromRightAndLeftAndUpper = vowelsCount - 4;\n    let vowelsCountFromRightAndLeftAndUpperAndLowers\
    \ = vowelsCount - 5;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbers\
    \ = vowelsCount - 6;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuation\
    \ = vowelsCount - 7;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthers\
    \ = vowelsCount - 8;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthers\
    \ = vowelsCount - 9;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthers\
    \ = vowelsCount - 10;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 11;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 12;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 13;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 14;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 15;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 16;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 17;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowel\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaprg27p4.ts(49,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromRightAndLeftAndUpper = vowelsCount - 4;\n    let vowelsCountFromRightAndLeftAndUpperAndLowers\
    \ = vowelsCount - 5;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbers\
    \ = vowelsCount - 6;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuation\
    \ = vowelsCount - 7;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthers\
    \ = vowelsCount - 8;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthers\
    \ = vowelsCount - 9;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthers\
    \ = vowelsCount - 10;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 11;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 12;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 13;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 14;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 15;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 16;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 17;\n    let vowelsCountFromRightAndLeftAndUpperAndLowersAndNumbersAndPunctuationAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowel\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaprg27p4.ts(49,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_left = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_right_to_left = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n\
    \    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    let vowels_count_from_middle_to_right_to_left_to_middle = vowels_count -\
    \ 15;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_middle =\
    \ vowels_count - 17;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_bhaz2i6.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromLeftAndRight = vowelsCount - 4;\n    let vowelsCountFromLeftAndRightAndLeft\
    \ = vowelsCount - 5;\n    let vowelsCountFromLeftAndRightAndLeftAndRight = vowelsCount\
    \ - 6;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeft = vowelsCount\
    \ - 7;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRight = vowelsCount\
    \ - 8;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 9;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 10;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 11;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 12;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 13;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 14;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 15;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 16;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeft\
    \ = vowelsCount - 17;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRight\
    \ = vowelsCount - 18;\n    let vowelsCountFromLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAndLeftAndRightAnd\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkjmq6gtl.ts(50,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    for (let i = 0; i < vowelsCount;\
    \ i++) {\n        let index = word.indexOf(vowels[i]);\n        if (index > -1)\
    \ {\n            vowelsIndex.push(index);\n        }\n    }\n    let vowelsIndexCount\
    \ = vowelsIndex.length;\n    let vowelsIndexMin = Math.min(...vowelsIndex);\n\
    \    let vowelsIndexMax = Math.max(...vowelsIndex);\n    let vowelsIndexSum =\
    \ vowelsIndexMax - vowelsIndexMin + 1;\n    let vowelsIndexSum2 = vowelsIndexSum\
    \ * vowelsIndexSum;\n    let vowelsIndexSum3 = vowelsIndexSum2 * vowelsIndexSum;\n\
    \    let vowelsIndexSum4 = vowelsIndexSum3 * vowelsIndexSum;\n    let vowelsIndexSum5\
    \ = vowelsIndexSum4 * vowelsIndexSum;\n    let vowelsIndexSum6 = vowelsIndexSum5\
    \ * vowelsIndexSum;\n    let vowelsIndexSum7 = vowelsIndexSum6 * vowelsIndexSum;\n\
    \    let vowelsIndexSum8 = vowelsIndexSum7 * vowelsIndexSum;\n    let vowelsIndexSum9\
    \ = vowelsIndexSum8 * vowelsIndexSum;\n    let vowelsIndexSum10 = vowelsIndexSum9\
    \ * vowelsIndexSum;\n    let vowelsIndexSum11 = vowelsIndexSum10 * vowelsIndexSum;\n\
    \    let vowelsIndexSum12 = vowelsIndexSum11 * vowelsIndexSum;\n    let vowelsIndexSum13\
    \ = vowelsIndexSum12 * vowelsIndexSum;\n    let vowelsIndexSum14 = vowelsIndexSum13\
    \ * vowelsIndexSum;\n    let vowelsIndexSum15 = vowelsIndexSum14 * vowelsIndexSum;\n\
    \    let vowelsIndexSum16 = vowelsIndexSum15 * vowelsIndexSum;\n    let vowelsIndexSum17\
    \ = vowelsIndexSum16 * vowelsIndexSum;\n    let vowelsIndexSum18 = vowelsIndexSum17\
    \ * vowelsIndexSum;\n    let vowelsIndexSum19 = vowelsIndexSum18 * vowelsIndexSum;\n\
    \    let vowelsIndexSum20 = vowelsIndexSum19 * vowelsIndexSum;\n    let vowelsIndexSum21\
    \ = vowelsIndexSum20 * vowelsIndexSum;\n    let vowelsIndexSum22 = vowelsIndexSum21\
    \ * vowelsIndexSum;\n    let vowelsIndexSum23 = vowelsIndexSum22 * vowelsIndexSum;\n\
    \    let vowels\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp646ujpb2.ts(65,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014911
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_right\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_left = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_right_to_left = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_right_to_middle_to_left = vowels_count - 13;\n\
    \    let vowels_count_from_right_to_left_to_middle_to_right = vowels_count - 14;\n\
    \    let vowels_count_from_middle_to_right_to_left_to_middle = vowels_count -\
    \ 15;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right = vowels_count\
    \ - 16;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_middle =\
    \ vowels_count - 17;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 22;\n    let vowels_count_from_right_to_left_to_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_middle_to_right_to_left_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_left_to_right_to_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_bhaz2i6.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n\
    \    let vowelsCountIndex2 = 0;\n    let vowelsCountIndex3 = 0;\n    let vowelsCountIndex4\
    \ = 0;\n    let vowelsCountIndex5 = 0;\n    let vowelsCountIndex6 = 0;\n    let\
    \ vowelsCountIndex7 = 0;\n    let vowelsCountIndex8 = 0;\n    let vowelsCountIndex9\
    \ = 0;\n    let vowelsCountIndex10 = 0;\n    let vowelsCountIndex11 = 0;\n   \
    \ let vowelsCountIndex12 = 0;\n    let vowelsCountIndex13 = 0;\n    let vowelsCountIndex14\
    \ = 0;\n    let vowelsCountIndex15 = 0;\n    let vowelsCountIndex16 = 0;\n   \
    \ let vowelsCountIndex17 = 0;\n    let vowelsCountIndex18 = 0;\n    let vowelsCountIndex19\
    \ = 0;\n    let vowelsCountIndex20 = 0;\n    let vowelsCountIndex21 = 0;\n   \
    \ let vowelsCountIndex22 = 0;\n    let vowelsCountIndex23 = 0;\n    let vowelsCountIndex24\
    \ = 0;\n    let vowelsCountIndex25 = 0;\n    let vowelsCountIndex26 = 0;\n   \
    \ let vowelsCountIndex27 = 0;\n    let vowelsCountIndex28 = 0;\n    let vowelsCountIndex29\
    \ = 0;\n    let vowelsCountIndex30 = 0;\n    let vowelsCountIndex31 = 0;\n   \
    \ let vowelsCountIndex32 = 0;\n    let vowelsCountIndex33 = 0;\n    let vowelsCountIndex34\
    \ = 0;\n    let vowelsCountIndex35 = 0;\n    let vowelsCountIndex36 = 0;\n   \
    \ let vowelsCountIndex37 = 0;\n    let vowelsCountIndex38 = 0;\n    let vowelsCountIndex39\
    \ = 0;\n    let vowelsCountIndex40 = 0;\n    let vowelsCountIndex41 = 0;\n   \
    \ let vowelsCountIndex42 = 0;\n    let vowelsCountIndex43 = 0;\n    let vowelsCountIndex44\
    \ = 0;\n    let vowelsCountIndex45 = 0;\n    let vowelsCountIndex46 = 0;\n   \
    \ let vowelsCountIndex47 = 0;\n    let vowelsCountIndex48 = 0;\n    let vowelsCountIndex49\
    \ = 0;\n    let vowelsCountIndex50 = 0;\n    let vowelsCountIndex51 = 0;\n   \
    \ let vowelsCountIndex52 = 0;\n    let vowelsCountIndex53 = 0;\n    let vowelsCountIndex54\
    \ = 0;\n    let vowelsCountIndex55 = 0;\n    let vowelsCountIndex56 = 0;\n   \
    \ let vowelsCountIndex57 = 0;\n    let vowelsCountIndex58 = 0;\n    let vowelsCountIndex59\
    \ = 0;\n    let vowelsCountIndex60 = 0;\n    let vowelsCountIndex61 = 0;\n   \
    \ let vowelsCount\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzlhgjz5w.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left = vowels_count - 5;\n    let vowels_count_from_middle_to_left\
    \ = vowels_count - 6;\n    let vowels_count_from_left_to_middle = vowels_count\
    \ - 7;\n    let vowels_count_from_right_to_middle = vowels_count - 8;\n    let\
    \ vowels_count_from_middle_to_right = vowels_count - 9;\n    let vowels_count_from_left_to_right_to_middle\
    \ = vowels_count - 10;\n    let vowels_count_from_right_to_left_to_middle = vowels_count\
    \ - 11;\n    let vowels_count_from_middle_to_left_to_right = vowels_count - 12;\n\
    \    let vowels_count_from_left_to_middle_to_right = vowels_count - 13;\n    let\
    \ vowels_count_from_right_to_middle_to_left = vowels_count - 14;\n    let vowels_count_from_middle_to_left_to_middle\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_middle_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_middle_to_right\
    \ = vowels_count - 17;\n    let vowels_count_from_middle_to_left_to_right_to_middle\
    \ = vowels_count - 18;\n    let vowels_count_from_left_to_middle_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_right_to_middle_to_left_to_middle\
    \ = vowels_count - 20;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 21;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left\
    \ = vowels_count - 22;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 23;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 24;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 25;\n    let vowels_count_from_right_to_left_to_middle_to_right_to_left_to_right_to_left_to_middle\
    \ = vowels_count - 26;\n    let vowels_count_from_middle_to_left_to_right_to_left_to_right_to_left_to_right_to_middle\
    \ = vowels_count - 27;\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkvgbji7t.ts(38,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpkvgbji7t.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014905
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n\
    \    let vowelsCountMin = vowelsCount;\n    let vowelsCountMax = vowelsCount;\n\
    \    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex = 0;\n    let vowelsCountMinIndex\
    \ = 0;\n    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex = 0;\n \
    \   let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex = 0;\n    let vowelsCountMaxIndex\
    \ = 0;\n    let vowelsCountMinIndex = 0;\n    let vowelsCountMaxIndex = 0;\n \
    \   let vowelsCountMinIndex = 0;\n    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex\
    \ = 0;\n    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex = 0;\n \
    \   let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex = 0;\n    let vowelsCountMaxIndex\
    \ = 0;\n    let vowelsCountMinIndex = 0;\n    let vowelsCountMaxIndex = 0;\n \
    \   let vowelsCountMinIndex = 0;\n    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex\
    \ = 0;\n    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex = 0;\n \
    \   let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex = 0;\n    let vowelsCountMaxIndex\
    \ = 0;\n    let vowelsCountMinIndex = 0;\n    let vowelsCountMaxIndex = 0;\n \
    \   let vowelsCountMinIndex = 0;\n    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex\
    \ = 0;\n    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex = 0;\n \
    \   let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex = 0;\n    let vowelsCountMaxIndex\
    \ = 0;\n    let vowelsCountMinIndex = 0;\n    let vowelsCountMaxIndex = 0;\n \
    \   let vowelsCountMinIndex = 0;\n    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex\
    \ = 0;\n    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex = 0;\n \
    \   let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex = 0;\n    let vowelsCountMaxIndex\
    \ = 0;\n    let vowelsCountMinIndex = 0;\n    let vowelsCountMaxIndex = 0;\n \
    \   let vowelsCountMinIndex = 0;\n    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex\
    \ = 0;\n    let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex = 0;\n \
    \   let vowelsCountMaxIndex = 0;\n    let vowelsCountMinIndex = 0;\n    let vowel\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgkrqab_1.ts(93,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014911
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtgm6hsc.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count\
    \ = vowels.length;\n    let vowel_count_from_right = vowel_count - 1;\n    let\
    \ vowel_count_from_left = vowel_count - 2;\n    let vowel_count_from_right_to_left\
    \ = vowel_count_from_right - vowel_count_from_left;\n    let vowel_count_from_left_to_right\
    \ = vowel_count_from_left - vowel_count_from_right;\n    let vowel_count_from_right_to_left_to_right\
    \ = vowel_count_from_right_to_left - vowel_count_from_left_to_right;\n    let\
    \ vowel_count_from_left_to_right_to_left = vowel_count_from_left_to_right - vowel_count_from_right_to_left;\n\
    \    let vowel_count_from_right_to_left_to_right_to_left = vowel_count_from_right_to_left_to_right\
    \ - vowel_count_from_left_to_right_to_left;\n    let vowel_count_from_left_to_right_to_left_to_right_to_left\
    \ = vowel_count_from_left_to_right_to_left_to_right_to_left - vowel_count_from_right_to_left_to_right_to_left;\n\
    \    let vowel_count_from_right_to_left_to_right_to_left_to_right_to_left = vowel_count_from_right_to_left_to_right_to_left_to_right_to_left\
    \ - vowel_count_from_left_to_right_to_right_to_left_to_right_to_left;\n    let\
    \ vowel_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowel_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ - vowel_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    let vowel_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowel_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    let vowel_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowel_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left;\n\
    \    let vowel_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowel_count_from_right_to_left_to_right_to_left_to_right_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4q9vd7xx.ts(44,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014911
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    for (let i = 0; i < vowelsCount;\
    \ i++) {\n        vowelsIndex.push(i);\n    }\n    let vowelsIndexCount = vowelsIndex.length;\n\
    \    let vowelsIndexMax = Math.max.apply(null, vowelsIndex);\n    let vowelsIndexMin\
    \ = Math.min.apply(null, vowelsIndex);\n    let vowelsIndexMaxIndex = vowelsIndex.indexOf(vowelsIndexMax);\n\
    \    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n    let vowelsIndexMaxVowel\
    \ = vowelsIndex[vowelsIndexMaxIndex];\n    let vowelsIndexMinVowel = vowelsIndex[vowelsIndexMinIndex];\n\
    \    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelVowel = vowelsIndex[vowelsIndexMaxVowelIndex];\n \
    \   let vowelsIndexMinVowelVowel = vowelsIndex[vowelsIndexMinVowelIndex];\n  \
    \  let vowelsIndexMaxVowelVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelVowel);\n\
    \    let vowelsIndexMinVowelVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelVowel);\n\
    \    let vowelsIndexMaxVowelVowelVowel = vowelsIndex[vowelsIndexMaxVowelVowelIndex];\n\
    \    let vowelsIndexMinVowelVowelVowel = vowelsIndex[vowelsIndexMinVowelVowelIndex];\n\
    \    let vowelsIndexMaxVowelVowelVowelVowel = vowelsIndex[vowelsIndexMaxVowelVowelVowelIndex];\n\
    \    let vowelsIndexMinVowelVowelVowelVowel = vowelsIndex[vowelsIndexMinVowelVowelVowelIndex];\n\
    \    let vowelsIndexMaxVowelVowelVowelVowel = vowelsIndex[vowelsIndexMaxVowelVowelVowelIndex];\n\
    \    let vowelsIndexMinVowelVowelVowelVowelVowel = vowelsIndex[vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8046ffpt.ts(33,1): error TS1005: '']'' expected.

    ../../../../../tmp/tmp8046ffpt.ts(54,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014911
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_right_to_left\
    \ = vowels_count - 3;\n    let vowels_count_from_left_to_right = vowels_count\
    \ - 4;\n    let vowels_count_from_right_to_left_to_right = vowels_count - 5;\n\
    \    let vowels_count_from_left_to_right_to_left = vowels_count - 6;\n    let\
    \ vowels_count_from_right_to_left_to_right_to_left = vowels_count - 7;\n    let\
    \ vowels_count_from_left_to_right_to_left_to_right = vowels_count - 8;\n    let\
    \ vowels_count_from_right_to_left_to_right_to_left_to_right = vowels_count - 9;\n\
    \    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right = vowels_count\
    \ - 10;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 11;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 12;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 13;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right\
    \ = vowels_count - 14;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 15;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 16;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 17;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 18;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 19;\n    let vowels_count_from_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 20;\n    let vowels_count_from_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left_to_right_to_left\
    \ = vowels_count - 21;\n    let vowels_count_from_left_to_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb2dt_vi6.ts(53,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014911
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountLeft = word.length - vowelsCount;\n   \
    \ let vowelsCountRight = vowelsCount - 1;\n    let vowelsCountRightLeft = vowelsCount\
    \ - 2;\n    let vowelsCountRightRight = vowelsCount - 3;\n    let vowelsCountRightLeft\
    \ = vowelsCount - 4;\n    let vowelsCountRightRightLeft = vowelsCount - 5;\n \
    \   let vowelsCountRightRightRight = vowelsCount - 6;\n    let vowelsCountRightRightLeftRight\
    \ = vowelsCount - 7;\n    let vowelsCountRightRightRightLeft = vowelsCount - 8;\n\
    \    let vowelsCountRightRightRightRight = vowelsCount - 9;\n    let vowelsCountRightRightRightLeftRight\
    \ = vowelsCount - 10;\n    let vowelsCountRightRightRightRightLeft = vowelsCount\
    \ - 11;\n    let vowelsCountRightRightRightRightRight = vowelsCount - 12;\n  \
    \  let vowelsCountRightRightRightRightLeftRight = vowelsCount - 13;\n    let vowelsCountRightRightRightRightRightLeft\
    \ = vowelsCount - 14;\n    let vowelsCountRightRightRightRightRightRight = vowelsCount\
    \ - 15;\n    let vowelsCountRightRightRightRightRightLeftRight = vowelsCount -\
    \ 16;\n    let vowelsCountRightRightRightRightRightRightLeft = vowelsCount - 17;\n\
    \    let vowelsCountRightRightRightRightRightRightRight = vowelsCount - 18;\n\
    \    let vowelsCountRightRightRightRightRightRightLeftRight = vowelsCount - 19;\n\
    \    let vowelsCountRightRightRightRightRightRightRightLeft = vowelsCount - 20;\n\
    \    let vowelsCountRightRightRightRightRightRightRightRight = vowelsCount - 21;\n\
    \    let vowelsCountRightRightRightRightRightRightRightLeftRight = vowelsCount\
    \ - 22;\n    let vowelsCountRightRightRightRightRightRightRightLeftRight = vowelsCount\
    \ - 23;\n    let vowelsCountRightRightRightRightRightRightRightLeftRight = vowelsCount\
    \ - 24;\n    let vowelsCountRightRightRightRightRightRightRightLeftRight = vowelsCount\
    \ - 25;\n    let vowelsCountRightRightRightRightRightRightRightLeftRight = vowelsCount\
    \ - 26;\n    let vowelsCountRightRightRightRightRightRightRightLeftRight = vowelsCount\
    \ - 27;\n    let vowelsCountRightRightRightRightRightRightRightLeftRight = vowelsCount\
    \ - 28;\n    let vowelsCount\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpstuy1el3.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014911
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3\
    \ = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5\
    \ = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7\
    \ = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9\
    \ = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11\
    \ = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13\
    \ = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15\
    \ = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17\
    \ = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19\
    \ = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21\
    \ = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23\
    \ = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25\
    \ = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27\
    \ = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29\
    \ = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31\
    \ = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33\
    \ = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35\
    \ = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37\
    \ = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39\
    \ = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41\
    \ = vowelsCount - 40;\n    let vowels\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvwysex3k.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n\
    \    let vowelsCountMinusOne = vowelsCount - 1;\n    let vowelsCountMinusTwo =\
    \ vowelsCount - 2;\n    let vowelsCountMinusThree = vowelsCount - 3;\n    let\
    \ vowelsCountMinusFour = vowelsCount - 4;\n    let vowelsCountMinusFive = vowelsCount\
    \ - 5;\n    let vowelsCountMinusSix = vowelsCount - 6;\n    let vowelsCountMinusSeven\
    \ = vowelsCount - 7;\n    let vowelsCountMinusEight = vowelsCount - 8;\n    let\
    \ vowelsCountMinusNine = vowelsCount - 9;\n    let vowelsCountMinusTen = vowelsCount\
    \ - 10;\n    let vowelsCountMinusEleven = vowelsCount - 11;\n    let vowelsCountMinusTwelve\
    \ = vowelsCount - 12;\n    let vowelsCountMinusThirteen = vowelsCount - 13;\n\
    \    let vowelsCountMinusFourteen = vowelsCount - 14;\n    let vowelsCountMinusFifteen\
    \ = vowelsCount - 15;\n    let vowelsCountMinusSixteen = vowelsCount - 16;\n \
    \   let vowelsCountMinusSeventeen = vowelsCount - 17;\n    let vowelsCountMinusEighteen\
    \ = vowelsCount - 18;\n    let vowelsCountMinusNineteen = vowelsCount - 19;\n\
    \    let vowelsCountMinusTwenty = vowelsCount - 20;\n    let vowelsCountMinusTwentyOne\
    \ = vowelsCount - 21;\n    let vowelsCountMinusTwentyTwo = vowelsCount - 22;\n\
    \    let vowelsCountMinusTwentyThree = vowelsCount - 23;\n    let vowelsCountMinusTwentyFour\
    \ = vowelsCount - 24;\n    let vowelsCountMinusTwentyFive = vowelsCount - 25;\n\
    \    let vowelsCountMinusTwentySix = vowelsCount - 26;\n    let vowelsCountMinusTwentySeven\
    \ = vowelsCount - 27;\n    let vowelsCountMinusTwentyEight = vowelsCount - 28;\n\
    \    let vowelsCountMinusTwentyNine = vowelsCount - 29;\n    let vowelsCountMinusTwentyTen\
    \ = \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqyg5o5rg.ts(42,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpqyg5o5rg.ts(63,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014906
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = word.length - vowels_count;\n\
    \    let vowels_count_from_left = vowels_count - word.length;\n    let vowels_count_from_right_and_left\
    \ = vowels_count_from_right + vowels_count_from_left;\n    let vowels_count_from_left_and_right\
    \ = vowels_count_from_left + vowels_count_from_right;\n    let vowels_count_from_right_and_left_and_up\
    \ = vowels_count_from_right_and_left + vowels_count_from_left_and_right;\n   \
    \ let vowels_count_from_left_and_right_and_up = vowels_count_from_left_and_right\
    \ + vowels_count_from_right_and_left;\n    let vowels_count_from_right_and_left_and_up_and_down\
    \ = vowels_count_from_right_and_left_and_up + vowels_count_from_left_and_right_and_up;\n\
    \    let vowels_count_from_left_and_right_and_up_and_down = vowels_count_from_left_and_right_and_up\
    \ + vowels_count_from_right_and_left_and_up;\n    let vowels_count_from_right_and_left_and_up_and_down\
    \ = vowels_count_from_right_and_left_and_up + vowels_count_from_left_and_right_and_up;\n\
    \    let vowels_count_from_left_and_right_and_up_and_down = vowels_count_from_left_and_right_and_up\
    \ + vowels_count_from_right_and_left_and_up;\n    let vowels_count_from_right_and_left_and_up_and_down\
    \ = vowels_count_from_right_and_left_and_up + vowels_count_from_left_and_right_and_up;\n\
    \    let vowels_count_from_left_and_right_and_up_and_down = vowels_count_from_left_and_right_and_up\
    \ + vowels_count_from_right_and_left_and_up;\n    let vowels_count_from_right_and_left_and_up_and_down\
    \ = vowels_count_from_right_and_left_and_up + vowels_count_from_left_and_right_and_up;\n\
    \    let vowels_count_from_left_and_right_and_up_and_down = vowels_count_from_left_and_right_and_up\
    \ + vowels_count_from_right_and_left_and_up;\n    let vowels_count_from_right_and_left_and_up_and_down\
    \ = vowels_count_from_right_and_left_and_up + vowels_count_from_left_and_right_and_up;\n\
    \    let vowels_count_from_left_and_right_and_up_and_down = vowels_count_from_left_and_right_and_up\
    \ + vowels_count_from_right_and_left_and_up;\n    let vowels_count_from_right_and_left_and_up_and_down\
    \ = vowels_count_from_right_and_left_and_up + vowels_count_from_left_and_right_and_up;\n\
    \    let vowels_count_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpch7pqysd.ts(49,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014911
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = 0;\n    let vowelsCountIndex = 0;\n\
    \    let vowelsCountMin = vowelsCount;\n    let vowelsCountMax = vowelsCount;\n\
    \    let vowelsCountSum = 0;\n    let vowelsCountSumIndex = 0;\n    let vowelsCountSumMin\
    \ = vowelsCountSum;\n    let vowelsCountSumMax = vowelsCountSum;\n    let vowelsCountSumSum\
    \ = 0;\n    let vowelsCountSumSumIndex = 0;\n    let vowelsCountSumSumMin = vowelsCountSumSum;\n\
    \    let vowelsCountSumSumMax = vowelsCountSumSum;\n    let vowelsCountSumSumSum\
    \ = 0;\n    let vowelsCountSumSumSumIndex = 0;\n    let vowelsCountSumSumSumMin\
    \ = vowelsCountSumSumSum;\n    let vowelsCountSumSumSumMax = vowelsCountSumSumSum;\n\
    \    let vowelsCountSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumIndex =\
    \ 0;\n    let vowelsCountSumSumSumSumMin = vowelsCountSumSumSumSum;\n    let vowelsCountSumSumSumSumMax\
    \ = vowelsCountSumSumSumSum;\n    let vowelsCountSumSumSumSumSum = 0;\n    let\
    \ vowelsCountSumSumSumSumSumIndex = 0;\n    let vowelsCountSumSumSumSumSumMin\
    \ = vowelsCountSumSumSumSumSum;\n    let vowelsCountSumSumSumSumSumMax = vowelsCountSumSumSumSumSum;\n\
    \    let vowelsCountSumSumSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumSumSumIndex\
    \ = 0;\n    let vowelsCountSumSumSumSumSumSumMin = vowelsCountSumSumSumSumSum;\n\
    \    let vowelsCountSumSumSumSumSumMax = vowelsCountSumSumSumSumSum;\n    let\
    \ vowelsCountSumSumSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumSumSumIndex\
    \ = 0;\n    let vowelsCountSumSumSumSumSumSumMin = vowelsCountSumSumSumSumSumSum;\n\
    \    let vowelsCountSumSumSumSumSumSumMax = vowelsCountSumSumSumSumSumSum;\n \
    \   let vowelsCountSumSumSumSumSumSumSum = 0;\n    let vowelsCountSumSumSumSumSumSumSumIndex\
    \ = 0;\n    let vowelsCountSumSumSumSumSumSumSumMin = vowelsCountSumSumSumSumSumSum;\n\
    \    let vowels\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfo0p0znn.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014911
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowel_count\
    \ = vowels.filter(v => word.includes(v)).length;\n    let consonants = ['b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'];\n    let consonant_count = consonants.filter(c => word.includes(c)).length;\n\
    \    let vowel_start = vowel_count - consonant_count;\n    let vowel_end = vowel_start\
    \ + vowel_count - 1;\n    let vowel_middle = vowel_start + vowel_count / 2;\n\
    \    let vowel_middle_index = word.indexOf(vowels[vowel_middle]);\n    let vowel_start\
    \ = word.indexOf(vowels[vowel_start]);\n    let vowel_end = word.indexOf(vowels[vowel_end]);\n\
    \    let vowel_middle_index = word.indexOf(vowels[vowel_middle]);\n    let vowel_start\
    \ = word.indexOf(vowels[vowel_start]);\n    let vowel_end = word.indexOf(vowels[vowel_end]);\n\
    \    let vowel_middle_index = word.indexOf(vowels[vowel_middle]);\n    let vowel_start\
    \ = word.indexOf(vowels[vowel_start]);\n    let vowel_end = word.indexOf(vowels[vowel_end]);\n\
    \    let vowel_middle_index = word.indexOf(vowels[vowel_middle]);\n    let vowel_start\
    \ = word.indexOf(vowels[vowel_start]);\n    let vowel_end = word.indexOf(vowels[vowel_end]);\n\
    \    let vowel_middle_index = word.indexOf(vowels[vowel_middle]);\n    let vowel_start\
    \ = word.indexOf(vowels[vowel_start]);\n    let vowel_end = word.indexOf(vowels[vowel_end]);\n\
    \    let vowel_middle_index = word.indexOf(vowels[vowel_middle]);\n    let vowel_start\
    \ = word.indexOf(vowels[vowel_start]);\n    let vowel_end = word.indexOf(vowels[vowel_end]);\n\
    \    let vowel_middle_index = word.indexOf(vowels[vowel_middle]);\n    let vowel_start\
    \ = word.indexOf(vowels[vowel_start]);\n    let vowel_end = word.indexOf(vowels[vowel_end]);\n\
    \    let vowel_middle_index = word.indexOf(vowels[vowel_middle]);\n    let vowel_start\
    \ = word.indexOf(vowels[vowel_start]);\n    let vowel_end = word.indexOf(vowels[vowel_end]);\n\
    \    let vowel_middle_index = word.indexOf(vowels[vowel_middle]);\n    let vowel_start\
    \ = word.indexOf(vowels[vowel_start]);\n    let vowel_end = word.indexOf(vowels[vowel_end]);\n\
    \    let vowel_middle_index = word.indexOf(vowels[vowel_middle]);\n    let vowel_start\
    \ = word.indexOf(vowels[vowel_start]);\n    let vowel_end = \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp60f3hlpo.ts(45,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp60f3hlpo.ts(66,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014911
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCountFromRight = vowelsCount - 1;\n    let vowelsCountFromLeft\
    \ = vowelsCount - 2;\n    let vowelsCountFromRightAndLeft = vowelsCount - 3;\n\
    \    let vowelsCountFromRightAndLeftAndUpper = vowelsCount - 4;\n    let vowelsCountFromRightAndLeftAndUpperAndLower\
    \ = vowelsCount - 5;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapital\
    \ = vowelsCount - 6;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthers\
    \ = vowelsCount - 7;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthers\
    \ = vowelsCount - 8;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthers\
    \ = vowelsCount - 9;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 10;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 11;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 12;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 13;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 14;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 15;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 16;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 17;\n    let vowelsCountFromRightAndLeftAndUpperAndLowerAndCapitalAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthersAndOthers\
    \ = vowelsCount - 18;\n    let \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa5vp4hq6.ts(29,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpa5vp4hq6.ts(50,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014908
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    let vowelsIndexCount = 0;\n\
    \    let vowelsIndexCount2 = 0;\n    let vowelsIndexCount3 = 0;\n    let vowelsIndexCount4\
    \ = 0;\n    let vowelsIndexCount5 = 0;\n    let vowelsIndexCount6 = 0;\n    let\
    \ vowelsIndexCount7 = 0;\n    let vowelsIndexCount8 = 0;\n    let vowelsIndexCount9\
    \ = 0;\n    let vowelsIndexCount10 = 0;\n    let vowelsIndexCount11 = 0;\n   \
    \ let vowelsIndexCount12 = 0;\n    let vowelsIndexCount13 = 0;\n    let vowelsIndexCount14\
    \ = 0;\n    let vowelsIndexCount15 = 0;\n    let vowelsIndexCount16 = 0;\n   \
    \ let vowelsIndexCount17 = 0;\n    let vowelsIndexCount18 = 0;\n    let vowelsIndexCount19\
    \ = 0;\n    let vowelsIndexCount20 = 0;\n    let vowelsIndexCount21 = 0;\n   \
    \ let vowelsIndexCount22 = 0;\n    let vowelsIndexCount23 = 0;\n    let vowelsIndexCount24\
    \ = 0;\n    let vowelsIndexCount25 = 0;\n    let vowelsIndexCount26 = 0;\n   \
    \ let vowelsIndexCount27 = 0;\n    let vowelsIndexCount28 = 0;\n    let vowelsIndexCount29\
    \ = 0;\n    let vowelsIndexCount30 = 0;\n    let vowelsIndexCount31 = 0;\n   \
    \ let vowelsIndexCount32 = 0;\n    let vowelsIndexCount33 = 0;\n    let vowelsIndexCount34\
    \ = 0;\n    let vowelsIndexCount35 = 0;\n    let vowelsIndexCount36 = 0;\n   \
    \ let vowelsIndexCount37 = 0;\n    let vowelsIndexCount38 = 0;\n    let vowelsIndexCount39\
    \ = 0;\n    let vowelsIndexCount40 = 0;\n    let vowelsIndexCount41 = 0;\n   \
    \ let vowelsIndexCount42 = 0;\n    let vowelsIndexCount43 = 0;\n    let vowelsIndexCount44\
    \ = 0;\n    let vowelsIndexCount45 = 0;\n    let vowelsIndexCount46 = 0;\n   \
    \ let vowelsIndexCount47 = 0;\n    let vowelsIndexCount48 = 0;\n    let vowelsIndexCount49\
    \ = 0;\n    let vowelsIndexCount50 = 0;\n    let vowelsIndexCount51 = 0;\n   \
    \ let vowelsIndexCount52 = 0;\n    let vowelsIndexCount53 = 0;\n    let vowelsIndexCount54\
    \ = 0;\n    let vowelsIndexCount55 = 0;\n    let vowelsIndexCount56 = 0;\n   \
    \ let vowelsIndexCount57 = 0;\n    let vowelsIndexCount58 = 0;\n    let vowelsIndexCount59\
    \ = 0;\n    let vowelsIndexCount60 = 0;\n    let vowelsIndexCount61 = 0;\n   \
    \ let vowelsIndex\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtgm6hsc.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowels_count\
    \ = vowels.length;\n    let vowels_count_from_right = vowels_count - 1;\n    let\
    \ vowels_count_from_left = vowels_count - 2;\n    let vowels_count_from_middle\
    \ = vowels_count - 3;\n    let vowels_count_from_middle2 = vowels_count - 4;\n\
    \    let vowels_count_from_middle3 = vowels_count - 5;\n    let vowels_count_from_middle4\
    \ = vowels_count - 6;\n    let vowels_count_from_middle5 = vowels_count - 7;\n\
    \    let vowels_count_from_middle6 = vowels_count - 8;\n    let vowels_count_from_middle7\
    \ = vowels_count - 9;\n    let vowels_count_from_middle8 = vowels_count - 10;\n\
    \    let vowels_count_from_middle9 = vowels_count - 11;\n    let vowels_count_from_middle10\
    \ = vowels_count - 12;\n    let vowels_count_from_middle11 = vowels_count - 13;\n\
    \    let vowels_count_from_middle12 = vowels_count - 14;\n    let vowels_count_from_middle13\
    \ = vowels_count - 15;\n    let vowels_count_from_middle14 = vowels_count - 16;\n\
    \    let vowels_count_from_middle15 = vowels_count - 17;\n    let vowels_count_from_middle16\
    \ = vowels_count - 18;\n    let vowels_count_from_middle17 = vowels_count - 19;\n\
    \    let vowels_count_from_middle18 = vowels_count - 20;\n    let vowels_count_from_middle19\
    \ = vowels_count - 21;\n    let vowels_count_from_middle20 = vowels_count - 22;\n\
    \    let vowels_count_from_middle21 = vowels_count - 23;\n    let vowels_count_from_middle22\
    \ = vowels_count - 24;\n    let vowels_count_from_middle23 = vowels_count - 25;\n\
    \    let vowels_count_from_middle24 = vowels_count - 26;\n    let vowels_count_from_middle25\
    \ = vowels_count - 27;\n    let vowels_count_from_middle26 = vowels_count - 28;\n\
    \    let vowels_count_from_middle27 = vowels_count - 29;\n    let vowels_count_from_middle28\
    \ = vowels_count - 30;\n    let vowels_count_from_middle29 = vowels_count - 31;\n\
    \    let vowels_count_from_middle30 = vowels_count - 32;\n    let vowels_count_from_middle31\
    \ = vowels_count - 33;\n    let vowels_count_from_middle32 = vowels_count - 34;\n\
    \    let vowels_count_from_middle33 = vowels_count - 35;\n    let vowel\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxq_3f3z3.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsCount2 = vowelsCount - 1;\n    let vowelsCount3\
    \ = vowelsCount - 2;\n    let vowelsCount4 = vowelsCount - 3;\n    let vowelsCount5\
    \ = vowelsCount - 4;\n    let vowelsCount6 = vowelsCount - 5;\n    let vowelsCount7\
    \ = vowelsCount - 6;\n    let vowelsCount8 = vowelsCount - 7;\n    let vowelsCount9\
    \ = vowelsCount - 8;\n    let vowelsCount10 = vowelsCount - 9;\n    let vowelsCount11\
    \ = vowelsCount - 10;\n    let vowelsCount12 = vowelsCount - 11;\n    let vowelsCount13\
    \ = vowelsCount - 12;\n    let vowelsCount14 = vowelsCount - 13;\n    let vowelsCount15\
    \ = vowelsCount - 14;\n    let vowelsCount16 = vowelsCount - 15;\n    let vowelsCount17\
    \ = vowelsCount - 16;\n    let vowelsCount18 = vowelsCount - 17;\n    let vowelsCount19\
    \ = vowelsCount - 18;\n    let vowelsCount20 = vowelsCount - 19;\n    let vowelsCount21\
    \ = vowelsCount - 20;\n    let vowelsCount22 = vowelsCount - 21;\n    let vowelsCount23\
    \ = vowelsCount - 22;\n    let vowelsCount24 = vowelsCount - 23;\n    let vowelsCount25\
    \ = vowelsCount - 24;\n    let vowelsCount26 = vowelsCount - 25;\n    let vowelsCount27\
    \ = vowelsCount - 26;\n    let vowelsCount28 = vowelsCount - 27;\n    let vowelsCount29\
    \ = vowelsCount - 28;\n    let vowelsCount30 = vowelsCount - 29;\n    let vowelsCount31\
    \ = vowelsCount - 30;\n    let vowelsCount32 = vowelsCount - 31;\n    let vowelsCount33\
    \ = vowelsCount - 32;\n    let vowelsCount34 = vowelsCount - 33;\n    let vowelsCount35\
    \ = vowelsCount - 34;\n    let vowelsCount36 = vowelsCount - 35;\n    let vowelsCount37\
    \ = vowelsCount - 36;\n    let vowelsCount38 = vowelsCount - 37;\n    let vowelsCount39\
    \ = vowelsCount - 38;\n    let vowelsCount40 = vowelsCount - 39;\n    let vowelsCount41\
    \ = vowelsCount - 40;\n    let vowels\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvwysex3k.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014903
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let vowelsCount\
    \ = vowels.length;\n    let vowelsIndex = [];\n    for (let i = 0; i < vowelsCount;\
    \ i++) {\n        let index = word.indexOf(vowels[i]);\n        if (index > -1)\
    \ {\n            vowelsIndex.push(index);\n        }\n    }\n    let vowelsCount\
    \ = vowelsIndex.length;\n    let vowelsIndexMax = Math.max.apply(null, vowelsIndex);\n\
    \    let vowelsIndexMin = Math.min.apply(null, vowelsIndex);\n    let vowelsIndexMaxIndex\
    \ = vowelsIndex.indexOf(vowelsIndexMax);\n    let vowelsIndexMinIndex = vowelsIndex.indexOf(vowelsIndexMin);\n\
    \    let vowelsIndexMaxVowel = vowelsIndex[vowelsIndexMaxIndex];\n    let vowelsIndexMinVowel\
    \ = vowelsIndex[vowelsIndexMinIndex];\n    let vowelsIndexMaxVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowel);\n\
    \    let vowelsIndexMinVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowel);\n\
    \    let vowelsIndexMaxVowelVowel = vowelsIndex[vowelsIndexMaxVowelIndex];\n \
    \   let vowelsIndexMinVowelVowel = vowelsIndex[vowelsIndexMinVowelIndex];\n  \
    \  let vowelsIndexMaxVowelVowelIndex = vowelsIndex.indexOf(vowelsIndexMaxVowelVowel);\n\
    \    let vowelsIndexMinVowelVowelIndex = vowelsIndex.indexOf(vowelsIndexMinVowelVowel);\n\
    \    let vowelsIndexMaxVowelVowelVowel = vowelsIndex[vowelsIndexMaxVowelVowelIndex];\n\
    \    let vowelsIndexMinVowelVowelVowel = vowelsIndex[vowelsIndexMinVowelVowelIndex];\n\
    \    let vowelsIndexMaxVowelVowelVowelVowel = vowelsIndex[vowelsIndexMaxVowelVowelVowelIndex];\n\
    \    let vowelsIndexMinVowelVowelVowelVowel = vowelsIndex[vowelsIndexMinVowelVowelVowelIndex];\n\
    \    let vowelsIndexMaxVowelVowelVowelVowel = vowelsIndex[vowelsIndexMaxVowelVowelVowelVowelIndex];\n\
    \    let vowelsIndexMinVowelVow\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpn509nf7w.ts(57,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014911
