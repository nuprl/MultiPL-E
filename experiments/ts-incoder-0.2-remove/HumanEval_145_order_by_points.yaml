name: HumanEval_145_order_by_points
language: ts
prompt: "//Write a function which sorts the given list of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ list.\n// For example:\nfunction order_by_points(nums: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
  \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
  \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
  \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9,\
  \ 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
  \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
completions: ["    let result: number[] = [];\n    let map = new Map();\n    for (let\
    \ i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        let digits\
    \ = num.toString().split('');\n        let sum = 0;\n        for (let j = 0; j\
    \ < digits.length; j++) {\n            sum += parseInt(digits[j]);\n        }\n\
    \        if (map.has(sum)) {\n            let index = map.get(sum);\n        \
    \    result[index] = num;\n        } else {\n            result.push(num);\n \
    \           map.set(sum, result.length - 1);\n        }\n    }\n    return result;\n\
    }", "  const map = new Map<number, number[]>();\n  for (const num of nums) {\n\
    \    const key = num.toString().split('').reduce((acc, cur) => acc + +cur, 0);\n\
    \    const list = map.get(key);\n    if (list === undefined) {\n      map.set(key,\
    \ [num]);\n    } else {\n      list.push(num);\n    }\n  }\n  return Array.from(map.values());\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n % 10);\n  const sums = digits.reduce((sum, digit)\
    \ => sum + digit, 0);\n  const sorted = nums.sort((a, b) => {\n    const aDigit\
    \ = a % 10;\n    const bDigit = b % 10;\n    return sums - aDigit - bDigit;\n\
    \  });\n  return sorted;\n}\n", "  const sums = nums.map(n => n.toString().split('').map(Number).reduce((a,\
    \ b) => a + b, 0));\n  return nums.sort((a, b) => sums.indexOf(a) - sums.indexOf(b));\n\
    }", "    let nums_copy = nums.slice();\n    nums_copy.sort((a, b) => {\n     \
    \   let a_digit = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        let b_digit = b.toString().split('').reduce((acc, cur) => acc +\
    \ parseInt(cur), 0);\n        return a_digit - b_digit;\n    });\n    return nums_copy;\n\
    }\n", "  const points: number[] = [];\n  for (let i = 0; i < nums.length; i++)\
    \ {\n    const digits = nums[i].toString().split('');\n    const sum = 0;\n  \
    \  for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j],\
    \ 10);\n    }\n    points.push([sum, nums[i]]);\n  }\n  points.sort((a, b) =>\
    \ a[0] - b[0]);\n  return points.map(a => a[1]);\n}\n", "  let points: number[]\
    \ = [];\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for\
    \ (let j = 0; j < nums.length; j++) {\n      sum += nums[j];\n      if (sum >\
    \ 9) {\n        sum += nums[j] - 10;\n      }\n    }\n    points.push(sum);\n\
    \  }\n  points.sort((a, b) => a - b);\n  return points;\n}\n", "  const len =\
    \ nums.length;\n  const points: number[] = [];\n  let maxSum = 0;\n  for (let\
    \ i = 0; i < len; i++) {\n    const curSum = nums[i].reduce((a, b) => a + b, 0);\n\
    \    if (maxSum < curSum) {\n      maxSum = curSum;\n    }\n    points.push(curSum);\n\
    \  }\n  points.sort((a, b) => a - b);\n  const result = [];\n  for (let i = 0;\
    \ i < len; i++) {\n    const curSum = points[i];\n    for (let j = 0; j < len;\
    \ j++) {\n      if (i === j) {\n        continue;\n      }\n      if (curSum ===\
    \ points[j]) {\n        result.push(nums[j]);\n        break;\n      }\n    }\n\
    \  }\n  return result;\n}\n", "  const map = new Map();\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
    \    const key = digits.reduce((acc, cur) => acc + cur, 0);\n    if (!map.has(key))\
    \ {\n      map.set(key, num);\n    } else {\n      const index = map.get(key);\n\
    \      map.set(key, nums[index]);\n    }\n  }\n  return Array.from(map.values());\n\
    }\n", "    let sorted: number[] = [];\n    let sum = 0;\n    for (let i = 0; i\
    \ < nums.length; i++) {\n        sum += nums[i];\n        sorted.push(sum);\n\
    \    }\n    sorted.sort((a, b) => a - b);\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        nums[i] = sorted[i];\n    }\n    return nums;\n}\n", "  const\
    \ sums = nums.map(n => n.toString().split('').map(Number).reduce((a, b) => a +\
    \ b, 0));\n  return nums.sort((a, b) => sums[a] - sums[b]);\n}\n", "    let sorted:\
    \ number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        let sum\
    \ = 0;\n        for (let j = 0; j < nums.length; j++) {\n            sum += nums[j];\n\
    \        }\n        if (sum === 0) {\n            sorted.push(nums[i]);\n    \
    \    } else {\n            let index = sorted.findIndex(item => item === sum);\n\
    \            if (index === -1) {\n                sorted.push(sum);\n        \
    \        sorted.push(nums[i]);\n            } else {\n                sorted[index]\
    \ = nums[i];\n            }\n        }\n    }\n    return sorted;\n}\n", "  const\
    \ numsMap = new Map();\n  for (const num of nums) {\n    const key = num.toString();\n\
    \    if (numsMap.has(key)) {\n      numsMap.set(key, numsMap.get(key) + num);\n\
    \    } else {\n      numsMap.set(key, num);\n    }\n  }\n  const sortedNums =\
    \ [];\n  for (const [key, value] of numsMap) {\n    sortedNums.push(value);\n\
    \  }\n  return sortedNums;\n}\n", "    const map = new Map<number, number>();\n\
    \    for (let i = 0; i < nums.length; i++) {\n        const num = nums[i];\n \
    \       const digits = num.toString().split('');\n        let sum = 0;\n     \
    \   for (let j = 0; j < digits.length; j++) {\n            sum += parseInt(digits[j],\
    \ 10);\n        }\n        map.set(sum, num);\n    }\n    return Array.from(map.values());\n\
    }\n", "\tlet result = [];\n\tlet sum = 0;\n\tfor (let i = 0; i < nums.length;\
    \ i++) {\n\t\tsum += nums[i];\n\t\tresult.push(sum);\n\t}\n\tresult.sort((a, b)\
    \ => a - b);\n\treturn result;\n}\n", "\tlet sum = 0;\n\tlet result = [];\n\t\
    for (let i = 0; i < nums.length; i++) {\n\t\tsum += nums[i];\n\t\tresult.push(i);\n\
    \t}\n\tresult.sort((a, b) => {\n\t\treturn sum - nums[a] - nums[b];\n\t});\n\t\
    return result;\n}\n", "    let points: number[] = [];\n    let maxSum = 0;\n \
    \   for (let i = 0; i < nums.length; i++) {\n        let sum = 0;\n        for\
    \ (let j = 0; j < nums.length; j++) {\n            sum += nums[j];\n        }\n\
    \        if (sum > maxSum) {\n            maxSum = sum;\n            points =\
    \ [nums[i], nums[j]];\n        }\n    }\n    return points;\n}\n", "    const\
    \ sorted = nums.sort((a, b) => {\n        const aSum = sum_digits(a);\n      \
    \  const bSum = sum_digits(b);\n        return aSum - bSum;\n    });\n    return\
    \ sorted;\n}\n", "    const map = new Map();\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        const num = nums[i];\n        const digits = num.toString().split('');\n\
    \        const sum = 0;\n        for (let j = 0; j < digits.length; j++) {\n \
    \           sum += parseInt(digits[j], 10);\n        }\n        const key = sum.toString();\n\
    \        if (!map.has(key)) {\n            map.set(key, []);\n        }\n    \
    \    map.get(key).push(num);\n    }\n    const result = [];\n    for (let i =\
    \ 0; i < map.size; i++) {\n        result.push(map.get(i));\n    }\n    return\
    \ result;\n}\n", "  const sorted = nums.sort((a, b) => {\n    const sumA = sumDigits(a);\n\
    \    const sumB = sumDigits(b);\n    return sumA - sumB;\n  });\n  return sorted;\n\
    }\n", "  const sorted = nums.slice().sort((a, b) => {\n    const sumA = sumDigits(a);\n\
    \    const sumB = sumDigits(b);\n    return sumA - sumB;\n  });\n  return sorted;\n\
    }\n", "\tnums.sort(function(a, b) {\n\t\treturn a.digits + b.digits - a.digits\
    \ * b.digits;\n\t});\n\treturn nums;\n}", "  let points: number[] = [];\n  let\
    \ sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n \
    \   points.push(sum);\n  }\n  points.sort((a, b) => a - b);\n  return points.map(i\
    \ => nums[i]);\n}\n", "  const sorted = nums.sort((a, b) => {\n    const a_digit\
    \ = a.toString().split('').reduce((acc, cur) => acc + +cur, 0);\n    const b_digit\
    \ = b.toString().split('').reduce((acc, cur) => acc + +cur, 0);\n    return a_digit\
    \ - b_digit;\n  });\n  return sorted;\n}\n", "  const sorted = nums.slice();\n\
    \  sorted.sort((a, b) => {\n    const sumA = sum_digits(a);\n    const sumB =\
    \ sum_digits(b);\n    if (sumA === sumB) {\n      return a.localeCompare(b);\n\
    \    }\n    return sumA - sumB;\n  });\n  return sorted;\n}\n", "  const map =\
    \ new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n\
    \    const key = num.toString();\n    if (!map.has(key)) {\n      map.set(key,\
    \ num);\n    } else {\n      const existing = map.get(key);\n      if (num > existing)\
    \ {\n        map.set(key, num);\n      }\n    }\n  }\n  return Array.from(map.values());\n\
    }\n", "  const len = nums.length;\n  const points: number[] = [];\n  let maxSum\
    \ = 0;\n  let index = 0;\n  for (let i = 0; i < len; i++) {\n    const curSum\
    \ = nums[i] + nums[index];\n    if (curSum > maxSum) {\n      maxSum = curSum;\n\
    \      index = i;\n    }\n  }\n  points.push([index, maxSum]);\n  for (let i =\
    \ len - 1; i >= 0; i--) {\n    const curSum = nums[i] + nums[index];\n    if (curSum\
    \ > maxSum) {\n      maxSum = curSum;\n      index = i;\n    }\n  }\n  points.push([index,\
    \ maxSum]);\n  return points;\n}\n", "    const sums = nums.map(n => n.toString().split('').map(Number).reduce((a,\
    \ b) => a + b, 0));\n    return nums.sort((a, b) => sums.indexOf(a) - sums.indexOf(b));\n\
    }\n", "  const numsSorted = nums.slice();\n  numsSorted.sort((a, b) => {\n   \
    \ const sumA = sumDigits(a);\n    const sumB = sumDigits(b);\n    return sumA\
    \ - sumB;\n  });\n  return numsSorted;\n}\n", "    let sorted: number[] = [];\n\
    \    let sum = 0;\n    for (let i = 0; i < nums.length; i++) {\n        sum +=\
    \ nums[i];\n        sorted.push(sum);\n    }\n    sorted.sort((a, b) => a - b);\n\
    \    return sorted;\n}", "  const len = nums.length;\n  if (len === 0) {\n   \
    \ return nums;\n  }\n  const digits = nums.map(n => n.toString());\n  const sums\
    \ = digits.map(d => d.split('').map(Number).reduce((acc, cur) => acc + cur));\n\
    \  const orders = sums.map(s => s.split('').sort().join(''));\n  return orders.map((s,\
    \ i) => nums[i]);\n}\n", "  const len = nums.length;\n  if (len === 0) {\n   \
    \ return nums;\n  }\n  const digits = nums.map(n => n % 10);\n  const sum_digits\
    \ = digits.reduce((sum, n) => sum + n, 0);\n  const sorted_nums = nums.sort((a,\
    \ b) => sum_digits - digits[a] - digits[b]);\n  return sorted_nums;\n}\n", " \
    \   let result: number[] = [];\n    let map = new Map();\n    for (let i = 0;\
    \ i < nums.length; i++) {\n        let num = nums[i];\n        let digits = num.toString().split('');\n\
    \        let sum = 0;\n        for (let j = 0; j < digits.length; j++) {\n   \
    \         sum += parseInt(digits[j]);\n        }\n        if (map.has(sum)) {\n\
    \            result.push(map.get(sum));\n        } else {\n            result.push(num);\n\
    \            map.set(sum, num);\n        }\n    }\n    return result;\n}\n", " \
    \   let result: number[] = [];\n    let map = new Map();\n    for (let i = 0;\
    \ i < nums.length; i++) {\n        let item = nums[i];\n        let key = item.toString();\n\
    \        if (!map.has(key)) {\n            map.set(key, item);\n            result.push(item);\n\
    \        } else {\n            let item = map.get(key);\n            let sum =\
    \ 0;\n            for (let j = 0; j < item.length; j++) {\n                sum\
    \ += item[j];\n            }\n            if (sum > 0) {\n                result.push(item);\n\
    \                map.set(key, item);\n            }\n        }\n    }\n    return\
    \ result;\n}", "    let result: number[] = [];\n    let map = new Map();\n   \
    \ for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n      \
    \  let digits = num.toString().split('');\n        let sum = 0;\n        for (let\
    \ j = 0; j < digits.length; j++) {\n            sum += parseInt(digits[j]);\n\
    \        }\n        if (!map.has(sum)) {\n            map.set(sum, num);\n   \
    \         result.push(num);\n        }\n    }\n    return result.sort((a, b) =>\
    \ {\n        let a_sum = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        let b_sum = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n        return a_sum - b_sum;\n    });\n}", "  const len = nums.length;\n\
    \  const points = new Array(len);\n  for (let i = 0; i < len; i++) {\n    const\
    \ p = points[i] = [];\n    for (let j = 0; j < len; j++) {\n      if (nums[j]\
    \ >= 10) {\n        p[j] += 1;\n      }\n    }\n  }\n  const result = [];\n  for\
    \ (let i = 0; i < len; i++) {\n    const p = points[i];\n    for (let j = 0; j\
    \ < p.length; j++) {\n      if (p[j] > 1) {\n        result.push(nums[j]);\n \
    \       break;\n      }\n    }\n  }\n  return result;\n}\n", "  const points:\
    \ number[] = [];\n  for (let i = 0; i < nums.length; i++) {\n    const point =\
    \ nums[i];\n    const index = points.findIndex(p => p === point);\n    if (index\
    \ === -1) {\n      points.push(point);\n    } else {\n      points[index] += point;\n\
    \    }\n  }\n  return points.sort((a, b) => a - b);\n}\n", "  const map = new\
    \ Map<number, number>();\n  for (let i = 0; i < nums.length; i++) {\n    const\
    \ num = nums[i];\n    const digits = num.toString().split('');\n    const sum\
    \ = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += digits[j];\n\
    \      map.set(sum, i);\n    }\n  }\n  const result = [];\n  map.forEach((value,\
    \ key) => {\n    result.push(nums[key]);\n  });\n  return result;\n}\n", "  const\
    \ sums = nums.map(n => n.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0));\n  return nums.sort((a, b) => sums[a] - sums[b]);\n}\n", "  const points:\
    \ number[] = [];\n  for (let i = 0; i < nums.length; i++) {\n    const p = nums[i];\n\
    \    const index = points.findIndex((point) => point === p);\n    if (index ===\
    \ -1) {\n      points.push(nums[i]);\n    } else {\n      points[index] += nums[i];\n\
    \    }\n  }\n  return points.sort((a, b) => a - b);\n}\n", "  const map = new\
    \ Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n\
    \    const key = num.toString();\n    const value = map.get(key);\n    if (value\
    \ === undefined) {\n      map.set(key, num);\n    } else {\n      const sum =\
    \ value.sum;\n      if (sum > num) {\n        map.set(key, {sum, num});\n    \
    \  }\n    }\n  }\n  const result = [];\n  for (const [key, value] of map) {\n\
    \    result.push(value);\n  }\n  return result;\n}\n", "    const map = new Map();\n\
    \    for (let i = 0; i < nums.length; i++) {\n        const num = nums[i];\n \
    \       const digits = num.toString().split('');\n        const sum = 0;\n   \
    \     for (let j = 0; j < digits.length; j++) {\n            sum += parseInt(digits[j],\
    \ 10);\n        }\n        map.set(sum, num);\n    }\n    const result = [];\n\
    \    for (let i = 0; i < map.size; i++) {\n        result.push(map.get(i));\n\
    \    }\n    return result;\n}\n", "  const len = nums.length;\n  const points\
    \ = new Array(len);\n  for (let i = 0; i < len; i++) {\n    const p = nums[i];\n\
    \    const point = p * 10;\n    points[point] = i;\n  }\n  points.sort((a, b)\
    \ => a - b);\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const\
    \ p = points[i];\n    const index = nums[p];\n    result.push(index);\n  }\n \
    \ return result;\n}\n", "    const sums = nums.map(n => n.toString().split('').reduce((a,\
    \ b) => a + +b, 0));\n    return nums.sort((a, b) => sums[a] - sums[b]);\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => n % 10);\n  const sums = digits.map(n => digits.reduce((acc,\
    \ d) => acc + d, 0));\n  return nums.sort((a, b) => {\n    const aSum = sums[a];\n\
    \    const bSum = sums[b];\n    return aSum - bSum;\n  });\n}\n", "    let numsCopy\
    \ = nums.slice();\n    numsCopy.sort((a, b) => {\n        let sumA = a;\n    \
    \    let sumB = b;\n        let sumAB = sumA + sumB;\n        let sumABCopy =\
    \ sumAB;\n        while (sumABCopy > 0) {\n            sumABCopy -= 10;\n    \
    \    }\n        if (sumABCopy === 0) {\n            return sumA - sumB;\n    \
    \    }\n        return sumABCopy;\n    });\n    return numsCopy;\n}", "  const\
    \ sorted = nums.slice();\n  sorted.sort((a, b) => {\n    const sumA = sum_digits(a);\n\
    \    const sumB = sum_digits(b);\n    return sumA - sumB;\n  });\n  return sorted;\n\
    }\n", "    const len = nums.length;\n    if (len === 0) {\n        return nums;\n\
    \    }\n    const digits = nums.map(n => n.toString()).map(Number);\n    const\
    \ sums = digits.map(d => d.reduce((a, b) => a + b, 0));\n    const sorted = sums.map((s,\
    \ i) => [s, i]);\n    sorted.sort((a, b) => a[0] - b[0]);\n    const res = [];\n\
    \    for (let i = 0; i < len; i++) {\n        res.push(nums[sorted[i][1]]);\n\
    \    }\n    return res;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n\
    \    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n  const\
    \ sums = digits.map(d => d.split('').reduce((a, b) => a + b, 0));\n  const order\
    \ = sums.map((s, i) => [s, i]);\n  order.sort((a, b) => a[0] - b[0]);\n  return\
    \ order.map(a => nums[a[1]]);\n}\n", "    const len = nums.length;\n    if (len\
    \ === 0) {\n        return nums;\n    }\n    const max_sum = nums.reduce((a, b)\
    \ => a + b, 0);\n    const min_sum = nums.reduce((a, b) => a + b, 0);\n    const\
    \ max_index = nums.findIndex(a => a === max_sum);\n    const min_index = nums.findIndex(a\
    \ => a === min_sum);\n    if (max_index === -1) {\n        return nums;\n    }\n\
    \    if (min_index === -1) {\n        return nums.reverse();\n    }\n    if (max_index\
    \ > min_index) {\n        return nums.reverse().sort((a, b) => a - b);\n    }\n\
    \    return nums.sort((a, b) => a - b);\n}\n", "    const sorted = nums.sort((a,\
    \ b) => {\n        const a_digit = Math.log10(a);\n        const b_digit = Math.log10(b);\n\
    \        return a_digit - b_digit;\n    });\n    return sorted;\n}\n", "  const\
    \ len = nums.length;\n  const points = [];\n  for (let i = 0; i < len; i++) {\n\
    \    const point = nums[i];\n    const pointSum = point.toString().split('').reduce((acc,\
    \ cur) => acc + +cur, 0);\n    points.push({\n      point,\n      pointSum,\n\
    \      index: i\n    });\n  }\n  points.sort((a, b) => {\n    return a.pointSum\
    \ - b.pointSum;\n  });\n  const sortedPoints = points.map(p => p.point);\n  return\
    \ sortedPoints;\n}\n", "    const sorted = nums.slice();\n    sorted.sort((a,\
    \ b) => {\n        const a_digits = a.toString().split('')\n        const b_digits\
    \ = b.toString().split('')\n        let sum = 0;\n        for (let i = 0; i <\
    \ a_digits.length; i++) {\n            sum += parseInt(a_digits[i]) * Math.pow(10,\
    \ a_digits.length - i - 1)\n        }\n        for (let i = 0; i < b_digits.length;\
    \ i++) {\n            sum += parseInt(b_digits[i]) * Math.pow(10, b_digits.length\
    \ - i - 1)\n        }\n        return sum - a - b\n    })\n    return sorted\n\
    }\n", "  const len = nums.length;\n  if (len < 2) {\n    return nums;\n  }\n \
    \ const digits = nums.map(n => n.toString()).map(Number);\n  const sums = digits.map(d\
    \ => d.reduce((a, b) => a + b, 0));\n  const order = sums.map((s, i) => [s, i]);\n\
    \  order.sort((a, b) => a[0] - b[0]);\n  return order.map(a => nums[a[1]]);\n\
    }\n", "  const len = nums.length;\n  if (len < 2) {\n    return nums;\n  }\n \
    \ const digits = nums.map(n => n.toString().split('').reduce((acc, cur) => acc\
    \ + +cur, 0));\n  const sum = digits.reduce((acc, cur) => acc + cur, 0);\n  const\
    \ sorted = [];\n  for (let i = 0; i < len; i++) {\n    const cur = digits[i];\n\
    \    if (cur === sum) {\n      sorted.push(nums[i]);\n    }\n  }\n  return sorted;\n\
    }\n", "  const sorted = nums.sort((a, b) => a - b);\n  const result = [];\n  let\
    \ index = 0;\n  while (index < sorted.length) {\n    const item = sorted[index];\n\
    \    const sum = Math.floor(item / 10);\n    if (result.indexOf(sum) === -1) {\n\
    \      result.push(sum);\n    }\n    index++;\n  }\n  return result;\n}\n", " \
    \ const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(x => Math.abs(x));\n  const sum = digits.reduce((acc, x) =>\
    \ acc + x, 0);\n  const orders = digits.map((x, i) => [x, i]);\n  orders.sort((a,\
    \ b) => sum - a[0] - b[0]);\n  return orders.map(x => nums[x[1]]);\n}\n", "\t\
    nums.sort((a, b) => {\n\t\tlet sum = 0;\n\t\tfor (let i = 0; i < a.length; i++)\
    \ {\n\t\t\tsum += a[i];\n\t\t}\n\t\tfor (let i = 0; i < b.length; i++) {\n\t\t\
    \tsum += b[i];\n\t\t}\n\t\treturn sum - a - b;\n\t});\n\treturn nums;\n}\n", " \
    \ const sorted_nums = nums.slice();\n  sorted_nums.sort((a, b) => {\n    const\
    \ a_digit = parseInt(a.toString().split('').reduce((acc, cur) => acc + cur), 10);\n\
    \    const b_digit = parseInt(b.toString().split('').reduce((acc, cur) => acc\
    \ + cur), 10);\n    return a_digit - b_digit;\n  });\n  return sorted_nums;\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n.toString());\n  const sums = digits.map(d =>\
    \ d.split('').reduce((acc, cur) => acc + +cur, 0));\n  const order = sums.map((sum,\
    \ index) => [sum, index]);\n  return order.sort((a, b) => a[0] - b[0]).map(a =>\
    \ a[1]);\n}\n", "\tlet result = [];\n\tlet index = 0;\n\tfor (let i = 0; i < nums.length;\
    \ i++) {\n\t\tlet sum = 0;\n\t\tfor (let j = 0; j < nums.length; j++) {\n\t\t\t\
    sum += nums[j].digit;\n\t\t}\n\t\tlet index = result.findIndex(item => item.sum\
    \ === sum);\n\t\tif (index === -1) {\n\t\t\tresult.push({sum, index});\n\t\t}\
    \ else {\n\t\t\tresult[index].index = i;\n\t\t}\n\t}\n\treturn result.sort((a,\
    \ b) => a.sum - b.sum).map(item => item.index);\n}\n", "    let result: number[]\
    \ = [];\n    let map = new Map<number, number[]>();\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        let digits = nums[i].toString().split('');\n        let sum\
    \ = 0;\n        for (let j = 0; j < digits.length; j++) {\n            sum +=\
    \ parseInt(digits[j]);\n        }\n        let key = map.get(sum);\n        if\
    \ (key === undefined) {\n            key = nums[i];\n            map.set(sum,\
    \ key);\n            result.push(key);\n        } else {\n            result.push(key);\
    \ //push the key to the result array\n            map.set(sum, key); //update\
    \ the map with the new key\n        }\n    }\n    return result;\n}\n", "    const\
    \ len = nums.length;\n    if (len === 0) {\n        return nums;\n    }\n    const\
    \ digits = nums.map(n => n.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0));\n    const sum = digits.reduce((acc, cur) => acc + cur, 0);\n    const\
    \ sorted = [];\n    for (let i = 0; i < len; i++) {\n        const cur = digits[i];\n\
    \        if (cur === sum) {\n            sorted.push(nums[i]);\n        }\n  \
    \  }\n    return sorted;\n}\n", "  const points: number[] = [];\n  let sum = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const\
    \ digits = num.toString().split('').reverse();\n    const len = digits.length;\n\
    \    for (let j = 0; j < len; j++) {\n      sum += digits[j];\n    }\n    points.push(sum);\n\
    \    sum = 0;\n  }\n  return points.sort((a, b) => a - b);\n}\n", "    let sum\
    \ = 0;\n    let result = [];\n    for (let i = 0; i < nums.length; i++) {\n  \
    \      sum += nums[i];\n        result.push(sum);\n    }\n    result.sort((a,\
    \ b) => a - b);\n    return result;\n}", "    const sums = nums.map(n => n.toString().split('').map(Number).reduce((a,\
    \ b) => a + b, 0));\n    const sorted = sums.sort((a, b) => a - b);\n    return\
    \ nums.map(n => sorted.indexOf(n));\n}\n", "  const len = nums.length;\n  if (len\
    \ < 2) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString().split('').reduce((a,\
    \ b) => a + b, 0));\n  const sums = digits.map(d => d.reduce((a, b) => a + b,\
    \ 0));\n  const sorted = sums.map((s, i) => [s, i]);\n  sorted.sort((a, b) =>\
    \ a[0] - b[0]);\n  return sorted.map(a => nums[a[1]]);\n}\n", "    const len =\
    \ nums.length;\n    const ret = new Array(len);\n    for (let i = 0; i < len;\
    \ i++) {\n        let sum = 0;\n        for (let j = 0; j < len; j++) {\n    \
    \        sum += nums[j] % 10;\n        }\n        ret[i] = sum;\n    }\n    return\
    \ ret;\n}", "    let numsSorted = nums.slice();\n    numsSorted.sort((a, b) =>\
    \ {\n        let sumA = sumDigits(a);\n        let sumB = sumDigits(b);\n    \
    \    if (sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n\
    \        }\n        return sumA - sumB;\n    });\n    return numsSorted;\n}\n",
  "\tnums.sort((a: number, b: number) => {\n\t\tlet sum = 0;\n\t\tfor (let i = 0;\
    \ i < a.length; i++) {\n\t\t\tsum += Number(a[i]);\n\t\t}\n\t\tfor (let i = 0;\
    \ i < b.length; i++) {\n\t\t\tsum += Number(b[i]);\n\t\t}\n\t\treturn sum - a\
    \ - b;\n\t});\n\treturn nums;\n}\n", "  const len = nums.length;\n  const points:\
    \ number[] = [];\n  for (let i = 0; i < len; i++) {\n    const sum = 0;\n    for\
    \ (let j = 0; j < len; j++) {\n      sum += nums[j] % 10;\n    }\n    points[i]\
    \ = sum;\n  }\n  points.sort((a, b) => a - b);\n  return points.map(i => nums[i]);\n\
    }\n", "  const points: number[] = [];\n  for (let i = 0; i < nums.length; i++)\
    \ {\n    const p = nums[i];\n    const index = points.findIndex(p => p === p);\n\
    \    if (index === -1) {\n      points.push(nums[i]);\n    } else {\n      points[index]\
    \ += nums[i];\n    }\n  }\n  return points.sort((a, b) => a - b);\n}\n", "  const\
    \ map = new Map<number, number>();\n  for (let i = 0; i < nums.length; i++) {\n\
    \    const num = nums[i];\n    const digits = num.toString().split('');\n    const\
    \ sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j],\
    \ 10);\n    }\n    map.set(sum, i);\n  }\n  const result = [];\n  for (const [sum,\
    \ index] of map.entries()) {\n    result.push(nums[index]);\n  }\n  return result;\n\
    }\n", "  const len = nums.length;\n  const points: number[] = [];\n  for (let\
    \ i = 0; i < len; i++) {\n    const p = nums[i];\n    const point = p * Math.pow(10,\
    \ len - (i + 1));\n    points.push(point);\n  }\n  points.sort((a, b) => a - b);\n\
    \  return points.map(p => nums[p]);\n}\n", "    const map = new Map<number, number>();\n\
    \    for (let i = 0; i < nums.length; i++) {\n        const num = nums[i];\n \
    \       const digits = num.toString().split('');\n        let sum = 0;\n     \
    \   for (let j = 0; j < digits.length; j++) {\n            sum += digits[j] *\
    \ Math.pow(10, j);\n        }\n        map.set(sum, num);\n    }\n    return Array.from(map.values());\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n\
    \  }\n  let result = [];\n  for (let i = 0; i < nums.length; i++) {\n    let index\
    \ = sum - nums[i];\n    if (index >= 0) {\n      result.push(nums[i]);\n     \
    \ result.push(index);\n    }\n  }\n  return result;\n}\n", "  const len = nums.length;\n\
    \  const points = new Array(len);\n  for (let i = 0; i < len; i++) {\n    const\
    \ point = nums[i];\n    const sum = 0;\n    for (let j = 0; j < point.length;\
    \ j++) {\n      sum += point[j];\n    }\n    points[i] = sum;\n  }\n  return points.sort((a,\
    \ b) => a - b);\n}\n", "    let sum = 0;\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        sum += nums[i];\n    }\n    let result = [];\n    for (let i\
    \ = 0; i < nums.length; i++) {\n        if (sum > 0) {\n            result.push(nums[i]);\n\
    \            sum -= nums[i];\n        }\n    }\n    return result;\n}\n", "  \
    \  const sorted = nums.sort((a, b) => {\n        const sumA = sumDigits(a);\n\
    \        const sumB = sumDigits(b);\n        if (sumA === sumB) {\n          \
    \  return a.localeCompare(b);\n        }\n        return sumA - sumB;\n    });\n\
    \    return sorted;\n}", "\tlet sorted: number[] = [];\n\tlet sum = 0;\n\tfor\
    \ (let i = 0; i < nums.length; i++) {\n\t\tsum += nums[i];\n\t\tsorted.push(sum);\n\
    \t}\n\tsorted.sort((a, b) => a - b);\n\tlet result: number[] = [];\n\tfor (let\
    \ i = 0; i < nums.length; i++) {\n\t\tresult.push(nums[i]);\n\t}\n\treturn result;\n\
    }\n", "  const points: number[] = [];\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    const num = nums[i];\n    const digits = num.toString().split('').reverse();\n\
    \    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j]);\n\
    \    }\n    points.push([sum, num]);\n    sum = 0;\n  }\n  return points.sort((a,\
    \ b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const points: number[] = [];\n\
    \  for (let i = 0; i < nums.length; i++) {\n    const p = nums[i];\n    const\
    \ index = points.findIndex((item) => item === p);\n    if (index === -1) {\n \
    \     points.push(nums[i]);\n    } else {\n      points[index] += nums[i];\n \
    \   }\n  }\n  return points.sort((a, b) => a - b);\n}\n", "\tnums.sort((a, b)\
    \ => {\n\t\tconst a_digit = parseInt(a.toString().split('').reduce((acc, x) =>\
    \ acc + x, 0));\n\t\tconst b_digit = parseInt(b.toString().split('').reduce((acc,\
    \ x) => acc + x, 0));\n\t\treturn a_digit - b_digit;\n\t});\n\treturn nums;\n\
    }\n", "\tlet result: number[] = [];\n\tlet sum = 0;\n\tfor (let i = 0; i < nums.length;\
    \ i++) {\n\t\tsum += nums[i];\n\t\tresult.push(sum);\n\t}\n\tlet sorted = result.sort((a,\
    \ b) => a - b);\n\tlet index = 0;\n\tfor (let i = 0; i < sorted.length; i++) {\n\
    \t\tsorted[i] = index++;\n\t}\n\treturn sorted;\n}\n", "    let len = nums.length;\n\
    \    let ret = new Array(len);\n    for (let i = 0; i < len; i++) {\n        let\
    \ sum = 0;\n        for (let j = 0; j < len; j++) {\n            sum += nums[j]\
    \ % 10;\n        }\n        ret[i] = sum;\n    }\n    return ret;\n}\n", "  const\
    \ sums = nums.map(n => n.toString().split('').map(Number).reduce((a, b) => a +\
    \ b));\n  return sums.sort((a, b) => a - b);\n}\n", "    const sorted = nums.slice().sort((a,\
    \ b) => a - b);\n    const result = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        const index = sorted.indexOf(nums[i]);\n        if (index >\
    \ -1) {\n            result.push(nums[i]);\n            sorted.splice(index, 1);\n\
    \        }\n    }\n    return result;\n}\n", "  const points: number[] = [];\n\
    \  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const\
    \ point = nums.reduce((acc, cur, index) => {\n      if (index === i) {\n     \
    \   return acc + cur;\n      }\n      return acc;\n    }, 0);\n    points.push(point);\n\
    \  }\n  return points.sort((a, b) => a - b);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => parseInt(n.toString(),\
    \ 10));\n  const sums = digits.map(d => d.reduce((a, b) => a + b, 0));\n  const\
    \ order = sums.map((s, i) => [s, i]);\n  order.sort((a, b) => a[0] - b[0]);\n\
    \  return order.map(a => nums[a[1]]);\n}\n", "  const points: number[] = [];\n\
    \  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n\
    \    const digits = num.toString().split('').reverse();\n    sum += Number(digits[digits.length\
    \ - 1]);\n    points.push(sum);\n  }\n  points.sort((a, b) => a - b);\n  return\
    \ points.map(i => nums[i]);\n}\n", "  const sorted = nums.slice().sort((a, b)\
    \ => {\n    const sumA = sumDigits(a);\n    const sumB = sumDigits(b);\n    return\
    \ sumA - sumB;\n  });\n  return sorted;\n}\n", "  const points: number[] = [];\n\
    \  for (let i = 0; i < nums.length; i++) {\n    const digits = nums[i].toString().split('');\n\
    \    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum\
    \ += parseInt(digits[j], 10);\n    }\n    points.push([sum, nums[i]]);\n  }\n\
    \  points.sort((a, b) => {\n    return a[0] - b[0];\n  });\n  return points.map(a\
    \ => a[1]);\n}\n", "    const sorted_nums = nums.slice();\n    sorted_nums.sort(function(a,\
    \ b) {\n        const a_digit = parseInt(a.toString().split('').reduce((acc, cur)\
    \ => acc + cur), 10);\n        const b_digit = parseInt(b.toString().split('').reduce((acc,\
    \ cur) => acc + cur), 10);\n        return a_digit - b_digit;\n    });\n    return\
    \ sorted_nums;\n}", "  const sorted = nums.sort((a, b) => a + b).sort((a, b) =>\
    \ a - b);\n  return sorted.map((x, i) => [x, i]);\n}\n", "  const len = nums.length;\n\
    \  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n => n.toString());\n\
    \  const sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur, 0));\n\
    \  const sorted = sums.map((s, i) => [s, i]);\n  sorted.sort((a, b) => a[0] -\
    \ b[0]);\n  return sorted.map(([s, i]) => nums[i]);\n}\n", "    let nums_sorted\
    \ = nums.slice();\n    nums_sorted.sort((a, b) => {\n        let a_digits = a.toString().split('').map(Number);\n\
    \        let b_digits = b.toString().split('').map(Number);\n        let sum =\
    \ 0;\n        for (let i = 0; i < a_digits.length; i++) {\n            sum +=\
    \ a_digits[i] * Math.pow(10, i);\n        }\n        for (let i = 0; i < b_digits.length;\
    \ i++) {\n            sum += b_digits[i] * Math.pow(10, i);\n        }\n     \
    \   return sum - 0;\n    });\n    return nums_sorted;\n}\n", "\tlet result: number[]\
    \ = [];\n\tlet sum = 0;\n\tfor (let i = 0; i < nums.length; i++) {\n\t\tsum +=\
    \ nums[i];\n\t\tresult.push(sum);\n\t}\n\tresult.sort((a, b) => a - b);\n\treturn\
    \ result;\n}\n", "  let len = nums.length;\n  let ret = new Array(len);\n  for\
    \ (let i = 0; i < len; i++) {\n    let sum = 0;\n    for (let j = 0; j < len;\
    \ j++) {\n      sum += nums[j];\n    }\n    ret[i] = sum;\n  }\n  return ret;\n\
    }\n", "    const sorted = nums.slice();\n    sorted.sort((a, b) => a - b);\n \
    \   return sorted;\n}", "    let points: number[] = [];\n    for (let i = 0; i\
    \ < nums.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < nums.length;\
    \ j++) {\n            sum += nums[j];\n        }\n        if (points.indexOf(sum)\
    \ === -1) {\n            points.push(sum);\n        }\n    }\n    return points.sort((a,\
    \ b) => a - b);\n}\n", "    let sorted: number[] = [];\n    let sum = 0;\n   \
    \ for (let i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        sorted.push(sum);\n\
    \    }\n    sorted.sort((a, b) => a - b);\n    return sorted;\n}\n", "    const\
    \ len = nums.length;\n    if (len === 0) {\n        return nums;\n    }\n    const\
    \ digits = nums.map(n => n.toString()).sort();\n    const sums = digits.map(d\
    \ => d.split('').reduce((acc, cur) => acc + +cur, 0));\n    const orders = sums.map((sum,\
    \ i) => [sum, i]); // Sort by sum\n    return orders.map(order => nums[order[1]]);\
    \ // Re-order based on index\n}\n", "  const map = new Map();\n  for (let i =\
    \ 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n\
    \    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum\
    \ += parseInt(digits[j]);\n    }\n    const key = map.get(sum);\n    if (key)\
    \ {\n      key.push(num);\n    } else {\n      map.set(sum, [num]);\n    }\n \
    \ }\n  const result = [];\n  for (let i = 0; i < map.size; i++) {\n    const key\
    \ = map.get(i);\n    if (key) {\n      result.push(...key);\n    }\n  }\n  return\
    \ result;\n}\n", "  const sums = nums.map(n => n.toString().split('').map(Number).reduce((a,\
    \ b) => a + b, 0));\n  return nums.sort((a, b) => sums.indexOf(a) - sums.indexOf(b));\n\
    }\n", "    const points: number[] = [];\n    let sum = 0;\n    for (let i = 0;\
    \ i < nums.length; i++) {\n        const num = nums[i];\n        sum += num;\n\
    \        points.push(sum);\n    }\n    points.sort((a, b) => a - b);\n    const\
    \ result: number[] = [];\n    for (let i = 0; i < points.length; i++) {\n    \
    \    result.push(nums[points[i]]);\n    }\n    return result;\n}", "  const len\
    \ = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits =\
    \ nums.map(n => n.toString());\n  const sums = digits.map(d => d.split('').map(Number).reduce((a,\
    \ b) => a + b, 0));\n  const orders = sums.map((s, i) => [s, i]);\n  orders.sort((a,\
    \ b) => a[0] - b[0]);\n  return orders.map(a => nums[a[1]]);\n}\n", "  const sorted\
    \ = nums.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n", "\t\
    nums.sort(function(a, b) {\n\t\treturn a.sum - b.sum;\n\t});\n\treturn nums;\n\
    }\n", "  const points: number[] = [];\n  for (let i = 0; i < nums.length; i++)\
    \ {\n    const num = nums[i];\n    const point = num.toString().split('')\n  \
    \    .map((digit, index) => digit * Math.pow(10, index))\n      .reduce((sum,\
    \ num) => sum + num, 0);\n    points.push(point);\n  }\n  return points.sort((a,\
    \ b) => a - b)\n}\n", "  const sorted_nums = nums.slice();\n  sorted_nums.sort((a,\
    \ b) => {\n    const a_digit = Math.trunc(a.toString().split('').reduce((acc,\
    \ curr) => acc + curr, 0));\n    const b_digit = Math.trunc(b.toString().split('').reduce((acc,\
    \ curr) => acc + curr, 0));\n    return a_digit - b_digit;\n  });\n  return sorted_nums;\n\
    }\n", "  const len = nums.length;\n  const points: number[] = [];\n  for (let\
    \ i = 0; i < len; i++) {\n    const p = nums[i];\n    const index = points.findIndex(p\
    \ => p === 0);\n    if (index === -1) {\n      points.push(0);\n    }\n    points[index]\
    \ += p;\n  }\n  return points.sort((a, b) => a - b);\n}\n", "  const sorted =\
    \ nums.slice();\n  sorted.sort((a, b) => {\n    const aSum = sumOfDigits(a);\n\
    \    const bSum = sumOfDigits(b);\n    return aSum - bSum;\n  });\n  return sorted;\n\
    }\n", "  const sums = nums.map(n => n.toString().split('').reduce((acc, cur) =>\
    \ acc + +cur, 0));\n  return nums.sort((a, b) => sums[a] - sums[b]);\n}\n", " \
    \   const map = new Map<number, number>();\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        const num = nums[i];\n        const digits = num.toString().split('');\n\
    \        let sum = 0;\n        for (let j = 0; j < digits.length; j++) {\n   \
    \         sum += parseInt(digits[j]);\n        }\n        map.set(sum, num);\n\
    \    }\n    const result = [];\n    for (let i = 0; i < map.size; i++) {\n   \
    \     result.push(map.get(i));\n    }\n    return result;\n}", "  const len =\
    \ nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n\
    \ => n.toString()).map(Number);\n  const sums = digits.map(d => d.reduce((acc,\
    \ cur) => acc + cur, 0));\n  const sorted = sums.map((sum, index) => [sum, index]);\n\
    \  sorted.sort((a, b) => a[0] - b[0]);\n  const res = [];\n  for (let i = 0; i\
    \ < len; i++) {\n    res.push(nums[sorted[i][1]]);\n  }\n  return res;\n}\n",
  "  const points: number[] = [];\n  for (let i = 0; i < nums.length; i++) {\n   \
    \ const num = nums[i];\n    const point = num.toString().split('')\n      .map(Number)\n\
    \      .reduce((acc, cur) => acc + cur, 0);\n    points.push(point);\n  }\n  points.sort((a,\
    \ b) => a - b);\n  return points.map(i => nums[i]);\n}\n", "    let sorted = nums.slice();\n\
    \    sorted.sort((a, b) => a + b - nums.indexOf(a) - nums.indexOf(b));\n    return\
    \ sorted;\n}\n", "  const points: number[] = [];\n  let sum = 0;\n  for (let i\
    \ = 0; i < nums.length; i++) {\n    const n = nums[i];\n    sum += n % 10;\n \
    \   points.push(sum);\n  }\n  points.sort((a, b) => a - b);\n  return points.map(p\
    \ => nums[p]);\n}\n", "  const sorted = nums.slice();\n  sorted.sort((a, b) =>\
    \ {\n    const sumA = sumDigits(a);\n    const sumB = sumDigits(b);\n    if (sumA\
    \ === sumB) {\n      return a.localeCompare(b);\n    }\n    return sumA - sumB;\n\
    \  });\n  return sorted;\n}\n", "    let sorted: number[] = [];\n    let sum =\
    \ 0;\n    for (let i = 0; i < nums.length; i++) {\n        sum += nums[i];\n \
    \       sorted.push(sum);\n    }\n    sorted.sort((a, b) => a - b);\n    for (let\
    \ i = 0; i < nums.length; i++) {\n        nums[i] = sorted[i];\n    }\n    return\
    \ nums;\n}", "\tlet result: number[] = [];\n\tlet digits: number[] = [];\n\tfor\
    \ (let i = 0; i < nums.length; i++) {\n\t\tlet digit = 0;\n\t\twhile (nums[i]\
    \ >= 10) {\n\t\t\tnums[i] -= 10;\n\t\t\tdigit += 1;\n\t\t}\n\t\tdigits.push(digit);\n\
    \t}\n\tdigits.sort((a, b) => a - b);\n\tfor (let i = 0; i < digits.length; i++)\
    \ {\n\t\tlet index = digits.length - i - 1;\n\t\tresult.push(nums[index]);\n\t\
    }\n\treturn result;\n}\n", "  const points: number[] = [];\n  nums.forEach((n,\
    \ i) => {\n    const p = getPoints(n);\n    points.push(p);\n  });\n  points.sort((a,\
    \ b) => a[0] - b[0]);\n  return points.map((p) => p[1]);\n}\n", "  const len =\
    \ nums.length;\n  const points = [];\n  for (let i = 0; i < len; i++) {\n    const\
    \ point = {};\n    point.index = i;\n    point.value = nums[i];\n    points.push(point);\n\
    \  }\n  points.sort((a, b) => {\n    const a_digits = a.value.split('').map(Number);\n\
    \    const b_digits = b.value.split('').map(Number);\n    const a_sum = a_digits.reduce((acc,\
    \ val) => acc + val, 0);\n    const b_sum = b_digits.reduce((acc, val) => acc\
    \ + val, 0);\n    return a_sum - b_sum;\n  });\n  return points.map(p => p.index);\n\
    }\n", "  const numsCopy = nums.slice();\n  numsCopy.sort((a, b) => a - b);\n \
    \ return numsCopy;\n}\n", "    const len = nums.length;\n    if (len < 2) {\n\
    \        return nums;\n    }\n    const digits = nums.map(n => n.toString());\n\
    \    const sums = digits.map(d => d.split('').reduce((acc, cur) => acc + +cur,\
    \ 0));\n    const sorted = sums.map((sum, index) => [sum, index]);\n    sorted.sort((a,\
    \ b) => a[0] - b[0]);\n    return sorted.map(a => nums[a[1]]);\n}\n", "    let\
    \ points: number[] = [];\n    let sum = 0;\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        let digit = nums[i];\n        sum += digit;\n        points.push(sum);\n\
    \    }\n    points.sort((a, b) => a - b);\n    let result = [];\n    for (let\
    \ i = 0; i < points.length; i++) {\n        result.push(nums[points[i]]);\n  \
    \  }\n    return result;\n}\n", "    let sorted = nums.slice();\n    sorted.sort((a,\
    \ b) => {\n        let sum = 0;\n        for (let i = 0; i < a.length; i++) {\n\
    \            sum += a[i];\n        }\n        for (let i = 0; i < b.length; i++)\
    \ {\n            sum += b[i];\n        }\n        return sum - a - b;\n    });\n\
    \    return sorted;\n}\n", "    let sum = 0;\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        sum += nums[i];\n    }\n    let result: number[] = [];\n   \
    \ for (let i = 0; i < nums.length; i++) {\n        if (sum > 0) {\n          \
    \  result.push(nums[i]);\n            sum -= nums[i];\n        }\n    }\n    return\
    \ result;\n}\n", "  const sorted_nums = nums.sort((a, b) => {\n    const a_digit\
    \ = parseInt(a.toString().split('').reduce((acc, curr) => acc + curr, 0));\n \
    \   const b_digit = parseInt(b.toString().split('').reduce((acc, curr) => acc\
    \ + curr, 0));\n    return a_digit - b_digit;\n  });\n  return sorted_nums;\n\
    }\n", "  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n \
    \   const num = nums[i];\n    const key = num.toString();\n    const val = map.get(key);\n\
    \    if (val === undefined) {\n      map.set(key, num);\n    } else {\n      const\
    \ sum = val + num;\n      map.set(key, sum);\n    }\n  }\n  const result = [];\n\
    \  for (const [key, val] of map) {\n    result.push(val);\n  }\n  return result;\n\
    }\n", "    const len = nums.length;\n    if (len === 0) {\n        return nums;\n\
    \    }\n    const digits = nums.map(n => parseInt(n.toString(), 10));\n    const\
    \ sums = digits.reduce((sum, digit) => sum + digit, 0);\n    const orders = Array.from({\
    \ length: len }, (_, i) => i);\n    return orders.map(i => nums[orders[i]])\n\
    \        .sort((a, b) => sums[a] - sums[b]);\n}\n", "    const len = nums.length;\n\
    \    if (len === 0) {\n        return nums;\n    }\n    const digits = nums.map(n\
    \ => n.toString()).map(Number);\n    const sums = digits.map(d => d.reduce((a,\
    \ b) => a + b, 0));\n    const sorted = sums.map((s, i) => [s, i]);\n    sorted.sort((a,\
    \ b) => a[0] - b[0]);\n    const res = [];\n    for (let i = 0; i < len; i++)\
    \ {\n        res.push(nums[sorted[i][1]]);\n    }\n    return res;\n}\n", "  const\
    \ sorted = nums.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n\
    }\n", "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n\
    \  const digits = nums.map(n => n % 10);\n  const sums = digits.map(d => digits.reduce((acc,\
    \ d) => acc + d, 0));\n  const sorted = sums.map((s, i) => [s, i]);\n  sorted.sort((a,\
    \ b) => a[0] - b[0]);\n  return sorted.map(a => nums[a[1]]);\n}\n", "\tlet result:\
    \ number[] = [];\n\tlet maxSum = 0;\n\tlet maxIndex = 0;\n\tfor (let i = 0; i\
    \ < nums.length; i++) {\n\t\tlet sum = 0;\n\t\tfor (let j = 0; j < nums.length;\
    \ j++) {\n\t\t\tsum += nums[j];\n\t\t}\n\t\tif (sum > maxSum) {\n\t\t\tmaxSum\
    \ = sum;\n\t\t\tmaxIndex = i;\n\t\t}\n\t}\n\tfor (let i = 0; i < nums.length;\
    \ i++) {\n\t\tlet sum = 0;\n\t\tfor (let j = 0; j < nums.length; j++) {\n\t\t\t\
    sum += nums[j];\n\t\t}\n\t\tif (sum == maxSum) {\n\t\t\tresult.push(nums[maxIndex]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n", "  const len = nums.length;\n  const map =\
    \ new Map<number, number[]>();\n  for (let i = 0; i < len; i++) {\n    const num\
    \ = nums[i];\n    const digits = num.toString().split('')\n      .map(d => parseInt(d,\
    \ 10));\n    const sum = digits.reduce((acc, d) => acc + d, 0);\n    if (!map.has(sum))\
    \ {\n      map.set(sum, [num]);\n    } else {\n      map.get(sum).push(num);\n\
    \    }\n  }\n  return Array.from(map.values())\n    .sort((a, b) => a[0] - b[0])\n\
    \    .map(a => a[1]);\n}\n", "\tnums.sort(function(a, b) {\n\t\treturn a + b -\
    \ nums.reduce((sum, num) => {\n\t\t\treturn sum + num;\n\t\t}, 0);\n\t});\n\t\
    return nums;\n}\n", "  const map = new Map<number, number>();\n  for (const num\
    \ of nums) {\n    const key = num.toString().split('').reduce((acc, curr, i) =>\
    \ {\n      return acc + parseInt(curr, 10);\n    }, 0);\n    if (!map.has(key))\
    \ {\n      map.set(key, num);\n    }\n  }\n  return Array.from(map.values());\n\
    }\n", "  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n \
    \   const key = nums[i];\n    const val = map.get(key);\n    if (val === undefined)\
    \ {\n      map.set(key, nums[i]);\n    } else {\n      const index = val.indexOf(nums[i]);\n\
    \      if (index > -1) {\n        val.splice(index, 1);\n        val.push(nums[i]);\n\
    \      }\n    }\n  }\n  return Array.from(map.values());\n}\n", "    const sorted\
    \ = nums.sort((a, b) => a - b);\n    const result = [];\n    for (let i = 0; i\
    \ < sorted.length; i++) {\n        const item = sorted[i];\n        const index\
    \ = nums.indexOf(item);\n        if (index > -1) {\n            result.push(nums[index]);\n\
    \            nums.splice(index, 1);\n        }\n    }\n    return result;\n}\n",
  "    let sorted = nums.slice();\n    sorted.sort((a, b) => {\n        let sum =\
    \ 0;\n        for (let i = 0; i < a.length; i++) {\n            sum += parseInt(a[i]);\n\
    \        }\n        for (let i = 0; i < b.length; i++) {\n            sum += parseInt(b[i]);\n\
    \        }\n        return sum - a - b;\n    });\n    return sorted;\n}\n", " \
    \ const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const\
    \ num = nums[i];\n    const digits = num.toString().split('');\n    const sum\
    \ = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j]);\n\
    \    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values());\n}\n",
  "\tnums.sort(function(a, b) {\n\t\treturn a + b - nums.indexOf(a * b);\n\t});\n\t\
    return nums;\n}", "  const sums = nums.map(n => n.toString().split('').map(Number).reduce((a,\
    \ b) => a + b));\n  return sums.sort((a, b) => a - b);\n}\n", "    let sorted\
    \ = nums.slice();\n    sorted.sort((a, b) => a - b);\n    return sorted;\n}\n",
  "  const sorted = nums.slice();\n  sorted.sort((a, b) => {\n    const sumA = sumDigits(a);\n\
    \    const sumB = sumDigits(b);\n    if (sumA === sumB) {\n      return a.localeCompare(b);\n\
    \    }\n    return sumA - sumB;\n  });\n  return sorted;\n}\n", "  const len =\
    \ nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const digits = nums.map(n\
    \ => n.toString());\n  const sums = digits.map(d => d.split('').reduce((acc, cur)\
    \ => acc + +cur, 0));\n  return sums.sort((a, b) => a - b).map(i => nums[i]);\n\
    }\n", "    const sorted = nums.slice();\n    sorted.sort((a, b) => {\n       \
    \ const sumA = sum_digits(a);\n        const sumB = sum_digits(b);\n        if\
    \ (sumA === sumB) {\n            return a.localeCompare(b);\n        }\n     \
    \   return sumA - sumB;\n    });\n    return sorted;\n}\n", "    const sorted\
    \ = nums.slice();\n    sorted.sort((a, b) => {\n        const sumA = sumDigits(a);\n\
    \        const sumB = sumDigits(b);\n        if (sumA === sumB) {\n          \
    \  return a.localeCompare(b);\n        }\n        return sumA - sumB;\n    });\n\
    \    return sorted;\n}\n", "  const points: number[] = [];\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    const p = nums[i];\n    const index = points.findIndex((item)\
    \ => item === p);\n    if (index === -1) {\n      points.push(nums[i]);\n    }\
    \ else {\n      points[index] += nums[i];\n    }\n  }\n  return points.sort((a,\
    \ b) => a - b);\n}\n", "  const len = nums.length;\n  const map = new Map<number,\
    \ number[]>();\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n\
    \    const digits = num.toString().split('');\n    const sum = 0;\n    for (let\
    \ j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j], 10);\n  \
    \  }\n    const key = map.get(sum);\n    if (key) {\n      key.push(num);\n  \
    \  } else {\n      map.set(sum, [num]);\n    }\n  }\n  const result = [];\n  for\
    \ (const [sum, nums] of map.entries()) {\n    result.push(...nums);\n  }\n  return\
    \ result;\n}\n", "  const len = nums.length;\n  const points = new Array(len);\n\
    \  for (let i = 0; i < len; i++) {\n    const sum = 0;\n    for (let j = 0; j\
    \ < len; j++) {\n      sum += nums[j] % 10;\n      nums[j] = nums[j] / 10;\n \
    \   }\n    points[i] = sum;\n  }\n  return points.sort((a, b) => a - b);\n}\n",
  "    const sorted = nums.slice();\n    sorted.sort((a, b) => {\n        const sumA\
    \ = sumDigits(a);\n        const sumB = sumDigits(b);\n        if (sumA === sumB)\
    \ {\n            return a.localeCompare(b);\n        }\n        return sumA -\
    \ sumB;\n    });\n    return sorted;\n}", "  const sums = nums.map(n => n.toString().split('').reduce((acc,\
    \ cur) => acc + +cur, 0));\n  return nums.sort((a, b) => sums[a] - sums[b]);\n\
    }\n", "\tlet result = [];\n\tlet index = 0;\n\tlet sum = 0;\n\tfor (let i = 0;\
    \ i < nums.length; i++) {\n\t\tsum += nums[i];\n\t\tresult.push(sum);\n\t}\n\t\
    result.sort((a, b) => {\n\t\treturn a - b;\n\t});\n\tlet result2 = [];\n\tfor\
    \ (let i = 0; i < result.length; i++) {\n\t\tresult2.push(nums[index]);\n\t\t\
    index++;\n\t}\n\treturn result2;\n}\n", "    const sorted = nums.slice();\n  \
    \  sorted.sort((a, b) => {\n        const sumA = sumDigits(a);\n        const\
    \ sumB = sumDigits(b);\n        if (sumA < sumB) {\n            return -1;\n \
    \       }\n        if (sumA > sumB) {\n            return 1;\n        }\n    \
    \    return 0;\n    });\n    return sorted;\n}\n", "  const points: number[] =\
    \ [];\n  for (let i = 0; i < nums.length; i++) {\n    const p = nums[i];\n   \
    \ const index = points.findIndex(p => p === nums[i]);\n    if (index === -1) {\n\
    \      points.push(nums[i]);\n    } else {\n      points[index] += nums[i];\n\
    \    }\n  }\n  return points.sort((a, b) => a - b);\n}\n", "  const points: number[]\
    \ = [];\n  for (let i = 0; i < nums.length; i++) {\n    const n = nums[i];\n \
    \   const p = points[n];\n    if (p) {\n      points.splice(p, 1);\n    } else\
    \ {\n      points.push(n);\n    }\n  }\n  return points.sort((a, b) => a - b);\n\
    }\n", "  let points: number[] = [];\n  for (let i = 0; i < nums.length; i++) {\n\
    \    let sum = 0;\n    for (let j = 0; j < nums.length; j++) {\n      sum += nums[j];\n\
    \    }\n    points.push(sum);\n  }\n  points.sort((a, b) => a - b);\n  let result\
    \ = [];\n  for (let i = 0; i < points.length; i++) {\n    for (let j = 0; j <\
    \ nums.length; j++) {\n      if (points[i] === nums[j]) {\n        result.push(j);\n\
    \      }\n    }\n  }\n  return result;\n}\n", "\tlet len = nums.length;\n\tlet\
    \ sum = 0;\n\tlet result: number[] = [];\n\tfor (let i = 0; i < len; i++) {\n\t\
    \tsum += nums[i];\n\t\tresult.push(sum);\n\t}\n\tlet sorted = result.sort((a,\
    \ b) => a - b);\n\tlet index = 0;\n\tfor (let i = 0; i < len; i++) {\n\t\tlet\
    \ sum = 0;\n\t\tfor (let j = 0; j < len; j++) {\n\t\t\tsum += nums[j];\n\t\t\t\
    if (sum === sorted[i]) {\n\t\t\t\tindex = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t\tnums[index] = nums[i];\n\t\tnums[i] = 0;\n\t}\n\treturn nums;\n}\n", "  const\
    \ points: number[] = [];\n  for (let i = 0; i < nums.length; i++) {\n    const\
    \ num = nums[i];\n    const digits = num.toString().split('');\n    const sum\
    \ = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j],\
    \ 10);\n    }\n    points.push([num, sum]);\n  }\n  points.sort((a, b) => a[1]\
    \ - b[1]);\n  const result = [];\n  for (let i = 0; i < points.length; i++) {\n\
    \    result.push(points[i][0]);\n  }\n  return result;\n}\n", "    const sorted\
    \ = nums.slice();\n    sorted.sort((a, b) => {\n        const sumA = sumDigits(a);\n\
    \        const sumB = sumDigits(b);\n        if (sumA === sumB) {\n          \
    \  return a.localeCompare(b);\n        }\n        return sumA - sumB;\n    });\n\
    \    return sorted;\n}", "    const sums = nums.map(n => n.toString().split('').reduce((acc,\
    \ cur) => acc + +cur, 0));\n    const sorted = sums.sort((a, b) => a - b);\n \
    \   return nums.map(n => sorted.indexOf(n));\n}", "    let nums_copy = nums.slice();\n\
    \    nums_copy.sort((a, b) => {\n        let a_digits = a.toString().split('').map(Number);\n\
    \        let b_digits = b.toString().split('').map(Number);\n        let sum =\
    \ 0;\n        for (let i = 0; i < a_digits.length; i++) {\n            sum +=\
    \ a_digits[i] * Math.pow(10, i);\n        }\n        for (let i = 0; i < b_digits.length;\
    \ i++) {\n            sum += b_digits[i] * Math.pow(10, i);\n        }\n     \
    \   return sum - 0;\n    });\n    return nums_copy;\n}", "    const sums = nums.map(n\
    \ => n.toString().split('').map(Number).reduce((a, b) => a + b));\n    const sorted\
    \ = sums.sort((a, b) => a - b);\n    return nums.map(n => sorted.indexOf(n));\n\
    }\n", "  const points: number[] = [];\n  for (let i = 0; i < nums.length; i++)\
    \ {\n    const p = nums[i];\n    const index = points.findIndex((item) => item\
    \ === p);\n    if (index === -1) {\n      points.push(p);\n    } else {\n    \
    \  points[index] += p;\n    }\n  }\n  return points.sort((a, b) => a - b);\n}\n",
  "  const len = nums.length;\n  if (len === 0) {\n    return nums;\n  }\n  const\
    \ digits = nums.map(n => n % 10);\n  const sums = digits.map(d => digits.reduce((acc,\
    \ d) => acc + d, 0));\n  const order = sums.map((sum, index) => [sum, index]);\n\
    \  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n}\n", "  const len\
    \ = nums.length;\n  if (len < 2) return nums;\n  const digits = nums.map(n =>\
    \ n.toString());\n  const sums = digits.map(d => d.split('').map(Number).reduce((a,\
    \ b) => a + b, 0));\n  return nums.map(n => sums.indexOf(n));\n}\n", "  const\
    \ points: number[] = [];\n  for (let i = 0; i < nums.length; i++) {\n    const\
    \ num = nums[i];\n    const digits = num.toString().split('');\n    const sum\
    \ = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n\
    \    }\n    points.push({\n      num: num,\n      sum: sum,\n      index: i\n\
    \    });\n  }\n  points.sort((a, b) => {\n    return a.sum - b.sum;\n  });\n \
    \ return points.map(p => p.num);\n}\n", "  const points: number[] = [];\n  nums.forEach((num)\
    \ => {\n    const digits = num.toString().split('');\n    const sum = 0;\n   \
    \ digits.forEach((digit) => {\n      sum += Number(digit);\n    });\n    points.push({\n\
    \      sum,\n      index: nums.indexOf(num)\n    });\n  });\n  points.sort((a,\
    \ b) => {\n    return a.sum - b.sum;\n  });\n  return points.map(({ index }) =>\
    \ nums[index]);\n}\n", "    let sorted = nums.slice();\n    sorted.sort((a, b)\
    \ => {\n        let sum = 0;\n        for (let i = 0; i < a.length; i++) {\n \
    \           sum += Number(a[i]);\n        }\n        for (let i = 0; i < b.length;\
    \ i++) {\n            sum += Number(b[i]);\n        }\n        return sum - 0;\n\
    \    });\n    return sorted;\n}\n", "  const len = nums.length;\n  if (len ===\
    \ 0) {\n    return nums;\n  }\n  const digits = nums.map(x => Math.abs(x).toString(10));\n\
    \  const sums = digits.map(x => x.split('').map(Number).reduce((acc, x) => acc\
    \ + x, 0));\n  const sorted = sums.map((x, i) => [x, i]).sort((a, b) => a[0] -\
    \ b[0]).map(x => nums[x[1]]);\n  return sorted;\n}\n", "  const points: number[]\
    \ = [];\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n\
    \    const digits = num.toString().split('');\n    const sum = 0;\n    for (let\
    \ j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n    }\n \
    \   points.push([sum, i]); // [sum, index]\n  }\n  points.sort((a, b) => a[0]\
    \ - b[0]); // sort by sum\n  const result = [];\n  for (let i = 0; i < points.length;\
    \ i++) {\n    result.push(nums[points[i][1]]);\n  }\n  return result;\n}\n", " \
    \   const sorted = nums.sort((a, b) => a - b);\n    const result = [];\n    for\
    \ (let i = 0; i < sorted.length; i++) {\n        const item = sorted[i];\n   \
    \     const index = nums.indexOf(item);\n        if (index > -1) {\n         \
    \   result.push(nums[index]);\n            nums.splice(index, 1);\n        }\n\
    \    }\n    return result;\n}\n", "    const points: number[] = [];\n    nums.forEach((num:\
    \ number) => {\n        const digits: number[] = num.toString().split('');\n \
    \       const point: number = digits.length * Math.pow(10, digits.length);\n \
    \       points.push(point);\n    });\n    points.sort((a, b) => a - b);\n    return\
    \ nums.map((num: number) => points[num]);\n}", "    let numsCopy = nums.slice();\n\
    \    numsCopy.sort((a: number, b: number) => {\n        let sumA = a;\n      \
    \  let sumB = b;\n        while (sumA > 9) {\n            sumA -= 10;\n      \
    \  }\n        while (sumB > 9) {\n            sumB -= 10;\n        }\n       \
    \ if (sumA > sumB) {\n            return 1;\n        } else if (sumA < sumB) {\n\
    \            return -1;\n        } else {\n            return 0;\n        }\n\
    \    });\n    return numsCopy;\n}\n", "  const sorted_nums = nums.sort((a, b)\
    \ => a - b);\n  const sorted_nums_sums = sorted_nums.map(x => x.toString().split('').reduce((a,\
    \ b) => a + +b, 0));\n  const sorted_nums_indexes = sorted_nums_sums.map((x, i)\
    \ => i);\n  return sorted_nums.map(x => sorted_nums_indexes[x]);\n}", "  const\
    \ len = nums.length;\n  const points = new Array(len);\n  for (let i = 0; i <\
    \ len; i++) {\n    const num = nums[i];\n    const point = Math.floor(num / Math.pow(10,\
    \ len));\n    points[point] = num;\n  }\n  return points.sort((a, b) => a - b).map((point,\
    \ i) => nums[i]);\n}\n", "    const sums = nums.map(n => n.toString().split('').map(Number).reduce((a,\
    \ b) => a + b));\n    const sorted = sums.sort((a, b) => a - b);\n    return nums.map(n\
    \ => sorted.indexOf(n));\n}\n", "  const sorted = nums.slice();\n  sorted.sort((a,\
    \ b) => {\n    const sumA = sumDigits(a);\n    const sumB = sumDigits(b);\n  \
    \  if (sumA < sumB) {\n      return -1;\n    }\n    if (sumA > sumB) {\n     \
    \ return 1;\n    }\n    return a.localeCompare(b);\n  });\n  return sorted;\n\
    }\n", "    let nums_copy = nums.slice();\n    nums_copy.sort((a, b) => {\n   \
    \     let a_digit = parseInt(a.toString().split('').reduce((prev, curr) => prev\
    \ + curr, 0));\n        let b_digit = parseInt(b.toString().split('').reduce((prev,\
    \ curr) => prev + curr, 0));\n        return a_digit - b_digit;\n    });\n   \
    \ return nums_copy;\n}\n", "    let sorted: number[] = [];\n    for (let i = 0;\
    \ i < nums.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < nums.length;\
    \ j++) {\n            sum += nums[j];\n        }\n        sorted.push(sum);\n\
    \    }\n    return sorted;\n}\n", "    const len = nums.length;\n    const ret\
    \ = new Array(len);\n    for (let i = 0; i < len; i++) {\n        let sum = 0;\n\
    \        for (let j = 0; j < len; j++) {\n            sum += nums[j] % 10;\n \
    \       }\n        ret[i] = sum;\n    }\n    return ret;\n}\n", "    let sorted\
    \ = nums.slice();\n    sorted.sort((a, b) => {\n        let sumA = sumDigits(a);\n\
    \        let sumB = sumDigits(b);\n        if (sumA === sumB) {\n            return\
    \ a.localeCompare(b);\n        }\n        return sumA - sumB;\n    });\n    return\
    \ sorted;\n}\n", "  const points = [];\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    const num = nums[i];\n    sum += num;\n    points.push(num);\n\
    \  }\n  const pointsInOrder = points.sort((a, b) => a - b);\n  return pointsInOrder;\n\
    }\n", "  const len = nums.length;\n  if (len < 2) {\n    return nums;\n  }\n \
    \ const digits = nums.map(n => n.toString());\n  const sums = digits.map(d =>\
    \ d.split('').map(Number).reduce((a, b) => a + b, 0));\n  const order = sums.map((s,\
    \ i) => [s, i]);\n  return order.sort((a, b) => a[0] - b[0]).map(a => a[1]);\n\
    }\n", "  const points: number[] = [];\n  let maxSum = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    const sum = nums[i] + nums[i + 1];\n    if (sum >\
    \ maxSum) {\n      maxSum = sum;\n    }\n  }\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    const sum = nums[i] + nums[i + 1];\n    if (sum === maxSum) {\n\
    \      points.push(i);\n    }\n  }\n  return points.sort((a, b) => a - b);\n}\n",
  "    const sorted_nums = nums.slice();\n    sorted_nums.sort((a, b) => {\n     \
    \   const a_digits = a.toString().split('')\n        const b_digits = b.toString().split('')\n\
    \        const sum_digits = a_digits.length + b_digits.length\n        return\
    \ sum_digits - a_digits.length - b_digits.length\n    });\n    return sorted_nums\n\
    }\n", "    const sorted = nums.sort((a, b) => {\n        const sumA = sumDigits(a);\n\
    \        const sumB = sumDigits(b);\n        if (sumA === sumB) {\n          \
    \  return a.localeCompare(b);\n        }\n        return sumA - sumB;\n    });\n\
    \    return sorted;\n}", "\tlet result: number[] = [];\n\tlet sum = 0;\n\tfor\
    \ (let i = 0; i < nums.length; i++) {\n\t\tsum += nums[i];\n\t\tresult.push(sum);\n\
    \t}\n\tlet index = 0;\n\tfor (let i = 0; i < result.length; i++) {\n\t\twhile\
    \ (index > 0 && result[i] === result[index - 1]) {\n\t\t\tindex--;\n\t\t}\n\t\t\
    result.splice(index, 0, i);\n\t}\n\treturn result;\n}\n", "\tnums.sort((a, b)\
    \ => {\n\t\tlet sum = 0;\n\t\tfor (let i = 0; i < a.length; i++) {\n\t\t\tsum\
    \ += a[i];\n\t\t}\n\t\tfor (let i = 0; i < b.length; i++) {\n\t\t\tsum += b[i];\n\
    \t\t}\n\t\treturn sum - a - b;\n\t});\n\treturn nums;\n}\n", "  let points: number[]\
    \ = [];\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for\
    \ (let j = 0; j < nums.length; j++) {\n      sum += nums[j];\n    }\n    points.push([i,\
    \ sum]);\n  }\n  points.sort((a, b) => a[1] - b[1]);\n  let result: number[] =\
    \ [];\n  for (let i = 0; i < points.length; i++) {\n    result.push(nums[points[i][0]]);\n\
    \  }\n  return result;\n}\n", "    let sorted = nums.slice();\n    sorted.sort((a,\
    \ b) => {\n        let sum = 0;\n        for (let i = 0; i < a.length; i++) {\n\
    \            sum += parseInt(a[i]);\n        }\n        for (let i = 0; i < b.length;\
    \ i++) {\n            sum += parseInt(b[i]);\n        }\n        return sum -\
    \ a - b;\n    });\n    return sorted;\n}", "  const len = nums.length;\n  const\
    \ points: number[] = [];\n  for (let i = 0; i < len; i++) {\n    const num = nums[i];\n\
    \    const digits = num.toString().split('');\n    const sum = 0;\n    for (let\
    \ j = 0; j < digits.length; j++) {\n      sum += parseInt(digits[j], 10);\n  \
    \  }\n    points.push([sum, i]); // push to points array\n  }\n  points.sort((a,\
    \ b) => a[0] - b[0]); // sort by points\n  const result: number[] = [];\n  for\
    \ (let i = 0; i < len; i++) {\n    const [sum, index] = points[i]; // get index\
    \ and sum\n    result.push(nums[index]); // push nums[index] to result\n  }\n\
    \  return result;\n}\n", "  const len = nums.length;\n  if (len === 0) {\n   \
    \ return nums;\n  }\n  const digits = nums.map(n => parseInt(n.toString(), 10));\n\
    \  const sums = digits.map(d => d.reduce((acc, d) => acc + d, 0));\n  const sorted\
    \ = sums.map((s, i) => [s, i]);\n  sorted.sort((a, b) => a[0] - b[0]);\n  return\
    \ sorted.map(([s, i]) => nums[i]);\n}\n", "    let sorted = nums.slice();\n  \
    \  sorted.sort((a, b) => a - b);\n    return sorted;\n}", "    let sum = 0;\n\
    \    for (let i = 0; i < nums.length; i++) {\n        sum += nums[i];\n    }\n\
    \    let result: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n\
    \        let item = nums[i];\n        if (sum - item < 0) {\n            result.push(item);\n\
    \            sum -= item;\n        } else {\n            result.push(sum - item);\n\
    \            sum += item;\n        }\n    }\n    return result;\n}\n", "    const\
    \ sorted = nums.sort((a, b) => a - b);\n    const result = [];\n    for (let i\
    \ = 0; i < nums.length; i++) {\n        const index = sorted.indexOf(nums[i]);\n\
    \        if (index >= 0) {\n            result.push(index);\n        }\n    }\n\
    \    return result;\n}\n", "  const sorted = nums.sort((a, b) => a - b);\n  const\
    \ result = [];\n  let index = 0;\n  while (index < sorted.length) {\n    const\
    \ sum = sorted[index];\n    while (index < sorted.length && sum === sorted[index])\
    \ {\n      index++;\n    }\n    result.push(sum);\n    index++;\n  }\n  return\
    \ result;\n}\n", "  const sorted = nums.sort((a, b) => a + b - nums.reduce((sum,\
    \ num) => sum + num, 0));\n  return sorted.map(i => nums.indexOf(i));\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
