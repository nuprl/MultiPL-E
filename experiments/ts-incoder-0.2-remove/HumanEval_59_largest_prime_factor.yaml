name: HumanEval_59_largest_prime_factor
language: ts
prompt: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  function largest_prime_factor(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
  \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
  \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
completions: ["    let factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n\
    \        while (n % i === 0) {\n            factors.push(i);\n            n =\
    \ n / i;\n        }\n    }\n    return factors[factors.length - 1];\n}\n", " \
    \   let i = 2;\n    let factor = 2;\n    while (i <= n) {\n        if (n % i ==\
    \ 0) {\n            factor = i;\n            break;\n        }\n        i += 1;\n\
    \    }\n    return factor;\n}\n", "    let factors: number[] = [];\n    for (let\
    \ i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            factors.push(i);\n\
    \            n = n / i;\n        }\n    }\n    return factors[factors.length -\
    \ 1];\n}\n", "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++)\
    \ {\n        if (n % i === 0) {\n            factors.push(i);\n        }\n   \
    \ }\n    return factors[factors.length - 1];\n}\n", "  let max_factor = 1;\n \
    \ let max_factor_index = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i ==\
    \ 0) {\n      max_factor = i;\n      max_factor_index = i;\n    }\n  }\n  return\
    \ max_factor;\n}\n", "    let factors: number[] = [];\n    for (let i = 2; i <=\
    \ n; i++) {\n        if (n % i === 0) {\n            factors.push(i);\n      \
    \  }\n    }\n    return factors[factors.length - 1];\n}\n", "    let factors:\
    \ number[] = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0)\
    \ {\n            factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++)\
    \ {\n        while (n % i == 0) {\n            factors.push(i);\n            n\
    \ /= i;\n        }\n    }\n    return factors.length ? factors[factors.length\
    \ - 1] : 1;\n}\n", "    let factors: number[] = [];\n    for (let i = 2; i <=\
    \ n; i++) {\n        if (n % i === 0) {\n            factors.push(i);\n      \
    \  }\n    }\n    return factors[factors.length - 1];\n}\n", "    let factors:\
    \ number[] = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n\
    \ % i === 0) {\n            factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let i = 2;\n    let factor = 1;\n    while (i < n) {\n   \
    \     if (n % i == 0) {\n            factor = i;\n            break;\n       \
    \ }\n        i += 1;\n    }\n    return factor;\n}\n", "    let i = 2;\n    let\
    \ factor = 1;\n    while (i < n) {\n        if (n % i == 0) {\n            factor\
    \ = i;\n            break;\n        }\n        i++;\n    }\n    return factor;\n\
    }\n", "    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i == 0) {\n            factors.push(i);\n        }\n\
    \    }\n    return factors[factors.length - 1];\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n \
    \           factors.push(i);\n            n /= i;\n        }\n    }\n    return\
    \ factors[factors.length - 1];\n}\n", "    let factors: number[] = [];\n    for\
    \ (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n    }\n    return factors[factors.length - 1];\n\
    }\n", "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n \
    \       if (n % i === 0) {\n            factors.push(i);\n        }\n    }\n \
    \   return factors[factors.length - 1];\n}\n", "    let i = 2;\n    while (i <=\
    \ n) {\n        if (n % i === 0) {\n            n = n / i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return n;\n}\n", "    let factors: number[]\
    \ = [];\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n  \
    \          factors.push(i);\n            while (n % i === 0) {\n             \
    \   n /= i;\n            }\n        }\n        i++;\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let factor: number = 1;\n    while (n % factor === 0) {\n\
    \        factor++;\n    }\n    return factor;\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n    \
    \        factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let factor: number = 1;\n    let i: number;\n    for (i =\
    \ 2; i <= n; i++) {\n        if (n % i === 0) {\n            factor = i;\n   \
    \         break;\n        }\n    }\n    return factor;\n}\n", "    let max_factor\
    \ = 1;\n    let max_factor_index = 0;\n    for (let i = 2; i <= n; i++) {\n  \
    \      if (n % i == 0) {\n            max_factor = i;\n            max_factor_index\
    \ = i;\n        }\n    }\n    return max_factor;\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n    \
    \        factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++)\
    \ {\n        if (n % i === 0) {\n            factors.push(i);\n        }\n   \
    \ }\n    return factors[factors.length - 1];\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i ===\
    \ 0) {\n            factors.push(i);\n        }\n    }\n    if (factors.length\
    \ === 0) {\n        return 1;\n    }\n    let largest = factors[factors.length\
    \ - 1];\n    for (let i = factors.length - 2; i >= 0; i--) {\n        if (factors[i]\
    \ > largest) {\n            largest = factors[i];\n        }\n    }\n    return\
    \ largest;\n}\n", "    let factors: number[] = [];\n    for (let i = 2; i <= n;\
    \ i++) {\n        while (n % i == 0) {\n            factors.push(i);\n       \
    \     n = n / i;\n        }\n    }\n    return factors[factors.length - 1];\n\
    }\n", "    let i = 2;\n    let factor = 2;\n    while (i <= n) {\n        if (n\
    \ % i == 0) {\n            factor = i;\n            break;\n        }\n      \
    \  i++;\n    }\n    return factor;\n}\n", "    let factors: number[] = [];\n \
    \   for (let i = 2; i <= n; i++) {\n        while (n % i == 0) {\n           \
    \ factors.push(i);\n            n /= i;\n        }\n    }\n    return factors.length\
    \ ? factors[factors.length - 1] : 1;\n}\n", "    let factors: number[] = [];\n\
    \    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n          \
    \  factors.push(i);\n            n = n / i;\n        }\n        else {\n     \
    \       i++;\n        }\n    }\n    return factors[factors.length - 1];\n}\n",
  "    let i = 2;\n    let factor: number = 1;\n    while (i < n) {\n        if (n\
    \ % i == 0) {\n            factor = i;\n            break;\n        }\n      \
    \  i += 1;\n    }\n    return factor;\n}\n", "    let factors: number[] = [];\n\
    \    for (let i = 2; i <= n; i++) {\n        while (n % i == 0) {\n          \
    \  factors.push(i);\n            n /= i;\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let i = 2;\n    let factor: number = 1;\n    while (i <= Math.sqrt(n))\
    \ {\n        if (n % i == 0) {\n            factor = i;\n            break;\n\
    \        }\n        i += 1;\n    }\n    return factor;\n}\n", "    let factors:\
    \ number[] = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i ==\
    \ 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n\
    \    return factors[factors.length - 1];\n}\n", "    let factors: number[] = [];\n\
    \    for (let i = 2; i <= n; i++) {\n        while (n % i == 0) {\n          \
    \  factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let i = 2;\n    let factor = 1;\n    while (i <= n / 2) {\n\
    \        if (n % i == 0) {\n            factor = i;\n            break;\n    \
    \    }\n        i++;\n    }\n    return factor;\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n \
    \           factors.push(i);\n            n /= i;\n        }\n    }\n    return\
    \ factors.length ? factors[factors.length - 1] : 1;\n}\n", "    let i = 2;\n \
    \   let factor = 1;\n    while (i < n) {\n        if (n % i == 0) {\n        \
    \    factor = i;\n            break;\n        }\n        i++;\n    }\n    return\
    \ factor;\n}\n", "    let factors: number[] = [];\n    for (let i = 2; i <= n;\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n        }\n\
    \    }\n    return factors[factors.length - 1];\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i == 0) {\n  \
    \          factors.push(i);\n            n = n / i;\n        }\n    }\n    return\
    \ factors[factors.length - 1];\n}\n", "    let i = 2;\n    while (i < n) {\n \
    \       if (n % i === 0) {\n            n = n / i;\n        } else {\n       \
    \     i++;\n        }\n    }\n    return n;\n}\n", "    let factor: number = 0;\n\
    \    let i: number;\n    for (i = 2; i <= n; i++) {\n        if (n % i === 0)\
    \ {\n            factor = i;\n            break;\n        }\n    }\n    return\
    \ factor;\n}\n", "    let i = 2;\n    let factor = 1;\n    while (i < n) {\n \
    \       if (n % i == 0) {\n            factor = i;\n            break;\n     \
    \   }\n        i++;\n    }\n    return factor;\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n    \
    \        factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let i = 2;\n    let factor = 1;\n    while (i < n) {\n   \
    \     if (n % i == 0) {\n            factor = i;\n            break;\n       \
    \ }\n        i += 1;\n    }\n    return factor;\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n    \
    \        factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++)\
    \ {\n        if (n % i === 0) {\n            factors.push(i);\n        }\n   \
    \ }\n    return factors[factors.length - 1];\n}\n", "    let factor: number =\
    \ 1;\n    let i: number = 0;\n    while (n > 1) {\n        if (n % factor ===\
    \ 0) {\n            n = n / factor;\n        } else {\n            i++;\n    \
    \        factor *= i;\n        }\n    }\n    return factor;\n}\n", "    let factors:\
    \ number[] = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0)\
    \ {\n            factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++)\
    \ {\n        while (n % i == 0) {\n            factors.push(i);\n            n\
    \ /= i;\n        }\n    }\n    return factors[factors.length - 1];\n}\n", "  \
    \  let factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n        if\
    \ (n % i === 0) {\n            factors.push(i);\n        }\n    }\n    return\
    \ factors[factors.length - 1];\n}\n", "    let factor: number = 1;\n    let i:\
    \ number = 2;\n    while (i < n) {\n        if (n % i == 0) {\n            factor\
    \ = i;\n            break;\n        }\n        i += 1;\n    }\n    return factor;\n\
    }\n", "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            factors.push(i);\n            n /= i;\n\
    \        }\n    }\n    return factors[factors.length - 1];\n}\n", "    let i =\
    \ 2;\n    let factor = 1;\n    while (i < n) {\n        if (n % i == 0) {\n  \
    \          factor = i;\n            break;\n        }\n        i += 1;\n    }\n\
    \    return factor;\n}\n", "    let factors: number[] = [];\n    for (let i =\
    \ 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push(i);\n\
    \            n = n / i;\n        }\n    }\n    return factors[factors.length -\
    \ 1];\n}\n", "    let factors: number[] = [];\n    let i = 2;\n    while (i <=\
    \ n) {\n        if (n % i === 0) {\n            factors.push(i);\n           \
    \ n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ factors[factors.length - 1];\n}\n", "    let i = 2;\n    let factor = 1;\n \
    \   while (i <= n / i) {\n        if (n % i == 0) {\n            factor = i;\n\
    \            break;\n        }\n        i++;\n    }\n    return factor;\n}\n",
  "    let i = 2;\n    let factor = 1;\n    while (i <= n / 2) {\n        if (n %\
    \ i == 0) {\n            factor = i;\n            break;\n        }\n        i\
    \ += 1;\n    }\n    return factor;\n}\n", "    let factors: number[] = [];\n \
    \   for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n  \
    \          factors.push(i);\n        }\n    }\n    if (factors.length === 0) {\n\
    \        return 1;\n    }\n    let largest_factor = factors[factors.length - 1];\n\
    \    for (let i = factors.length - 2; i >= 0; i--) {\n        if (factors[i] >\
    \ largest_factor) {\n            largest_factor = factors[i];\n        }\n   \
    \ }\n    return largest_factor;\n}\n", "    let factor: number = 1;\n    let i:\
    \ number = 2;\n    while (i < n) {\n        if (n % i == 0) {\n            factor\
    \ *= i;\n        }\n        i++;\n    }\n    return factor;\n}\n", "    let factors:\
    \ number[] = [];\n    let i = 2;\n    while (i <= n) {\n        if (n % i ===\
    \ 0) {\n            factors.push(i);\n            while (n % i === 0) {\n    \
    \            n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ factors[factors.length - 1];\n}\n", "    let i = 2;\n    let factor: number\
    \ = 1;\n    while (i < n) {\n        if (n % i == 0) {\n            factor = i;\n\
    \            break;\n        }\n        i += 1;\n    }\n    return factor;\n}\n",
  "    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \        if (n % i === 0) {\n            factors.push(i);\n        }\n    }\n\
    \    return factors[factors.length - 1];\n}\n", "    let factors: number[] = [];\n\
    \    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n          \
    \  factors.push(i);\n            n = n / i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return factors[factors.length - 1];\n}\n", "    let i =\
    \ 2;\n    let factor = 1;\n    while (i <= n) {\n        if (n % i == 0) {\n \
    \           factor = i;\n            break;\n        }\n        i += 1;\n    }\n\
    \    return factor;\n}\n", "    let max_factor: number = 1;\n    let max_factor_index:\
    \ number = 0;\n    for (let i = 2; i <= n; i++) {\n        if (n % i == 0) {\n\
    \            if (max_factor < i) {\n                max_factor = i;\n        \
    \        max_factor_index = i;\n            }\n        }\n    }\n    return max_factor;\n\
    }\n", "    let i = 2;\n    let factor = 1;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            factor = i;\n            break;\n        }\n\
    \        i += 1;\n    }\n    return factor;\n}\n", "    let max_factor = 1;\n\
    \    let max_factor_index = 0;\n    for (let i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            max_factor = i;\n            max_factor_index =\
    \ i;\n        }\n    }\n    return max_factor;\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n    \
    \        factors.push(i);\n        }\n    }\n    if (factors.length === 0) {\n\
    \        return 1;\n    }\n    let largest = factors[factors.length - 1];\n  \
    \  for (let i = factors.length - 2; i >= 0; i--) {\n        if (factors[i] > largest)\
    \ {\n            largest = factors[i];\n        }\n    }\n    return largest;\n\
    }\n", "    let factor: number = 1;\n    let i: number = 0;\n    while (true) {\n\
    \        i++;\n        if (n % i == 0) {\n            factor = i;\n          \
    \  break;\n        }\n    }\n    return factor;\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i ===\
    \ 0) {\n            factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++)\
    \ {\n        while (n % i == 0) {\n            factors.push(i);\n            n\
    \ /= i;\n        }\n    }\n    return factors[factors.length - 1];\n}\n", "  \
    \  let factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n        if\
    \ (n % i === 0) {\n            factors.push(i);\n        }\n    }\n    return\
    \ factors[factors.length - 1];\n}\n", "    let factors: number[] = [];\n    for\
    \ (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            factors.push(i);\n\
    \            n = n / i;\n        }\n    }\n    return factors[factors.length -\
    \ 1];\n}\n", "    let i = 2;\n    let factor: number = 1;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            factor = i;\n            break;\n\
    \        }\n        i++;\n    }\n    return factor;\n}\n", "    let i = 2;\n \
    \   let factor = 1;\n    while (i < n) {\n        if (n % i == 0) {\n        \
    \    factor = i;\n            break;\n        }\n        i += 1;\n    }\n    return\
    \ factor;\n}\n", "    let i = 2;\n    let factor = 1;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            factor = i;\n            break;\n    \
    \    }\n        i += 1;\n    }\n    return factor;\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n    \
    \        factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n        }\n\
    \    }\n    return factors[factors.length - 1];\n}\n", "    let i = 2;\n    let\
    \ factor = 1;\n    while (i < n) {\n        if (n % i == 0) {\n            factor\
    \ = i;\n            break;\n        }\n        i += 1;\n    }\n    return factor;\n\
    }\n", "    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n        }\n\
    \    }\n    return factors[factors.length - 1];\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n \
    \           factors.push(i);\n            n /= i;\n        }\n    }\n    return\
    \ factors[factors.length - 1];\n}\n", "    let factors: number[] = [];\n    for\
    \ (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \        }\n    }\n    if (factors.length === 0) {\n        return 1;\n    }\n\
    \    return Math.max(...factors);\n}\n", "    let factors: number[] = [];\n  \
    \  for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i == 0) {\n    \
    \        factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let i = 2;\n    let factor = 1;\n    while (i < n) {\n   \
    \     if (n % i == 0) {\n            factor = i;\n            break;\n       \
    \ }\n        i += 1;\n    }\n    return factor;\n}\n", "    let i = 2;\n    let\
    \ factor = 1;\n    while (i <= n) {\n        if (n % i == 0) {\n            factor\
    \ = i;\n            break;\n        }\n        i++;\n    }\n    return factor;\n\
    }\n", "  let i = 2;\n  let factor = 1;\n  while (i <= n) {\n    if (n % i == 0)\
    \ {\n      factor = i;\n      break;\n    }\n    i++;\n  }\n  return factor;\n\
    }\n", "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n \
    \       while (n % i == 0) {\n            factors.push(i);\n            n /= i;\n\
    \        }\n    }\n    return factors[factors.length - 1];\n}\n", "    let factors:\
    \ number[] = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i ==\
    \ 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n\
    \    return factors[factors.length - 1];\n}\n", "    let factors: number[] = [];\n\
    \    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n          \
    \  factors.push(i);\n            while (n % i === 0) {\n                n /= i;\n\
    \            }\n        }\n        i++;\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n     \
    \ return i;\n    }\n    i++;\n  }\n  return n;\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n    \
    \        factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++)\
    \ {\n        if (n % i === 0) {\n            factors.push(i);\n        }\n   \
    \ }\n    return factors[factors.length - 1];\n}\n", "    let i = 2;\n    let factor\
    \ = 1;\n    while (i < n) {\n        if (n % i == 0) {\n            factor = i;\n\
    \            break;\n        }\n        i++;\n    }\n    return factor;\n}\n",
  "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n        while\
    \ (n % i === 0) {\n            factors.push(i);\n            n /= i;\n       \
    \ }\n    }\n    return factors[factors.length - 1];\n}\n", "    let i = 2;\n \
    \   let factor = 1;\n    while (i < n) {\n        if (n % i == 0) {\n        \
    \    factor = i;\n            break;\n        }\n        i += 1;\n    }\n    return\
    \ factor;\n}\n", "    let i = 2;\n    let factor = 1;\n    while (i < n) {\n \
    \       if (n % i == 0) {\n            factor = i;\n            break;\n     \
    \   }\n        i += 1;\n    }\n    return factor;\n}\n", "    let factors: number[]\
    \ = [];\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n  \
    \          factors.push(i);\n            while (n % i === 0) {\n             \
    \   n /= i;\n            }\n        }\n        i++;\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let max_factor = 1;\n    let max_factor_index = 0;\n    for\
    \ (let i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            if (max_factor\
    \ < i) {\n                max_factor = i;\n                max_factor_index =\
    \ i;\n            }\n        }\n    }\n    return max_factor;\n}\n", "    let\
    \ factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n        while (n\
    \ % i == 0) {\n            factors.push(i);\n            n /= i;\n        }\n\
    \    }\n    return factors[factors.length - 1];\n}\n", "    let max_factor = 1;\n\
    \    let max_factor_index = 0;\n    for (let i = 2; i <= n; i++) {\n        if\
    \ (n % i == 0) {\n            max_factor = i;\n            max_factor_index =\
    \ i;\n        }\n    }\n    return max_factor;\n}\n", "    let i = 2;\n    let\
    \ factor = 1;\n    while (i <= n && n % i == 0) {\n        factor = i;\n     \
    \   i += 1;\n    }\n    return factor;\n}\n", "    let factors: number[] = [];\n\
    \    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n \
    \           factors.push(i);\n        }\n    }\n    if (factors.length === 0)\
    \ {\n        return 1;\n    }\n    return Math.max(...factors);\n}\n", "    let\
    \ factors: number[] = [];\n    let i = 2;\n    while (factors.length < n) {\n\
    \        if (n % i === 0) {\n            factors.push(i);\n        }\n       \
    \ i++;\n    }\n    return factors[factors.length - 1];\n}\n", "    let i = 2;\n\
    \    while (i < n) {\n        if (n % i === 0) {\n            n = n / i;\n   \
    \     } else {\n            i++;\n        }\n    }\n    return n;\n}\n", "   \
    \ let max_factor = 1;\n    let max_factor_index = 0;\n    for (let i = 2; i <=\
    \ n; i++) {\n        if (n % i == 0) {\n            if (max_factor < i) {\n  \
    \              max_factor = i;\n                max_factor_index = i;\n      \
    \      }\n        }\n    }\n    return max_factor;\n}\n", "    let factors: number[]\
    \ = [];\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n  \
    \          factors.push(i);\n            n = n / i;\n        } else {\n      \
    \      i++;\n        }\n    }\n    return factors[factors.length - 1];\n}\n",
  "  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n   \
    \ } else {\n      i++;\n    }\n  }\n  return n;\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i == 0) {\n  \
    \          factors.push(i);\n            n /= i;\n        }\n    }\n    return\
    \ factors.length ? Math.max(...factors) : n;\n}\n", "    let factors: number[]\
    \ = [];\n    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         factors.push(i);\n            while (n % i == 0) {\n               \
    \ n /= i;\n            }\n        }\n        i++;\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let i = 2;\n    let factor = 1;\n    while (i <= Math.sqrt(n))\
    \ {\n        if (n % i == 0) {\n            factor = i;\n            break;\n\
    \        }\n        i += 1;\n    }\n    return factor;\n}\n", "    let factors:\
    \ number[] = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i ==\
    \ 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n\
    \    return factors[factors.length - 1];\n}\n", "    let i = 2;\n    let factor\
    \ = 1;\n    while (i < n) {\n        if (n % i == 0) {\n            factor = i;\n\
    \            break;\n        }\n        i++;\n    }\n    return factor;\n}\n",
  "    let i = 2;\n    let factor = 2;\n    while (i < n) {\n        if (n % i ==\
    \ 0) {\n            factor = i;\n            break;\n        }\n        i++;\n\
    \    }\n    return factor;\n}\n", "    let i = 2;\n    let factor = 2;\n    while\
    \ (i <= n) {\n        if (n % i == 0) {\n            factor = i;\n           \
    \ break;\n        }\n        i++;\n    }\n    return factor;\n}\n", "    let i\
    \ = 2;\n    let factor = 1;\n    while (i <= n) {\n        if (n % i == 0) {\n\
    \            factor = i;\n            break;\n        }\n        i += 1;\n   \
    \ }\n    return factor;\n}\n", "    let factors: number[] = [];\n    for (let\
    \ i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \        }\n    }\n    return factors[factors.length - 1];\n}\n", "    let factors:\
    \ number[] = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0)\
    \ {\n            factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i == 0)\
    \ {\n            return i;\n        }\n        i++;\n    }\n    return n;\n}\n",
  "    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \        if (n % i === 0) {\n            factors.push(i);\n        }\n    }\n\
    \    if (factors.length === 0) {\n        return 1;\n    }\n    return Math.max(...factors);\n\
    }\n", "    let factors: number[] = [];\n    let i = 2;\n    while (i <= Math.sqrt(n))\
    \ {\n        if (n % i === 0) {\n            factors.push(i);\n            while\
    \ (n % i === 0) {\n                n /= i;\n            }\n        }\n       \
    \ else {\n            i++;\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++)\
    \ {\n        if (n % i === 0) {\n            factors.push(i);\n        }\n   \
    \ }\n    return factors[factors.length - 1];\n}\n", "    let i = 2;\n    let factor:\
    \ number = 1;\n    while (i <= n) {\n        if (n % i == 0) {\n            factor\
    \ = i;\n            break;\n        }\n        i++;\n    }\n    return factor;\n\
    }\n", "    let max_factor = 1;\n    let max_factor_index = 0;\n    for (let i\
    \ = 2; i <= n; i++) {\n        if (n % i === 0) {\n            max_factor = i;\n\
    \            max_factor_index = i;\n        }\n    }\n    return max_factor;\n\
    }\n", "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n \
    \       if (n % i === 0) {\n            factors.push(i);\n        }\n    }\n \
    \   return factors[factors.length - 1];\n}\n", "    let factors: number[] = [];\n\
    \    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n         \
    \   factors.push(i);\n            n = n / i;\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let i = 2;\n    let factor = 2;\n    while (i < n) {\n   \
    \     if (n % i == 0) {\n            factor = i;\n            break;\n       \
    \ }\n        i++;\n    }\n    return factor;\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n    \
    \        factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n        }\n\
    \    }\n    return factors[factors.length - 1];\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i ===\
    \ 0) {\n            factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let factors: number[] = [];\n    let i = 2;\n    while (i\
    \ <= n) {\n        if (n % i === 0) {\n            factors.push(i);\n        \
    \    while (n % i === 0) {\n                n /= i;\n            }\n        }\n\
    \        i++;\n    }\n    return factors[factors.length - 1];\n}\n", "    let\
    \ factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n        if (n %\
    \ i === 0) {\n            factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++)\
    \ {\n        if (n % i === 0) {\n            factors.push(i);\n        }\n   \
    \ }\n    return factors[factors.length - 1];\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i == 0) {\n  \
    \          factors.push(i);\n            n /= i;\n        }\n    }\n    return\
    \ factors.length ? Math.max(...factors) : 1;\n}\n", "    let i = 2;\n    let factor\
    \ = 1;\n    while (i < n) {\n        if (n % i == 0) {\n            factor = i;\n\
    \            break;\n        }\n        i++;\n    }\n    return factor;\n}\n",
  "    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n\
    \        if (n % i === 0) {\n            factors.push(i);\n        }\n    }\n\
    \    if (factors.length === 0) {\n        return 1;\n    }\n    return Math.max(...factors);\n\
    }\n", "    let factors: number[] = [];\n    let i = 2;\n    while (i <= Math.sqrt(n))\
    \ {\n        if (n % i == 0) {\n            factors.push(i);\n            while\
    \ (n % i == 0) {\n                n /= i;\n            }\n        }\n        i++;\n\
    \    }\n    return factors[factors.length - 1];\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n    \
    \        factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let i = 2;\n    let factor = 1;\n    while (i < n) {\n   \
    \     if (n % i == 0) {\n            factor = i;\n            break;\n       \
    \ }\n        i++;\n    }\n    return factor;\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n    \
    \        factors.push(i);\n        }\n    }\n    if (factors.length === 0) {\n\
    \        return 1;\n    }\n    let largest_factor = factors[factors.length - 1];\n\
    \    for (let i = factors.length - 2; i >= 0; i--) {\n        if (factors[i] >\
    \ largest_factor) {\n            largest_factor = factors[i];\n        }\n   \
    \ }\n    return largest_factor;\n}\n", "    let factors: number[] = [];\n    for\
    \ (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \        }\n    }\n    return factors[factors.length - 1];\n}\n", "    let factors:\
    \ number[] = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n\
    \ % i === 0) {\n            factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++)\
    \ {\n        if (n % i === 0) {\n            factors.push(i);\n        }\n   \
    \ }\n    return factors[factors.length - 1];\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n    \
    \        factors.push(i);\n        }\n    }\n    if (factors.length === 0) {\n\
    \        return 1;\n    }\n    return Math.max(...factors);\n}\n", "    let factors:\
    \ number[] = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0)\
    \ {\n            factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let i = 2;\n    let factor = 1;\n    while (i < n) {\n   \
    \     if (n % i == 0) {\n            factor = i;\n            break;\n       \
    \ }\n        i++;\n    }\n    return factor;\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n    \
    \        factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let factor: number = 1;\n    let prime: number = 2;\n    while\
    \ (prime * prime <= n) {\n        if (n % prime === 0) {\n            factor *=\
    \ prime;\n            n /= prime;\n        }\n        else {\n            prime\
    \ += 1;\n        }\n    }\n    return factor;\n}\n", "    let factor: number =\
    \ 0;\n    let i: number = 0;\n    while (n > 1) {\n        if (n % i == 0) {\n\
    \            factor = i;\n            break;\n        }\n        i++;\n    }\n\
    \    return factor;\n}\n", "    let i = 2;\n    let factor = 2;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            factor = i;\n            break;\n\
    \        }\n        i += 1;\n    }\n    return factor;\n}\n", "    let factors:\
    \ number[] = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0)\
    \ {\n            factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n     \
    \ n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return n;\n}\n", "  let\
    \ i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return n;\n}\n", "    let i = 2;\n    let factor\
    \ = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            factor =\
    \ i;\n            break;\n        }\n        i++;\n    }\n    return factor;\n\
    }\n", "    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i == 0) {\n            factors.push(i);\n        }\n\
    \    }\n    return factors[factors.length - 1];\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i == 0) {\n  \
    \          factors.push(i);\n            n /= i;\n        }\n    }\n    return\
    \ factors[factors.length - 1];\n}\n", "    let max_factor = 1;\n    let max_factor_index\
    \ = 0;\n    for (let i = 2; i <= n; i++) {\n        if (n % i == 0) {\n      \
    \      max_factor = i;\n            max_factor_index = i;\n        }\n    }\n\
    \    return max_factor;\n}\n", "    let factors: number[] = [];\n    for (let\
    \ i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \        }\n    }\n    return factors[factors.length - 1];\n}\n", "    let i =\
    \ 2;\n    let factor = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n \
    \           factor = i;\n            break;\n        }\n        i++;\n    }\n\
    \    return factor;\n}\n", "    let factors: number[] = [];\n    for (let i =\
    \ 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \        }\n    }\n    return factors[factors.length - 1];\n}\n", "    let factors:\
    \ number[] = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i ==\
    \ 0) {\n            factors.push(i);\n            n = n / i;\n        }\n    }\n\
    \    return factors[factors.length - 1];\n}\n", "    let factors: number[] = [];\n\
    \    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i == 0) {\n  \
    \          factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++)\
    \ {\n        while (n % i == 0) {\n            factors.push(i);\n            n\
    \ /= i;\n        }\n    }\n    return factors[factors.length - 1];\n}\n", "  let\
    \ i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      return i;\n    }\n \
    \   i++;\n  }\n  return n;\n}\n", "    let max_factor = 1;\n    let max_factor_index\
    \ = 0;\n    for (let i = 2; i <= n; i++) {\n        if (n % i == 0) {\n      \
    \      max_factor = i;\n            max_factor_index = i;\n        }\n    }\n\
    \    return max_factor;\n}\n", "    let factors: number[] = [];\n    for (let\
    \ i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \        }\n    }\n    return factors[factors.length - 1];\n}\n", "    let factors:\
    \ number[] = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0)\
    \ {\n            factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let i = 2;\n    let factor: number = 1;\n    while (i <= Math.sqrt(n))\
    \ {\n        if (n % i == 0) {\n            factor = i;\n            break;\n\
    \        }\n        i++;\n    }\n    return factor;\n}\n", "    let factor: number\
    \ = 1;\n    let i: number = 2;\n    while (i <= n) {\n        if (n % i == 0)\
    \ {\n            factor = i;\n            break;\n        }\n        i++;\n  \
    \  }\n    return factor;\n}\n", "    let factors: number[] = [];\n    for (let\
    \ i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n    }\n    return factors.length ? Math.max(...factors)\
    \ : 1;\n}\n", "    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i == 0) {\n            factors.push(i);\n        }\n\
    \    }\n    return factors[factors.length - 1];\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i ===\
    \ 0) {\n            factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++)\
    \ {\n        if (n % i === 0) {\n            factors.push(i);\n        }\n   \
    \ }\n    return factors[factors.length - 1];\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n \
    \           factors.push(i);\n            n = n / i;\n        }\n    }\n    return\
    \ factors[factors.length - 1];\n}\n", "    let i = 2;\n    while (i < n) {\n \
    \       if (n % i === 0) {\n            n = n / i;\n        } else {\n       \
    \     i++;\n        }\n    }\n    return n;\n}\n", "    let factors: number[]\
    \ = [];\n    let i = 2;\n    while (i < n) {\n        if (n % i === 0) {\n   \
    \         factors.push(i);\n            while (n % i === 0) {\n              \
    \  n /= i;\n            }\n        }\n        i++;\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let i = 2;\n    let factor = 2;\n    while (i < n) {\n   \
    \     if (n % i == 0) {\n            factor = i;\n            break;\n       \
    \ }\n        i++;\n    }\n    return factor;\n}\n", "    let factors: number[]\
    \ = [];\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n  \
    \          factors.push(i);\n            while (n % i === 0) {\n             \
    \   n /= i;\n            }\n        }\n        i++;\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++)\
    \ {\n        if (n % i === 0) {\n            factors.push(i);\n        }\n   \
    \ }\n    return factors[factors.length - 1];\n}\n", "    let factors: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n    \
    \        factors.push(i);\n        }\n    }\n    if (factors.length === 0) {\n\
    \        return 1;\n    }\n    let largest = factors[factors.length - 1];\n  \
    \  for (let i = factors.length - 2; i >= 0; i--) {\n        if (factors[i] > largest)\
    \ {\n            largest = factors[i];\n        }\n    }\n    return largest;\n\
    }\n</code>\n<|/ a tags=primes,javascript,algorithm |>\n<| c |>\nThis doesn't work\
    \ for n=1 because `factors.length` is 0\n<|/ c |>\n<| c |>\nYes, I fixed that\
    \ by adding an if statement to check if factors.length is 0.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>", "    let factor: number = 1;\n    let i: number = 2;\n    while\
    \ (i <= Math.sqrt(n)) {\n        if (n % i == 0) {\n            factor *= i;\n\
    \            while (n % i == 0) {\n                n /= i;\n                i++;\n\
    \            }\n        }\n        i++;\n    }\n    return factor;\n}\n", "  \
    \  let factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n        if\
    \ (n % i === 0) {\n            factors.push(i);\n        }\n    }\n    return\
    \ factors[factors.length - 1];\n}\n", "    let i = 2;\n    let factor: number\
    \ = 1;\n    while (i < n) {\n        if (n % i == 0) {\n            factor = i;\n\
    \            break;\n        }\n        i++;\n    }\n    return factor;\n}\n",
  "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n        if\
    \ (n % i === 0) {\n            factors.push(i);\n        }\n    }\n    return\
    \ factors[factors.length - 1];\n}\n", "    let factors: number[] = [];\n    for\
    \ (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \        }\n    }\n    if (factors.length === 0) {\n        return 1;\n    }\n\
    \    let largest = factors[factors.length - 1];\n    for (let i = factors.length\
    \ - 2; i >= 0; i--) {\n        if (factors[i] > largest) {\n            largest\
    \ = factors[i];\n        }\n    }\n    return largest;\n}", "    let i = 2;\n\
    \    let factor = 1;\n    while (i <= n) {\n        if (n % i == 0) {\n      \
    \      factor = i;\n            break;\n        }\n        i += 1;\n    }\n  \
    \  return factor;\n}\n", "    let factors: number[] = [];\n    for (let i = 2;\
    \ i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \        }\n    }\n    return factors[factors.length - 1];\n}\n", "    let factors:\
    \ number[] = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0)\
    \ {\n            factors.push(i);\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i ===\
    \ 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return\
    \ i;\n}\n", "    let i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n\
    \            n = n / i;\n        } else {\n            i++;\n        }\n    }\n\
    \    return n;\n}\n", "  let factors: number[] = [];\n  let i = 2;\n  while (true)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0)\
    \ {\n        n /= i;\n      }\n    } else {\n      break;\n    }\n    i++;\n \
    \ }\n  if (n !== 1) {\n    factors.push(n);\n  }\n  return factors[factors.length\
    \ - 1];\n}\n", "  let factor: number = 1;\n  let i: number = 0;\n  while (i <\
    \ n) {\n    if (n % i == 0) {\n      factor = i;\n      break;\n    }\n    i +=\
    \ 1;\n  }\n  return factor;\n}\n", "  let i = 2;\n  while (i <= n) {\n    if (n\
    \ % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return\
    \ n;\n}\n", "    let i = 2;\n    let factor = 2;\n    while (i < n) {\n      \
    \  if (n % i == 0) {\n            factor = i;\n            break;\n        }\n\
    \        i++;\n    }\n    return factor;\n}\n", "    let i = 2;\n    while (i\
    \ <= Math.sqrt(n)) {\n        if (n % i === 0) {\n            n = n / i;\n   \
    \     } else {\n            i++;\n        }\n    }\n    return n;\n}\n", "   \
    \ let factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n        if\
    \ (n % i === 0) {\n            factors.push(i);\n        }\n    }\n    return\
    \ factors[factors.length - 1];\n}\n", "    let i = 2;\n    let factor = 2;\n \
    \   while (i < n) {\n        if (n % i == 0) {\n            factor = i;\n    \
    \        break;\n        }\n        i += 1;\n    }\n    return factor;\n}\n",
  "  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      return i;\n    }\n\
    \    i += 1;\n  }\n  return n;\n}\n", "    let factors: number[] = [];\n    for\
    \ (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \        }\n    }\n    if (factors.length === 0) {\n        return 1;\n    }\n\
    \    let largest = factors[factors.length - 1];\n    for (let i = factors.length\
    \ - 2; i >= 0; i--) {\n        if (factors[i] > largest) {\n            largest\
    \ = factors[i];\n        }\n    }\n    return largest;\n}\n", "    let factors:\
    \ number[] = [];\n    let i = 2;\n    while (i <= n) {\n        if (n % i ===\
    \ 0) {\n            factors.push(i);\n            while (n % i === 0) {\n    \
    \            n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ factors[factors.length - 1];\n}\n", "    let factor: number = 1;\n    let i:\
    \ number;\n    for (i = 2; i <= n; i++) {\n        if (n % i === 0) {\n      \
    \      factor = i;\n            break;\n        }\n    }\n    return factor;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
