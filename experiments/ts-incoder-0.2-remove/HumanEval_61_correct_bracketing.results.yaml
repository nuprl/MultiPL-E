language: ts
name: HumanEval_61_correct_bracketing
results:
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing\
    \ = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next\
    \ = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing\
    \ - 1;\n\tlet opening_found = false;\n\tlet closing_found = false;\n\twhile (opening_next\
    \ < brackets.length && closing_next < brackets.length) {\n\t\tif (brackets[opening_next]\
    \ === brackets[closing_next]) {\n\t\t\topening_found = true;\n\t\t\tclosing_found\
    \ = true;\n\t\t\topening_next = opening + 1;\n\t\t\tclosing_next = closing + 1;\n\
    \t\t} else {\n\t\t\tif (brackets[opening_next] === \")\") {\n\t\t\t\topening_found\
    \ = true;\n\t\t\t\tclosing_found = true;\n\t\t\t\topening_next = opening + 1;\n\
    \t\t\t\tclosing_next = closing + 1;\n\t\t\t} else if (brackets[opening_next] ===\
    \ \"(\") {\n\t\t\t\topening_found = true;\n\t\t\t\tclosing_found = true;\n\t\t\
    \t\topening_next = opening + 1;\n\t\t\t\tclosing_next = closing + 1;\n\t\t\t}\
    \ else {\n\t\t\t\tif (opening_found && closing_found) {\n\t\t\t\t\topening_found\
    \ = false;\n\t\t\t\t\tclosing_found = false;\n\t\t\t\t\topening_next = opening\
    \ + 1;\n\t\t\t\t\tclosing_next = closing + 1;\n\t\t\t\t} else if (opening_found)\
    \ {\n\t\t\t\t\topening_found = false;\n\t\t\t\t\topening_next = opening + 1;\n\
    \t\t\t\t\topening_prev = opening - 1;\n\t\t\t\t} else if (closing_found) {\n\t\
    \t\t\t\tclosing_found = false;\n\t\t\t\t\tclosing_next = closing + 1;\n\t\t\t\t\
    \tclosing_prev = closing - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn opening_found\
    \ && closing_found;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmppvwwz4t_.js:57:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppvwwz4t_.js:70:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: -1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets\
    \ = brackets.split(')');\n\tlet opening_brackets_length = opening_brackets.length;\n\
    \tlet closing_brackets_length = closing_brackets.length;\n\tlet i = 0;\n\tlet\
    \ j = 0;\n\tlet brackets_correct = true;\n\twhile (i < opening_brackets_length\
    \ && j < closing_brackets_length) {\n\t\tif (opening_brackets[i] === closing_brackets[j])\
    \ {\n\t\t\ti++;\n\t\t\tj++;\n\t\t} else {\n\t\t\tbrackets_correct = false;\n\t\
    \t}\n\t}\n\treturn brackets_correct;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979724
- exit_code: 0
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979709
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set,\
    \ opening_bracket) => {\n\t\tset.add(opening_bracket);\n\t\treturn set;\n\t},\
    \ new Set<string>());\n\tlet closing_brackets_set = closing_brackets.reduce((set,\
    \ closing_bracket) => {\n\t\tset.add(closing_bracket);\n\t\treturn set;\n\t},\
    \ new Set<string>());\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\
    \t\tif (!opening_brackets_set.has(opening_brackets[i])) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tfor (let i = 0; i < closing_brackets.length; i++) {\n\t\tif (!closing_brackets_set.has(closing_brackets[i]))\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp44fx57w2.ts(9,9): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmp44fx57w2.ts(13,9): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0doegw1u.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0doegw1u.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\").reverse();\n\tfor (let\
    \ i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpc2e94hdm.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpc2e94hdm.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet i: number;\n\t\
    let j: number;\n\tlet opening_brackets_length: number;\n\tlet closing_brackets_length:\
    \ number;\n\n\topening_brackets_length = opening_brackets.length;\n\tclosing_brackets_length\
    \ = closing_brackets.length;\n\n\tfor (i = 0; i < opening_brackets_length; i++)\
    \ {\n\t\tfor (j = 0; j < closing_brackets_length; j++) {\n\t\t\tif (opening_brackets[i]\
    \ === closing_brackets[j]) {\n\t\t\t\topening_brackets.splice(i, 1);\n\t\t\t\t\
    closing_brackets.splice(j, 1);\n\t\t\t\ti--;\n\t\t\t\tj--;\n\t\t\t\topening_brackets_length--;\n\
    \t\t\t\tclosing_brackets_length--;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn opening_brackets.length\
    \ === 0 && closing_brackets.length === 0;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5gun0mv2.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5gun0mv2.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\n\tbrackets.split('').forEach((bracket) => {\n\t\tswitch (bracket)\
    \ {\n\t\t\tcase '(':\n\t\t\t\topening_brackets.push(0);\n\t\t\t\tbreak;\n\t\t\t\
    case ')':\n\t\t\t\tclosing_brackets.push(0);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\
    \t\t\t\topening_brackets.push(1);\n\t\t\t\tclosing_brackets.push(1);\n\t\t}\n\t\
    });\n\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tfor (let j =\
    \ 0; j < closing_brackets.length; j++) {\n\t\t\tif (opening_brackets[i] === closing_brackets[j])\
    \ {\n\t\t\t\topening_brackets.splice(i, 1);\n\t\t\t\tclosing_brackets.splice(j,\
    \ 1);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn opening_brackets.length === 0;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"\
    ),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzqubmqw_.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzqubmqw_.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\").reverse();\n\tfor (let\
    \ i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpc2e94hdm.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpc2e94hdm.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets\
    \ = brackets.split(')');\n\tlet opening_brackets_length = opening_brackets.length;\n\
    \tlet closing_brackets_length = closing_brackets.length;\n\tlet correct_bracketing\
    \ = false;\n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket != closing_bracket) {\n\t\t\tcorrect_bracketing = false;\n\
    \t\t\tbreak;\n\t\t} else {\n\t\t\tcorrect_bracketing = true;\n\t\t}\n\t}\n\treturn\
    \ correct_bracketing;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz99thr40.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpz99thr40.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet opening_brackets_length:\
    \ number = opening_brackets.length;\n\tlet closing_brackets_length: number = closing_brackets.length;\n\
    \tlet i: number;\n\n\tfor (i = 0; i < opening_brackets_length; i++) {\n\t\tif\
    \ (opening_brackets[i] !== \"(\") {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tfor\
    \ (i = 0; i < closing_brackets_length; i++) {\n\t\tif (closing_brackets[i] !==\
    \ \")\") {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7lvos6ph.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7lvos6ph.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuuvj5dn7.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuuvj5dn7.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 0
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tfor (let j = 0; j < closing_brackets.length; j++)\
    \ {\n\t\t\tlet closing_bracket = closing_brackets[j];\n\t\t\tif (opening_bracket\
    \ < closing_bracket) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm060vezk.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm060vezk.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\n\tfor (let i = 0; i\
    \ < opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket !==\
    \ closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpimwom4gi.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpimwom4gi.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets\
    \ = brackets.split(')');\n\tlet opening_brackets_length = opening_brackets.length;\n\
    \tlet closing_brackets_length = closing_brackets.length;\n\tfor (let i = 0; i\
    \ < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpegfyl8k9.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpegfyl8k9.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.includes(\"(\")) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket.includes(\")\")) {\n\t\t\tclosing_brackets.push(i);\n\t\
    \t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn\
    \ false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet\
    \ opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
    \t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu9ggpck2.ts(8,15): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpu9ggpck2.ts(10,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp964qnck2.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp964qnck2.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 0
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.indexOf('(') !== -1) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket.indexOf(')') !== -1) {\n\t\t\tclosing_brackets.push(i);\n\
    \t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplu8mkw9x.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplu8mkw9x.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp964qnck2.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp964qnck2.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\");\n\tfor (let i = 0; i\
    \ < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket == \"\
    (\") {\n\t\t\tif (closing_bracket != \")\") {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t} else if (opening_bracket == \")\") {\n\t\t\tif (closing_bracket != \"(\"\
    ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"\
    ),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3mnnbaqi.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3mnnbaqi.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tlet opening_counts: number[] = [];\n\tlet closing_counts:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t\topening_counts.push(brackets.length - i);\n\t\t} else if (bracket === \"\
    )\") {\n\t\t\tclosing_brackets.push(i);\n\t\t\tclosing_counts.push(brackets.length\
    \ - i);\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\
    \tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_count = closing_counts[i];\n\
    \t\tlet opening_count = opening_counts[i];\n\t\tif (opening_count !== closing_count)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t\tlet opening_bracket = opening_bracket;\n\t\
    \tlet closing_bracket = closing_brackets[opening_bracket];\n\t\tif (opening_bracket\
    \ === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpanwkrs5p.ts(19,7): error TS2451: Cannot redeclare
    block-scoped variable ''opening_bracket''.

    ../../../../../tmp/tmpanwkrs5p.ts(25,7): error TS2451: Cannot redeclare block-scoped
    variable ''opening_bracket''.

    '
  timestamp: 1659979709
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.includes(\"(\")) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket.includes(\")\")) {\n\t\t\tclosing_brackets.push(i);\n\t\
    \t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjkhtc7r7.ts(8,15): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpjkhtc7r7.ts(10,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659979709
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_index\
    \ = opening_brackets[i];\n\t\tlet next_opening_index = opening_brackets[i + 1];\n\
    \t\tif (next_opening_index === undefined) {\n\t\t\t// The next opening bracket\
    \ is at the end of the string.\n\t\t\tcontinue;\n\t\t}\n\t\tlet next_bracket =\
    \ brackets[next_opening_index];\n\t\tif (next_bracket === \"(\") {\n\t\t\t// The\
    \ next opening bracket is right after this one.\n\t\t\tcontinue;\n\t\t}\n\t\t\
    let closing_index = closing_brackets[i];\n\t\tlet next_closing_index = closing_brackets[i\
    \ + 1];\n\t\tif (next_closing_index === undefined) {\n\t\t\t// The next closing\
    \ bracket is at the end of the string.\n\t\t\tcontinue;\n\t\t}\n\t\tlet next_bracket\
    \ = brackets[next_closing_index];\n\t\tif (next_bracket === \")\") {\n\t\t\t//\
    \ The next closing bracket is right after this one.\n\t\t\tcontinue;\n\t\t}\n\t\
    \t// This opening bracket does not have a corresponding closing bracket.\n\t\t\
    return false;\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpia593n0k.ts(21,7): error TS2451: Cannot redeclare
    block-scoped variable ''next_bracket''.

    ../../../../../tmp/tmpia593n0k.ts(32,7): error TS2451: Cannot redeclare block-scoped
    variable ''next_bracket''.

    '
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\");\n\tfor (let i = 0; i\
    \ < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === \"\
    (\" && closing_bracket === \")\") {\n\t\t\topening_brackets.splice(i, 1);\n\t\t\
    \tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn opening_brackets.length\
    \ === 0 && closing_brackets.length === 0;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpkoia4hte.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkoia4hte.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing\
    \ = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next\
    \ = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing\
    \ - 1;\n\n\t// If there is no opening or closing bracket, return false.\n\tif\
    \ (opening === -1 || closing === -1) {\n\t\treturn false;\n\t}\n\n\t// If there\
    \ is only one opening or closing bracket, return true.\n\tif (opening === closing)\
    \ {\n\t\treturn true;\n\t}\n\n\t// If there is only one opening bracket, return\
    \ true.\n\tif (opening === 0 && closing === 0) {\n\t\treturn true;\n\t}\n\n\t\
    // If there is only one closing bracket, return true.\n\tif (opening === 0 &&\
    \ closing === 1) {\n\t\treturn true;\n\t}\n\n\t// If there is only one opening\
    \ or closing bracket, return true.\n\tif (opening === 1 && closing === 0) {\n\t\
    \treturn true;\n\t}\n\n\t// If there is only one opening bracket, return true.\n\
    \tif (opening === 1 && closing === 1) {\n\t\treturn true;\n\t}\n\n\t// If there\
    \ is only one opening bracket, return true.\n\tif (opening === 0 && closing ===\
    \ 1) {\n\t\treturn true;\n\t}\n\n\t// If there is only one closing bracket, return\
    \ true.\n\tif (opening === 1 && closing === 0) {\n\t\treturn true;\n\t}\n\n\t\
    // If there is only one opening bracket, return true.\n\tif (opening === 1 &&\
    \ closing === 1) {\n\t\treturn true;\n\t}\n\n\t// If there is only one opening\
    \ bracket, return true.\n\tif (opening === 0 && closing === 1) {\n\t\treturn true;\n\
    \t}\n\n\t// If there is only one closing bracket, return true.\n\tif (opening\
    \ === 1 && closing === 0) {\n\t\treturn true;\n\t}\n\n\t// If there is only one\
    \ opening bracket, return true.\n\tif (opening === 1 && closing === 1) {\n\t\t\
    return true;\n\t}\n\n\t// If there is only one opening bracket, return true.\n\
    \tif (opening === 0 && closing === 1) {\n\t\treturn true;\n\t}\n\n\t// If there\
    \ is only one closing bracket, return true.\n\tif (opening === 1 && closing ===\
    \ 0) {\n\t\treturn true;\n\t}\n\n\t// If there is only one opening bracket, return\
    \ true.\n\tif (opening === 1 && closing === 1) {\n\t\treturn true;\n\t}\n\n\t\
    // If there is only one opening bracket, return true.\n\tif (opening === 0 &&\
    \ closing === 1) {\n\t\treturn true;\n\t}\n\n\t// If there is only one closing\
    \ bracket, return true.\n\tif (opening === 1 && closing === 0) {\n\t\treturn true;\n\
    \t}\n\n\t// If there is only one opening bracket, return true.\n\tif (opening\
    \ === 1 && closing === 1) {\n\t\treturn true;\n\t}\n\n\t// If there is only one\
    \ opening bracket, return true.\n\tif (opening === 0 && closing === 1) {\n\t\t\
    return true;\n\t}\n\n\t// \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpig94ox9x.ts(127,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979711
- exit_code: 0
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tlet opening_counter = 0;\n\tlet closing_counter = 0;\n\tfor\
    \ (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\t\t\
    if (bracket === \"(\") {\n\t\t\topening_brackets[opening_counter] = i;\n\t\t\t\
    opening_counter++;\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets[closing_counter]\
    \ = i;\n\t\t\tclosing_counter++;\n\t\t}\n\t}\n\tif (opening_counter !== closing_brackets.length)\
    \ return false;\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet\
    \ opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
    \t\tif (opening_bracket > closing_bracket) return false;\n\t}\n\treturn true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_index\
    \ = opening_brackets[i];\n\t\tlet closing_index = closing_brackets[i];\n\t\tif\
    \ (opening_index > closing_index) {\n\t\t\treturn false;\n\t\t}\n\t\tlet opening_length\
    \ = opening_brackets.length - 1;\n\t\tlet opening_middle = opening_index + opening_length\
    \ / 2;\n\t\tlet closing_middle = closing_index + closing_brackets.length / 2;\n\
    \t\tlet opening_middle_bracket = brackets[opening_middle];\n\t\tlet closing_middle_bracket\
    \ = brackets[closing_middle];\n\t\tif (opening_middle_bracket === closing_middle_bracket)\
    \ {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_middle_bracket === \"(\" && closing_middle_bracket\
    \ === \")\") {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_middle_bracket === \"\
    )\" && closing_middle_bracket === \"(\") {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_middle_bracket\
    \ === \"(\" && closing_middle_bracket === \"(\") {\n\t\t\tcontinue;\n\t\t}\n\t\
    \treturn false;\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpu2ukr73r.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpu2ukr73r.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet correct_bracketing = true;\n\tfor (let\
    \ i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket)\
    \ {\n\t\t\tcorrect_bracketing = false;\n\t\t}\n\t}\n\treturn correct_bracketing;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplsikdjkv.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplsikdjkv.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing\
    \ = brackets.indexOf(\")\");\n\tlet opening_next = false;\n\tlet closing_next\
    \ = false;\n\tfor (let i = opening + 1; i < brackets.length; i++) {\n\t\tif (brackets[i]\
    \ === \"(\") {\n\t\t\topening_next = true;\n\t\t} else if (brackets[i] === \"\
    )\") {\n\t\t\tclosing_next = true;\n\t\t}\n\t\tif (opening_next && closing_next)\
    \ {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpb227onom.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb227onom.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.substring(0, 1);\n\tlet closing\
    \ = brackets.substring(1, brackets.length);\n\tlet opening_brackets = opening.split(\"\
    )\");\n\tlet closing_brackets = closing.split(\"(\");\n\n\tif (opening_brackets.length\
    \ !== closing_brackets.length) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0;\
    \ i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket !==\
    \ closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzy72gidh.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzy72gidh.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet next_opening_bracket = opening_brackets[i +\
    \ 1];\n\t\tif (next_opening_bracket === undefined) {\n\t\t\tcontinue;\n\t\t}\n\
    \t\tlet next_bracket = brackets[next_opening_bracket];\n\t\tif (next_bracket !==\
    \ \"(\") {\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor (let i = 0; i < closing_brackets.length;\
    \ i++) {\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tlet next_closing_bracket\
    \ = closing_brackets[i + 1];\n\t\tif (next_closing_bracket === undefined) {\n\t\
    \t\tcontinue;\n\t\t}\n\t\tlet next_bracket = brackets[next_closing_bracket];\n\
    \t\tif (next_bracket !== \"(\") {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7szn_ycw.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7szn_ycw.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.match(/\\(/g);\n\tlet\
    \ closing_brackets = brackets.match(/\\)/g);\n\n\tif (opening_brackets === null\
    \ || closing_brackets === null) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0;\
    \ i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket !==\
    \ closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzrsd5ug0.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzrsd5ug0.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.match(/\\(/g);\n\tlet\
    \ closing_brackets = brackets.match(/\\)/g);\n\tlet opening_brackets_count = opening_brackets\
    \ ? opening_brackets.length : 0;\n\tlet closing_brackets_count = closing_brackets\
    \ ? closing_brackets.length : 0;\n\treturn opening_brackets_count === closing_brackets_count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp86nt42y1.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp86nt42y1.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\n\tlet are_opening_brackets_correct = true;\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_index = opening_brackets[i];\n\t\tlet closing_index\
    \ = closing_brackets[i];\n\t\tif (opening_index < closing_index) {\n\t\t\tare_opening_brackets_correct\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn are_opening_brackets_correct;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz7gctrpa.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpz7gctrpa.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.match(/[({]/);\n\tlet\
    \ closing_brackets = brackets.match(/[)}\\]]/);\n\tlet opening_brackets_count\
    \ = opening_brackets ? opening_brackets.length : 0;\n\tlet closing_brackets_count\
    \ = closing_brackets ? closing_brackets.length : 0;\n\n\tif (opening_brackets_count\
    \ < closing_brackets_count) {\n\t\treturn false;\n\t}\n\n\tlet opening_brackets_index\
    \ = 0;\n\tlet closing_brackets_index = 0;\n\tlet opening_brackets_length = opening_brackets_count;\n\
    \tlet closing_brackets_length = closing_brackets_count;\n\n\twhile (opening_brackets_index\
    \ < opening_brackets_length) {\n\t\tlet opening_bracket = opening_brackets[opening_brackets_index];\n\
    \t\tlet closing_bracket = closing_brackets[closing_brackets_index];\n\n\t\tif\
    \ (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\n\t\t\
    opening_brackets_index += 1;\n\t\tclosing_brackets_index += 1;\n\t}\n\n\treturn\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprzb8hn1u.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprzb8hn1u.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet opening_brackets_length:\
    \ number = opening_brackets.length;\n\tlet closing_brackets_length: number = closing_brackets.length;\n\
    \tlet i: number;\n\tlet j: number;\n\tlet opening_brackets_index: number;\n\t\
    let closing_brackets_index: number;\n\tlet opening_brackets_index_in_brackets:\
    \ number;\n\tlet closing_brackets_index_in_brackets: number;\n\tlet opening_brackets_index_in_string:\
    \ number;\n\tlet closing_brackets_index_in_string: number;\n\tlet opening_brackets_index_in_string_in_brackets:\
    \ number;\n\tlet closing_brackets_index_in_string_in_brackets: number;\n\tlet\
    \ opening_brackets_index_in_string_in_brackets_plus_1: number;\n\tlet closing_brackets_index_in_string_in_brackets_plus_1:\
    \ number;\n\tlet opening_brackets_index_in_string_in_brackets_plus_2: number;\n\
    \tlet closing_brackets_index_in_string_in_brackets_plus_2: number;\n\tlet opening_brackets_index_in_string_in_brackets_plus_3:\
    \ number;\n\tlet closing_brackets_index_in_string_in_brackets_plus_3: number;\n\
    \tlet opening_brackets_index_in_string_in_brackets_plus_4: number;\n\tlet closing_brackets_index_in_string_in_brackets_plus_4:\
    \ number;\n\tlet opening_brackets_index_in_string_in_brackets_plus_5: number;\n\
    \tlet closing_brackets_index_in_string_in_brackets_plus_5: number;\n\tlet opening_brackets_index_in_string_in_brackets_plus_6:\
    \ number;\n\tlet closing_brackets_index_in_string_in_brackets_plus_6: number;\n\
    \tlet opening_brackets_index_in_string_in_brackets_plus_7: number;\n\tlet closing_brackets_index_in_string_in_brackets_plus_7:\
    \ number;\n\tlet opening_brackets_index_in_string_in_brackets_plus_8: number;\n\
    \tlet closing_brackets_index_in_string_in_brackets_plus_8: number;\n\tlet opening_brackets_index_in_string_in_brackets_plus_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpso39edpr.ts(55,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979711
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket < closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwld0p04h.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwld0p04h.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (closing_bracket < opening_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpbtvpiuut.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbtvpiuut.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.substr(0, 1);\n\tlet closing =\
    \ brackets.substr(brackets.indexOf('(') + 1, 1);\n\treturn opening == closing;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdbqnm1j2.js:11:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdbqnm1j2.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuuvj5dn7.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuuvj5dn7.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets\
    \ = brackets.split(')');\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\n\tif (opening_brackets_count\
    \ < closing_brackets_count) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i <\
    \ opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6h83mxv3.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6h83mxv3.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0doegw1u.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0doegw1u.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing\
    \ = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next\
    \ = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing\
    \ - 1;\n\tlet opening_count = 0;\n\tlet closing_count = 0;\n\twhile (opening_next\
    \ < brackets.length && closing_next < brackets.length) {\n\t\tlet opening_char\
    \ = brackets[opening_next];\n\t\tlet closing_char = brackets[closing_next];\n\t\
    \tif (opening_char == closing_char) {\n\t\t\topening_count++;\n\t\t\tclosing_count++;\n\
    \t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\
    \t\t} else {\n\t\t\tif (opening_char == \"(\" && closing_char == \")\") {\n\t\t\
    \t\topening_count++;\n\t\t\t\tclosing_count++;\n\t\t\t\topening_next++;\n\t\t\t\
    \tclosing_next++;\n\t\t\t\topening_prev--;\n\t\t\t\tclosing_prev--;\n\t\t\t} else\
    \ if (opening_char == \"[\" && closing_char == \"]\") {\n\t\t\t\topening_count++;\n\
    \t\t\t\tclosing_count++;\n\t\t\t\topening_next++;\n\t\t\t\tclosing_next++;\n\t\
    \t\t\topening_prev--;\n\t\t\t\tclosing_prev--;\n\t\t\t} else if (opening_char\
    \ == \"{\" && closing_char == \"}\") {\n\t\t\t\topening_count++;\n\t\t\t\tclosing_count++;\n\
    \t\t\t\topening_next++;\n\t\t\t\tclosing_next++;\n\t\t\t\topening_prev--;\n\t\t\
    \t\tclosing_prev--;\n\t\t\t}\n\t\t}\n\t}\n\tif (opening_count != closing_count)\
    \ {\n\t\treturn false;\n\t}\n\tif (opening_prev < 0 || closing_prev < 0) {\n\t\
    \treturn false;\n\t}\n\tif (opening_prev == 0 && closing_prev == 0) {\n\t\treturn\
    \ true;\n\t}\n\tif (opening_prev == 0 && closing_prev == 1) {\n\t\treturn brackets[opening_prev]\
    \ == brackets[closing_prev + 1];\n\t}\n\tif (opening_prev == 1 && closing_prev\
    \ == 0) {\n\t\treturn brackets[opening_prev] == brackets[closing_prev - 1];\n\t\
    }\n\tif (opening_prev == 1 && closing_prev == 1) {\n\t\treturn brackets[opening_prev]\
    \ == brackets[closing_prev - 1] && brackets[opening_prev + 1] == brackets[closing_prev];\n\
    \t}\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpg5demdii.js:72:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpg5demdii.js:85:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket < closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpujwom0fm.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpujwom0fm.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"(\");\n\tlet closing_brackets\
    \ = brackets.split(\")\");\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\n\tfor (let i = 0; i\
    \ < opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxytkka31.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxytkka31.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.match(/[({]/)) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket.match(/[)}\\]]/)) {\n\t\t\tclosing_brackets.push(i);\n\t\
    \t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp15eibhv8.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp15eibhv8.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979711
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split('(');\n\
    \tlet closing_brackets: string[] = brackets.split(')');\n\tlet i: number;\n\t\
    let j: number;\n\tlet opening_bracket: string;\n\tlet closing_bracket: string;\n\
    \tlet brackets_ok: boolean;\n\tlet opening_found: boolean;\n\tlet closing_found:\
    \ boolean;\n\tlet opening_found2: boolean;\n\tlet closing_found2: boolean;\n\t\
    let opening_found3: boolean;\n\tlet closing_found3: boolean;\n\n\tfor (i = 0;\
    \ i < opening_brackets.length; i++) {\n\t\topening_bracket = opening_brackets[i];\n\
    \t\topening_found = false;\n\t\tclosing_found = false;\n\t\topening_found2 = false;\n\
    \t\tclosing_found2 = false;\n\t\topening_found3 = false;\n\t\tclosing_found3 =\
    \ false;\n\n\t\tfor (j = 0; j < closing_brackets.length; j++) {\n\t\t\tclosing_bracket\
    \ = closing_brackets[j];\n\t\t\tif (opening_bracket === closing_bracket) {\n\t\
    \t\t\topening_found = true;\n\t\t\t\tclosing_found = true;\n\t\t\t\topening_found2\
    \ = true;\n\t\t\t\tclosing_found2 = true;\n\t\t\t\topening_found3 = true;\n\t\t\
    \t\tclosing_found3 = true;\n\t\t\t} else if (opening_bracket.search(closing_bracket)\
    \ !== -1) {\n\t\t\t\topening_found = true;\n\t\t\t\tclosing_found = true;\n\t\t\
    \t\topening_found2 = true;\n\t\t\t\tclosing_found2 = true;\n\t\t\t\topening_found3\
    \ = true;\n\t\t\t\tclosing_found3 = true;\n\t\t\t} else {\n\t\t\t\topening_found\
    \ = false;\n\t\t\t\tclosing_found = false;\n\t\t\t\topening_found2 = false;\n\t\
    \t\t\tclosing_found2 = false;\n\t\t\t\topening_found3 = false;\n\t\t\t\tclosing_found3\
    \ = false;\n\t\t\t}\n\t\t}\n\n\t\tif (!opening_found) {\n\t\t\tbrackets_ok = false;\n\
    \t\t\tbreak;\n\t\t}\n\t\tif (!closing_found) {\n\t\t\tbrackets_ok = false;\n\t\
    \t\tbreak;\n\t\t}\n\t\tif (!opening_found2) {\n\t\t\tbrackets_ok = false;\n\t\t\
    \tbreak;\n\t\t}\n\t\tif (!closing_found2) {\n\t\t\tbrackets_ok = false;\n\t\t\t\
    break;\n\t\t}\n\t\tif (!opening_found3) {\n\t\t\tbrackets_ok = false;\n\t\t\t\
    break;\n\t\t}\n\t\tif (!closing_found3) {\n\t\t\tbrackets_ok = false;\n\t\t\t\
    break;\n\t\t}\n\t}\n\n\treturn brackets_ok;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp7s_nwoyl.js:35\n            else if (opening_bracket.search(closing_bracket)\
    \ !== -1) {\n                                     ^\n\nSyntaxError: Invalid regular\
    \ expression: /(/: Unterminated group\n    at String.search (<anonymous>)\n  \
    \  at correct_bracketing (/tmp/tmp7s_nwoyl.js:35:38)\n    at test (/tmp/tmp7s_nwoyl.js:82:22)\n\
    \    at Object.<anonymous> (/tmp/tmp7s_nwoyl.js:95:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\n\t\
    \tif (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpc_lvl441.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpc_lvl441.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets\
    \ = brackets.split(')');\n\tlet opening_brackets_length = opening_brackets.length;\n\
    \tlet closing_brackets_length = closing_brackets.length;\n\n\tfor (let i = 0;\
    \ i < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket ===\
    \ closing_bracket) {\n\t\t\topening_brackets_length--;\n\t\t\tclosing_brackets_length--;\n\
    \t\t}\n\t}\n\n\treturn opening_brackets_length === 0 && closing_brackets_length\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgez10bfd.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgez10bfd.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 0
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0doegw1u.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0doegw1u.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_length = opening_brackets.length;\n\
    \tlet closing_brackets_length = closing_brackets.length;\n\n\tfor (let i = 0;\
    \ i < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket != closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjkqswrnn.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjkqswrnn.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979713
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets\
    \ = brackets.split(')');\n\tfor (let i = 0; i < opening_brackets.length; i++)\
    \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket =\
    \ closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpkilsoynh.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkilsoynh.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing\
    \ = brackets.indexOf(\")\");\n\tif (opening === -1 || closing === -1) {\n\t\t\
    return false;\n\t}\n\tif (opening > closing) {\n\t\treturn false;\n\t}\n\tlet\
    \ openingBracket = brackets.substring(opening + 1, closing);\n\tlet closingBracket\
    \ = brackets.substring(closing + 1, brackets.length);\n\treturn openingBracket\
    \ === closingBracket;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplbqhdukp.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplbqhdukp.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 0
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979709
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.match(/[\\(\\)]/)) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i\
    \ < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket)\
    \ {\n\t\t\tlet temp = opening_bracket;\n\t\t\topening_bracket = closing_bracket;\n\
    \t\t\tclosing_bracket = temp;\n\t\t}\n\t\tlet opening_brackets_length = opening_brackets.length;\n\
    \t\tlet closing_brackets_length = closing_brackets.length;\n\t\tlet opening_brackets_index\
    \ = opening_bracket;\n\t\tlet closing_brackets_index = closing_bracket;\n\t\t\
    while (opening_brackets_index > 0 && closing_brackets_index < closing_brackets_length)\
    \ {\n\t\t\tlet opening_bracket = opening_brackets[opening_brackets_index - 1];\n\
    \t\t\tlet closing_bracket = closing_brackets[closing_brackets_index];\n\t\t\t\
    if (opening_bracket > closing_bracket) {\n\t\t\t\tlet temp = opening_bracket;\n\
    \t\t\t\topening_bracket = closing_bracket;\n\t\t\t\tclosing_bracket = temp;\n\t\
    \t\t}\n\t\t\topening_brackets_index--;\n\t\t\tclosing_brackets_index++;\n\t\t\
    }\n\t\tif (opening_brackets_index < opening_brackets_length) {\n\t\t\tlet temp\
    \ = opening_brackets[opening_brackets_index];\n\t\t\topening_brackets[opening_brackets_index]\
    \ = closing_brackets[closing_brackets_index];\n\t\t\tclosing_brackets[closing_brackets_index]\
    \ = temp;\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\
    \t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
    \t\tif (opening_bracket > closing_bracket) {\n\t\t\tlet temp = opening_bracket;\n\
    \t\t\topening_bracket = closing_bracket;\n\t\t\tclosing_b\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3af_89kn.ts(70,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979714
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets\
    \ = brackets.split(')');\n\tfor (let i = 0; i < opening_brackets.length; i++)\
    \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket =\
    \ closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\t\
    opening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t}\n\t\
    }\n\treturn opening_brackets.length === 0 && closing_brackets.length === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_wf5gymg.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_wf5gymg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tif (opening_brackets[i] !== closing_brackets[i]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpk0z0jx2c.js:16:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk0z0jx2c.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing\
    \ = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next\
    \ = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing\
    \ - 1;\n\tlet opening_found = opening_next;\n\tlet closing_found = closing_next;\n\
    \tlet opening_found2 = opening_prev;\n\tlet closing_found2 = closing_prev;\n\t\
    let opening_found3 = opening_next;\n\tlet closing_found3 = closing_next;\n\tlet\
    \ opening_found4 = opening_prev;\n\tlet closing_found4 = closing_prev;\n\tlet\
    \ opening_found5 = opening_next;\n\tlet closing_found5 = closing_next;\n\tlet\
    \ opening_found6 = opening_prev;\n\tlet closing_found6 = closing_prev;\n\tlet\
    \ opening_found7 = opening_next;\n\tlet closing_found7 = closing_next;\n\tlet\
    \ opening_found8 = opening_prev;\n\tlet closing_found8 = closing_prev;\n\tlet\
    \ opening_found9 = opening_next;\n\tlet closing_found9 = closing_next;\n\tlet\
    \ opening_found10 = opening_prev;\n\tlet closing_found10 = closing_prev;\n\tlet\
    \ opening_found11 = opening_next;\n\tlet closing_found11 = closing_next;\n\tlet\
    \ opening_found12 = opening_prev;\n\tlet closing_found12 = closing_prev;\n\tlet\
    \ opening_found13 = opening_next;\n\tlet closing_found13 = closing_next;\n\tlet\
    \ opening_found14 = opening_prev;\n\tlet closing_found14 = closing_prev;\n\tlet\
    \ opening_found15 = opening_next;\n\tlet closing_found15 = closing_next;\n\tlet\
    \ opening_found16 = opening_prev;\n\tlet closing_found16 = closing_prev;\n\tlet\
    \ opening_found17 = opening_next;\n\tlet closing_found17 = closing_next;\n\tlet\
    \ opening_found18 = opening_prev;\n\tlet closing_found18 = closing_prev;\n\tlet\
    \ opening_found19 = opening_next;\n\tlet closing_found19 = closing_next;\n\tlet\
    \ opening_found20 = opening_prev;\n\tlet closing_found20 = closing_prev;\n\tlet\
    \ opening_found21 = opening_next;\n\tlet closing_found21 = closing_\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp746_es0a.ts(72,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979714
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"(\");\n\tlet closing_brackets\
    \ = brackets.split(\")\");\n\tfor (let i = 0; i < opening_brackets.length; i++)\
    \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket =\
    \ closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoxg0uxm6.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoxg0uxm6.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\
    \topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t\t\
    i--;\n\t\t}\n\t}\n\treturn opening_brackets.length === 0 && closing_brackets.length\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp5p0z1w2q.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5p0z1w2q.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn\
    \ false;\n\t}\n\n\tlet opening_bracket = opening_brackets[0];\n\tlet closing_bracket\
    \ = closing_brackets[opening_brackets.length - 1];\n\n\tfor (let i = 1; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[opening_brackets.length - 1 - i];\n\n\t\tif (opening_bracket\
    \ < closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpltzwd411.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpltzwd411.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets\
    \ = brackets.split(')');\n\tfor (let i = 0; i < opening_brackets.length; i++)\
    \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket =\
    \ closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpkilsoynh.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkilsoynh.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
    \ string[] = [];\n\n\tbrackets.split('').forEach((bracket) => {\n\t\tif (bracket.match(/[\\\
    (\\)]/)) {\n\t\t\topening_brackets.push(bracket);\n\t\t} else {\n\t\t\tclosing_brackets.push(bracket);\n\
    \t\t}\n\t});\n\n\topening_brackets.forEach((bracket) => {\n\t\tclosing_brackets.forEach((other_bracket)\
    \ => {\n\t\t\tif (other_bracket === bracket) {\n\t\t\t\tclosing_brackets.splice(closing_brackets.indexOf(bracket),\
    \ 1);\n\t\t\t}\n\t\t});\n\t});\n\n\treturn opening_brackets.length === 0 && closing_brackets.length\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1wema1iq.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1wema1iq.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuuvj5dn7.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuuvj5dn7.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.includes(\"(\")) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket.includes(\")\")) {\n\t\t\tclosing_brackets.push(i);\n\t\
    \t}\n\t}\n\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\t\
    return false;\n\t}\n\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\
    \tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
    \t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg2u7ijz7.ts(9,15): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpg2u7ijz7.ts(11,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659979714
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet opening_char\
    \ = brackets[opening_bracket];\n\t\tlet closing_char = brackets[closing_bracket];\n\
    \t\tif (opening_char !== closing_char) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpufsxt9tc.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpufsxt9tc.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing\
    \ = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next\
    \ = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing\
    \ - 1;\n\tlet opening_count = 0;\n\tlet closing_count = 0;\n\twhile (opening_next\
    \ < brackets.length && closing_next < brackets.length) {\n\t\tlet opening_char\
    \ = brackets[opening_next];\n\t\tlet closing_char = brackets[closing_next];\n\t\
    \tif (opening_char === closing_char) {\n\t\t\topening_count++;\n\t\t\tclosing_count++;\n\
    \t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\
    \t\t} else {\n\t\t\tif (opening_char === \"(\") {\n\t\t\t\topening_count++;\n\t\
    \t\t\topening_next++;\n\t\t\t\topening_prev++;\n\t\t\t} else if (closing_char\
    \ === \")\") {\n\t\t\t\tclosing_count++;\n\t\t\t\tclosing_next++;\n\t\t\t\tclosing_prev++;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn opening_count === closing_count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpy28t0zdj.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy28t0zdj.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\").reverse();\n\tfor (let\
    \ i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket)\
    \ {\n\t\t\topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\
    \t\t}\n\t}\n\treturn opening_brackets.length === 0 && closing_brackets.length\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpcfl_cfw3.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcfl_cfw3.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\n\tbrackets.split('').forEach((bracket) => {\n\t\tif (bracket.match(/[({]/))\
    \ {\n\t\t\topening_brackets.push(bracket.charCodeAt(0));\n\t\t}\n\t\tif (bracket.match(/[)}\\\
    ]]/)) {\n\t\t\tclosing_brackets.push(bracket.charCodeAt(0));\n\t\t}\n\t});\n\n\
    \tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count\
    \ = closing_brackets.length;\n\n\tif (opening_brackets_count !== closing_brackets_count)\
    \ {\n\t\treturn false;\n\t}\n\n\tlet opening_brackets_set = opening_brackets.sort((a,\
    \ b) => a - b);\n\tlet closing_brackets_set = closing_brackets.sort((a, b) =>\
    \ a - b);\n\n\tlet opening_brackets_set_length = opening_brackets_set.length;\n\
    \tlet closing_brackets_set_length = closing_brackets_set.length;\n\n\tfor (let\
    \ i = 0; i < opening_brackets_set_length; i++) {\n\t\tif (closing_brackets_set[i]\
    \ !== opening_brackets_set[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmzfn2676.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmzfn2676.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.includes(\"(\")) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket.includes(\")\")) {\n\t\t\tclosing_brackets.push(i);\n\t\
    \t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket > closing_bracket) {\n\t\t\tlet temp = opening_bracket;\n\t\
    \t\topening_bracket = closing_bracket;\n\t\t\tclosing_bracket = temp;\n\t\t}\n\
    \t\tlet opening_brackets_count = opening_brackets.length;\n\t\tlet closing_brackets_count\
    \ = closing_brackets.length;\n\t\twhile (opening_brackets_count > 0 && closing_brackets_count\
    \ > 0) {\n\t\t\tlet opening_bracket = opening_brackets[opening_brackets_count-1];\n\
    \t\t\tlet closing_bracket = closing_brackets[closing_brackets_count-1];\n\t\t\t\
    if (opening_bracket < closing_bracket) {\n\t\t\t\topening_brackets_count--;\n\t\
    \t\t\tclosing_brackets_count--;\n\t\t\t} else {\n\t\t\t\topening_brackets_count--;\n\
    \t\t\t}\n\t\t}\n\t\tif (opening_brackets_count === 0 && closing_brackets_count\
    \ === 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmddm_07a.ts(8,15): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpmddm_07a.ts(10,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659979714
- exit_code: 0
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (opening_bracket\
    \ > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
    \ string[] = [];\n\tbrackets.split('').forEach((char) => {\n\t\tif (char === '(')\
    \ {\n\t\t\topening_brackets.push(char);\n\t\t} else if (char === ')') {\n\t\t\t\
    closing_brackets.push(char);\n\t\t}\n\t});\n\treturn opening_brackets.length ===\
    \ closing_brackets.length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwvfbyhfy.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwvfbyhfy.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.match(/[({]/)) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket.match(/[)}\\]]/)) {\n\t\t\tclosing_brackets.push(i);\n\t\
    \t}\n\t}\n\treturn opening_brackets.length == closing_brackets.length;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnoc3n8n4.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnoc3n8n4.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"(\");\n\tlet closing_brackets\
    \ = brackets.split(\")\");\n\tfor (let i = 0; i < opening_brackets.length; i++)\
    \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket =\
    \ closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoxg0uxm6.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoxg0uxm6.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet next_opening_bracket = opening_brackets[i +\
    \ 1];\n\t\tlet next_closing_bracket = closing_brackets[opening_bracket];\n\t\t\
    if (next_opening_bracket === undefined) {\n\t\t\t// This bracket pair doesn't\
    \ have a matching closing bracket.\n\t\t\treturn false;\n\t\t}\n\t\tlet next_bracket\
    \ = brackets[next_opening_bracket];\n\t\tif (next_bracket === \"(\") {\n\t\t\t\
    // This bracket pair is correctly nested.\n\t\t\tcontinue;\n\t\t}\n\t\t// This\
    \ bracket pair is incorrectly nested.\n\t\treturn false;\n\t}\n\t// All brackets\
    \ are correctly nested.\n\treturn true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnsqt9t96.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnsqt9t96.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.search(/\\(/) === -1) {\n\t\t\topening_brackets.push(bracket);\n\
    \t\t}\n\t\telse {\n\t\t\tclosing_brackets.push(bracket);\n\t\t}\n\t}\n\n\tfor\
    \ (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (closing_bracket.search(/\\\
    )/) === -1) {\n\t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\tlet opening_brackets_index\
    \ = opening_bracket.search(/\\(/);\n\t\t\tlet closing_brackets_index = closing_bracket.search(/\\\
    )/);\n\t\t\tif (opening_brackets_index === -1 || closing_brackets_index === -1)\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (opening_brackets_index\
    \ === closing_brackets_index) {\n\t\t\t\t\tlet opening_brackets_length = opening_bracket.length;\n\
    \t\t\t\t\tlet closing_brackets_length = closing_bracket.length;\n\t\t\t\t\tif\
    \ (opening_brackets_length === closing_brackets_length) {\n\t\t\t\t\t\tlet opening_brackets_index_2\
    \ = opening_bracket.search(/\\)/);\n\t\t\t\t\t\tif (opening_brackets_index_2 ===\
    \ -1) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\
    \t\t\t\treturn opening_bracket.substring(0, opening_brackets_index_2) === closing_bracket.substring(0,\
    \ closing_brackets_index_2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\
    \t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn\
    \ false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4u54u8uf.ts(9,26): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp4u54u8uf.ts(12,26): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp4u54u8uf.ts(19,23): error TS2339: Property ''search'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp4u54u8uf.ts(23,49): error TS2339: Property ''search'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp4u54u8uf.ts(24,49): error TS2339: Property ''search'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp4u54u8uf.ts(30,52): error TS2339: Property ''length'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp4u54u8uf.ts(31,52): error TS2339: Property ''length'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp4u54u8uf.ts(33,54): error TS2339: Property ''search'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp4u54u8uf.ts(38,31): error TS2339: Property ''substring''
    does not exist on type ''number''.

    ../../../../../tmp/tmp4u54u8uf.ts(38,90): error TS2339: Property ''substring''
    does not exist on type ''number''.

    ../../../../../tmp/tmp4u54u8uf.ts(38,103): error TS2552: Cannot find name ''closing_brackets_index_2''.
    Did you mean ''opening_brackets_index_2''?

    '
  timestamp: 1659979716
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"(\"\
    );\n\tlet closing_brackets: string[] = brackets.split(\")\");\n\tlet opening_brackets_length\
    \ = opening_brackets.length;\n\tlet closing_brackets_length = closing_brackets.length;\n\
    \tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket != closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf78rqk8x.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf78rqk8x.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.startsWith(\"(\")) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket.endsWith(\")\")) {\n\t\t\tclosing_brackets.push(i);\n\t\
    \t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvx399zod.ts(8,15): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmpvx399zod.ts(10,22): error TS2339: Property ''endsWith''
    does not exist on type ''string''.

    '
  timestamp: 1659979716
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\n\tbrackets.split('').forEach((bracket: string) => {\n\t\t\
    if (bracket.match(/[\\(\\)]/)) {\n\t\t\topening_brackets.push(bracket.match(/[\\\
    (\\)]/)[0]);\n\t\t} else {\n\t\t\tclosing_brackets.push(bracket);\n\t\t}\n\t});\n\
    \n\tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count\
    \ = closing_brackets.length;\n\n\tif (opening_brackets_count !== closing_brackets_count)\
    \ {\n\t\treturn false;\n\t}\n\n\tlet opening_brackets_set = opening_brackets.sort();\n\
    \tlet closing_brackets_set = closing_brackets.sort();\n\n\tlet opening_brackets_set_length\
    \ = opening_brackets_set.length;\n\tlet closing_brackets_set_length = closing_brackets_set.length;\n\
    \n\tfor (let i = 0; i < opening_brackets_set_length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets_set[i];\n\t\tlet closing_bracket = closing_brackets_set[i];\n\
    \n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf2o6qnw0.ts(9,26): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpf2o6qnw0.ts(11,26): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1659979716
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.substr(0, 1);\n\tlet closing =\
    \ brackets.substr(brackets.length - 1, 1);\n\treturn opening == closing;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwz3y5k5t.js:11:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwz3y5k5t.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tlet opening_brackets_length = 0;\n\tlet closing_brackets_length\
    \ = 0;\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\
    \t\tif (bracket.startsWith(\"(\")) {\n\t\t\topening_brackets[opening_brackets_length++]\
    \ = i;\n\t\t} else if (bracket.endsWith(\")\")) {\n\t\t\tclosing_brackets[closing_brackets_length++]\
    \ = i;\n\t\t}\n\t}\n\tif (opening_brackets.length !== closing_brackets.length)\
    \ {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++)\
    \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket =\
    \ closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe49jitlc.ts(10,15): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmpe49jitlc.ts(12,22): error TS2339: Property ''endsWith''
    does not exist on type ''string''.

    '
  timestamp: 1659979716
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set,\
    \ opening_bracket) => {\n\t\tif (opening_bracket === \"(\") set.add(opening_bracket);\n\
    \t\treturn set;\n\t}, new Set<string>());\n\tlet closing_brackets_set = closing_brackets.reduce((set,\
    \ closing_bracket) => {\n\t\tif (closing_bracket === \")\") set.add(closing_bracket);\n\
    \t\treturn set;\n\t}, new Set<string>());\n\treturn opening_brackets_set.size\
    \ === closing_brackets_set.size;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx1m0tpvs.ts(9,9): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpx1m0tpvs.ts(13,9): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659979716
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\");\n\tfor (let i = 0; i\
    \ < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket)\
    \ {\n\t\t\topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\
    \t\t\ti--;\n\t\t}\n\t}\n\treturn opening_brackets.length === 0 && closing_brackets.length\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpql21cn78.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpql21cn78.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set,\
    \ char) => {\n\t\tif (set === false) set = new Set();\n\t\tset.add(char);\n\t\t\
    return set;\n\t}, false);\n\tlet closing_brackets_set = closing_brackets.reduce((set,\
    \ char) => {\n\t\tif (set === false) set = new Set();\n\t\tset.add(char);\n\t\t\
    return set;\n\t}, false);\n\tlet opening_brackets_count = opening_brackets_set.size;\n\
    \tlet closing_brackets_count = closing_brackets_set.size;\n\tif (opening_brackets_count\
    \ === closing_brackets_count) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbl3env1k.ts(7,32): error TS2552: Cannot find name
    ''Set''. Did you mean ''set''?

    ../../../../../tmp/tmpbl3env1k.ts(8,7): error TS2339: Property ''add'' does not
    exist on type ''boolean''.

    ../../../../../tmp/tmpbl3env1k.ts(12,32): error TS2552: Cannot find name ''Set''.
    Did you mean ''set''?

    ../../../../../tmp/tmpbl3env1k.ts(13,7): error TS2339: Property ''add'' does not
    exist on type ''boolean''.

    ../../../../../tmp/tmpbl3env1k.ts(16,52): error TS2339: Property ''size'' does
    not exist on type ''boolean''.

    ../../../../../tmp/tmpbl3env1k.ts(17,52): error TS2339: Property ''size'' does
    not exist on type ''boolean''.

    '
  timestamp: 1659979716
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
    \ string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.charAt(0) == '(') {\n\t\t\topening_brackets.push(bracket.substring(1,\
    \ bracket.length - 1));\n\t\t} else if (bracket.charAt(0) == ')') {\n\t\t\tclosing_brackets.push(bracket.substring(1,\
    \ bracket.length - 1));\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tfor (let j = 0;\
    \ j < closing_brackets.length; j++) {\n\t\t\tlet closing_bracket = closing_brackets[j];\n\
    \t\t\tif (opening_bracket == closing_bracket) {\n\t\t\t\treturn false;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzxpd54w7.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzxpd54w7.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\n\tbrackets.split('').forEach((bracket: string) => {\n\t\t\
    if (bracket.match(/[({]/)) {\n\t\t\topening_brackets.push(bracket.charCodeAt(0));\n\
    \t\t} else if (bracket.match(/[)}\\]]/)) {\n\t\t\tclosing_brackets.push(bracket.charCodeAt(0));\n\
    \t\t}\n\t});\n\n\tlet has_opening_bracket: boolean = false;\n\tlet has_closing_bracket:\
    \ boolean = false;\n\n\topening_brackets.forEach((opening_bracket: number) =>\
    \ {\n\t\tclosing_brackets.forEach((closing_bracket: number) => {\n\t\t\tif (opening_bracket\
    \ === closing_bracket) {\n\t\t\t\thas_opening_bracket = true;\n\t\t\t\thas_closing_bracket\
    \ = true;\n\t\t\t}\n\t\t});\n\t});\n\n\treturn has_opening_bracket && has_closing_bracket;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmlhlt_ch.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmlhlt_ch.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing\
    \ = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next\
    \ = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing\
    \ - 1;\n\n\twhile (opening_next < brackets.length && closing_next < brackets.length)\
    \ {\n\t\tlet opening_char = brackets[opening_next];\n\t\tlet closing_char = brackets[closing_next];\n\
    \t\tif (opening_char === closing_char) {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\
    \t\t} else if (opening_char === \"(\" && closing_char === \")\") {\n\t\t\topening_next++;\n\
    \t\t\tclosing_next++;\n\t\t\topening_prev++;\n\t\t\tclosing_prev++;\n\t\t} else\
    \ if (opening_char === \")\" && closing_char === \"(\") {\n\t\t\topening_next++;\n\
    \t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn (opening_next === brackets.length\
    \ && closing_next === brackets.length);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8ohk_pem.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8ohk_pem.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing\
    \ = brackets.indexOf(\")\");\n\tif (opening === -1 || closing === -1) {\n\t\t\
    return false;\n\t}\n\tfor (let i = opening + 1; i <= closing; i++) {\n\t\tlet\
    \ c = brackets[i];\n\t\tif (c !== \"(\") {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpy4d_438k.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy4d_438k.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.substr(0, 1);\n\tlet closing =\
    \ brackets.substr(brackets.length - 1, 1);\n\treturn opening == closing;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwz3y5k5t.js:11:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwz3y5k5t.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979716
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets\
    \ = brackets.split(')');\n\tlet opening_brackets_length = opening_brackets.length;\n\
    \tlet closing_brackets_length = closing_brackets.length;\n\tlet correct_bracketing\
    \ = true;\n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket !== closing_bracket) {\n\t\t\tcorrect_bracketing = false;\n\
    \t\t}\n\t}\n\treturn correct_bracketing;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp663xhsdq.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp663xhsdq.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\
    \topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t\t\
    i--;\n\t\t}\n\t}\n\treturn opening_brackets.length === 0 && closing_brackets.length\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp5p0z1w2q.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5p0z1w2q.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\n\tbrackets.split('').forEach((bracket) => {\n\t\tif (bracket\
    \ === '(') {\n\t\t\topening_brackets.push(bracket);\n\t\t} else if (bracket ===\
    \ ')') {\n\t\t\tclosing_brackets.push(bracket);\n\t\t}\n\t});\n\n\tlet opening_brackets_count\
    \ = opening_brackets.length;\n\tlet closing_brackets_count = closing_brackets.length;\n\
    \n\tif (opening_brackets_count !== closing_brackets_count) {\n\t\treturn false;\n\
    \t}\n\n\tlet opening_brackets_index = 0;\n\tlet closing_brackets_index = 0;\n\n\
    \twhile (opening_brackets_index < opening_brackets_count && closing_brackets_index\
    \ < closing_brackets_count) {\n\t\tlet opening_bracket = opening_brackets[opening_brackets_index];\n\
    \t\tlet closing_bracket = closing_brackets[closing_brackets_index];\n\n\t\tif\
    \ (opening_bracket === closing_bracket) {\n\t\t\topening_brackets_index++;\n\t\
    \t\tclosing_brackets_index++;\n\t\t} else if (opening_bracket === '(' && closing_bracket\
    \ === ')') {\n\t\t\topening_brackets_index++;\n\t\t} else if (opening_bracket\
    \ === ')' && closing_bracket === '(') {\n\t\t\tclosing_brackets_index++;\n\t\t\
    } else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn opening_brackets_index ===\
    \ closing_brackets_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4samt8ee.ts(9,26): error TS2345: Argument of type
    ''"("'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp4samt8ee.ts(11,26): error TS2345: Argument of type ''")"''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp4samt8ee.ts(32,14): error TS2367: This condition will always
    return ''false'' since the types ''number'' and ''"("'' have no overlap.

    ../../../../../tmp/tmp4samt8ee.ts(32,41): error TS2367: This condition will always
    return ''false'' since the types ''number'' and ''")"'' have no overlap.

    ../../../../../tmp/tmp4samt8ee.ts(34,14): error TS2367: This condition will always
    return ''false'' since the types ''number'' and ''")"'' have no overlap.

    ../../../../../tmp/tmp4samt8ee.ts(34,41): error TS2367: This condition will always
    return ''false'' since the types ''number'' and ''"("'' have no overlap.

    '
  timestamp: 1659979717
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_length = opening_brackets.length;\n\
    \tlet closing_brackets_length = closing_brackets.length;\n\n\tfor (let i = 0;\
    \ i < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket != closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjkqswrnn.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjkqswrnn.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979713
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet opening_brackets_length\
    \ = opening_brackets.length;\n\tlet closing_brackets_length = closing_brackets.length;\n\
    \tlet opening_brackets_index = 0;\n\tlet closing_brackets_index = 0;\n\tlet opening_brackets_current:\
    \ string;\n\tlet closing_brackets_current: string;\n\tlet opening_brackets_next:\
    \ string;\n\tlet closing_brackets_next: string;\n\tlet opening_brackets_next_length:\
    \ number;\n\tlet closing_brackets_next_length: number;\n\tlet opening_brackets_next_index:\
    \ number;\n\tlet closing_brackets_next_index: number;\n\tlet opening_brackets_next_current:\
    \ string;\n\tlet closing_brackets_next_current: string;\n\tlet opening_brackets_next_next:\
    \ string;\n\tlet closing_brackets_next_next: string;\n\tlet opening_brackets_next_next_length:\
    \ number;\n\tlet closing_brackets_next_next_length: number;\n\tlet opening_brackets_next_next_index:\
    \ number;\n\tlet closing_brackets_next_next_index: number;\n\tlet opening_brackets_next_next_current:\
    \ string;\n\tlet closing_brackets_next_next_current: string;\n\tlet opening_brackets_next_next_next:\
    \ string;\n\tlet closing_brackets_next_next_next: string;\n\tlet opening_brackets_next_next_next_length:\
    \ number;\n\tlet closing_brackets_next_next_next_length: number;\n\tlet opening_brackets_next_next_next_index:\
    \ number;\n\tlet closing_brackets_next_next_next_index: number;\n\tlet opening_brackets_next_next_next_current:\
    \ string;\n\tlet closing_brackets_next_next_next_current: string;\n\tlet opening_brackets_next_next_next_next:\
    \ string;\n\tlet closing_brackets_next_next_next_next: string;\n\tlet opening_brackets_next_next_next_next_length:\
    \ number;\n\tlet closing_brackets_next_next_next_next_length: number;\n\tlet opening_brackets_next_next_next_next_index:\
    \ number;\n\tlet closing_brackets_next_next_next_next_index: number;\n\tlet opening_brackets_next_next_next_next_current:\
    \ string;\n\tlet closing_brackets_next_next_next_next_current: string;\n\t\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"\
    ),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyaph0p5z.ts(65,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979717
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\n\tlet has_correct_brackets = opening_brackets.length >= closing_brackets.length;\n\
    \tif (has_correct_brackets) {\n\t\tlet opening_bracket = opening_brackets.shift();\n\
    \t\tlet closing_bracket = closing_brackets.pop();\n\t\tlet opening_brackets_length\
    \ = opening_brackets.length;\n\t\tlet closing_brackets_length = closing_brackets.length;\n\
    \t\tlet opening_count = opening_brackets_length - closing_brackets_length;\n\t\
    \tlet closing_count = opening_brackets_length - opening_bracket;\n\t\tlet opening_count_is_even\
    \ = opening_count % 2 === 0;\n\t\tlet closing_count_is_even = closing_count %\
    \ 2 === 0;\n\t\tlet opening_count_is_odd = opening_count % 2 === 1;\n\t\tlet closing_count_is_odd\
    \ = closing_count % 2 === 1;\n\t\tlet opening_count_is_zero = opening_count ===\
    \ 0;\n\t\tlet closing_count_is_zero = closing_count === 0;\n\t\tlet opening_count_is_one\
    \ = opening_count === 1;\n\t\tlet closing_count_is_one = closing_count === 1;\n\
    \t\tlet opening_count_is_two = opening_count === 2;\n\t\tlet closing_count_is_two\
    \ = closing_count === 2;\n\t\tlet opening_count_is_three = opening_count === 3;\n\
    \t\tlet closing_count_is_three = closing_count === 3;\n\t\tlet opening_count_is_four\
    \ = opening_count === 4;\n\t\tlet closing_count_is_four = closing_count === 4;\n\
    \t\tlet opening_count_is_five = opening_count === 5;\n\t\tlet closing_count_is_five\
    \ = closing_count === 5;\n\t\tlet opening_count_is_six = opening_count === 6;\n\
    \t\tlet closing_count_is_six = closing_count === 6;\n\t\tlet opening_count_is_seven\
    \ = opening_count === 7;\n\t\tlet closing_count_is_seven = closing_count === 7;\n\
    \t\tlet opening_count_is_eight = opening_count === 8;\n\t\tlet closing_count_is_eight\
    \ = clo\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5bnt8uhu.ts(65,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979716
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0doegw1u.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0doegw1u.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set,\
    \ char) => {\n\t\tset.add(char);\n\t\treturn set;\n\t}, new Set<string>());\n\t\
    let closing_brackets_set = closing_brackets.reduce((set, char) => {\n\t\tset.add(char);\n\
    \t\treturn set;\n\t}, new Set<string>());\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tif (!opening_brackets_set.has(closing_brackets[i])) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg5gqkyn7.ts(9,9): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpg5gqkyn7.ts(13,9): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659979717
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_length = opening_brackets.length;\n\
    \tlet closing_brackets_length = closing_brackets.length;\n\tfor (let i = 0; i\
    \ < opening_brackets_length; i++) {\n\t\tif (opening_brackets[i] != closing_brackets[closing_brackets_length\
    \ - i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4e3yrqtc.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4e3yrqtc.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"(\");\n\tlet closing_brackets\
    \ = brackets.split(\")\");\n\tfor (let i = 0; i < opening_brackets.length; i++)\
    \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket =\
    \ closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoxg0uxm6.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoxg0uxm6.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet opening_brackets_length:\
    \ number = opening_brackets.length;\n\tlet closing_brackets_length: number = closing_brackets.length;\n\
    \tlet i: number;\n\tlet j: number;\n\tlet opening_brackets_current: string;\n\t\
    let closing_brackets_current: string;\n\tlet opening_brackets_previous: string;\n\
    \tlet closing_brackets_previous: string;\n\tlet opening_brackets_current_length:\
    \ number;\n\tlet closing_brackets_current_length: number;\n\tlet opening_brackets_previous_length:\
    \ number;\n\tlet closing_brackets_previous_length: number;\n\tlet opening_brackets_current_previous:\
    \ string;\n\tlet closing_brackets_current_previous: string;\n\tlet opening_brackets_current_previous_length:\
    \ number;\n\tlet closing_brackets_current_previous_length: number;\n\tlet opening_brackets_current_current_previous:\
    \ string;\n\tlet closing_brackets_current_current_previous: string;\n\tlet opening_brackets_current_current_previous_length:\
    \ number;\n\tlet closing_brackets_current_current_previous_length: number;\n\t\
    let opening_brackets_current_current_current_previous: string;\n\tlet closing_brackets_current_current_current_previous:\
    \ string;\n\tlet opening_brackets_current_current_current_previous_length: number;\n\
    \tlet closing_brackets_current_current_current_previous_length: number;\n\tlet\
    \ opening_brackets_current_current_current_current_previous: string;\n\tlet closing_brackets_current_current_current_current_previous:\
    \ string;\n\tlet opening_brackets_current_current_current_current_previous_length:\
    \ number;\n\tlet closing_brackets_current_current_current_current_previous_length:\
    \ number;\n\tlet opening_brackets_current_current_current_current_current_previous:\
    \ string;\n\tlet closing_brackets_current_current_current_current_current_previous:\
    \ string;\n\tlet opening_brackets_current_current_current_current_current_previous_length:\
    \ number;\n\tlet closing_brackets_current_current_current_current_current_previous_length:\
    \ number;\n\tlet opening_brackets_current_current_current_current_current_current_previous:\
    \ string;\n\tlet closing_brackets_current_current_current_current_current_previous:\
    \ string;\n\tlet opening_brackets_current_current_current_current_current_previous_length:\
    \ number;\n\tlet closing_bracket\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5d4wze0h.ts(62,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979717
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets\
    \ = brackets.split(')');\n\tlet opening_brackets_length = opening_brackets.length;\n\
    \tlet closing_brackets_length = closing_brackets.length;\n\tfor (let i = 0; i\
    \ < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpp5nb2f3t.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp5nb2f3t.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: 0
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.substring(0, 1);\n\tlet closing\
    \ = brackets.substring(1, brackets.length);\n\treturn opening == closing;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjajuve8h.js:11:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjajuve8h.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing\
    \ = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next\
    \ = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing\
    \ - 1;\n\tlet opening_found = opening < 0;\n\tlet closing_found = closing < 0;\n\
    \tlet opening_found2 = opening_found && opening_next > 0;\n\tlet closing_found2\
    \ = closing_found && closing_next > 0;\n\tlet opening_found3 = opening_found &&\
    \ opening_prev > 0;\n\tlet closing_found3 = closing_found && closing_prev > 0;\n\
    \tlet opening_found4 = opening_found2 && closing_found2;\n\tlet closing_found4\
    \ = closing_found2 && closing_found3;\n\tlet opening_found5 = opening_found3 &&\
    \ closing_found3;\n\tlet closing_found5 = closing_found3 && closing_found4;\n\t\
    let opening_found6 = opening_found4 && closing_found4;\n\tlet closing_found6 =\
    \ closing_found4 && closing_found5;\n\tlet opening_found7 = opening_found5 &&\
    \ closing_found5;\n\tlet closing_found7 = closing_found5 && closing_found6;\n\t\
    let opening_found8 = opening_found6 && closing_found6;\n\tlet closing_found8 =\
    \ closing_found6 && closing_found7;\n\tlet opening_found9 = opening_found7 &&\
    \ closing_found7;\n\tlet closing_found9 = closing_found7 && closing_found8;\n\t\
    let opening_found10 = opening_found8 && closing_found8;\n\tlet closing_found10\
    \ = closing_found8 && closing_found9;\n\tlet opening_found11 = opening_found9\
    \ && closing_found9;\n\tlet closing_found11 = closing_found9 && closing_found10;\n\
    \tlet opening_found12 = opening_found10 && closing_found10;\n\tlet closing_found12\
    \ = closing_found10 && closing_found11;\n\tlet opening_found13 = opening_found11\
    \ && closing_found11;\n\tlet closing_found13 = closing_found11 && closing_found12;\n\
    \tlet opening_found14 = opening_found12 && closing_found12;\n\tlet closing_found14\
    \ = closing_found12 && closing_found13;\n\tlet opening_found15 = opening_found13\
    \ && closing_found13;\n\t\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpllpqsc2o.ts(60,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979718
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\tfor (let i = 0; i <\
    \ opening_brackets_count && i < closing_brackets_count; i++) {\n\t\tif (opening_brackets[i]\
    \ !== closing_brackets[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6ely0wen.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6ely0wen.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979718
- exit_code: 0
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tlet opening_brackets_length = 0;\n\tlet closing_brackets_length\
    \ = 0;\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\
    \t\tif (bracket.charAt(0) == '(') {\n\t\t\topening_brackets[opening_brackets_length++]\
    \ = i;\n\t\t} else if (bracket.charAt(0) == ')') {\n\t\t\tclosing_brackets[closing_brackets_length++]\
    \ = i;\n\t\t}\n\t}\n\tif (opening_brackets.length != closing_brackets.length)\
    \ {\n\t\treturn false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i)\
    \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket =\
    \ closing_brackets[i];\n\t\tif (opening_bracket > closing_bracket) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979718
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
    \ string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.startsWith(\"(\")) {\n\t\t\topening_brackets.push(bracket);\n\
    \t\t} else if (bracket.endsWith(\")\")) {\n\t\t\tclosing_brackets.push(bracket);\n\
    \t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket.endsWith(\")\")) {\n\t\t\topening_bracket = opening_bracket.slice(0,\
    \ -1);\n\t\t}\n\t\tif (closing_bracket.startsWith(\"(\")) {\n\t\t\tclosing_bracket\
    \ = closing_bracket.slice(1);\n\t\t}\n\t\tif (opening_bracket.startsWith(\"(\"\
    ) && closing_bracket.endsWith(\")\")) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt1rlxly2.ts(8,15): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmpt1rlxly2.ts(10,22): error TS2339: Property ''endsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmpt1rlxly2.ts(17,23): error TS2339: Property ''endsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmpt1rlxly2.ts(20,23): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmpt1rlxly2.ts(23,23): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmpt1rlxly2.ts(23,58): error TS2339: Property ''endsWith''
    does not exist on type ''string''.

    '
  timestamp: 1659979718
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets\
    \ = brackets.split(')');\n\tfor (let i = 0; i < opening_brackets.length; i++)\
    \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket =\
    \ closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpkilsoynh.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkilsoynh.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (closing_bracket < opening_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpa_qz4sye.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa_qz4sye.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979719
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.match(/[\\(\\)]/)) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t}\n\tfor (let i = 0; i\
    \ < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp34mb04zp.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp34mb04zp.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979719
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing\
    \ = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next\
    \ = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing\
    \ - 1;\n\tlet opening_found = opening < 0;\n\tlet closing_found = closing < 0;\n\
    \tlet opening_found2 = opening_found && opening_next < brackets.length;\n\tlet\
    \ closing_found2 = closing_found && closing_next < brackets.length;\n\tlet opening_found3\
    \ = opening_found && opening_prev < 0;\n\tlet closing_found3 = closing_found &&\
    \ closing_prev < 0;\n\tlet opening_found4 = opening_found2 && opening_next < brackets.length;\n\
    \tlet closing_found4 = closing_found2 && closing_next < brackets.length;\n\tlet\
    \ opening_found5 = opening_found2 && opening_prev < 0;\n\tlet closing_found5 =\
    \ closing_found2 && closing_prev < 0;\n\tlet opening_found6 = opening_found3 &&\
    \ opening_next < brackets.length;\n\tlet closing_found6 = closing_found3 && closing_next\
    \ < brackets.length;\n\tlet opening_found7 = opening_found3 && opening_prev <\
    \ 0;\n\tlet closing_found7 = closing_found3 && closing_prev < 0;\n\tlet opening_found8\
    \ = opening_found4 && opening_next < brackets.length;\n\tlet closing_found8 =\
    \ closing_found4 && closing_next < brackets.length;\n\tlet opening_found9 = opening_found4\
    \ && opening_prev < 0;\n\tlet closing_found9 = closing_found4 && closing_prev\
    \ < 0;\n\tlet opening_found10 = opening_found5 && opening_next < brackets.length;\n\
    \tlet closing_found10 = closing_found5 && closing_next < brackets.length;\n\t\
    let opening_found11 = opening_found5 && opening_prev < 0;\n\tlet closing_found11\
    \ = closing_found5 && closing_prev < 0;\n\tlet opening_found12 = opening_found6\
    \ && opening_next < brackets.length;\n\tlet closing_found12 = closing_found6 &&\
    \ closing_next < brackets.length;\n\tlet opening_found13 = opening_found6 && opening_prev\
    \ < 0;\n\tlet closing_found13 = closing_found6 && closing_prev < 0;\n\tlet opening_found14\
    \ = opening_found7 && opening_next < brackets.length;\n\tlet clo\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb417djbi.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979718
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\");\n\tfor (let i = 0; i\
    \ < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvzaf7kv8.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvzaf7kv8.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979718
- exit_code: 0
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.match(/[(){}]/);\n\tlet\
    \ closing_brackets = brackets.match(/[)]/);\n\tlet opening_brackets_count = opening_brackets\
    \ ? opening_brackets.length : 0;\n\tlet closing_brackets_count = closing_brackets\
    \ ? closing_brackets.length : 0;\n\treturn opening_brackets_count === closing_brackets_count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpyro0q_8w.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyro0q_8w.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979719
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp964qnck2.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp964qnck2.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\").reverse();\n\tfor (let\
    \ i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmps58veng5.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps58veng5.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979719
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_index\
    \ = opening_brackets[i];\n\t\tlet closing_index = closing_brackets[i];\n\t\tif\
    \ (opening_index < closing_index) {\n\t\t\tlet temp = opening_brackets[i];\n\t\
    \t\topening_brackets[i] = closing_brackets[i];\n\t\t\tclosing_brackets[i] = temp;\n\
    \t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_index\
    \ = opening_brackets[i];\n\t\tlet closing_index = closing_brackets[i];\n\t\tif\
    \ (opening_index > closing_index) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpryts7n4c.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpryts7n4c.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979719
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet opening_brackets_count\
    \ = opening_brackets - closing_brackets;\n\t\tif (opening_brackets_count === 1)\
    \ {\n\t\t\tcontinue;\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"\
    ),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp__kcdcdt.ts(23,32): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmp__kcdcdt.ts(23,51): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659979719
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_index\
    \ = opening_brackets[i];\n\t\tlet closing_index = closing_brackets[i];\n\t\tif\
    \ (opening_index === closing_index) {\n\t\t\treturn false;\n\t\t}\n\t\tlet opening_length\
    \ = opening_brackets.length - 1;\n\t\tlet opening_next = opening_brackets[opening_length];\n\
    \t\tlet opening_next_index = opening_brackets[opening_length + 1];\n\t\tif (opening_next\
    \ === opening_next_index) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpr1mbp5i3.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr1mbp5i3.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979719
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing\
    \ = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next\
    \ = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing\
    \ - 1;\n\tlet opening_count = brackets.substring(opening, opening_next).length;\n\
    \tlet closing_count = brackets.substring(closing, closing_next).length;\n\tlet\
    \ opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\tlet opening_count\
    \ = brackets.substring(opening, opening_next).length;\n\tlet closing_count = brackets.substring(closing,\
    \ closing_next).length;\n\tlet opening_next = opening + 1;\n\tlet closing_next\
    \ = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing\
    \ - 1;\n\tlet opening_count = brackets.substring(opening, opening_next).length;\n\
    \tlet closing_count = brackets.substring(closing, closing_next).length;\n\tlet\
    \ opening_prev = opening - 1;\n\tlet closing_prev = closing - 1;\n\tlet opening_count\
    \ = brackets.substring(opening, opening_next).length;\n\tlet closing_count = brackets.substring(closing,\
    \ closing_next).length;\n\tlet opening_next = opening + 1;\n\tlet closing_next\
    \ = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing\
    \ - 1;\n\tlet opening_count = brackets.substring(opening, opening_next).length;\n\
    \tlet closing_count = brackets.substring(closing, closing_next).length;\n\tlet\
    \ opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev\
    \ = opening - 1;\n\tlet closing_prev = closing - 1;\n\tlet opening_count = brackets.substring(opening,\
    \ opening_next).length;\n\tlet closing_count = brackets.substring(closing, closing_next).length;\n\
    \tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev\
    \ = opening - 1;\n\tlet closing_prev = closing - 1;\n\tlet opening_count = brackets.substring(opening,\
    \ opening_next).length;\n\tlet closing_count = brackets.substring(closing, closing_next).length;\n\
    \tlet opening_next = opening + 1;\n\tlet closing_next = closing + 1;\n\tlet opening_prev\
    \ = opening - 1;\n\tlet closing_prev = closing - 1;\n\tlet opening_count = brackets.substring(opening,\
    \ opening_next).\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcysx6vr5.ts(48,64): error TS1003: Identifier expected.

    ../../../../../tmp/tmpcysx6vr5.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979719
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.includes(\"(\")) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket.includes(\")\")) {\n\t\t\tclosing_brackets.push(i);\n\t\
    \t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (closing_bracket < opening_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkj62e1nm.ts(8,15): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpkj62e1nm.ts(10,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659979719
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\n\t// If there is only one opening bracket, there is no need to check further.\n\
    \tif (opening_brackets.length === 1) {\n\t\treturn false;\n\t}\n\n\t// If there\
    \ is only one closing bracket, there is no need to check further.\n\tif (closing_brackets.length\
    \ === 1) {\n\t\treturn false;\n\t}\n\n\t// If there are multiple opening brackets,\
    \ there must be multiple closing brackets.\n\tif (opening_brackets.length > closing_brackets.length)\
    \ {\n\t\treturn false;\n\t}\n\n\t// If there are multiple closing brackets, there\
    \ must be multiple opening brackets.\n\tif (closing_brackets.length > opening_brackets.length)\
    \ {\n\t\treturn false;\n\t}\n\n\t// If there are different numbers of opening\
    \ brackets and closing brackets, there must be a different number of them.\n\t\
    if (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\n\t// If there are different numbers of opening brackets and closing brackets,\
    \ there must be a different number of them.\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\n\t\tif (opening_bracket !== closing_bracket) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp82fd43nj.js:48:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp82fd43nj.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979719
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing\
    \ = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next\
    \ = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing\
    \ - 1;\n\twhile (opening_next < brackets.length && closing_next < brackets.length)\
    \ {\n\t\tlet opening_char = brackets[opening_next];\n\t\tlet closing_char = brackets[closing_next];\n\
    \t\tif (opening_char === closing_char) {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\
    \t\t} else if (opening_char === \"(\" && closing_char === \")\") {\n\t\t\topening_next++;\n\
    \t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else\
    \ if (opening_char === \")\" && closing_char === \"(\") {\n\t\t\topening_next++;\n\
    \t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn (opening_next === brackets.length\
    \ && closing_next === brackets.length);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzq6g4wdd.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzq6g4wdd.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979719
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\tfor (let i = 0; i <\
    \ opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1ivnb093.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1ivnb093.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979719
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\tlet i = 0;\n\twhile\
    \ (i < opening_brackets_count) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp4glpt_ug.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4glpt_ug.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979719
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\n\tbrackets.split('').forEach(char => {\n\t\tif (char === '(')\
    \ {\n\t\t\topening_brackets.push(char);\n\t\t} else if (char === ')') {\n\t\t\t\
    closing_brackets.push(char);\n\t\t}\n\t});\n\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\n\t\tif (opening_bracket !== closing_bracket) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfews2npv.ts(9,26): error TS2345: Argument of type
    ''"("'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpfews2npv.ts(11,26): error TS2345: Argument of type ''")"''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1659979719
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\tfor (let i = 0; i <\
    \ opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfzmfdhgw.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfzmfdhgw.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979719
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing\
    \ = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next\
    \ = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing\
    \ - 1;\n\tlet opening_count = 0;\n\tlet closing_count = 0;\n\twhile (opening_next\
    \ < brackets.length && closing_next < brackets.length) {\n\t\tlet opening_char\
    \ = brackets[opening_next];\n\t\tlet closing_char = brackets[closing_next];\n\t\
    \tif (opening_char === closing_char) {\n\t\t\topening_count++;\n\t\t\tclosing_count++;\n\
    \t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t} else if (opening_char ===\
    \ \"(\" && closing_char === \")\") {\n\t\t\topening_count++;\n\t\t\topening_next++;\n\
    \t\t} else if (opening_char === \")\" && closing_char === \"(\") {\n\t\t\tclosing_count++;\n\
    \t\t\tclosing_next++;\n\t\t}\n\t}\n\treturn opening_count === closing_count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprg85kx6x.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprg85kx6x.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.substr(0, 1);\n\tlet closing =\
    \ brackets.substr(1, 1);\n\tlet opening_found = false;\n\tlet closing_found =\
    \ false;\n\tfor (let i = 0; i < brackets.length - 1; i++) {\n\t\tif (brackets[i]\
    \ === opening) {\n\t\t\topening_found = true;\n\t\t} else if (brackets[i] ===\
    \ closing) {\n\t\t\tclosing_found = true;\n\t\t}\n\t}\n\treturn opening_found\
    \ && closing_found;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt_pcvct4.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt_pcvct4.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
    \ string[] = [];\n\tbrackets.split('').forEach(char => {\n\t\tif (char === '(')\
    \ {\n\t\t\topening_brackets.push(char);\n\t\t} else if (char === ')') {\n\t\t\t\
    closing_brackets.push(char);\n\t\t}\n\t});\n\treturn opening_brackets.length ===\
    \ closing_brackets.length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_vhw25lm.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_vhw25lm.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979721
- exit_code: 0
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_index\
    \ = opening_brackets[i];\n\t\tlet closing_index = closing_brackets[i];\n\t\tif\
    \ (opening_index < closing_index) {\n\t\t\tlet temp = opening_index;\n\t\t\topening_index\
    \ = closing_index;\n\t\t\tclosing_index = temp;\n\t\t}\n\t\tlet temp = opening_brackets[i];\n\
    \t\topening_brackets[i] = closing_brackets[i];\n\t\tclosing_brackets[i] = temp;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_index\
    \ = opening_brackets[i];\n\t\tlet closing_index = closing_brackets[i];\n\t\tif\
    \ (opening_index < closing_index) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6u_a9usb.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6u_a9usb.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979721
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"(\");\n\tlet closing_brackets\
    \ = brackets.split(\")\");\n\tlet opening_brackets_length = opening_brackets.length;\n\
    \tlet closing_brackets_length = closing_brackets.length;\n\n\tfor (let i = 0;\
    \ i < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket != closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpe7b7e2t0.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpe7b7e2t0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979721
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets\
    \ = brackets.split(')');\n\tlet opening_brackets_length = opening_brackets.length;\n\
    \tlet closing_brackets_length = closing_brackets.length;\n\n\tif (opening_brackets_length\
    \ != closing_brackets_length) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i\
    \ < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket != closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpi6rucpo8.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpi6rucpo8.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979721
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket < closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpujwom0fm.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpujwom0fm.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket < closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpb80cs5ze.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb80cs5ze.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979721
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing\
    \ = brackets.indexOf(\")\");\n\tif (opening === -1 || closing === -1) {\n\t\t\
    return false;\n\t}\n\tlet opening_bracket = brackets.substring(opening + 1, closing);\n\
    \tlet closing_bracket = brackets.substring(closing + 1, brackets.length);\n\t\
    return opening_bracket.trim() === closing_bracket.trim();\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqe8y7jg4.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqe8y7jg4.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979721
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.includes('(')) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket.includes(')')) {\n\t\t\tclosing_brackets.push(i);\n\t\t\
    }\n\t}\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn\
    \ false;\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet\
    \ opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
    \t\tif (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp91ob5kbf.ts(8,15): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmp91ob5kbf.ts(10,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659979721
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp964qnck2.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp964qnck2.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing\
    \ = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next\
    \ = closing + 1;\n\twhile (opening_next < brackets.length && closing_next < brackets.length\
    \ && brackets[opening_next] === brackets[closing_next]) {\n\t\topening_next++;\n\
    \t\tclosing_next++;\n\t}\n\treturn opening_next === closing_next;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"\
    ),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplgh1l9uu.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplgh1l9uu.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979721
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp90q4a4m2.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp90q4a4m2.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979721
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuuvj5dn7.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuuvj5dn7.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet opening_brackets_set:\
    \ Set<string> = new Set<string>();\n\tlet closing_brackets_set: Set<string> =\
    \ new Set<string>();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\
    \topening_brackets_set.add(opening_brackets[i]);\n\t}\n\tfor (let i = 0; i < closing_brackets.length;\
    \ i++) {\n\t\tclosing_brackets_set.add(closing_brackets[i]);\n\t}\n\treturn opening_brackets_set.size\
    \ == closing_brackets_set.size;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1ucf__6q.ts(6,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmp1ucf__6q.ts(6,46): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    ../../../../../tmp/tmp1ucf__6q.ts(7,28): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    ../../../../../tmp/tmp1ucf__6q.ts(7,46): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659979721
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket < closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpujwom0fm.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpujwom0fm.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
    \ string[] = [];\n\tbrackets.split('').forEach((bracket) => {\n\t\tif (bracket.match(/[({]/))\
    \ {\n\t\t\topening_brackets.push(bracket);\n\t\t} else if (bracket.match(/[)}\\\
    ]]/)) {\n\t\t\tclosing_brackets.push(bracket);\n\t\t}\n\t});\n\n\treturn opening_brackets.every((opening_bracket)\
    \ => closing_brackets.every((closing_bracket) => opening_bracket === closing_bracket));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpu7nyyvtd.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpu7nyyvtd.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979721
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.includes('(')) {\n\t\t\topening_brackets.push(i);\n\
    \t\t}\n\t\tif (bracket.includes(')')) {\n\t\t\tclosing_brackets.push(i);\n\t\t\
    }\n\t}\n\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0tdk3i2m.ts(9,15): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmp0tdk3i2m.ts(12,15): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659979721
- exit_code: 0
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tlet opening_count = opening_brackets.length;\n\tlet closing_count = closing_brackets.length;\n\
    \tif (opening_count !== closing_count) {\n\t\treturn false;\n\t}\n\tfor (let i\
    \ = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_index = opening_brackets[i];\n\
    \t\tlet closing_index = closing_brackets[i];\n\t\tif (opening_index > closing_index)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t\tlet opening_count = opening_brackets.length;\n\
    \t\tfor (let j = i + 1; j < opening_brackets.length; ++j) {\n\t\t\tlet opening_index\
    \ = opening_brackets[j];\n\t\t\tlet closing_index = closing_brackets[j];\n\t\t\
    \tif (opening_index > closing_index) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979721
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_length = opening_brackets.length;\n\
    \tlet closing_brackets_length = closing_brackets.length;\n\n\tfor (let i = 0;\
    \ i < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket ===\
    \ closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i,\
    \ 1);\n\t\t\ti--;\n\t\t}\n\t}\n\n\treturn opening_brackets.length === 0 && closing_brackets.length\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdncbonfc.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdncbonfc.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979721
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet next_opening_bracket = opening_brackets[i +\
    \ 1];\n\t\tif (next_opening_bracket === undefined) {\n\t\t\t// The next opening\
    \ bracket is at the end of the string, so we're done.\n\t\t\treturn false;\n\t\
    \t}\n\t\tlet next_bracket = brackets[next_opening_bracket];\n\t\tif (next_bracket\
    \ === \"(\") {\n\t\t\t// We found an opening bracket that doesn't have a corresponding\
    \ closing bracket.\n\t\t\t// This means that we're missing a closing bracket somewhere\
    \ in the string.\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor (let i = 0; i < closing_brackets.length;\
    \ ++i) {\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tlet next_closing_bracket\
    \ = closing_brackets[i - 1];\n\t\tif (next_closing_bracket === undefined) {\n\t\
    \t\t// The next closing bracket is at the end of the string, so we're done.\n\t\
    \t\treturn false;\n\t\t}\n\t\tlet next_bracket = brackets[next_closing_bracket];\n\
    \t\tif (next_bracket === \")\") {\n\t\t\t// We found a closing bracket that doesn't\
    \ have a corresponding opening bracket.\n\t\t\t// This means that we're missing\
    \ an opening bracket somewhere in the string.\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvvozml4y.js:48:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvvozml4y.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979722
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.match(/\\(/g);\n\tlet\
    \ closing_brackets = brackets.match(/\\)/g);\n\tlet opening_brackets_count = opening_brackets\
    \ ? opening_brackets.length : 0;\n\tlet closing_brackets_count = closing_brackets\
    \ ? closing_brackets.length : 0;\n\n\tif (opening_brackets_count !== closing_brackets_count)\
    \ {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < opening_brackets_count; i++)\
    \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket =\
    \ closing_brackets[i];\n\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp97cu4js9.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp97cu4js9.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979722
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.match(/[(){}]/);\n\tlet\
    \ closing_brackets = brackets.match(/[)]/);\n\tlet opening_brackets_count = opening_brackets\
    \ ? opening_brackets.length : 0;\n\tlet closing_brackets_count = closing_brackets\
    \ ? closing_brackets.length : 0;\n\tlet opening_brackets_count_corrected = opening_brackets_count\
    \ - closing_brackets_count;\n\treturn opening_brackets_count_corrected === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplf0jeuwe.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplf0jeuwe.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979722
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets\
    \ = brackets.split(')');\n\tlet len = opening_brackets.length;\n\tfor (let i =\
    \ 0; i < len; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet\
    \ closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpowr0ffb_.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpowr0ffb_.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979722
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_index\
    \ = opening_brackets[i];\n\t\tlet closing_index = closing_brackets[i];\n\t\tif\
    \ (opening_index < closing_index) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3emzwwyl.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3emzwwyl.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979722
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing\
    \ = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next\
    \ = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing\
    \ - 1;\n\tlet opening_count = 0;\n\tlet closing_count = 0;\n\twhile (opening_next\
    \ < brackets.length && closing_next < brackets.length) {\n\t\tlet opening_char\
    \ = brackets[opening_next];\n\t\tlet closing_char = brackets[closing_next];\n\t\
    \tif (opening_char === closing_char) {\n\t\t\topening_count++;\n\t\t\tclosing_count++;\n\
    \t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\
    \t\t} else {\n\t\t\tif (opening_char === \"(\" && closing_char === \")\") {\n\t\
    \t\t\topening_count++;\n\t\t\t\tclosing_count++;\n\t\t\t\topening_next++;\n\t\t\
    \t\tclosing_next++;\n\t\t\t\topening_prev--;\n\t\t\t\tclosing_prev--;\n\t\t\t\
    } else if (opening_char === \")\" && closing_char === \"(\") {\n\t\t\t\topening_count++;\n\
    \t\t\t\tclosing_count++;\n\t\t\t\topening_next++;\n\t\t\t\tclosing_next++;\n\t\
    \t\t\topening_prev--;\n\t\t\t\tclosing_prev--;\n\t\t\t} else {\n\t\t\t\tif (opening_char\
    \ === \"(\" && closing_char === \")\") {\n\t\t\t\t\topening_count++;\n\t\t\t\t\
    \tclosing_count++;\n\t\t\t\t\topening_next++;\n\t\t\t\t\tclosing_next++;\n\t\t\
    \t\t\topening_prev--;\n\t\t\t\t\tclosing_prev--;\n\t\t\t\t} else if (opening_char\
    \ === \")\" && closing_char === \"(\") {\n\t\t\t\t\topening_count++;\n\t\t\t\t\
    \tclosing_count++;\n\t\t\t\t\topening_next++;\n\t\t\t\t\tclosing_next++;\n\t\t\
    \t\t\topening_prev--;\n\t\t\t\t\tclosing_prev--;\n\t\t\t\t} else {\n\t\t\t\t\t\
    opening_count++;\n\t\t\t\t\tclosing_count++;\n\t\t\t\t\topening_next++;\n\t\t\t\
    \t\tclosing_next++;\n\t\t\t\t\topening_prev--;\n\t\t\t\t\tclosing_prev--;\n\t\t\
    \t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn opening_count === closing_count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"\
    ),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplsqwotai.js:77:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplsqwotai.js:86:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979722
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing\
    \ = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next\
    \ = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing\
    \ - 1;\n\twhile (opening_next < brackets.length && closing_next < brackets.length)\
    \ {\n\t\tlet opening_char = brackets[opening_next];\n\t\tlet closing_char = brackets[closing_next];\n\
    \t\tif (opening_char === closing_char) {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\
    \t\t\topening_prev++;\n\t\t\tclosing_prev++;\n\t\t} else if (opening_char ===\
    \ \"(\" && closing_char === \")\") {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\
    \t\t\topening_prev++;\n\t\t\tclosing_prev++;\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\
    \t\t\topening_prev++;\n\t\t\tclosing_prev++;\n\t\t} else if (opening_char ===\
    \ \")\" && closing_char === \"(\") {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\
    \t\t\topening_prev++;\n\t\t\tclosing_prev++;\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\
    \t\t\topening_prev++;\n\t\t\tclosing_prev++;\n\t\t} else {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpu1puzas_.js:52:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpu1puzas_.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979722
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp964qnck2.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp964qnck2.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets\
    \ = brackets.split(')');\n\tfor (let i = 0; i < opening_brackets.length; i++)\
    \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket =\
    \ closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpd8_3a8kn.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd8_3a8kn.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979722
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets\
    \ = brackets.split(')');\n\tlet len = opening_brackets.length;\n\tlet i;\n\tfor\
    \ (i = 0; i < len; i++) {\n\t\tif (opening_brackets[i].indexOf(')') > opening_brackets[i].indexOf('('))\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\tfor (i = 0; i < len; i++) {\n\t\tif (closing_brackets[i].indexOf('(')\
    \ > closing_brackets[i].indexOf(')')) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3s7gobvm.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3s7gobvm.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979723
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.substring(0, 1);\n\tlet closing\
    \ = brackets.substring(1, brackets.length);\n\treturn opening == closing;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjajuve8h.js:11:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjajuve8h.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979717
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
    \ string[] = [];\n\tbrackets.split('').forEach((bracket) => {\n\t\tif (bracket.match(/[({]/))\
    \ {\n\t\t\topening_brackets.push(bracket);\n\t\t} else if (bracket.match(/[)}\\\
    ]]/)) {\n\t\t\tclosing_brackets.push(bracket);\n\t\t}\n\t});\n\treturn opening_brackets.length\
    \ == closing_brackets.length;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpw6qz2ksn.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpw6qz2ksn.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979723
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket !== closing_bracket) {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuuvj5dn7.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuuvj5dn7.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"(\"\
    );\n\tlet closing_brackets: string[] = brackets.split(\")\");\n\tfor (let i =\
    \ 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv06y5gso.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv06y5gso.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979723
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\n\tbrackets.split('').forEach((bracket) => {\n\t\tif (bracket.match(/[({]/))\
    \ {\n\t\t\topening_brackets.push(bracket.charCodeAt(0));\n\t\t} else if (bracket.match(/[)}\\\
    ]]/)) {\n\t\t\tclosing_brackets.push(bracket.charCodeAt(0));\n\t\t}\n\t});\n\n\
    \treturn opening_brackets.every((opening_bracket, index) => {\n\t\treturn closing_brackets.every((closing_bracket,\
    \ index) => {\n\t\t\treturn opening_bracket === closing_bracket;\n\t\t});\n\t\
    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_1wynss_.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_1wynss_.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979723
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing\
    \ = brackets.indexOf(\")\");\n\tlet opening_next = opening + 1;\n\tlet closing_next\
    \ = closing + 1;\n\tlet opening_prev = opening - 1;\n\tlet closing_prev = closing\
    \ - 1;\n\n\twhile (opening_next < brackets.length && closing_next < brackets.length\
    \ && opening_prev >= 0 && closing_prev >= 0) {\n\t\tlet opening_char = brackets[opening_next];\n\
    \t\tlet closing_char = brackets[closing_next];\n\t\tlet opening_char_prev = brackets[opening_prev];\n\
    \t\tlet closing_char_prev = brackets[closing_prev];\n\n\t\tif (opening_char ===\
    \ closing_char) {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev--;\n\
    \t\t\tclosing_prev--;\n\t\t} else if (opening_char === opening_char_prev && closing_char\
    \ === closing_char_prev) {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\
    \topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else if (opening_char === opening_char_prev\
    \ && closing_char === closing_char_prev) {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\
    \t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else if (opening_char ===\
    \ opening_char_prev && closing_char === closing_char_prev) {\n\t\t\topening_next++;\n\
    \t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else\
    \ if (opening_char === opening_char_prev && closing_char === closing_char_prev)\
    \ {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\
    \tclosing_prev--;\n\t\t} else if (opening_char === opening_char_prev && closing_char\
    \ === closing_char_prev) {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\
    \topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else if (opening_char === opening_char_prev\
    \ && closing_char === closing_char_prev) {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\
    \t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else if (opening_char ===\
    \ opening_char_prev && closing_char === closing_char_prev) {\n\t\t\topening_next++;\n\
    \t\t\tclosing_next++;\n\t\t\topening_prev--;\n\t\t\tclosing_prev--;\n\t\t} else\
    \ if (opening_char === opening_char_prev && closing_char === closing_char_prev)\
    \ {\n\t\t\topening_next++;\n\t\t\tclosing_next++;\n\t\t\topening_\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9r4tzh7r.ts(81,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979723
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tlet opening_counter = 0;\n\tlet closing_counter = 0;\n\tfor\
    \ (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket = brackets[i];\n\t\t\
    if (bracket === \"(\") {\n\t\t\topening_brackets[opening_counter] = i;\n\t\t\t\
    ++opening_counter;\n\t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets[closing_counter]\
    \ = i;\n\t\t\t++closing_counter;\n\t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length;\
    \ ++i) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3i6m89ci.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3i6m89ci.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979724
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.match(/[(){}]/);\n\tlet\
    \ closing_brackets = brackets.match(/[)]/);\n\tlet opening_brackets_count = opening_brackets\
    \ ? opening_brackets.length : 0;\n\tlet closing_brackets_count = closing_brackets\
    \ ? closing_brackets.length : 0;\n\treturn opening_brackets_count == closing_brackets_count;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4jsstyrq.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4jsstyrq.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979724
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_set = opening_brackets.reduce((set,\
    \ char) => {\n\t\tset.add(char);\n\t\treturn set;\n\t}, new Set<string>());\n\t\
    let closing_brackets_set = closing_brackets.reduce((set, char) => {\n\t\tset.add(char);\n\
    \t\treturn set;\n\t}, new Set<string>());\n\treturn opening_brackets_set.size\
    \ === closing_brackets_set.size;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp02hbb0rq.ts(9,9): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmp02hbb0rq.ts(13,9): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659979723
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket < closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpujwom0fm.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpujwom0fm.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979712
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets\
    \ = brackets.split(')');\n\tlet opening_brackets_length = opening_brackets.length;\n\
    \tlet closing_brackets_length = closing_brackets.length;\n\tlet i = 0;\n\tlet\
    \ j = 0;\n\twhile (i < opening_brackets_length && j < closing_brackets_length)\
    \ {\n\t\tif (opening_brackets[i] == closing_brackets[j]) {\n\t\t\ti++;\n\t\t\t\
    j++;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"\
    ),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplqsbsbob.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplqsbsbob.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979724
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tlet opening_counts: number[] = [];\n\tlet closing_counts:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.charAt(0) == '(') {\n\t\t\topening_brackets.push(i);\n\
    \t\t\topening_counts.push(bracket.charAt(0));\n\t\t}\n\t\telse if (bracket.charAt(0)\
    \ == ')') {\n\t\t\tclosing_brackets.push(i);\n\t\t\tclosing_counts.push(bracket.charAt(0));\n\
    \t\t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_count = closing_counts[opening_bracket];\n\
    \t\tlet opening_count = opening_counts[opening_bracket];\n\t\tif (opening_count\
    \ != closing_count) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph9h5_mgx.ts(12,24): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmph9h5_mgx.ts(16,24): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1659979724
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_length = opening_brackets.length;\n\
    \tlet closing_brackets_length = closing_brackets.length;\n\n\tfor (let i = 0;\
    \ i < opening_brackets_length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket ===\
    \ closing_bracket) {\n\t\t\topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i,\
    \ 1);\n\t\t\ti--;\n\t\t}\n\t}\n\n\treturn opening_brackets.length === 0 && closing_brackets.length\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdncbonfc.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdncbonfc.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979721
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = [];\n\tlet closing_brackets:\
    \ string[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.charAt(0) == '(') {\n\t\t\topening_brackets.push(bracket.substring(1,\
    \ bracket.length - 1));\n\t\t} else if (bracket.charAt(0) == ')') {\n\t\t\tclosing_brackets.push(bracket.substring(1,\
    \ bracket.length - 1));\n\t\t}\n\t}\n\treturn opening_brackets.length == closing_brackets.length;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxbe7bxrm.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxbe7bxrm.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979724
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket.match(/[({]/)) {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket.match(/[)}\\]]/)) {\n\t\t\tclosing_brackets.push(i);\n\t\
    \t}\n\t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket < closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp164rbpnz.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp164rbpnz.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979723
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\n\tbrackets.split('').forEach((bracket) => {\n\t\tswitch (bracket)\
    \ {\n\t\t\tcase '(':\n\t\t\t\topening_brackets.push(0);\n\t\t\t\tbreak;\n\t\t\t\
    case ')':\n\t\t\t\tclosing_brackets.push(0);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\
    \t\t\t\topening_brackets.push(1);\n\t\t\t\tclosing_brackets.push(1);\n\t\t}\n\t\
    });\n\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\n\t\
    \tif (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\
    \treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpyfidj3bn.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyfidj3bn.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979724
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\n\t// If there is only one opening bracket, it's trivially correct.\n\tif\
    \ (opening_brackets.length === 1) {\n\t\treturn true;\n\t}\n\n\t// If there is\
    \ only one closing bracket, it's trivially correct.\n\tif (closing_brackets.length\
    \ === 1) {\n\t\treturn true;\n\t}\n\n\t// If there are multiple opening brackets,\
    \ some of them are correct and some of them are not.\n\t// For example, given\
    \ \"(()(()\", the correct answer is \"(()\" because the first opening bracket\n\
    \t// is correct, but the second opening bracket is not.\n\tlet correct_opening_brackets:\
    \ number[] = [];\n\tlet incorrect_opening_brackets: number[] = [];\n\tfor (let\
    \ i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet correct_closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket\
    \ === correct_closing_bracket) {\n\t\t\tcorrect_opening_brackets.push(opening_bracket);\n\
    \t\t} else {\n\t\t\tincorrect_opening_brackets.push(opening_bracket);\n\t\t}\n\
    \t}\n\n\t// If there are multiple closing brackets, some of them are correct and\
    \ some of them are not.\n\t// For example, given \"()(()\", the correct answer\
    \ is \"()\" because the first closing bracket\n\t// is correct, but the second\
    \ closing bracket is not.\n\tlet correct_closing_brackets: number[] = [];\n\t\
    let incorrect_closing_brackets: number[] = [];\n\tfor (let i = 0; i < closing_brackets.length;\
    \ i++) {\n\t\tlet closing_bracket = closing_brackets[i];\n\t\tlet correct_opening_bracket\
    \ = opening_brackets[i];\n\t\tif (closing_bracket === correct_opening_bracket)\
    \ {\n\t\t\tcorrect_closing_brackets.push(closing_bracket);\n\t\t} else {\n\t\t\
    \tincorrect_closing_brackets.push(closing_bracket);\n\t\t}\n\t}\n\n\t// If there\
    \ are multiple correct opening brackets, some of them are correct and some of\
    \ them are not.\n\t// For example, given \"(()(()\", the correct answer is \"\
    (()\" because the first opening bracket\n\t// is correct, but the second opening\
    \ bracket is not.\n\tlet correct_opening_b\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpude7dtha.ts(80,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979724
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing\
    \ = brackets.indexOf(\")\");\n\tif (opening === -1 || closing === -1) {\n\t\t\
    return false;\n\t}\n\tlet opening_bracket = brackets.charAt(opening);\n\tlet closing_bracket\
    \ = brackets.charAt(closing);\n\tif (opening_bracket === closing_bracket) {\n\t\
    \treturn false;\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9hkwdqwj.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9hkwdqwj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979724
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\n\tfor (let i = 0; i\
    \ < opening_brackets_count - 1; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket ===\
    \ closing_bracket) {\n\t\t\topening_brackets_count -= 1;\n\t\t\tclosing_brackets_count\
    \ -= 1;\n\t\t}\n\t}\n\n\treturn opening_brackets_count === 0 && closing_brackets_count\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpp8184nt5.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp8184nt5.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979724
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet opening_brackets_set:\
    \ Set<string> = new Set<string>();\n\tlet closing_brackets_set: Set<string> =\
    \ new Set<string>();\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\
    \topening_brackets_set.add(opening_brackets[i]);\n\t}\n\tfor (let i = 0; i < closing_brackets.length;\
    \ i++) {\n\t\tclosing_brackets_set.add(closing_brackets[i]);\n\t}\n\tfor (let\
    \ i = 0; i < opening_brackets_set.size(); i++) {\n\t\tif (!closing_brackets_set.has(opening_brackets_set.get(i)))\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp438miya4.ts(6,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmp438miya4.ts(6,46): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    ../../../../../tmp/tmp438miya4.ts(7,28): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    ../../../../../tmp/tmp438miya4.ts(7,46): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659979724
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"(\"\
    );\n\tlet closing_brackets: string[] = brackets.split(\")\");\n\tfor (let i =\
    \ 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket: string = opening_brackets[i];\n\
    \t\tlet closing_bracket: string = closing_brackets[i];\n\t\tif (opening_bracket.trim()\
    \ === \"\") {\n\t\t\topening_bracket = opening_bracket.trimRight();\n\t\t}\n\t\
    \tif (closing_bracket.trim() === \"\") {\n\t\t\tclosing_bracket = closing_bracket.trimLeft();\n\
    \t\t}\n\t\tif (opening_bracket.trim() === closing_bracket.trim()) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8odnl0ji.ts(10,38): error TS2339: Property ''trimRight''
    does not exist on type ''string''.

    ../../../../../tmp/tmp8odnl0ji.ts(13,38): error TS2339: Property ''trimLeft''
    does not exist on type ''string''.

    '
  timestamp: 1659979724
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tlet opening_brackets_length = 0;\n\tlet closing_brackets_length\
    \ = 0;\n\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket = brackets[i];\n\
    \t\tif (bracket.includes('(')) {\n\t\t\topening_brackets[opening_brackets_length++]\
    \ = i;\n\t\t} else if (bracket.includes(')')) {\n\t\t\tclosing_brackets[closing_brackets_length++]\
    \ = i;\n\t\t}\n\t}\n\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\
    \tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\
    \t\tif (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0c33xnpy.ts(11,15): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmp0c33xnpy.ts(13,22): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659979724
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_length = opening_brackets.length;\n\
    \tlet closing_brackets_length = closing_brackets.length;\n\tlet i = 0;\n\tlet\
    \ j = 0;\n\twhile (i < opening_brackets_length && j < closing_brackets_length)\
    \ {\n\t\tif (opening_brackets[i] === closing_brackets[j]) {\n\t\t\ti++;\n\t\t\t\
    j++;\n\t\t} else if (opening_brackets[i] > closing_brackets[j]) {\n\t\t\ti++;\n\
    \t\t} else {\n\t\t\tj++;\n\t\t}\n\t}\n\treturn i === opening_brackets_length &&\
    \ j === closing_brackets_length;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1cb79reu.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1cb79reu.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979724
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket === closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0doegw1u.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0doegw1u.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; ++i) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; ++i) {\n\t\tlet opening_index\
    \ = opening_brackets[i];\n\t\tlet closing_index = closing_brackets[i];\n\t\tif\
    \ (opening_index > closing_index) {\n\t\t\treturn false;\n\t\t}\n\t\tlet opening_char\
    \ = brackets[opening_index];\n\t\tlet closing_char = brackets[closing_index];\n\
    \t\tif (opening_char !== closing_char) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwzkdzlrd.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwzkdzlrd.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979725
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet opening_brackets_length:\
    \ number = opening_brackets.length;\n\tlet closing_brackets_length: number = closing_brackets.length;\n\
    \tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket:\
    \ string = opening_brackets[i];\n\t\tlet closing_bracket: string = closing_brackets[i];\n\
    \t\tif (opening_bracket === closing_bracket) {\n\t\t\topening_brackets_length--;\n\
    \t\t\tclosing_brackets_length--;\n\t\t}\n\t}\n\treturn opening_brackets_length\
    \ === 0 && closing_brackets_length === 0;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpkxk2wr9q.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkxk2wr9q.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979725
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_count = opening_brackets.length;\n\
    \tlet closing_brackets_count = closing_brackets.length;\n\n\tfor (let i = 0; i\
    \ < opening_brackets_count; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\n\t\tif (opening_bracket !==\
    \ closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpimwom4gi.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpimwom4gi.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tlet opening_brackets_length = opening_brackets.length;\n\
    \tlet closing_brackets_length = closing_brackets.length;\n\tlet correct_bracketing\
    \ = false;\n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket !== closing_bracket) {\n\t\t\tcorrect_bracketing = false;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn correct_bracketing;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpg16t0k6d.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpg16t0k6d.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979725
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp964qnck2.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp964qnck2.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split('(');\n\tlet closing_brackets\
    \ = brackets.split(')');\n\tlet opening_brackets_length = opening_brackets.length;\n\
    \tlet closing_brackets_length = closing_brackets.length;\n\tlet i = 0;\n\tlet\
    \ j = 0;\n\twhile (i < opening_brackets_length && j < closing_brackets_length)\
    \ {\n\t\tif (opening_brackets[i] !== closing_brackets[j]) {\n\t\t\treturn false;\n\
    \t\t}\n\t\ti++;\n\t\tj++;\n\t}\n\treturn (i === opening_brackets_length && j ===\
    \ closing_brackets_length);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8p0rrcr6.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8p0rrcr6.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979725
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"\");\n\tlet closing_brackets\
    \ = brackets.split(\"\").reverse();\n\tfor (let i = 0; i < opening_brackets.length;\
    \ i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket\
    \ = closing_brackets[i];\n\t\tif (opening_bracket === closing_bracket) {\n\t\t\
    \topening_brackets.splice(i, 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t\t\
    i--;\n\t\t}\n\t}\n\treturn opening_brackets.length === 0 && closing_brackets.length\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp5p0z1w2q.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5p0z1w2q.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.indexOf(\"(\");\n\tlet closing\
    \ = brackets.indexOf(\")\");\n\tif (opening > closing) {\n\t\treturn false;\n\t\
    }\n\tfor (let i = opening + 1; i < closing; i++) {\n\t\tlet c = brackets[i];\n\
    \t\tif (c !== \"(\") {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzdkfd_1t.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzdkfd_1t.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979725
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\");\n\tfor (let i = 0; i\
    \ < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket === \"\
    (\" && closing_bracket === \")\") {\n\t\t\topening_brackets[i] = \"\";\n\t\t\t\
    closing_brackets[i] = \"\";\n\t\t}\n\t}\n\treturn opening_brackets.join(\"\")\
    \ === closing_brackets.join(\"\");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfd0z40ga.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfd0z40ga.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979725
- exit_code: 2
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\n\tbrackets.split('').forEach((bracket) => {\n\t\tif (bracket.match(/[({]/))\
    \ {\n\t\t\topening_brackets.push(bracket.charCodeAt(0));\n\t\t} else if (bracket.match(/[)}\\\
    ]]/)) {\n\t\t\tclosing_brackets.push(bracket.charCodeAt(0));\n\t\t}\n\t});\n\n\
    \tlet opening_brackets_count = opening_brackets.length;\n\tlet closing_brackets_count\
    \ = closing_brackets.length;\n\n\tif (opening_brackets_count !== closing_brackets_count)\
    \ {\n\t\treturn false;\n\t}\n\n\tlet opening_brackets_set = Array.from(opening_brackets);\n\
    \tlet closing_brackets_set = Array.from(closing_brackets);\n\n\tlet opening_brackets_set_count\
    \ = opening_brackets_set.length;\n\tlet closing_brackets_set_count = closing_brackets_set.length;\n\
    \n\tif (opening_brackets_set_count !== closing_brackets_set_count) {\n\t\treturn\
    \ false;\n\t}\n\n\tlet opening_brackets_set_difference = opening_brackets_set.filter(\n\
    \t\t(bracket) => closing_brackets_set.indexOf(bracket) === -1\n\t);\n\tlet closing_brackets_set_difference\
    \ = closing_brackets_set.filter(\n\t\t(bracket) => opening_brackets_set.indexOf(bracket)\
    \ === -1\n\t);\n\n\tif (opening_brackets_set_difference.length !== closing_brackets_set_count)\
    \ {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6pe69zkb.ts(22,35): error TS2339: Property ''from''
    does not exist on type ''ArrayConstructor''.

    ../../../../../tmp/tmp6pe69zkb.ts(23,35): error TS2339: Property ''from'' does
    not exist on type ''ArrayConstructor''.

    '
  timestamp: 1659979725
- exit_code: 0
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: number[] = [];\n\tlet closing_brackets:\
    \ number[] = [];\n\tfor (let i = 0; i < brackets.length; i++) {\n\t\tlet bracket\
    \ = brackets[i];\n\t\tif (bracket === \"(\") {\n\t\t\topening_brackets.push(i);\n\
    \t\t} else if (bracket === \")\") {\n\t\t\tclosing_brackets.push(i);\n\t\t}\n\t\
    }\n\tif (opening_brackets.length !== closing_brackets.length) {\n\t\treturn false;\n\
    \t}\n\tfor (let i = 0; i < opening_brackets.length; i++) {\n\t\tlet opening_bracket\
    \ = opening_brackets[i];\n\t\tlet closing_bracket = closing_brackets[i];\n\t\t\
    if (opening_bracket > closing_bracket) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979709
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\");\n\tfor (let i = 0; i\
    \ < opening_brackets.length; i++) {\n\t\tlet opening_bracket = opening_brackets[i];\n\
    \t\tlet closing_bracket = closing_brackets[i];\n\t\tif (opening_bracket == \"\
    (\") {\n\t\t\tif (closing_bracket != \")\") {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t}\n\t\tif (opening_bracket == \")\") {\n\t\t\tif (closing_bracket != \"(\"\
    ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"\
    ),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpx7x28fvs.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpx7x28fvs.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979725
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening = brackets.charAt(0);\n\tlet closing = brackets.charAt(brackets.length\
    \ - 1);\n\tlet opening_found = false;\n\tlet closing_found = false;\n\tfor (let\
    \ i = 0; i < brackets.length; i++) {\n\t\tif (brackets.charAt(i) === opening)\
    \ {\n\t\t\topening_found = true;\n\t\t} else if (brackets.charAt(i) === closing)\
    \ {\n\t\t\tclosing_found = true;\n\t\t}\n\t}\n\treturn opening_found && closing_found;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptkbt6vwc.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptkbt6vwc.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979725
- exit_code: 1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets = brackets.split(\"(\");\n\tlet closing_brackets\
    \ = brackets.split(\")\");\n\tfor (let i = 0; i < opening_brackets.length; i++)\
    \ {\n\t\tlet opening_bracket = opening_brackets[i];\n\t\tlet closing_bracket =\
    \ closing_brackets[i];\n\t\tif (opening_bracket != closing_bracket) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoxg0uxm6.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoxg0uxm6.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979714
- exit_code: -1
  program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets:\
    \ string): boolean {\n\tlet opening_brackets: string[] = brackets.split(\"\");\n\
    \tlet closing_brackets: string[] = brackets.split(\"\");\n\tlet opening_brackets_length:\
    \ number = opening_brackets.length;\n\tlet closing_brackets_length: number = closing_brackets.length;\n\
    \n\tfor (let i = 0; i < opening_brackets_length; i++) {\n\t\tlet opening_bracket:\
    \ string = opening_brackets[i];\n\t\tlet closing_bracket: string = closing_brackets[i];\n\
    \n\t\tif (opening_bracket === closing_bracket) {\n\t\t\topening_brackets.splice(i,\
    \ 1);\n\t\t\tclosing_brackets.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\n\treturn\
    \ opening_brackets.length === 0 && closing_brackets.length === 0;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"\
    ),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979740
